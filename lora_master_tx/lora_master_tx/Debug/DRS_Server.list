
DRS_Server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053ac  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000284  080054bc  080054bc  000154bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005740  08005740  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005740  08005740  00015740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005748  08005748  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005748  08005748  00015748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800574c  0800574c  0001574c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005750  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  20000070  080057c0  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  080057c0  000203d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de70  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025e5  00000000  00000000  0002df09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e38  00000000  00000000  000304f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d48  00000000  00000000  00031328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000198c0  00000000  00000000  00032070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d0c  00000000  00000000  0004b930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d8dd  00000000  00000000  0005c63c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e9f19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043ec  00000000  00000000  000e9f6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	080054a4 	.word	0x080054a4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	080054a4 	.word	0x080054a4

08000150 <__aeabi_uldivmod>:
 8000150:	b953      	cbnz	r3, 8000168 <__aeabi_uldivmod+0x18>
 8000152:	b94a      	cbnz	r2, 8000168 <__aeabi_uldivmod+0x18>
 8000154:	2900      	cmp	r1, #0
 8000156:	bf08      	it	eq
 8000158:	2800      	cmpeq	r0, #0
 800015a:	bf1c      	itt	ne
 800015c:	f04f 31ff 	movne.w	r1, #4294967295
 8000160:	f04f 30ff 	movne.w	r0, #4294967295
 8000164:	f000 b976 	b.w	8000454 <__aeabi_idiv0>
 8000168:	f1ad 0c08 	sub.w	ip, sp, #8
 800016c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000170:	f000 f806 	bl	8000180 <__udivmoddi4>
 8000174:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000178:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800017c:	b004      	add	sp, #16
 800017e:	4770      	bx	lr

08000180 <__udivmoddi4>:
 8000180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000184:	9e08      	ldr	r6, [sp, #32]
 8000186:	460d      	mov	r5, r1
 8000188:	4604      	mov	r4, r0
 800018a:	4688      	mov	r8, r1
 800018c:	2b00      	cmp	r3, #0
 800018e:	d14d      	bne.n	800022c <__udivmoddi4+0xac>
 8000190:	428a      	cmp	r2, r1
 8000192:	4694      	mov	ip, r2
 8000194:	d968      	bls.n	8000268 <__udivmoddi4+0xe8>
 8000196:	fab2 f282 	clz	r2, r2
 800019a:	b152      	cbz	r2, 80001b2 <__udivmoddi4+0x32>
 800019c:	fa01 f302 	lsl.w	r3, r1, r2
 80001a0:	f1c2 0120 	rsb	r1, r2, #32
 80001a4:	fa20 f101 	lsr.w	r1, r0, r1
 80001a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80001ac:	ea41 0803 	orr.w	r8, r1, r3
 80001b0:	4094      	lsls	r4, r2
 80001b2:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001b6:	fbb8 f7f1 	udiv	r7, r8, r1
 80001ba:	fa1f fe8c 	uxth.w	lr, ip
 80001be:	fb01 8817 	mls	r8, r1, r7, r8
 80001c2:	fb07 f00e 	mul.w	r0, r7, lr
 80001c6:	0c23      	lsrs	r3, r4, #16
 80001c8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001cc:	4298      	cmp	r0, r3
 80001ce:	d90a      	bls.n	80001e6 <__udivmoddi4+0x66>
 80001d0:	eb1c 0303 	adds.w	r3, ip, r3
 80001d4:	f107 35ff 	add.w	r5, r7, #4294967295
 80001d8:	f080 811e 	bcs.w	8000418 <__udivmoddi4+0x298>
 80001dc:	4298      	cmp	r0, r3
 80001de:	f240 811b 	bls.w	8000418 <__udivmoddi4+0x298>
 80001e2:	3f02      	subs	r7, #2
 80001e4:	4463      	add	r3, ip
 80001e6:	1a1b      	subs	r3, r3, r0
 80001e8:	fbb3 f0f1 	udiv	r0, r3, r1
 80001ec:	fb01 3310 	mls	r3, r1, r0, r3
 80001f0:	fb00 fe0e 	mul.w	lr, r0, lr
 80001f4:	b2a4      	uxth	r4, r4
 80001f6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80001fa:	45a6      	cmp	lr, r4
 80001fc:	d90a      	bls.n	8000214 <__udivmoddi4+0x94>
 80001fe:	eb1c 0404 	adds.w	r4, ip, r4
 8000202:	f100 33ff 	add.w	r3, r0, #4294967295
 8000206:	f080 8109 	bcs.w	800041c <__udivmoddi4+0x29c>
 800020a:	45a6      	cmp	lr, r4
 800020c:	f240 8106 	bls.w	800041c <__udivmoddi4+0x29c>
 8000210:	4464      	add	r4, ip
 8000212:	3802      	subs	r0, #2
 8000214:	2100      	movs	r1, #0
 8000216:	eba4 040e 	sub.w	r4, r4, lr
 800021a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800021e:	b11e      	cbz	r6, 8000228 <__udivmoddi4+0xa8>
 8000220:	2300      	movs	r3, #0
 8000222:	40d4      	lsrs	r4, r2
 8000224:	e9c6 4300 	strd	r4, r3, [r6]
 8000228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800022c:	428b      	cmp	r3, r1
 800022e:	d908      	bls.n	8000242 <__udivmoddi4+0xc2>
 8000230:	2e00      	cmp	r6, #0
 8000232:	f000 80ee 	beq.w	8000412 <__udivmoddi4+0x292>
 8000236:	2100      	movs	r1, #0
 8000238:	e9c6 0500 	strd	r0, r5, [r6]
 800023c:	4608      	mov	r0, r1
 800023e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000242:	fab3 f183 	clz	r1, r3
 8000246:	2900      	cmp	r1, #0
 8000248:	d14a      	bne.n	80002e0 <__udivmoddi4+0x160>
 800024a:	42ab      	cmp	r3, r5
 800024c:	d302      	bcc.n	8000254 <__udivmoddi4+0xd4>
 800024e:	4282      	cmp	r2, r0
 8000250:	f200 80fc 	bhi.w	800044c <__udivmoddi4+0x2cc>
 8000254:	1a84      	subs	r4, r0, r2
 8000256:	eb65 0303 	sbc.w	r3, r5, r3
 800025a:	2001      	movs	r0, #1
 800025c:	4698      	mov	r8, r3
 800025e:	2e00      	cmp	r6, #0
 8000260:	d0e2      	beq.n	8000228 <__udivmoddi4+0xa8>
 8000262:	e9c6 4800 	strd	r4, r8, [r6]
 8000266:	e7df      	b.n	8000228 <__udivmoddi4+0xa8>
 8000268:	b902      	cbnz	r2, 800026c <__udivmoddi4+0xec>
 800026a:	deff      	udf	#255	; 0xff
 800026c:	fab2 f282 	clz	r2, r2
 8000270:	2a00      	cmp	r2, #0
 8000272:	f040 8091 	bne.w	8000398 <__udivmoddi4+0x218>
 8000276:	eba1 000c 	sub.w	r0, r1, ip
 800027a:	2101      	movs	r1, #1
 800027c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000280:	fa1f fe8c 	uxth.w	lr, ip
 8000284:	fbb0 f3f7 	udiv	r3, r0, r7
 8000288:	fb07 0013 	mls	r0, r7, r3, r0
 800028c:	0c25      	lsrs	r5, r4, #16
 800028e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000292:	fb0e f003 	mul.w	r0, lr, r3
 8000296:	42a8      	cmp	r0, r5
 8000298:	d908      	bls.n	80002ac <__udivmoddi4+0x12c>
 800029a:	eb1c 0505 	adds.w	r5, ip, r5
 800029e:	f103 38ff 	add.w	r8, r3, #4294967295
 80002a2:	d202      	bcs.n	80002aa <__udivmoddi4+0x12a>
 80002a4:	42a8      	cmp	r0, r5
 80002a6:	f200 80ce 	bhi.w	8000446 <__udivmoddi4+0x2c6>
 80002aa:	4643      	mov	r3, r8
 80002ac:	1a2d      	subs	r5, r5, r0
 80002ae:	fbb5 f0f7 	udiv	r0, r5, r7
 80002b2:	fb07 5510 	mls	r5, r7, r0, r5
 80002b6:	fb0e fe00 	mul.w	lr, lr, r0
 80002ba:	b2a4      	uxth	r4, r4
 80002bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002c0:	45a6      	cmp	lr, r4
 80002c2:	d908      	bls.n	80002d6 <__udivmoddi4+0x156>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 35ff 	add.w	r5, r0, #4294967295
 80002cc:	d202      	bcs.n	80002d4 <__udivmoddi4+0x154>
 80002ce:	45a6      	cmp	lr, r4
 80002d0:	f200 80b6 	bhi.w	8000440 <__udivmoddi4+0x2c0>
 80002d4:	4628      	mov	r0, r5
 80002d6:	eba4 040e 	sub.w	r4, r4, lr
 80002da:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80002de:	e79e      	b.n	800021e <__udivmoddi4+0x9e>
 80002e0:	f1c1 0720 	rsb	r7, r1, #32
 80002e4:	408b      	lsls	r3, r1
 80002e6:	fa22 fc07 	lsr.w	ip, r2, r7
 80002ea:	ea4c 0c03 	orr.w	ip, ip, r3
 80002ee:	fa25 fa07 	lsr.w	sl, r5, r7
 80002f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80002f6:	fbba f8f9 	udiv	r8, sl, r9
 80002fa:	fa20 f307 	lsr.w	r3, r0, r7
 80002fe:	fb09 aa18 	mls	sl, r9, r8, sl
 8000302:	408d      	lsls	r5, r1
 8000304:	fa1f fe8c 	uxth.w	lr, ip
 8000308:	431d      	orrs	r5, r3
 800030a:	fa00 f301 	lsl.w	r3, r0, r1
 800030e:	fb08 f00e 	mul.w	r0, r8, lr
 8000312:	0c2c      	lsrs	r4, r5, #16
 8000314:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000318:	42a0      	cmp	r0, r4
 800031a:	fa02 f201 	lsl.w	r2, r2, r1
 800031e:	d90b      	bls.n	8000338 <__udivmoddi4+0x1b8>
 8000320:	eb1c 0404 	adds.w	r4, ip, r4
 8000324:	f108 3aff 	add.w	sl, r8, #4294967295
 8000328:	f080 8088 	bcs.w	800043c <__udivmoddi4+0x2bc>
 800032c:	42a0      	cmp	r0, r4
 800032e:	f240 8085 	bls.w	800043c <__udivmoddi4+0x2bc>
 8000332:	f1a8 0802 	sub.w	r8, r8, #2
 8000336:	4464      	add	r4, ip
 8000338:	1a24      	subs	r4, r4, r0
 800033a:	fbb4 f0f9 	udiv	r0, r4, r9
 800033e:	fb09 4410 	mls	r4, r9, r0, r4
 8000342:	fb00 fe0e 	mul.w	lr, r0, lr
 8000346:	b2ad      	uxth	r5, r5
 8000348:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800034c:	45a6      	cmp	lr, r4
 800034e:	d908      	bls.n	8000362 <__udivmoddi4+0x1e2>
 8000350:	eb1c 0404 	adds.w	r4, ip, r4
 8000354:	f100 35ff 	add.w	r5, r0, #4294967295
 8000358:	d26c      	bcs.n	8000434 <__udivmoddi4+0x2b4>
 800035a:	45a6      	cmp	lr, r4
 800035c:	d96a      	bls.n	8000434 <__udivmoddi4+0x2b4>
 800035e:	3802      	subs	r0, #2
 8000360:	4464      	add	r4, ip
 8000362:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000366:	fba0 9502 	umull	r9, r5, r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	42ac      	cmp	r4, r5
 8000370:	46c8      	mov	r8, r9
 8000372:	46ae      	mov	lr, r5
 8000374:	d356      	bcc.n	8000424 <__udivmoddi4+0x2a4>
 8000376:	d053      	beq.n	8000420 <__udivmoddi4+0x2a0>
 8000378:	2e00      	cmp	r6, #0
 800037a:	d069      	beq.n	8000450 <__udivmoddi4+0x2d0>
 800037c:	ebb3 0208 	subs.w	r2, r3, r8
 8000380:	eb64 040e 	sbc.w	r4, r4, lr
 8000384:	fa22 f301 	lsr.w	r3, r2, r1
 8000388:	fa04 f707 	lsl.w	r7, r4, r7
 800038c:	431f      	orrs	r7, r3
 800038e:	40cc      	lsrs	r4, r1
 8000390:	e9c6 7400 	strd	r7, r4, [r6]
 8000394:	2100      	movs	r1, #0
 8000396:	e747      	b.n	8000228 <__udivmoddi4+0xa8>
 8000398:	fa0c fc02 	lsl.w	ip, ip, r2
 800039c:	f1c2 0120 	rsb	r1, r2, #32
 80003a0:	fa25 f301 	lsr.w	r3, r5, r1
 80003a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a8:	fa20 f101 	lsr.w	r1, r0, r1
 80003ac:	4095      	lsls	r5, r2
 80003ae:	430d      	orrs	r5, r1
 80003b0:	fbb3 f1f7 	udiv	r1, r3, r7
 80003b4:	fb07 3311 	mls	r3, r7, r1, r3
 80003b8:	fa1f fe8c 	uxth.w	lr, ip
 80003bc:	0c28      	lsrs	r0, r5, #16
 80003be:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c2:	fb01 f30e 	mul.w	r3, r1, lr
 80003c6:	4283      	cmp	r3, r0
 80003c8:	fa04 f402 	lsl.w	r4, r4, r2
 80003cc:	d908      	bls.n	80003e0 <__udivmoddi4+0x260>
 80003ce:	eb1c 0000 	adds.w	r0, ip, r0
 80003d2:	f101 38ff 	add.w	r8, r1, #4294967295
 80003d6:	d22f      	bcs.n	8000438 <__udivmoddi4+0x2b8>
 80003d8:	4283      	cmp	r3, r0
 80003da:	d92d      	bls.n	8000438 <__udivmoddi4+0x2b8>
 80003dc:	3902      	subs	r1, #2
 80003de:	4460      	add	r0, ip
 80003e0:	1ac0      	subs	r0, r0, r3
 80003e2:	fbb0 f3f7 	udiv	r3, r0, r7
 80003e6:	fb07 0013 	mls	r0, r7, r3, r0
 80003ea:	b2ad      	uxth	r5, r5
 80003ec:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80003f0:	fb03 f00e 	mul.w	r0, r3, lr
 80003f4:	42a8      	cmp	r0, r5
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x28a>
 80003f8:	eb1c 0505 	adds.w	r5, ip, r5
 80003fc:	f103 38ff 	add.w	r8, r3, #4294967295
 8000400:	d216      	bcs.n	8000430 <__udivmoddi4+0x2b0>
 8000402:	42a8      	cmp	r0, r5
 8000404:	d914      	bls.n	8000430 <__udivmoddi4+0x2b0>
 8000406:	3b02      	subs	r3, #2
 8000408:	4465      	add	r5, ip
 800040a:	1a28      	subs	r0, r5, r0
 800040c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000410:	e738      	b.n	8000284 <__udivmoddi4+0x104>
 8000412:	4631      	mov	r1, r6
 8000414:	4630      	mov	r0, r6
 8000416:	e707      	b.n	8000228 <__udivmoddi4+0xa8>
 8000418:	462f      	mov	r7, r5
 800041a:	e6e4      	b.n	80001e6 <__udivmoddi4+0x66>
 800041c:	4618      	mov	r0, r3
 800041e:	e6f9      	b.n	8000214 <__udivmoddi4+0x94>
 8000420:	454b      	cmp	r3, r9
 8000422:	d2a9      	bcs.n	8000378 <__udivmoddi4+0x1f8>
 8000424:	ebb9 0802 	subs.w	r8, r9, r2
 8000428:	eb65 0e0c 	sbc.w	lr, r5, ip
 800042c:	3801      	subs	r0, #1
 800042e:	e7a3      	b.n	8000378 <__udivmoddi4+0x1f8>
 8000430:	4643      	mov	r3, r8
 8000432:	e7ea      	b.n	800040a <__udivmoddi4+0x28a>
 8000434:	4628      	mov	r0, r5
 8000436:	e794      	b.n	8000362 <__udivmoddi4+0x1e2>
 8000438:	4641      	mov	r1, r8
 800043a:	e7d1      	b.n	80003e0 <__udivmoddi4+0x260>
 800043c:	46d0      	mov	r8, sl
 800043e:	e77b      	b.n	8000338 <__udivmoddi4+0x1b8>
 8000440:	4464      	add	r4, ip
 8000442:	3802      	subs	r0, #2
 8000444:	e747      	b.n	80002d6 <__udivmoddi4+0x156>
 8000446:	3b02      	subs	r3, #2
 8000448:	4465      	add	r5, ip
 800044a:	e72f      	b.n	80002ac <__udivmoddi4+0x12c>
 800044c:	4608      	mov	r0, r1
 800044e:	e706      	b.n	800025e <__udivmoddi4+0xde>
 8000450:	4631      	mov	r1, r6
 8000452:	e6e9      	b.n	8000228 <__udivmoddi4+0xa8>

08000454 <__aeabi_idiv0>:
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop

08000458 <SX1278_SPIRead>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 8000458:	b580      	push	{r7, lr}
 800045a:	b084      	sub	sp, #16
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
 8000460:	460b      	mov	r3, r1
 8000462:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;

	SX1278_hw_SPICommand(module->hw, addr);
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	78fa      	ldrb	r2, [r7, #3]
 800046a:	4611      	mov	r1, r2
 800046c:	4618      	mov	r0, r3
 800046e:	f000 fbfc 	bl	8000c6a <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4618      	mov	r0, r3
 8000478:	f000 fc17 	bl	8000caa <SX1278_hw_SPIReadByte>
 800047c:	4603      	mov	r3, r0
 800047e:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	2101      	movs	r1, #1
 8000486:	4618      	mov	r0, r3
 8000488:	f000 fbb4 	bl	8000bf4 <SX1278_hw_SetNSS>

	return tmp;
 800048c:	7bfb      	ldrb	r3, [r7, #15]
}
 800048e:	4618      	mov	r0, r3
 8000490:	3710      	adds	r7, #16
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}

08000496 <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 8000496:	b580      	push	{r7, lr}
 8000498:	b082      	sub	sp, #8
 800049a:	af00      	add	r7, sp, #0
 800049c:	6078      	str	r0, [r7, #4]
 800049e:	460b      	mov	r3, r1
 80004a0:	70fb      	strb	r3, [r7, #3]
 80004a2:	4613      	mov	r3, r2
 80004a4:	70bb      	strb	r3, [r7, #2]

	SX1278_hw_SetNSS(module->hw, 0);
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	2100      	movs	r1, #0
 80004ac:	4618      	mov	r0, r3
 80004ae:	f000 fba1 	bl	8000bf4 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	681a      	ldr	r2, [r3, #0]
 80004b6:	78fb      	ldrb	r3, [r7, #3]
 80004b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80004bc:	b2db      	uxtb	r3, r3
 80004be:	4619      	mov	r1, r3
 80004c0:	4610      	mov	r0, r2
 80004c2:	f000 fbd2 	bl	8000c6a <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	78ba      	ldrb	r2, [r7, #2]
 80004cc:	4611      	mov	r1, r2
 80004ce:	4618      	mov	r0, r3
 80004d0:	f000 fbcb 	bl	8000c6a <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	2101      	movs	r1, #1
 80004da:	4618      	mov	r0, r3
 80004dc:	f000 fb8a 	bl	8000bf4 <SX1278_hw_SetNSS>
}
 80004e0:	bf00      	nop
 80004e2:	3708      	adds	r7, #8
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 80004e8:	b590      	push	{r4, r7, lr}
 80004ea:	b087      	sub	sp, #28
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	60f8      	str	r0, [r7, #12]
 80004f0:	607a      	str	r2, [r7, #4]
 80004f2:	461a      	mov	r2, r3
 80004f4:	460b      	mov	r3, r1
 80004f6:	72fb      	strb	r3, [r7, #11]
 80004f8:	4613      	mov	r3, r2
 80004fa:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 80004fc:	7abb      	ldrb	r3, [r7, #10]
 80004fe:	2b01      	cmp	r3, #1
 8000500:	d927      	bls.n	8000552 <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2100      	movs	r1, #0
 8000508:	4618      	mov	r0, r3
 800050a:	f000 fb73 	bl	8000bf4 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	7afa      	ldrb	r2, [r7, #11]
 8000514:	4611      	mov	r1, r2
 8000516:	4618      	mov	r0, r3
 8000518:	f000 fba7 	bl	8000c6a <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800051c:	2300      	movs	r3, #0
 800051e:	75fb      	strb	r3, [r7, #23]
 8000520:	e00c      	b.n	800053c <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	6819      	ldr	r1, [r3, #0]
 8000526:	7dfb      	ldrb	r3, [r7, #23]
 8000528:	687a      	ldr	r2, [r7, #4]
 800052a:	18d4      	adds	r4, r2, r3
 800052c:	4608      	mov	r0, r1
 800052e:	f000 fbbc 	bl	8000caa <SX1278_hw_SPIReadByte>
 8000532:	4603      	mov	r3, r0
 8000534:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 8000536:	7dfb      	ldrb	r3, [r7, #23]
 8000538:	3301      	adds	r3, #1
 800053a:	75fb      	strb	r3, [r7, #23]
 800053c:	7dfa      	ldrb	r2, [r7, #23]
 800053e:	7abb      	ldrb	r3, [r7, #10]
 8000540:	429a      	cmp	r2, r3
 8000542:	d3ee      	bcc.n	8000522 <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	2101      	movs	r1, #1
 800054a:	4618      	mov	r0, r3
 800054c:	f000 fb52 	bl	8000bf4 <SX1278_hw_SetNSS>
 8000550:	e000      	b.n	8000554 <SX1278_SPIBurstRead+0x6c>
		return;
 8000552:	bf00      	nop
	}
}
 8000554:	371c      	adds	r7, #28
 8000556:	46bd      	mov	sp, r7
 8000558:	bd90      	pop	{r4, r7, pc}

0800055a <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 800055a:	b580      	push	{r7, lr}
 800055c:	b086      	sub	sp, #24
 800055e:	af00      	add	r7, sp, #0
 8000560:	60f8      	str	r0, [r7, #12]
 8000562:	607a      	str	r2, [r7, #4]
 8000564:	461a      	mov	r2, r3
 8000566:	460b      	mov	r3, r1
 8000568:	72fb      	strb	r3, [r7, #11]
 800056a:	4613      	mov	r3, r2
 800056c:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 800056e:	7abb      	ldrb	r3, [r7, #10]
 8000570:	2b01      	cmp	r3, #1
 8000572:	d929      	bls.n	80005c8 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f000 fb3a 	bl	8000bf4 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	681a      	ldr	r2, [r3, #0]
 8000584:	7afb      	ldrb	r3, [r7, #11]
 8000586:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800058a:	b2db      	uxtb	r3, r3
 800058c:	4619      	mov	r1, r3
 800058e:	4610      	mov	r0, r2
 8000590:	f000 fb6b 	bl	8000c6a <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000594:	2300      	movs	r3, #0
 8000596:	75fb      	strb	r3, [r7, #23]
 8000598:	e00b      	b.n	80005b2 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	6818      	ldr	r0, [r3, #0]
 800059e:	7dfb      	ldrb	r3, [r7, #23]
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	4413      	add	r3, r2
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	4619      	mov	r1, r3
 80005a8:	f000 fb5f 	bl	8000c6a <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80005ac:	7dfb      	ldrb	r3, [r7, #23]
 80005ae:	3301      	adds	r3, #1
 80005b0:	75fb      	strb	r3, [r7, #23]
 80005b2:	7dfa      	ldrb	r2, [r7, #23]
 80005b4:	7abb      	ldrb	r3, [r7, #10]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d3ef      	bcc.n	800059a <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2101      	movs	r1, #1
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 fb17 	bl	8000bf4 <SX1278_hw_SetNSS>
 80005c6:	e000      	b.n	80005ca <SX1278_SPIBurstWrite+0x70>
		return;
 80005c8:	bf00      	nop
	}
}
 80005ca:	3718      	adds	r7, #24
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f000 f90d 	bl	80007f8 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 80005de:	200f      	movs	r0, #15
 80005e0:	f000 fb85 	bl	8000cee <SX1278_hw_DelayMs>

	SX1278_entry_LoRA_mode(module);
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f000 f917 	bl	8000818 <SX1278_entry_LoRA_mode>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80005f0:	f04f 0000 	mov.w	r0, #0
 80005f4:	f04f 0100 	mov.w	r1, #0
 80005f8:	04d9      	lsls	r1, r3, #19
 80005fa:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 80005fe:	04d0      	lsls	r0, r2, #19
 8000600:	4a6f      	ldr	r2, [pc, #444]	; (80007c0 <SX1278_config+0x1f0>)
 8000602:	f04f 0300 	mov.w	r3, #0
 8000606:	f7ff fda3 	bl	8000150 <__aeabi_uldivmod>
 800060a:	4602      	mov	r2, r0
 800060c:	460b      	mov	r3, r1
 800060e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 8000612:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000616:	f04f 0200 	mov.w	r2, #0
 800061a:	f04f 0300 	mov.w	r3, #0
 800061e:	0c02      	lsrs	r2, r0, #16
 8000620:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000624:	0c0b      	lsrs	r3, r1, #16
 8000626:	b2d3      	uxtb	r3, r2
 8000628:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 800062a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800062e:	f04f 0200 	mov.w	r2, #0
 8000632:	f04f 0300 	mov.w	r3, #0
 8000636:	0a02      	lsrs	r2, r0, #8
 8000638:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800063c:	0a0b      	lsrs	r3, r1, #8
 800063e:	b2d3      	uxtb	r3, r2
 8000640:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 8000642:	7c3b      	ldrb	r3, [r7, #16]
 8000644:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 8000646:	f107 020c 	add.w	r2, r7, #12
 800064a:	2303      	movs	r3, #3
 800064c:	2106      	movs	r1, #6
 800064e:	6878      	ldr	r0, [r7, #4]
 8000650:	f7ff ff83 	bl	800055a <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 8000654:	2234      	movs	r2, #52	; 0x34
 8000656:	2139      	movs	r1, #57	; 0x39
 8000658:	6878      	ldr	r0, [r7, #4]
 800065a:	f7ff ff1c 	bl	8000496 <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	7c1b      	ldrb	r3, [r3, #16]
 8000662:	461a      	mov	r2, r3
 8000664:	4b57      	ldr	r3, [pc, #348]	; (80007c4 <SX1278_config+0x1f4>)
 8000666:	5c9b      	ldrb	r3, [r3, r2]
 8000668:	461a      	mov	r2, r3
 800066a:	2109      	movs	r1, #9
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f7ff ff12 	bl	8000496 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 8000672:	220b      	movs	r2, #11
 8000674:	210b      	movs	r1, #11
 8000676:	6878      	ldr	r0, [r7, #4]
 8000678:	f7ff ff0d 	bl	8000496 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 800067c:	2223      	movs	r2, #35	; 0x23
 800067e:	210c      	movs	r1, #12
 8000680:	6878      	ldr	r0, [r7, #4]
 8000682:	f7ff ff08 	bl	8000496 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	7c5b      	ldrb	r3, [r3, #17]
 800068a:	461a      	mov	r2, r3
 800068c:	4b4e      	ldr	r3, [pc, #312]	; (80007c8 <SX1278_config+0x1f8>)
 800068e:	5c9b      	ldrb	r3, [r3, r2]
 8000690:	2b06      	cmp	r3, #6
 8000692:	d147      	bne.n	8000724 <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	7c9b      	ldrb	r3, [r3, #18]
 8000698:	461a      	mov	r2, r3
 800069a:	4b4c      	ldr	r3, [pc, #304]	; (80007cc <SX1278_config+0x1fc>)
 800069c:	5c9b      	ldrb	r3, [r3, r2]
 800069e:	011b      	lsls	r3, r3, #4
 80006a0:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	7cdb      	ldrb	r3, [r3, #19]
 80006a6:	4619      	mov	r1, r3
 80006a8:	4b49      	ldr	r3, [pc, #292]	; (80007d0 <SX1278_config+0x200>)
 80006aa:	5c5b      	ldrb	r3, [r3, r1]
 80006ac:	005b      	lsls	r3, r3, #1
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	4413      	add	r3, r2
 80006b2:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80006b4:	3301      	adds	r3, #1
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	461a      	mov	r2, r3
 80006ba:	211d      	movs	r1, #29
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f7ff feea 	bl	8000496 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	7c5b      	ldrb	r3, [r3, #17]
 80006c6:	461a      	mov	r2, r3
 80006c8:	4b3f      	ldr	r3, [pc, #252]	; (80007c8 <SX1278_config+0x1f8>)
 80006ca:	5c9b      	ldrb	r3, [r3, r2]
 80006cc:	011b      	lsls	r3, r3, #4
 80006ce:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	7d1b      	ldrb	r3, [r3, #20]
 80006d4:	4619      	mov	r1, r3
 80006d6:	4b3f      	ldr	r3, [pc, #252]	; (80007d4 <SX1278_config+0x204>)
 80006d8:	5c5b      	ldrb	r3, [r3, r1]
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	4413      	add	r3, r2
 80006e0:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80006e2:	3303      	adds	r3, #3
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	461a      	mov	r2, r3
 80006e8:	211e      	movs	r1, #30
 80006ea:	6878      	ldr	r0, [r7, #4]
 80006ec:	f7ff fed3 	bl	8000496 <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 80006f0:	2131      	movs	r1, #49	; 0x31
 80006f2:	6878      	ldr	r0, [r7, #4]
 80006f4:	f7ff feb0 	bl	8000458 <SX1278_SPIRead>
 80006f8:	4603      	mov	r3, r0
 80006fa:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 80006fc:	7bfb      	ldrb	r3, [r7, #15]
 80006fe:	f023 0307 	bic.w	r3, r3, #7
 8000702:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 8000704:	7bfb      	ldrb	r3, [r7, #15]
 8000706:	f043 0305 	orr.w	r3, r3, #5
 800070a:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	461a      	mov	r2, r3
 8000710:	2131      	movs	r1, #49	; 0x31
 8000712:	6878      	ldr	r0, [r7, #4]
 8000714:	f7ff febf 	bl	8000496 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8000718:	220c      	movs	r2, #12
 800071a:	2137      	movs	r1, #55	; 0x37
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f7ff feba 	bl	8000496 <SX1278_SPIWrite>
 8000722:	e029      	b.n	8000778 <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	7c9b      	ldrb	r3, [r3, #18]
 8000728:	461a      	mov	r2, r3
 800072a:	4b28      	ldr	r3, [pc, #160]	; (80007cc <SX1278_config+0x1fc>)
 800072c:	5c9b      	ldrb	r3, [r3, r2]
 800072e:	011b      	lsls	r3, r3, #4
 8000730:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	7cdb      	ldrb	r3, [r3, #19]
 8000736:	4619      	mov	r1, r3
 8000738:	4b25      	ldr	r3, [pc, #148]	; (80007d0 <SX1278_config+0x200>)
 800073a:	5c5b      	ldrb	r3, [r3, r1]
 800073c:	005b      	lsls	r3, r3, #1
 800073e:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000740:	4413      	add	r3, r2
 8000742:	b2db      	uxtb	r3, r3
 8000744:	461a      	mov	r2, r3
 8000746:	211d      	movs	r1, #29
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f7ff fea4 	bl	8000496 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	7c5b      	ldrb	r3, [r3, #17]
 8000752:	461a      	mov	r2, r3
 8000754:	4b1c      	ldr	r3, [pc, #112]	; (80007c8 <SX1278_config+0x1f8>)
 8000756:	5c9b      	ldrb	r3, [r3, r2]
 8000758:	011b      	lsls	r3, r3, #4
 800075a:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	7d1b      	ldrb	r3, [r3, #20]
 8000760:	4619      	mov	r1, r3
 8000762:	4b1c      	ldr	r3, [pc, #112]	; (80007d4 <SX1278_config+0x204>)
 8000764:	5c5b      	ldrb	r3, [r3, r1]
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800076a:	4413      	add	r3, r2
 800076c:	b2db      	uxtb	r3, r3
 800076e:	461a      	mov	r2, r3
 8000770:	211e      	movs	r1, #30
 8000772:	6878      	ldr	r0, [r7, #4]
 8000774:	f7ff fe8f 	bl	8000496 <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 8000778:	2204      	movs	r2, #4
 800077a:	2126      	movs	r1, #38	; 0x26
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	f7ff fe8a 	bl	8000496 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8000782:	2208      	movs	r2, #8
 8000784:	211f      	movs	r1, #31
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f7ff fe85 	bl	8000496 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 800078c:	2200      	movs	r2, #0
 800078e:	2120      	movs	r1, #32
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f7ff fe80 	bl	8000496 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 8000796:	2208      	movs	r2, #8
 8000798:	2121      	movs	r1, #33	; 0x21
 800079a:	6878      	ldr	r0, [r7, #4]
 800079c:	f7ff fe7b 	bl	8000496 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 80007a0:	2201      	movs	r2, #1
 80007a2:	2141      	movs	r1, #65	; 0x41
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f7ff fe76 	bl	8000496 <SX1278_SPIWrite>
	module->readBytes = 0;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2200      	movs	r2, #0
 80007ae:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	SX1278_standby(module); //Entry standby mode
 80007b2:	6878      	ldr	r0, [r7, #4]
 80007b4:	f000 f810 	bl	80007d8 <SX1278_standby>
}
 80007b8:	bf00      	nop
 80007ba:	3718      	adds	r7, #24
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	01e84800 	.word	0x01e84800
 80007c4:	08005670 	.word	0x08005670
 80007c8:	08005674 	.word	0x08005674
 80007cc:	0800567c 	.word	0x0800567c
 80007d0:	08005688 	.word	0x08005688
 80007d4:	0800568c 	.word	0x0800568c

080007d8 <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 80007e0:	2209      	movs	r2, #9
 80007e2:	2101      	movs	r1, #1
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	f7ff fe56 	bl	8000496 <SX1278_SPIWrite>
	module->status = STANDBY;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2201      	movs	r2, #1
 80007ee:	759a      	strb	r2, [r3, #22]
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8000800:	2208      	movs	r2, #8
 8000802:	2101      	movs	r1, #1
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f7ff fe46 	bl	8000496 <SX1278_SPIWrite>
	module->status = SLEEP;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	2200      	movs	r2, #0
 800080e:	759a      	strb	r2, [r3, #22]
}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}

08000818 <SX1278_entry_LoRA_mode>:

void SX1278_entry_LoRA_mode(SX1278_t *module) {
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8000820:	2288      	movs	r2, #136	; 0x88
 8000822:	2101      	movs	r1, #1
 8000824:	6878      	ldr	r0, [r7, #4]
 8000826:	f7ff fe36 	bl	8000496 <SX1278_SPIWrite>
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 8000832:	b580      	push	{r7, lr}
 8000834:	b082      	sub	sp, #8
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 800083a:	22ff      	movs	r2, #255	; 0xff
 800083c:	2112      	movs	r1, #18
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f7ff fe29 	bl	8000496 <SX1278_SPIWrite>
}
 8000844:	bf00      	nop
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 800084c:	b580      	push	{r7, lr}
 800084e:	b086      	sub	sp, #24
 8000850:	af00      	add	r7, sp, #0
 8000852:	60f8      	str	r0, [r7, #12]
 8000854:	460b      	mov	r3, r1
 8000856:	607a      	str	r2, [r7, #4]
 8000858:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	7afa      	ldrb	r2, [r7, #11]
 800085e:	755a      	strb	r2, [r3, #21]

	SX1278_config(module);		//Setting base parameter
 8000860:	68f8      	ldr	r0, [r7, #12]
 8000862:	f7ff feb5 	bl	80005d0 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 8000866:	2284      	movs	r2, #132	; 0x84
 8000868:	214d      	movs	r1, #77	; 0x4d
 800086a:	68f8      	ldr	r0, [r7, #12]
 800086c:	f7ff fe13 	bl	8000496 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 8000870:	22ff      	movs	r2, #255	; 0xff
 8000872:	2124      	movs	r1, #36	; 0x24
 8000874:	68f8      	ldr	r0, [r7, #12]
 8000876:	f7ff fe0e 	bl	8000496 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 800087a:	2201      	movs	r2, #1
 800087c:	2140      	movs	r1, #64	; 0x40
 800087e:	68f8      	ldr	r0, [r7, #12]
 8000880:	f7ff fe09 	bl	8000496 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 8000884:	223f      	movs	r2, #63	; 0x3f
 8000886:	2111      	movs	r1, #17
 8000888:	68f8      	ldr	r0, [r7, #12]
 800088a:	f7ff fe04 	bl	8000496 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 800088e:	68f8      	ldr	r0, [r7, #12]
 8000890:	f7ff ffcf 	bl	8000832 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 8000894:	7afb      	ldrb	r3, [r7, #11]
 8000896:	461a      	mov	r2, r3
 8000898:	2122      	movs	r1, #34	; 0x22
 800089a:	68f8      	ldr	r0, [r7, #12]
 800089c:	f7ff fdfb 	bl	8000496 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 80008a0:	210f      	movs	r1, #15
 80008a2:	68f8      	ldr	r0, [r7, #12]
 80008a4:	f7ff fdd8 	bl	8000458 <SX1278_SPIRead>
 80008a8:	4603      	mov	r3, r0
 80008aa:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 80008ac:	7dfb      	ldrb	r3, [r7, #23]
 80008ae:	461a      	mov	r2, r3
 80008b0:	210d      	movs	r1, #13
 80008b2:	68f8      	ldr	r0, [r7, #12]
 80008b4:	f7ff fdef 	bl	8000496 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 80008b8:	228d      	movs	r2, #141	; 0x8d
 80008ba:	2101      	movs	r1, #1
 80008bc:	68f8      	ldr	r0, [r7, #12]
 80008be:	f7ff fdea 	bl	8000496 <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	2200      	movs	r2, #0
 80008c6:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 80008ca:	2118      	movs	r1, #24
 80008cc:	68f8      	ldr	r0, [r7, #12]
 80008ce:	f7ff fdc3 	bl	8000458 <SX1278_SPIRead>
 80008d2:	4603      	mov	r3, r0
 80008d4:	f003 0304 	and.w	r3, r3, #4
 80008d8:	2b04      	cmp	r3, #4
 80008da:	d104      	bne.n	80008e6 <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	2203      	movs	r2, #3
 80008e0:	759a      	strb	r2, [r3, #22]
			return 1;
 80008e2:	2301      	movs	r3, #1
 80008e4:	e013      	b.n	800090e <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	3b01      	subs	r3, #1
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d109      	bne.n	8000906 <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 f993 	bl	8000c22 <SX1278_hw_Reset>
			SX1278_config(module);
 80008fc:	68f8      	ldr	r0, [r7, #12]
 80008fe:	f7ff fe67 	bl	80005d0 <SX1278_config>
			return 0;
 8000902:	2300      	movs	r3, #0
 8000904:	e003      	b.n	800090e <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 8000906:	2001      	movs	r0, #1
 8000908:	f000 f9f1 	bl	8000cee <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 800090c:	e7dd      	b.n	80008ca <SX1278_LoRaEntryRx+0x7e>
	}
}
 800090e:	4618      	mov	r0, r3
 8000910:	3718      	adds	r7, #24
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t *module) {
 8000916:	b580      	push	{r7, lr}
 8000918:	b084      	sub	sp, #16
 800091a:	af00      	add	r7, sp, #0
 800091c:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4618      	mov	r0, r3
 8000924:	f000 f9ee 	bl	8000d04 <SX1278_hw_GetDIO0>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d030      	beq.n	8000990 <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	3317      	adds	r3, #23
 8000932:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000936:	2100      	movs	r1, #0
 8000938:	4618      	mov	r0, r3
 800093a:	f003 fbd3 	bl	80040e4 <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 800093e:	2110      	movs	r1, #16
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f7ff fd89 	bl	8000458 <SX1278_SPIRead>
 8000946:	4603      	mov	r3, r0
 8000948:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 800094a:	7bbb      	ldrb	r3, [r7, #14]
 800094c:	461a      	mov	r2, r3
 800094e:	210d      	movs	r1, #13
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f7ff fda0 	bl	8000496 <SX1278_SPIWrite>

		if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	7c5b      	ldrb	r3, [r3, #17]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d103      	bne.n	8000966 <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	7d5b      	ldrb	r3, [r3, #21]
 8000962:	73fb      	strb	r3, [r7, #15]
 8000964:	e005      	b.n	8000972 <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 8000966:	2113      	movs	r1, #19
 8000968:	6878      	ldr	r0, [r7, #4]
 800096a:	f7ff fd75 	bl	8000458 <SX1278_SPIRead>
 800096e:	4603      	mov	r3, r0
 8000970:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	f103 0217 	add.w	r2, r3, #23
 8000978:	7bfb      	ldrb	r3, [r7, #15]
 800097a:	2100      	movs	r1, #0
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f7ff fdb3 	bl	80004e8 <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	7bfa      	ldrb	r2, [r7, #15]
 8000986:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
		SX1278_clearLoRaIrq(module);
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f7ff ff51 	bl	8000832 <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
}
 8000996:	4618      	mov	r0, r3
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <SX1278_LoRaEntryTx>:

int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 800099e:	b580      	push	{r7, lr}
 80009a0:	b086      	sub	sp, #24
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	60f8      	str	r0, [r7, #12]
 80009a6:	460b      	mov	r3, r1
 80009a8:	607a      	str	r2, [r7, #4]
 80009aa:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	7afa      	ldrb	r2, [r7, #11]
 80009b0:	755a      	strb	r2, [r3, #21]

	SX1278_config(module); //setting base parameter
 80009b2:	68f8      	ldr	r0, [r7, #12]
 80009b4:	f7ff fe0c 	bl	80005d0 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 80009b8:	2287      	movs	r2, #135	; 0x87
 80009ba:	214d      	movs	r1, #77	; 0x4d
 80009bc:	68f8      	ldr	r0, [r7, #12]
 80009be:	f7ff fd6a 	bl	8000496 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 80009c2:	2200      	movs	r2, #0
 80009c4:	2124      	movs	r1, #36	; 0x24
 80009c6:	68f8      	ldr	r0, [r7, #12]
 80009c8:	f7ff fd65 	bl	8000496 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 80009cc:	2241      	movs	r2, #65	; 0x41
 80009ce:	2140      	movs	r1, #64	; 0x40
 80009d0:	68f8      	ldr	r0, [r7, #12]
 80009d2:	f7ff fd60 	bl	8000496 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 80009d6:	68f8      	ldr	r0, [r7, #12]
 80009d8:	f7ff ff2b 	bl	8000832 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 80009dc:	22f7      	movs	r2, #247	; 0xf7
 80009de:	2111      	movs	r1, #17
 80009e0:	68f8      	ldr	r0, [r7, #12]
 80009e2:	f7ff fd58 	bl	8000496 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 80009e6:	7afb      	ldrb	r3, [r7, #11]
 80009e8:	461a      	mov	r2, r3
 80009ea:	2122      	movs	r1, #34	; 0x22
 80009ec:	68f8      	ldr	r0, [r7, #12]
 80009ee:	f7ff fd52 	bl	8000496 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 80009f2:	210e      	movs	r1, #14
 80009f4:	68f8      	ldr	r0, [r7, #12]
 80009f6:	f7ff fd2f 	bl	8000458 <SX1278_SPIRead>
 80009fa:	4603      	mov	r3, r0
 80009fc:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 80009fe:	7dfb      	ldrb	r3, [r7, #23]
 8000a00:	461a      	mov	r2, r3
 8000a02:	210d      	movs	r1, #13
 8000a04:	68f8      	ldr	r0, [r7, #12]
 8000a06:	f7ff fd46 	bl	8000496 <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 8000a0a:	2122      	movs	r1, #34	; 0x22
 8000a0c:	68f8      	ldr	r0, [r7, #12]
 8000a0e:	f7ff fd23 	bl	8000458 <SX1278_SPIRead>
 8000a12:	4603      	mov	r3, r0
 8000a14:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 8000a16:	7dba      	ldrb	r2, [r7, #22]
 8000a18:	7afb      	ldrb	r3, [r7, #11]
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	d104      	bne.n	8000a28 <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	2202      	movs	r2, #2
 8000a22:	759a      	strb	r2, [r3, #22]
			return 1;
 8000a24:	2301      	movs	r3, #1
 8000a26:	e00e      	b.n	8000a46 <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	3b01      	subs	r3, #1
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d1ea      	bne.n	8000a0a <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f000 f8f2 	bl	8000c22 <SX1278_hw_Reset>
			SX1278_config(module);
 8000a3e:	68f8      	ldr	r0, [r7, #12]
 8000a40:	f7ff fdc6 	bl	80005d0 <SX1278_config>
			return 0;
 8000a44:	2300      	movs	r3, #0
		}
	}
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3718      	adds	r7, #24
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	b084      	sub	sp, #16
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	60f8      	str	r0, [r7, #12]
 8000a56:	60b9      	str	r1, [r7, #8]
 8000a58:	603b      	str	r3, [r7, #0]
 8000a5a:	4613      	mov	r3, r2
 8000a5c:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	68ba      	ldr	r2, [r7, #8]
 8000a62:	2100      	movs	r1, #0
 8000a64:	68f8      	ldr	r0, [r7, #12]
 8000a66:	f7ff fd78 	bl	800055a <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 8000a6a:	228b      	movs	r2, #139	; 0x8b
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	68f8      	ldr	r0, [r7, #12]
 8000a70:	f7ff fd11 	bl	8000496 <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f000 f943 	bl	8000d04 <SX1278_hw_GetDIO0>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d00b      	beq.n	8000a9c <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 8000a84:	2112      	movs	r1, #18
 8000a86:	68f8      	ldr	r0, [r7, #12]
 8000a88:	f7ff fce6 	bl	8000458 <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 8000a8c:	68f8      	ldr	r0, [r7, #12]
 8000a8e:	f7ff fed0 	bl	8000832 <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 8000a92:	68f8      	ldr	r0, [r7, #12]
 8000a94:	f7ff fea0 	bl	80007d8 <SX1278_standby>
			return 1;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	e013      	b.n	8000ac4 <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	3b01      	subs	r3, #1
 8000aa0:	603b      	str	r3, [r7, #0]
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d109      	bne.n	8000abc <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4618      	mov	r0, r3
 8000aae:	f000 f8b8 	bl	8000c22 <SX1278_hw_Reset>
			SX1278_config(module);
 8000ab2:	68f8      	ldr	r0, [r7, #12]
 8000ab4:	f7ff fd8c 	bl	80005d0 <SX1278_config>
			return 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	e003      	b.n	8000ac4 <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 8000abc:	2001      	movs	r0, #1
 8000abe:	f000 f916 	bl	8000cee <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000ac2:	e7d7      	b.n	8000a74 <SX1278_LoRaTxPacket+0x26>
	}
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3710      	adds	r7, #16
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <SX1278_init>:

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f000 f874 	bl	8000bca <SX1278_hw_init>
	module->frequency = frequency;
 8000ae2:	68f9      	ldr	r1, [r7, #12]
 8000ae4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ae8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	module->power = power;
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	7e3a      	ldrb	r2, [r7, #24]
 8000af0:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	7f3a      	ldrb	r2, [r7, #28]
 8000af6:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000afe:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000b06:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000b0e:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8000b16:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 8000b18:	68f8      	ldr	r0, [r7, #12]
 8000b1a:	f7ff fd59 	bl	80005d0 <SX1278_config>
}
 8000b1e:	bf00      	nop
 8000b20:	3710      	adds	r7, #16
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <SX1278_read>:

uint8_t SX1278_available(SX1278_t *module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t *module, uint8_t *rxBuf, uint8_t length) {
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b084      	sub	sp, #16
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	60f8      	str	r0, [r7, #12]
 8000b2e:	60b9      	str	r1, [r7, #8]
 8000b30:	4613      	mov	r3, r2
 8000b32:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 8000b3a:	79fa      	ldrb	r2, [r7, #7]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d003      	beq.n	8000b48 <SX1278_read+0x22>
		length = module->readBytes;
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 8000b46:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	3317      	adds	r3, #23
 8000b4c:	79fa      	ldrb	r2, [r7, #7]
 8000b4e:	4619      	mov	r1, r3
 8000b50:	68b8      	ldr	r0, [r7, #8]
 8000b52:	f003 fab9 	bl	80040c8 <memcpy>
	rxBuf[length] = '\0';
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	68ba      	ldr	r2, [r7, #8]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	2200      	movs	r2, #0
 8000b64:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	return length;
 8000b68:	79fb      	ldrb	r3, [r7, #7]
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <SX1278_RSSI_LoRa>:

uint8_t SX1278_RSSI_LoRa(SX1278_t *module) {
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b084      	sub	sp, #16
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
	uint32_t temp = 10;
 8000b7a:	230a      	movs	r3, #10
 8000b7c:	60fb      	str	r3, [r7, #12]
	temp = SX1278_SPIRead(module, LR_RegRssiValue); //Read RegRssiValue, Rssi value
 8000b7e:	211b      	movs	r1, #27
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f7ff fc69 	bl	8000458 <SX1278_SPIRead>
 8000b86:	4603      	mov	r3, r0
 8000b88:	60fb      	str	r3, [r7, #12]
	temp = temp + 127 - 137; //127:Max RSSI, 137:RSSI offset
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	3b0a      	subs	r3, #10
 8000b8e:	60fb      	str	r3, [r7, #12]
	return (uint8_t) temp;
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	b2db      	uxtb	r3, r3
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3710      	adds	r7, #16
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <SX1278_RSSI>:

uint8_t SX1278_RSSI(SX1278_t *module) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
	uint8_t temp = 0xff;
 8000ba4:	23ff      	movs	r3, #255	; 0xff
 8000ba6:	73fb      	strb	r3, [r7, #15]
	temp = SX1278_SPIRead(module, RegRssiValue);
 8000ba8:	2111      	movs	r1, #17
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f7ff fc54 	bl	8000458 <SX1278_SPIRead>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	73fb      	strb	r3, [r7, #15]
	temp = 127 - (temp >> 1);	//127:Max RSSI
 8000bb4:	7bfb      	ldrb	r3, [r7, #15]
 8000bb6:	085b      	lsrs	r3, r3, #1
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8000bbe:	73fb      	strb	r3, [r7, #15]
	return temp;
 8000bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3710      	adds	r7, #16
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <SX1278_hw_init>:
#include <string.h>

#include "gpio.h"
#include "spi.h"

__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b082      	sub	sp, #8
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000bd2:	2101      	movs	r1, #1
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	f000 f80d 	bl	8000bf4 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6858      	ldr	r0, [r3, #4]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	b29b      	uxth	r3, r3
 8000be4:	2201      	movs	r2, #1
 8000be6:	4619      	mov	r1, r3
 8000be8:	f001 fb8b 	bl	8002302 <HAL_GPIO_WritePin>
}
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6958      	ldr	r0, [r3, #20]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	691b      	ldr	r3, [r3, #16]
 8000c06:	b299      	uxth	r1, r3
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	bf0c      	ite	eq
 8000c0e:	2301      	moveq	r3, #1
 8000c10:	2300      	movne	r3, #0
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	461a      	mov	r2, r3
 8000c16:	f001 fb74 	bl	8002302 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b082      	sub	sp, #8
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f7ff ffe1 	bl	8000bf4 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6858      	ldr	r0, [r3, #4]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	4619      	mov	r1, r3
 8000c40:	f001 fb5f 	bl	8002302 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8000c44:	2001      	movs	r0, #1
 8000c46:	f000 f852 	bl	8000cee <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6858      	ldr	r0, [r3, #4]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	2201      	movs	r2, #1
 8000c56:	4619      	mov	r1, r3
 8000c58:	f001 fb53 	bl	8002302 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8000c5c:	2064      	movs	r0, #100	; 0x64
 8000c5e:	f000 f846 	bl	8000cee <SX1278_hw_DelayMs>
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
 8000c72:	460b      	mov	r3, r1
 8000c74:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8000c76:	2100      	movs	r1, #0
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f7ff ffbb 	bl	8000bf4 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6998      	ldr	r0, [r3, #24]
 8000c82:	1cf9      	adds	r1, r7, #3
 8000c84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c88:	2201      	movs	r2, #1
 8000c8a:	f002 f9f3 	bl	8003074 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000c8e:	bf00      	nop
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f002 ff25 	bl	8003ae4 <HAL_SPI_GetState>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d1f7      	bne.n	8000c90 <SX1278_hw_SPICommand+0x26>
		;
}
 8000ca0:	bf00      	nop
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b084      	sub	sp, #16
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 8000cba:	2100      	movs	r1, #0
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f7ff ff99 	bl	8000bf4 <SX1278_hw_SetNSS>
	//HAL_SPI_Transmit (hw->spi, &address, 1, 100);  // send address
	HAL_SPI_Receive (hw->spi, &rxByte, 1, 100);  // receive 1 bytes data
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6998      	ldr	r0, [r3, #24]
 8000cc6:	f107 010e 	add.w	r1, r7, #14
 8000cca:	2364      	movs	r3, #100	; 0x64
 8000ccc:	2201      	movs	r2, #1
 8000cce:	f002 fb2f 	bl	8003330 <HAL_SPI_Receive>

//	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000cd2:	bf00      	nop
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f002 ff03 	bl	8003ae4 <HAL_SPI_GetState>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d1f7      	bne.n	8000cd4 <SX1278_hw_SPIReadByte+0x2a>
		;
	return rxByte;
 8000ce4:	7bbb      	ldrb	r3, [r7, #14]
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3710      	adds	r7, #16
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f000 fe4e 	bl	8001998 <HAL_Delay>
}
 8000cfc:	bf00      	nop
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	68da      	ldr	r2, [r3, #12]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	4619      	mov	r1, r3
 8000d18:	4610      	mov	r0, r2
 8000d1a:	f001 fadb 	bl	80022d4 <HAL_GPIO_ReadPin>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	bf0c      	ite	eq
 8000d24:	2301      	moveq	r3, #1
 8000d26:	2300      	movne	r3, #0
 8000d28:	b2db      	uxtb	r3, r3
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
	...

08000d34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b088      	sub	sp, #32
 8000d38:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3a:	f107 0310 	add.w	r3, r7, #16
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d48:	4b1e      	ldr	r3, [pc, #120]	; (8000dc4 <MX_GPIO_Init+0x90>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	4a1d      	ldr	r2, [pc, #116]	; (8000dc4 <MX_GPIO_Init+0x90>)
 8000d4e:	f043 0320 	orr.w	r3, r3, #32
 8000d52:	6193      	str	r3, [r2, #24]
 8000d54:	4b1b      	ldr	r3, [pc, #108]	; (8000dc4 <MX_GPIO_Init+0x90>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	f003 0320 	and.w	r3, r3, #32
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d60:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <MX_GPIO_Init+0x90>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	4a17      	ldr	r2, [pc, #92]	; (8000dc4 <MX_GPIO_Init+0x90>)
 8000d66:	f043 0304 	orr.w	r3, r3, #4
 8000d6a:	6193      	str	r3, [r2, #24]
 8000d6c:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <MX_GPIO_Init+0x90>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	f003 0304 	and.w	r3, r3, #4
 8000d74:	60bb      	str	r3, [r7, #8]
 8000d76:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <MX_GPIO_Init+0x90>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	4a11      	ldr	r2, [pc, #68]	; (8000dc4 <MX_GPIO_Init+0x90>)
 8000d7e:	f043 0308 	orr.w	r3, r3, #8
 8000d82:	6193      	str	r3, [r2, #24]
 8000d84:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <MX_GPIO_Init+0x90>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	f003 0308 	and.w	r3, r3, #8
 8000d8c:	607b      	str	r3, [r7, #4]
 8000d8e:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin|LORA_RST_Pin|LORA_DIO3_Pin|LORA_DIO1_Pin
 8000d90:	2200      	movs	r2, #0
 8000d92:	f247 313b 	movw	r1, #29499	; 0x733b
 8000d96:	480c      	ldr	r0, [pc, #48]	; (8000dc8 <MX_GPIO_Init+0x94>)
 8000d98:	f001 fab3 	bl	8002302 <HAL_GPIO_WritePin>
	                          |RS485_DE_Pin|BUZZER_Pin, GPIO_PIN_RESET);

	  /*Configure GPIO pins : LORA_NSS_Pin LORA_RST_Pin LORA_DIO3_Pin LORA_DIO1_Pin
	                           LORA_BUSSY_Pin PB3 PB4 LED_Pin
	                           RS485_DE_Pin BUZZER_Pin */
	  GPIO_InitStruct.Pin = LORA_NSS_Pin|LORA_RST_Pin|LORA_DIO3_Pin|LORA_DIO1_Pin
 8000d9c:	f247 333b 	movw	r3, #29499	; 0x733b
 8000da0:	613b      	str	r3, [r7, #16]
	                          |LORA_BUSSY_Pin|LED2_Pin|LED3_Pin|LED1_Pin
	                          |RS485_DE_Pin|BUZZER_Pin;
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da2:	2301      	movs	r3, #1
 8000da4:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000daa:	2302      	movs	r3, #2
 8000dac:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dae:	f107 0310 	add.w	r3, r7, #16
 8000db2:	4619      	mov	r1, r3
 8000db4:	4804      	ldr	r0, [pc, #16]	; (8000dc8 <MX_GPIO_Init+0x94>)
 8000db6:	f001 f909 	bl	8001fcc <HAL_GPIO_Init>


}
 8000dba:	bf00      	nop
 8000dbc:	3720      	adds	r7, #32
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	40010c00 	.word	0x40010c00

08000dcc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000dd4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000dd8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000ddc:	f003 0301 	and.w	r3, r3, #1
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d013      	beq.n	8000e0c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000de4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000de8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000dec:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d00b      	beq.n	8000e0c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000df4:	e000      	b.n	8000df8 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000df6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000df8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d0f9      	beq.n	8000df6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000e02:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	b2d2      	uxtb	r2, r2
 8000e0a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000e0c:	687b      	ldr	r3, [r7, #4]
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bc80      	pop	{r7}
 8000e16:	4770      	bx	lr

08000e18 <lora_read_reg>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t lora_read_reg(uint8_t address) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	71fb      	strb	r3, [r7, #7]
	uint8_t rec;
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET);  // pull the pin low
 8000e22:	2200      	movs	r2, #0
 8000e24:	2101      	movs	r1, #1
 8000e26:	4810      	ldr	r0, [pc, #64]	; (8000e68 <lora_read_reg+0x50>)
 8000e28:	f001 fa6b 	bl	8002302 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	f000 fdb3 	bl	8001998 <HAL_Delay>
	HAL_SPI_Transmit(&hspi1, &address, 1, 100);  // send address
 8000e32:	1df9      	adds	r1, r7, #7
 8000e34:	2364      	movs	r3, #100	; 0x64
 8000e36:	2201      	movs	r2, #1
 8000e38:	480c      	ldr	r0, [pc, #48]	; (8000e6c <lora_read_reg+0x54>)
 8000e3a:	f002 f91b 	bl	8003074 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &rec, 1, 100);  // receive 6 bytes data
 8000e3e:	f107 010f 	add.w	r1, r7, #15
 8000e42:	2364      	movs	r3, #100	; 0x64
 8000e44:	2201      	movs	r2, #1
 8000e46:	4809      	ldr	r0, [pc, #36]	; (8000e6c <lora_read_reg+0x54>)
 8000e48:	f002 fa72 	bl	8003330 <HAL_SPI_Receive>
	HAL_Delay(1);
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	f000 fda3 	bl	8001998 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);  // pull the pin high
 8000e52:	2201      	movs	r2, #1
 8000e54:	2101      	movs	r1, #1
 8000e56:	4804      	ldr	r0, [pc, #16]	; (8000e68 <lora_read_reg+0x50>)
 8000e58:	f001 fa53 	bl	8002302 <HAL_GPIO_WritePin>
	return rec;
 8000e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40010c00 	.word	0x40010c00
 8000e6c:	20000320 	.word	0x20000320

08000e70 <_write>:
}

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
	printf("SPI RX Done .. Do Something ...");
}
int _write(int file, char *ptr, int len) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, 50);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	b29a      	uxth	r2, r3
 8000e80:	2332      	movs	r3, #50	; 0x32
 8000e82:	68b9      	ldr	r1, [r7, #8]
 8000e84:	480c      	ldr	r0, [pc, #48]	; (8000eb8 <_write+0x48>)
 8000e86:	f002 ff8a 	bl	8003d9e <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]
 8000e8e:	e009      	b.n	8000ea4 <_write+0x34>
		ITM_SendChar(*ptr++);
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	1c5a      	adds	r2, r3, #1
 8000e94:	60ba      	str	r2, [r7, #8]
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff ff97 	bl	8000dcc <ITM_SendChar>
	for (i = 0; i < len; i++) {
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	617b      	str	r3, [r7, #20]
 8000ea4:	697a      	ldr	r2, [r7, #20]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	dbf1      	blt.n	8000e90 <_write+0x20>
	}
	return len;
 8000eac:	687b      	ldr	r3, [r7, #4]
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3718      	adds	r7, #24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	2000037c 	.word	0x2000037c
 8000ebc:	00000000 	.word	0x00000000

08000ec0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08a      	sub	sp, #40	; 0x28
 8000ec4:	af06      	add	r7, sp, #24
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ec6:	f000 fd05 	bl	80018d4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000eca:	f000 f94b 	bl	8001164 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ece:	f7ff ff31 	bl	8000d34 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000ed2:	f000 f9df 	bl	8001294 <MX_I2C1_Init>
	MX_SPI1_Init();
 8000ed6:	f000 fa11 	bl	80012fc <MX_SPI1_Init>
	MX_USART1_UART_Init();
 8000eda:	f000 fcab 	bl	8001834 <MX_USART1_UART_Init>
	MX_ADC1_Init();
 8000ede:	f000 f99b 	bl	8001218 <MX_ADC1_Init>
	 printf("Mode: Slave\r\n");
	 HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_SET);
	 }
	 */

	master = 1;
 8000ee2:	4b85      	ldr	r3, [pc, #532]	; (80010f8 <main+0x238>)
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	601a      	str	r2, [r3, #0]
	//initialize LoRa module
	SX1278_hw.dio0.port = LORA_BUSSY_GPIO_Port;
 8000ee8:	4b84      	ldr	r3, [pc, #528]	; (80010fc <main+0x23c>)
 8000eea:	4a85      	ldr	r2, [pc, #532]	; (8001100 <main+0x240>)
 8000eec:	60da      	str	r2, [r3, #12]
	SX1278_hw.dio0.pin = LORA_BUSSY_Pin;
 8000eee:	4b83      	ldr	r3, [pc, #524]	; (80010fc <main+0x23c>)
 8000ef0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ef4:	609a      	str	r2, [r3, #8]
	SX1278_hw.nss.port = LORA_NSS_GPIO_Port;
 8000ef6:	4b81      	ldr	r3, [pc, #516]	; (80010fc <main+0x23c>)
 8000ef8:	4a81      	ldr	r2, [pc, #516]	; (8001100 <main+0x240>)
 8000efa:	615a      	str	r2, [r3, #20]
	SX1278_hw.nss.pin = LORA_NSS_Pin;
 8000efc:	4b7f      	ldr	r3, [pc, #508]	; (80010fc <main+0x23c>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	611a      	str	r2, [r3, #16]
	SX1278_hw.reset.port = LORA_RST_GPIO_Port;
 8000f02:	4b7e      	ldr	r3, [pc, #504]	; (80010fc <main+0x23c>)
 8000f04:	4a7e      	ldr	r2, [pc, #504]	; (8001100 <main+0x240>)
 8000f06:	605a      	str	r2, [r3, #4]
	SX1278_hw.reset.pin = LORA_RST_Pin;
 8000f08:	4b7c      	ldr	r3, [pc, #496]	; (80010fc <main+0x23c>)
 8000f0a:	2202      	movs	r2, #2
 8000f0c:	601a      	str	r2, [r3, #0]
	SX1278_hw.spi = &hspi1;
 8000f0e:	4b7b      	ldr	r3, [pc, #492]	; (80010fc <main+0x23c>)
 8000f10:	4a7c      	ldr	r2, [pc, #496]	; (8001104 <main+0x244>)
 8000f12:	619a      	str	r2, [r3, #24]
	SX1278.hw = &SX1278_hw;
 8000f14:	4b7c      	ldr	r3, [pc, #496]	; (8001108 <main+0x248>)
 8000f16:	4a79      	ldr	r2, [pc, #484]	; (80010fc <main+0x23c>)
 8000f18:	601a      	str	r2, [r3, #0]

	printf("Configuring LoRa module\r\n");
 8000f1a:	487c      	ldr	r0, [pc, #496]	; (800110c <main+0x24c>)
 8000f1c:	f003 f970 	bl	8004200 <puts>
	SX1278_init(&SX1278, 150000000, SX1278_POWER_17DBM, SX1278_LORA_SF_10,
 8000f20:	230a      	movs	r3, #10
 8000f22:	9305      	str	r3, [sp, #20]
 8000f24:	2300      	movs	r3, #0
 8000f26:	9304      	str	r3, [sp, #16]
 8000f28:	2301      	movs	r3, #1
 8000f2a:	9303      	str	r3, [sp, #12]
 8000f2c:	2306      	movs	r3, #6
 8000f2e:	9302      	str	r3, [sp, #8]
 8000f30:	2304      	movs	r3, #4
 8000f32:	9301      	str	r3, [sp, #4]
 8000f34:	2301      	movs	r3, #1
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	a36d      	add	r3, pc, #436	; (adr r3, 80010f0 <main+0x230>)
 8000f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3e:	4872      	ldr	r0, [pc, #456]	; (8001108 <main+0x248>)
 8000f40:	f7ff fdc4 	bl	8000acc <SX1278_init>
	SX1278_LORA_BW_62_5KHZ, SX1278_LORA_CR_4_6, SX1278_LORA_CRC_EN, 10);
	printf("Done configuring LoRaModule\r\n");
 8000f44:	4872      	ldr	r0, [pc, #456]	; (8001110 <main+0x250>)
 8000f46:	f003 f95b 	bl	8004200 <puts>

	if (master == 1) {
 8000f4a:	4b6b      	ldr	r3, [pc, #428]	; (80010f8 <main+0x238>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d10e      	bne.n	8000f70 <main+0xb0>
		ret = SX1278_LoRaEntryTx(&SX1278, 16, 2000);
 8000f52:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000f56:	2110      	movs	r1, #16
 8000f58:	486b      	ldr	r0, [pc, #428]	; (8001108 <main+0x248>)
 8000f5a:	f7ff fd20 	bl	800099e <SX1278_LoRaEntryTx>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	4a6c      	ldr	r2, [pc, #432]	; (8001114 <main+0x254>)
 8000f62:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000f64:	2201      	movs	r2, #1
 8000f66:	2120      	movs	r1, #32
 8000f68:	4865      	ldr	r0, [pc, #404]	; (8001100 <main+0x240>)
 8000f6a:	f001 f9ca 	bl	8002302 <HAL_GPIO_WritePin>
 8000f6e:	e013      	b.n	8000f98 <main+0xd8>
	} else {
		ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000);
 8000f70:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000f74:	2110      	movs	r1, #16
 8000f76:	4864      	ldr	r0, [pc, #400]	; (8001108 <main+0x248>)
 8000f78:	f7ff fc68 	bl	800084c <SX1278_LoRaEntryRx>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	4a65      	ldr	r2, [pc, #404]	; (8001114 <main+0x254>)
 8000f80:	6013      	str	r3, [r2, #0]
		if (ret == 1)
 8000f82:	4b64      	ldr	r3, [pc, #400]	; (8001114 <main+0x254>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d103      	bne.n	8000f92 <main+0xd2>
			printf("Rx Mode\r\n");
 8000f8a:	4863      	ldr	r0, [pc, #396]	; (8001118 <main+0x258>)
 8000f8c:	f003 f938 	bl	8004200 <puts>
 8000f90:	e002      	b.n	8000f98 <main+0xd8>
		else
			printf("TimeOut!\r\n");
 8000f92:	4862      	ldr	r0, [pc, #392]	; (800111c <main+0x25c>)
 8000f94:	f003 f934 	bl	8004200 <puts>
	}

	int rssi_lora = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60fb      	str	r3, [r7, #12]
	int rssi = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60bb      	str	r3, [r7, #8]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (master == 1) {
 8000fa0:	4b55      	ldr	r3, [pc, #340]	; (80010f8 <main+0x238>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d153      	bne.n	8001050 <main+0x190>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000fa8:	2201      	movs	r2, #1
 8000faa:	2120      	movs	r1, #32
 8000fac:	4854      	ldr	r0, [pc, #336]	; (8001100 <main+0x240>)
 8000fae:	f001 f9a8 	bl	8002302 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2110      	movs	r1, #16
 8000fb6:	4852      	ldr	r0, [pc, #328]	; (8001100 <main+0x240>)
 8000fb8:	f001 f9a3 	bl	8002302 <HAL_GPIO_WritePin>
			printf("Master...");
 8000fbc:	4858      	ldr	r0, [pc, #352]	; (8001120 <main+0x260>)
 8000fbe:	f003 f899 	bl	80040f4 <iprintf>
			HAL_Delay(5000);
 8000fc2:	f241 3088 	movw	r0, #5000	; 0x1388
 8000fc6:	f000 fce7 	bl	8001998 <HAL_Delay>
			printf("Sending package...");
 8000fca:	4856      	ldr	r0, [pc, #344]	; (8001124 <main+0x264>)
 8000fcc:	f003 f892 	bl	80040f4 <iprintf>

			message_length = sprintf(buffer, "Hello %d", message);
 8000fd0:	4b55      	ldr	r3, [pc, #340]	; (8001128 <main+0x268>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4955      	ldr	r1, [pc, #340]	; (800112c <main+0x26c>)
 8000fd8:	4855      	ldr	r0, [pc, #340]	; (8001130 <main+0x270>)
 8000fda:	f003 f919 	bl	8004210 <siprintf>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	4a54      	ldr	r2, [pc, #336]	; (8001134 <main+0x274>)
 8000fe2:	6013      	str	r3, [r2, #0]
			ret = SX1278_LoRaEntryTx(&SX1278, message_length, 2000);
 8000fe4:	4b53      	ldr	r3, [pc, #332]	; (8001134 <main+0x274>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4845      	ldr	r0, [pc, #276]	; (8001108 <main+0x248>)
 8000ff2:	f7ff fcd4 	bl	800099e <SX1278_LoRaEntryTx>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	4a46      	ldr	r2, [pc, #280]	; (8001114 <main+0x254>)
 8000ffa:	6013      	str	r3, [r2, #0]
			if (ret == 1) {
 8000ffc:	4b45      	ldr	r3, [pc, #276]	; (8001114 <main+0x254>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d103      	bne.n	800100c <main+0x14c>
				printf("EntryTx Ok!\r\n");
 8001004:	484c      	ldr	r0, [pc, #304]	; (8001138 <main+0x278>)
 8001006:	f003 f8fb 	bl	8004200 <puts>
 800100a:	e002      	b.n	8001012 <main+0x152>
			} else {
				printf("EntryTx failed, timeout reset!\r\n");
 800100c:	484b      	ldr	r0, [pc, #300]	; (800113c <main+0x27c>)
 800100e:	f003 f8f7 	bl	8004200 <puts>
			}

			printf("Sending message: %s\r\n", buffer);
 8001012:	4947      	ldr	r1, [pc, #284]	; (8001130 <main+0x270>)
 8001014:	484a      	ldr	r0, [pc, #296]	; (8001140 <main+0x280>)
 8001016:	f003 f86d 	bl	80040f4 <iprintf>
			ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t*) buffer,
 800101a:	4b46      	ldr	r3, [pc, #280]	; (8001134 <main+0x274>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	b2da      	uxtb	r2, r3
 8001020:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001024:	4942      	ldr	r1, [pc, #264]	; (8001130 <main+0x270>)
 8001026:	4838      	ldr	r0, [pc, #224]	; (8001108 <main+0x248>)
 8001028:	f7ff fd11 	bl	8000a4e <SX1278_LoRaTxPacket>
 800102c:	4603      	mov	r3, r0
 800102e:	4a39      	ldr	r2, [pc, #228]	; (8001114 <main+0x254>)
 8001030:	6013      	str	r3, [r2, #0]
					message_length, 2000);
			message += 1;
 8001032:	4b3d      	ldr	r3, [pc, #244]	; (8001128 <main+0x268>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	3301      	adds	r3, #1
 8001038:	4a3b      	ldr	r2, [pc, #236]	; (8001128 <main+0x268>)
 800103a:	6013      	str	r3, [r2, #0]

			printf("Transmission: %d\r\n", ret);
 800103c:	4b35      	ldr	r3, [pc, #212]	; (8001114 <main+0x254>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4619      	mov	r1, r3
 8001042:	4840      	ldr	r0, [pc, #256]	; (8001144 <main+0x284>)
 8001044:	f003 f856 	bl	80040f4 <iprintf>
			printf("Package sent...\r\n");
 8001048:	483f      	ldr	r0, [pc, #252]	; (8001148 <main+0x288>)
 800104a:	f003 f8d9 	bl	8004200 <puts>
 800104e:	e032      	b.n	80010b6 <main+0x1f6>

		} else {
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001050:	2200      	movs	r2, #0
 8001052:	2120      	movs	r1, #32
 8001054:	482a      	ldr	r0, [pc, #168]	; (8001100 <main+0x240>)
 8001056:	f001 f954 	bl	8002302 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800105a:	2201      	movs	r2, #1
 800105c:	2110      	movs	r1, #16
 800105e:	4828      	ldr	r0, [pc, #160]	; (8001100 <main+0x240>)
 8001060:	f001 f94f 	bl	8002302 <HAL_GPIO_WritePin>
			printf("Slave ...\r\n");
 8001064:	4839      	ldr	r0, [pc, #228]	; (800114c <main+0x28c>)
 8001066:	f003 f8cb 	bl	8004200 <puts>
			printf("Receiving package...\r\n");
 800106a:	4839      	ldr	r0, [pc, #228]	; (8001150 <main+0x290>)
 800106c:	f003 f8c8 	bl	8004200 <puts>

			ret = SX1278_LoRaRxPacket(&SX1278);
 8001070:	4825      	ldr	r0, [pc, #148]	; (8001108 <main+0x248>)
 8001072:	f7ff fc50 	bl	8000916 <SX1278_LoRaRxPacket>
 8001076:	4603      	mov	r3, r0
 8001078:	461a      	mov	r2, r3
 800107a:	4b26      	ldr	r3, [pc, #152]	; (8001114 <main+0x254>)
 800107c:	601a      	str	r2, [r3, #0]
			printf("Received: %d\r\n", ret);
 800107e:	4b25      	ldr	r3, [pc, #148]	; (8001114 <main+0x254>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4619      	mov	r1, r3
 8001084:	4833      	ldr	r0, [pc, #204]	; (8001154 <main+0x294>)
 8001086:	f003 f835 	bl	80040f4 <iprintf>
			if (ret > 0) {
 800108a:	4b22      	ldr	r3, [pc, #136]	; (8001114 <main+0x254>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2b00      	cmp	r3, #0
 8001090:	dd0e      	ble.n	80010b0 <main+0x1f0>
				SX1278_read(&SX1278, (uint8_t*) buffer, ret);
 8001092:	4b20      	ldr	r3, [pc, #128]	; (8001114 <main+0x254>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	b2db      	uxtb	r3, r3
 8001098:	461a      	mov	r2, r3
 800109a:	4925      	ldr	r1, [pc, #148]	; (8001130 <main+0x270>)
 800109c:	481a      	ldr	r0, [pc, #104]	; (8001108 <main+0x248>)
 800109e:	f7ff fd42 	bl	8000b26 <SX1278_read>
				printf("Content (%d): %s\r\n", ret, buffer);
 80010a2:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <main+0x254>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a22      	ldr	r2, [pc, #136]	; (8001130 <main+0x270>)
 80010a8:	4619      	mov	r1, r3
 80010aa:	482b      	ldr	r0, [pc, #172]	; (8001158 <main+0x298>)
 80010ac:	f003 f822 	bl	80040f4 <iprintf>
			}
			printf("Package received ...\r\n");
 80010b0:	482a      	ldr	r0, [pc, #168]	; (800115c <main+0x29c>)
 80010b2:	f003 f8a5 	bl	8004200 <puts>

		}

		rssi_lora = SX1278_RSSI_LoRa(&SX1278);
 80010b6:	4814      	ldr	r0, [pc, #80]	; (8001108 <main+0x248>)
 80010b8:	f7ff fd5b 	bl	8000b72 <SX1278_RSSI_LoRa>
 80010bc:	4603      	mov	r3, r0
 80010be:	60fb      	str	r3, [r7, #12]
		rssi = SX1278_RSSI(&SX1278);
 80010c0:	4811      	ldr	r0, [pc, #68]	; (8001108 <main+0x248>)
 80010c2:	f7ff fd6b 	bl	8000b9c <SX1278_RSSI>
 80010c6:	4603      	mov	r3, r0
 80010c8:	60bb      	str	r3, [r7, #8]
		//	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
		version = SX1278_SPIRead(&SX1278, REG_LR_VERSION);
 80010ca:	2142      	movs	r1, #66	; 0x42
 80010cc:	480e      	ldr	r0, [pc, #56]	; (8001108 <main+0x248>)
 80010ce:	f7ff f9c3 	bl	8000458 <SX1278_SPIRead>
 80010d2:	4603      	mov	r3, r0
 80010d4:	607b      	str	r3, [r7, #4]
		version = lora_read_reg(REG_LR_VERSION);
 80010d6:	2042      	movs	r0, #66	; 0x42
 80010d8:	f7ff fe9e 	bl	8000e18 <lora_read_reg>
 80010dc:	4603      	mov	r3, r0
 80010de:	607b      	str	r3, [r7, #4]
		printf("LoRa Version: %d \r\n", version);
 80010e0:	6879      	ldr	r1, [r7, #4]
 80010e2:	481f      	ldr	r0, [pc, #124]	; (8001160 <main+0x2a0>)
 80010e4:	f003 f806 	bl	80040f4 <iprintf>
		if (master == 1) {
 80010e8:	e75a      	b.n	8000fa0 <main+0xe0>
 80010ea:	bf00      	nop
 80010ec:	f3af 8000 	nop.w
 80010f0:	08f0d180 	.word	0x08f0d180
 80010f4:	00000000 	.word	0x00000000
 80010f8:	20000248 	.word	0x20000248
 80010fc:	20000110 	.word	0x20000110
 8001100:	40010c00 	.word	0x40010c00
 8001104:	20000320 	.word	0x20000320
 8001108:	20000130 	.word	0x20000130
 800110c:	080054fc 	.word	0x080054fc
 8001110:	08005518 	.word	0x08005518
 8001114:	2000024c 	.word	0x2000024c
 8001118:	08005538 	.word	0x08005538
 800111c:	08005544 	.word	0x08005544
 8001120:	08005550 	.word	0x08005550
 8001124:	0800555c 	.word	0x0800555c
 8001128:	20000318 	.word	0x20000318
 800112c:	08005570 	.word	0x08005570
 8001130:	20000250 	.word	0x20000250
 8001134:	2000031c 	.word	0x2000031c
 8001138:	0800557c 	.word	0x0800557c
 800113c:	0800558c 	.word	0x0800558c
 8001140:	080055ac 	.word	0x080055ac
 8001144:	080055c4 	.word	0x080055c4
 8001148:	080055d8 	.word	0x080055d8
 800114c:	080055ec 	.word	0x080055ec
 8001150:	080055f8 	.word	0x080055f8
 8001154:	08005610 	.word	0x08005610
 8001158:	08005620 	.word	0x08005620
 800115c:	08005634 	.word	0x08005634
 8001160:	0800564c 	.word	0x0800564c

08001164 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b094      	sub	sp, #80	; 0x50
 8001168:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800116a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800116e:	2228      	movs	r2, #40	; 0x28
 8001170:	2100      	movs	r1, #0
 8001172:	4618      	mov	r0, r3
 8001174:	f002 ffb6 	bl	80040e4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	609a      	str	r2, [r3, #8]
 8001192:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001194:	2301      	movs	r3, #1
 8001196:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001198:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800119c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800119e:	2300      	movs	r3, #0
 80011a0:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011a2:	2301      	movs	r3, #1
 80011a4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a6:	2302      	movs	r3, #2
 80011a8:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011ae:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80011b0:	2300      	movs	r3, #0
 80011b2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80011b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011b8:	4618      	mov	r0, r3
 80011ba:	f001 f9ff 	bl	80025bc <HAL_RCC_OscConfig>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <SystemClock_Config+0x64>
		Error_Handler();
 80011c4:	f000 f894 	bl	80012f0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80011c8:	230f      	movs	r3, #15
 80011ca:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011cc:	2302      	movs	r3, #2
 80011ce:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011d8:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011da:	2300      	movs	r3, #0
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80011de:	f107 0314 	add.w	r3, r7, #20
 80011e2:	2100      	movs	r1, #0
 80011e4:	4618      	mov	r0, r3
 80011e6:	f001 fc6b 	bl	8002ac0 <HAL_RCC_ClockConfig>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <SystemClock_Config+0x90>
		Error_Handler();
 80011f0:	f000 f87e 	bl	80012f0 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011f4:	2302      	movs	r3, #2
 80011f6:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80011f8:	2300      	movs	r3, #0
 80011fa:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80011fc:	1d3b      	adds	r3, r7, #4
 80011fe:	4618      	mov	r0, r3
 8001200:	f001 fdf6 	bl	8002df0 <HAL_RCCEx_PeriphCLKConfig>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <SystemClock_Config+0xaa>
		Error_Handler();
 800120a:	f000 f871 	bl	80012f0 <Error_Handler>
	}
}
 800120e:	bf00      	nop
 8001210:	3750      	adds	r7, #80	; 0x50
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001228:	4b18      	ldr	r3, [pc, #96]	; (800128c <MX_ADC1_Init+0x74>)
 800122a:	4a19      	ldr	r2, [pc, #100]	; (8001290 <MX_ADC1_Init+0x78>)
 800122c:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800122e:	4b17      	ldr	r3, [pc, #92]	; (800128c <MX_ADC1_Init+0x74>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001234:	4b15      	ldr	r3, [pc, #84]	; (800128c <MX_ADC1_Init+0x74>)
 8001236:	2200      	movs	r2, #0
 8001238:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800123a:	4b14      	ldr	r3, [pc, #80]	; (800128c <MX_ADC1_Init+0x74>)
 800123c:	2200      	movs	r2, #0
 800123e:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001240:	4b12      	ldr	r3, [pc, #72]	; (800128c <MX_ADC1_Init+0x74>)
 8001242:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001246:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001248:	4b10      	ldr	r3, [pc, #64]	; (800128c <MX_ADC1_Init+0x74>)
 800124a:	2200      	movs	r2, #0
 800124c:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 800124e:	4b0f      	ldr	r3, [pc, #60]	; (800128c <MX_ADC1_Init+0x74>)
 8001250:	2201      	movs	r2, #1
 8001252:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001254:	480d      	ldr	r0, [pc, #52]	; (800128c <MX_ADC1_Init+0x74>)
 8001256:	f000 fbc3 	bl	80019e0 <HAL_ADC_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_ADC1_Init+0x4c>
		Error_Handler();
 8001260:	f000 f846 	bl	80012f0 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8001264:	2300      	movs	r3, #0
 8001266:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001268:	2301      	movs	r3, #1
 800126a:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800126c:	2300      	movs	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	4619      	mov	r1, r3
 8001274:	4805      	ldr	r0, [pc, #20]	; (800128c <MX_ADC1_Init+0x74>)
 8001276:	f000 fc8b 	bl	8001b90 <HAL_ADC_ConfigChannel>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_ADC1_Init+0x6c>
		Error_Handler();
 8001280:	f000 f836 	bl	80012f0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001284:	bf00      	nop
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	2000008c 	.word	0x2000008c
 8001290:	40012400 	.word	0x40012400

08001294 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <MX_I2C1_Init+0x50>)
 800129a:	4a13      	ldr	r2, [pc, #76]	; (80012e8 <MX_I2C1_Init+0x54>)
 800129c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800129e:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <MX_I2C1_Init+0x50>)
 80012a0:	4a12      	ldr	r2, [pc, #72]	; (80012ec <MX_I2C1_Init+0x58>)
 80012a2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012a4:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <MX_I2C1_Init+0x50>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80012aa:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <MX_I2C1_Init+0x50>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012b0:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <MX_I2C1_Init+0x50>)
 80012b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012b6:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012b8:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <MX_I2C1_Init+0x50>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80012be:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <MX_I2C1_Init+0x50>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012c4:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <MX_I2C1_Init+0x50>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <MX_I2C1_Init+0x50>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80012d0:	4804      	ldr	r0, [pc, #16]	; (80012e4 <MX_I2C1_Init+0x50>)
 80012d2:	f001 f82f 	bl	8002334 <HAL_I2C_Init>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80012dc:	f000 f808 	bl	80012f0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80012e0:	bf00      	nop
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	200000bc 	.word	0x200000bc
 80012e8:	40005400 	.word	0x40005400
 80012ec:	000186a0 	.word	0x000186a0

080012f0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f4:	b672      	cpsid	i
}
 80012f6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80012f8:	e7fe      	b.n	80012f8 <Error_Handler+0x8>
	...

080012fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI1_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001300:	4b17      	ldr	r3, [pc, #92]	; (8001360 <MX_SPI1_Init+0x64>)
 8001302:	4a18      	ldr	r2, [pc, #96]	; (8001364 <MX_SPI1_Init+0x68>)
 8001304:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001306:	4b16      	ldr	r3, [pc, #88]	; (8001360 <MX_SPI1_Init+0x64>)
 8001308:	f44f 7282 	mov.w	r2, #260	; 0x104
 800130c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800130e:	4b14      	ldr	r3, [pc, #80]	; (8001360 <MX_SPI1_Init+0x64>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <MX_SPI1_Init+0x64>)
 8001316:	2200      	movs	r2, #0
 8001318:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <MX_SPI1_Init+0x64>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001320:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <MX_SPI1_Init+0x64>)
 8001322:	2200      	movs	r2, #0
 8001324:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <MX_SPI1_Init+0x64>)
 8001328:	f44f 7200 	mov.w	r2, #512	; 0x200
 800132c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800132e:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <MX_SPI1_Init+0x64>)
 8001330:	2218      	movs	r2, #24
 8001332:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001334:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <MX_SPI1_Init+0x64>)
 8001336:	2200      	movs	r2, #0
 8001338:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <MX_SPI1_Init+0x64>)
 800133c:	2200      	movs	r2, #0
 800133e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001340:	4b07      	ldr	r3, [pc, #28]	; (8001360 <MX_SPI1_Init+0x64>)
 8001342:	2200      	movs	r2, #0
 8001344:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <MX_SPI1_Init+0x64>)
 8001348:	2207      	movs	r2, #7
 800134a:	62da      	str	r2, [r3, #44]	; 0x2c


  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800134c:	4804      	ldr	r0, [pc, #16]	; (8001360 <MX_SPI1_Init+0x64>)
 800134e:	f001 fe05 	bl	8002f5c <HAL_SPI_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001358:	f7ff ffca 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000320 	.word	0x20000320
 8001364:	40013000 	.word	0x40013000

08001368 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <HAL_MspInit+0x5c>)
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	4a14      	ldr	r2, [pc, #80]	; (80013c4 <HAL_MspInit+0x5c>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	6193      	str	r3, [r2, #24]
 800137a:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <HAL_MspInit+0x5c>)
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001386:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <HAL_MspInit+0x5c>)
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	4a0e      	ldr	r2, [pc, #56]	; (80013c4 <HAL_MspInit+0x5c>)
 800138c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001390:	61d3      	str	r3, [r2, #28]
 8001392:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <HAL_MspInit+0x5c>)
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800139e:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <HAL_MspInit+0x60>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	4a04      	ldr	r2, [pc, #16]	; (80013c8 <HAL_MspInit+0x60>)
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ba:	bf00      	nop
 80013bc:	3714      	adds	r7, #20
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40010000 	.word	0x40010000

080013cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b088      	sub	sp, #32
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 0310 	add.w	r3, r7, #16
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a14      	ldr	r2, [pc, #80]	; (8001438 <HAL_ADC_MspInit+0x6c>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d121      	bne.n	8001430 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013ec:	4b13      	ldr	r3, [pc, #76]	; (800143c <HAL_ADC_MspInit+0x70>)
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	4a12      	ldr	r2, [pc, #72]	; (800143c <HAL_ADC_MspInit+0x70>)
 80013f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013f6:	6193      	str	r3, [r2, #24]
 80013f8:	4b10      	ldr	r3, [pc, #64]	; (800143c <HAL_ADC_MspInit+0x70>)
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001404:	4b0d      	ldr	r3, [pc, #52]	; (800143c <HAL_ADC_MspInit+0x70>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	4a0c      	ldr	r2, [pc, #48]	; (800143c <HAL_ADC_MspInit+0x70>)
 800140a:	f043 0304 	orr.w	r3, r3, #4
 800140e:	6193      	str	r3, [r2, #24]
 8001410:	4b0a      	ldr	r3, [pc, #40]	; (800143c <HAL_ADC_MspInit+0x70>)
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	f003 0304 	and.w	r3, r3, #4
 8001418:	60bb      	str	r3, [r7, #8]
 800141a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 800141c:	2313      	movs	r3, #19
 800141e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001420:	2303      	movs	r3, #3
 8001422:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001424:	f107 0310 	add.w	r3, r7, #16
 8001428:	4619      	mov	r1, r3
 800142a:	4805      	ldr	r0, [pc, #20]	; (8001440 <HAL_ADC_MspInit+0x74>)
 800142c:	f000 fdce 	bl	8001fcc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001430:	bf00      	nop
 8001432:	3720      	adds	r7, #32
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40012400 	.word	0x40012400
 800143c:	40021000 	.word	0x40021000
 8001440:	40010800 	.word	0x40010800

08001444 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b088      	sub	sp, #32
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 0310 	add.w	r3, r7, #16
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a15      	ldr	r2, [pc, #84]	; (80014b4 <HAL_I2C_MspInit+0x70>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d123      	bne.n	80014ac <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001464:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <HAL_I2C_MspInit+0x74>)
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	4a13      	ldr	r2, [pc, #76]	; (80014b8 <HAL_I2C_MspInit+0x74>)
 800146a:	f043 0308 	orr.w	r3, r3, #8
 800146e:	6193      	str	r3, [r2, #24]
 8001470:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <HAL_I2C_MspInit+0x74>)
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	f003 0308 	and.w	r3, r3, #8
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800147c:	23c0      	movs	r3, #192	; 0xc0
 800147e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001480:	2312      	movs	r3, #18
 8001482:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001484:	2303      	movs	r3, #3
 8001486:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001488:	f107 0310 	add.w	r3, r7, #16
 800148c:	4619      	mov	r1, r3
 800148e:	480b      	ldr	r0, [pc, #44]	; (80014bc <HAL_I2C_MspInit+0x78>)
 8001490:	f000 fd9c 	bl	8001fcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001494:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <HAL_I2C_MspInit+0x74>)
 8001496:	69db      	ldr	r3, [r3, #28]
 8001498:	4a07      	ldr	r2, [pc, #28]	; (80014b8 <HAL_I2C_MspInit+0x74>)
 800149a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800149e:	61d3      	str	r3, [r2, #28]
 80014a0:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <HAL_I2C_MspInit+0x74>)
 80014a2:	69db      	ldr	r3, [r3, #28]
 80014a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a8:	60bb      	str	r3, [r7, #8]
 80014aa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014ac:	bf00      	nop
 80014ae:	3720      	adds	r7, #32
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40005400 	.word	0x40005400
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40010c00 	.word	0x40010c00

080014c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b088      	sub	sp, #32
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c8:	f107 0310 	add.w	r3, r7, #16
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a1b      	ldr	r2, [pc, #108]	; (8001548 <HAL_SPI_MspInit+0x88>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d12f      	bne.n	8001540 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014e0:	4b1a      	ldr	r3, [pc, #104]	; (800154c <HAL_SPI_MspInit+0x8c>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	4a19      	ldr	r2, [pc, #100]	; (800154c <HAL_SPI_MspInit+0x8c>)
 80014e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014ea:	6193      	str	r3, [r2, #24]
 80014ec:	4b17      	ldr	r3, [pc, #92]	; (800154c <HAL_SPI_MspInit+0x8c>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f8:	4b14      	ldr	r3, [pc, #80]	; (800154c <HAL_SPI_MspInit+0x8c>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	4a13      	ldr	r2, [pc, #76]	; (800154c <HAL_SPI_MspInit+0x8c>)
 80014fe:	f043 0304 	orr.w	r3, r3, #4
 8001502:	6193      	str	r3, [r2, #24]
 8001504:	4b11      	ldr	r3, [pc, #68]	; (800154c <HAL_SPI_MspInit+0x8c>)
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	f003 0304 	and.w	r3, r3, #4
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001510:	23a0      	movs	r3, #160	; 0xa0
 8001512:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001514:	2302      	movs	r3, #2
 8001516:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001518:	2303      	movs	r3, #3
 800151a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151c:	f107 0310 	add.w	r3, r7, #16
 8001520:	4619      	mov	r1, r3
 8001522:	480b      	ldr	r0, [pc, #44]	; (8001550 <HAL_SPI_MspInit+0x90>)
 8001524:	f000 fd52 	bl	8001fcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001528:	2340      	movs	r3, #64	; 0x40
 800152a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001534:	f107 0310 	add.w	r3, r7, #16
 8001538:	4619      	mov	r1, r3
 800153a:	4805      	ldr	r0, [pc, #20]	; (8001550 <HAL_SPI_MspInit+0x90>)
 800153c:	f000 fd46 	bl	8001fcc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001540:	bf00      	nop
 8001542:	3720      	adds	r7, #32
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40013000 	.word	0x40013000
 800154c:	40021000 	.word	0x40021000
 8001550:	40010800 	.word	0x40010800

08001554 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08c      	sub	sp, #48	; 0x30
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155c:	f107 0320 	add.w	r3, r7, #32
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a53      	ldr	r2, [pc, #332]	; (80016bc <HAL_UART_MspInit+0x168>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d132      	bne.n	80015da <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001574:	4b52      	ldr	r3, [pc, #328]	; (80016c0 <HAL_UART_MspInit+0x16c>)
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	4a51      	ldr	r2, [pc, #324]	; (80016c0 <HAL_UART_MspInit+0x16c>)
 800157a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800157e:	6193      	str	r3, [r2, #24]
 8001580:	4b4f      	ldr	r3, [pc, #316]	; (80016c0 <HAL_UART_MspInit+0x16c>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001588:	61fb      	str	r3, [r7, #28]
 800158a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158c:	4b4c      	ldr	r3, [pc, #304]	; (80016c0 <HAL_UART_MspInit+0x16c>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	4a4b      	ldr	r2, [pc, #300]	; (80016c0 <HAL_UART_MspInit+0x16c>)
 8001592:	f043 0304 	orr.w	r3, r3, #4
 8001596:	6193      	str	r3, [r2, #24]
 8001598:	4b49      	ldr	r3, [pc, #292]	; (80016c0 <HAL_UART_MspInit+0x16c>)
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	f003 0304 	and.w	r3, r3, #4
 80015a0:	61bb      	str	r3, [r7, #24]
 80015a2:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USB_TX_Pin;
 80015a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015aa:	2302      	movs	r3, #2
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015ae:	2303      	movs	r3, #3
 80015b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(USB_TX_GPIO_Port, &GPIO_InitStruct);
 80015b2:	f107 0320 	add.w	r3, r7, #32
 80015b6:	4619      	mov	r1, r3
 80015b8:	4842      	ldr	r0, [pc, #264]	; (80016c4 <HAL_UART_MspInit+0x170>)
 80015ba:	f000 fd07 	bl	8001fcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_RX_Pin;
 80015be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015c4:	2300      	movs	r3, #0
 80015c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(USB_RX_GPIO_Port, &GPIO_InitStruct);
 80015cc:	f107 0320 	add.w	r3, r7, #32
 80015d0:	4619      	mov	r1, r3
 80015d2:	483c      	ldr	r0, [pc, #240]	; (80016c4 <HAL_UART_MspInit+0x170>)
 80015d4:	f000 fcfa 	bl	8001fcc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015d8:	e06c      	b.n	80016b4 <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART2)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a3a      	ldr	r2, [pc, #232]	; (80016c8 <HAL_UART_MspInit+0x174>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d130      	bne.n	8001646 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80015e4:	4b36      	ldr	r3, [pc, #216]	; (80016c0 <HAL_UART_MspInit+0x16c>)
 80015e6:	69db      	ldr	r3, [r3, #28]
 80015e8:	4a35      	ldr	r2, [pc, #212]	; (80016c0 <HAL_UART_MspInit+0x16c>)
 80015ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ee:	61d3      	str	r3, [r2, #28]
 80015f0:	4b33      	ldr	r3, [pc, #204]	; (80016c0 <HAL_UART_MspInit+0x16c>)
 80015f2:	69db      	ldr	r3, [r3, #28]
 80015f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f8:	617b      	str	r3, [r7, #20]
 80015fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fc:	4b30      	ldr	r3, [pc, #192]	; (80016c0 <HAL_UART_MspInit+0x16c>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	4a2f      	ldr	r2, [pc, #188]	; (80016c0 <HAL_UART_MspInit+0x16c>)
 8001602:	f043 0304 	orr.w	r3, r3, #4
 8001606:	6193      	str	r3, [r2, #24]
 8001608:	4b2d      	ldr	r3, [pc, #180]	; (80016c0 <HAL_UART_MspInit+0x16c>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	613b      	str	r3, [r7, #16]
 8001612:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001614:	2304      	movs	r3, #4
 8001616:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001618:	2302      	movs	r3, #2
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800161c:	2303      	movs	r3, #3
 800161e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001620:	f107 0320 	add.w	r3, r7, #32
 8001624:	4619      	mov	r1, r3
 8001626:	4827      	ldr	r0, [pc, #156]	; (80016c4 <HAL_UART_MspInit+0x170>)
 8001628:	f000 fcd0 	bl	8001fcc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800162c:	2308      	movs	r3, #8
 800162e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001630:	2300      	movs	r3, #0
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001638:	f107 0320 	add.w	r3, r7, #32
 800163c:	4619      	mov	r1, r3
 800163e:	4821      	ldr	r0, [pc, #132]	; (80016c4 <HAL_UART_MspInit+0x170>)
 8001640:	f000 fcc4 	bl	8001fcc <HAL_GPIO_Init>
}
 8001644:	e036      	b.n	80016b4 <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART3)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a20      	ldr	r2, [pc, #128]	; (80016cc <HAL_UART_MspInit+0x178>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d131      	bne.n	80016b4 <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001650:	4b1b      	ldr	r3, [pc, #108]	; (80016c0 <HAL_UART_MspInit+0x16c>)
 8001652:	69db      	ldr	r3, [r3, #28]
 8001654:	4a1a      	ldr	r2, [pc, #104]	; (80016c0 <HAL_UART_MspInit+0x16c>)
 8001656:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800165a:	61d3      	str	r3, [r2, #28]
 800165c:	4b18      	ldr	r3, [pc, #96]	; (80016c0 <HAL_UART_MspInit+0x16c>)
 800165e:	69db      	ldr	r3, [r3, #28]
 8001660:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001668:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <HAL_UART_MspInit+0x16c>)
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	4a14      	ldr	r2, [pc, #80]	; (80016c0 <HAL_UART_MspInit+0x16c>)
 800166e:	f043 0308 	orr.w	r3, r3, #8
 8001672:	6193      	str	r3, [r2, #24]
 8001674:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <HAL_UART_MspInit+0x16c>)
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	f003 0308 	and.w	r3, r3, #8
 800167c:	60bb      	str	r3, [r7, #8]
 800167e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RS485_TX_Pin;
 8001680:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001684:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001686:	2302      	movs	r3, #2
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800168a:	2303      	movs	r3, #3
 800168c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RS485_TX_GPIO_Port, &GPIO_InitStruct);
 800168e:	f107 0320 	add.w	r3, r7, #32
 8001692:	4619      	mov	r1, r3
 8001694:	480e      	ldr	r0, [pc, #56]	; (80016d0 <HAL_UART_MspInit+0x17c>)
 8001696:	f000 fc99 	bl	8001fcc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RS485_RX_Pin;
 800169a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800169e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a0:	2300      	movs	r3, #0
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(RS485_RX_GPIO_Port, &GPIO_InitStruct);
 80016a8:	f107 0320 	add.w	r3, r7, #32
 80016ac:	4619      	mov	r1, r3
 80016ae:	4808      	ldr	r0, [pc, #32]	; (80016d0 <HAL_UART_MspInit+0x17c>)
 80016b0:	f000 fc8c 	bl	8001fcc <HAL_GPIO_Init>
}
 80016b4:	bf00      	nop
 80016b6:	3730      	adds	r7, #48	; 0x30
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40013800 	.word	0x40013800
 80016c0:	40021000 	.word	0x40021000
 80016c4:	40010800 	.word	0x40010800
 80016c8:	40004400 	.word	0x40004400
 80016cc:	40004800 	.word	0x40004800
 80016d0:	40010c00 	.word	0x40010c00

080016d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016d8:	e7fe      	b.n	80016d8 <NMI_Handler+0x4>

080016da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016de:	e7fe      	b.n	80016de <HardFault_Handler+0x4>

080016e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e4:	e7fe      	b.n	80016e4 <MemManage_Handler+0x4>

080016e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ea:	e7fe      	b.n	80016ea <BusFault_Handler+0x4>

080016ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f0:	e7fe      	b.n	80016f0 <UsageFault_Handler+0x4>

080016f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016f2:	b480      	push	{r7}
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bc80      	pop	{r7}
 80016fc:	4770      	bx	lr

080016fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	46bd      	mov	sp, r7
 8001706:	bc80      	pop	{r7}
 8001708:	4770      	bx	lr

0800170a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr

08001716 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800171a:	f000 f921 	bl	8001960 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}

08001722 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b086      	sub	sp, #24
 8001726:	af00      	add	r7, sp, #0
 8001728:	60f8      	str	r0, [r7, #12]
 800172a:	60b9      	str	r1, [r7, #8]
 800172c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]
 8001732:	e00a      	b.n	800174a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001734:	f3af 8000 	nop.w
 8001738:	4601      	mov	r1, r0
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	1c5a      	adds	r2, r3, #1
 800173e:	60ba      	str	r2, [r7, #8]
 8001740:	b2ca      	uxtb	r2, r1
 8001742:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	3301      	adds	r3, #1
 8001748:	617b      	str	r3, [r7, #20]
 800174a:	697a      	ldr	r2, [r7, #20]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	429a      	cmp	r2, r3
 8001750:	dbf0      	blt.n	8001734 <_read+0x12>
	}

return len;
 8001752:	687b      	ldr	r3, [r7, #4]
}
 8001754:	4618      	mov	r0, r3
 8001756:	3718      	adds	r7, #24
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <_close>:
	}
	return len;
}

int _close(int file)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	return -1;
 8001764:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001768:	4618      	mov	r0, r3
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	bc80      	pop	{r7}
 8001770:	4770      	bx	lr

08001772 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001772:	b480      	push	{r7}
 8001774:	b083      	sub	sp, #12
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
 800177a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001782:	605a      	str	r2, [r3, #4]
	return 0;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr

08001790 <_isatty>:

int _isatty(int file)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
	return 1;
 8001798:	2301      	movs	r3, #1
}
 800179a:	4618      	mov	r0, r3
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr

080017a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
	return 0;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3714      	adds	r7, #20
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr

080017bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017c4:	4a14      	ldr	r2, [pc, #80]	; (8001818 <_sbrk+0x5c>)
 80017c6:	4b15      	ldr	r3, [pc, #84]	; (800181c <_sbrk+0x60>)
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017d0:	4b13      	ldr	r3, [pc, #76]	; (8001820 <_sbrk+0x64>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d102      	bne.n	80017de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017d8:	4b11      	ldr	r3, [pc, #68]	; (8001820 <_sbrk+0x64>)
 80017da:	4a12      	ldr	r2, [pc, #72]	; (8001824 <_sbrk+0x68>)
 80017dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017de:	4b10      	ldr	r3, [pc, #64]	; (8001820 <_sbrk+0x64>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4413      	add	r3, r2
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d207      	bcs.n	80017fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017ec:	f002 fc42 	bl	8004074 <__errno>
 80017f0:	4603      	mov	r3, r0
 80017f2:	220c      	movs	r2, #12
 80017f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017f6:	f04f 33ff 	mov.w	r3, #4294967295
 80017fa:	e009      	b.n	8001810 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017fc:	4b08      	ldr	r3, [pc, #32]	; (8001820 <_sbrk+0x64>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001802:	4b07      	ldr	r3, [pc, #28]	; (8001820 <_sbrk+0x64>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4413      	add	r3, r2
 800180a:	4a05      	ldr	r2, [pc, #20]	; (8001820 <_sbrk+0x64>)
 800180c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800180e:	68fb      	ldr	r3, [r7, #12]
}
 8001810:	4618      	mov	r0, r3
 8001812:	3718      	adds	r7, #24
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20005000 	.word	0x20005000
 800181c:	00000400 	.word	0x00000400
 8001820:	20000378 	.word	0x20000378
 8001824:	200003d8 	.word	0x200003d8

08001828 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr

08001834 <MX_USART1_UART_Init>:

UART_HandleTypeDef huart1;


void MX_USART1_UART_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001838:	4b11      	ldr	r3, [pc, #68]	; (8001880 <MX_USART1_UART_Init+0x4c>)
 800183a:	4a12      	ldr	r2, [pc, #72]	; (8001884 <MX_USART1_UART_Init+0x50>)
 800183c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800183e:	4b10      	ldr	r3, [pc, #64]	; (8001880 <MX_USART1_UART_Init+0x4c>)
 8001840:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001844:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001846:	4b0e      	ldr	r3, [pc, #56]	; (8001880 <MX_USART1_UART_Init+0x4c>)
 8001848:	2200      	movs	r2, #0
 800184a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800184c:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <MX_USART1_UART_Init+0x4c>)
 800184e:	2200      	movs	r2, #0
 8001850:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001852:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <MX_USART1_UART_Init+0x4c>)
 8001854:	2200      	movs	r2, #0
 8001856:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001858:	4b09      	ldr	r3, [pc, #36]	; (8001880 <MX_USART1_UART_Init+0x4c>)
 800185a:	220c      	movs	r2, #12
 800185c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800185e:	4b08      	ldr	r3, [pc, #32]	; (8001880 <MX_USART1_UART_Init+0x4c>)
 8001860:	2200      	movs	r2, #0
 8001862:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <MX_USART1_UART_Init+0x4c>)
 8001866:	2200      	movs	r2, #0
 8001868:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800186a:	4805      	ldr	r0, [pc, #20]	; (8001880 <MX_USART1_UART_Init+0x4c>)
 800186c:	f002 fa4a 	bl	8003d04 <HAL_UART_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001876:	f7ff fd3b 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	2000037c 	.word	0x2000037c
 8001884:	40013800 	.word	0x40013800

08001888 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:


/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 8001888:	480c      	ldr	r0, [pc, #48]	; (80018bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800188a:	490d      	ldr	r1, [pc, #52]	; (80018c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800188c:	4a0d      	ldr	r2, [pc, #52]	; (80018c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800188e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001890:	e002      	b.n	8001898 <LoopCopyDataInit>

08001892 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001892:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001894:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001896:	3304      	adds	r3, #4

08001898 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001898:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800189a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800189c:	d3f9      	bcc.n	8001892 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800189e:	4a0a      	ldr	r2, [pc, #40]	; (80018c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018a0:	4c0a      	ldr	r4, [pc, #40]	; (80018cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80018a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a4:	e001      	b.n	80018aa <LoopFillZerobss>

080018a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018a8:	3204      	adds	r2, #4

080018aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018ac:	d3fb      	bcc.n	80018a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018ae:	f7ff ffbb 	bl	8001828 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018b2:	f002 fbe5 	bl	8004080 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018b6:	f7ff fb03 	bl	8000ec0 <main>
  bx lr
 80018ba:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 80018bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018c0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80018c4:	08005750 	.word	0x08005750
  ldr r2, =_sbss
 80018c8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80018cc:	200003d4 	.word	0x200003d4

080018d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018d0:	e7fe      	b.n	80018d0 <ADC1_2_IRQHandler>
	...

080018d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018d8:	4b08      	ldr	r3, [pc, #32]	; (80018fc <HAL_Init+0x28>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a07      	ldr	r2, [pc, #28]	; (80018fc <HAL_Init+0x28>)
 80018de:	f043 0310 	orr.w	r3, r3, #16
 80018e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018e4:	2003      	movs	r0, #3
 80018e6:	f000 fb3d 	bl	8001f64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ea:	200f      	movs	r0, #15
 80018ec:	f000 f808 	bl	8001900 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018f0:	f7ff fd3a 	bl	8001368 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40022000 	.word	0x40022000

08001900 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001908:	4b12      	ldr	r3, [pc, #72]	; (8001954 <HAL_InitTick+0x54>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	4b12      	ldr	r3, [pc, #72]	; (8001958 <HAL_InitTick+0x58>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	4619      	mov	r1, r3
 8001912:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001916:	fbb3 f3f1 	udiv	r3, r3, r1
 800191a:	fbb2 f3f3 	udiv	r3, r2, r3
 800191e:	4618      	mov	r0, r3
 8001920:	f000 fb47 	bl	8001fb2 <HAL_SYSTICK_Config>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e00e      	b.n	800194c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b0f      	cmp	r3, #15
 8001932:	d80a      	bhi.n	800194a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001934:	2200      	movs	r2, #0
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	f04f 30ff 	mov.w	r0, #4294967295
 800193c:	f000 fb1d 	bl	8001f7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001940:	4a06      	ldr	r2, [pc, #24]	; (800195c <HAL_InitTick+0x5c>)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001946:	2300      	movs	r3, #0
 8001948:	e000      	b.n	800194c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
}
 800194c:	4618      	mov	r0, r3
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20000000 	.word	0x20000000
 8001958:	20000008 	.word	0x20000008
 800195c:	20000004 	.word	0x20000004

08001960 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001964:	4b05      	ldr	r3, [pc, #20]	; (800197c <HAL_IncTick+0x1c>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	461a      	mov	r2, r3
 800196a:	4b05      	ldr	r3, [pc, #20]	; (8001980 <HAL_IncTick+0x20>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4413      	add	r3, r2
 8001970:	4a03      	ldr	r2, [pc, #12]	; (8001980 <HAL_IncTick+0x20>)
 8001972:	6013      	str	r3, [r2, #0]
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr
 800197c:	20000008 	.word	0x20000008
 8001980:	200003c0 	.word	0x200003c0

08001984 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  return uwTick;
 8001988:	4b02      	ldr	r3, [pc, #8]	; (8001994 <HAL_GetTick+0x10>)
 800198a:	681b      	ldr	r3, [r3, #0]
}
 800198c:	4618      	mov	r0, r3
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr
 8001994:	200003c0 	.word	0x200003c0

08001998 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019a0:	f7ff fff0 	bl	8001984 <HAL_GetTick>
 80019a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b0:	d005      	beq.n	80019be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019b2:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <HAL_Delay+0x44>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	461a      	mov	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	4413      	add	r3, r2
 80019bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019be:	bf00      	nop
 80019c0:	f7ff ffe0 	bl	8001984 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d8f7      	bhi.n	80019c0 <HAL_Delay+0x28>
  {
  }
}
 80019d0:	bf00      	nop
 80019d2:	bf00      	nop
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000008 	.word	0x20000008

080019e0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019e8:	2300      	movs	r3, #0
 80019ea:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80019ec:	2300      	movs	r3, #0
 80019ee:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80019f0:	2300      	movs	r3, #0
 80019f2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80019f4:	2300      	movs	r3, #0
 80019f6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e0be      	b.n	8001b80 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d109      	bne.n	8001a24 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff fcd4 	bl	80013cc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f000 f9ab 	bl	8001d80 <ADC_ConversionStop_Disable>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a32:	f003 0310 	and.w	r3, r3, #16
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f040 8099 	bne.w	8001b6e <HAL_ADC_Init+0x18e>
 8001a3c:	7dfb      	ldrb	r3, [r7, #23]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f040 8095 	bne.w	8001b6e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a48:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a4c:	f023 0302 	bic.w	r3, r3, #2
 8001a50:	f043 0202 	orr.w	r2, r3, #2
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a60:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	7b1b      	ldrb	r3, [r3, #12]
 8001a66:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a68:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a6a:	68ba      	ldr	r2, [r7, #8]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a78:	d003      	beq.n	8001a82 <HAL_ADC_Init+0xa2>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d102      	bne.n	8001a88 <HAL_ADC_Init+0xa8>
 8001a82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a86:	e000      	b.n	8001a8a <HAL_ADC_Init+0xaa>
 8001a88:	2300      	movs	r3, #0
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	7d1b      	ldrb	r3, [r3, #20]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d119      	bne.n	8001acc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	7b1b      	ldrb	r3, [r3, #12]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d109      	bne.n	8001ab4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	035a      	lsls	r2, r3, #13
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ab0:	613b      	str	r3, [r7, #16]
 8001ab2:	e00b      	b.n	8001acc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab8:	f043 0220 	orr.w	r2, r3, #32
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac4:	f043 0201 	orr.w	r2, r3, #1
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	430a      	orrs	r2, r1
 8001ade:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	689a      	ldr	r2, [r3, #8]
 8001ae6:	4b28      	ldr	r3, [pc, #160]	; (8001b88 <HAL_ADC_Init+0x1a8>)
 8001ae8:	4013      	ands	r3, r2
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	6812      	ldr	r2, [r2, #0]
 8001aee:	68b9      	ldr	r1, [r7, #8]
 8001af0:	430b      	orrs	r3, r1
 8001af2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001afc:	d003      	beq.n	8001b06 <HAL_ADC_Init+0x126>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d104      	bne.n	8001b10 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	051b      	lsls	r3, r3, #20
 8001b0e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b16:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	430a      	orrs	r2, r1
 8001b22:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	689a      	ldr	r2, [r3, #8]
 8001b2a:	4b18      	ldr	r3, [pc, #96]	; (8001b8c <HAL_ADC_Init+0x1ac>)
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	68ba      	ldr	r2, [r7, #8]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d10b      	bne.n	8001b4c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3e:	f023 0303 	bic.w	r3, r3, #3
 8001b42:	f043 0201 	orr.w	r2, r3, #1
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b4a:	e018      	b.n	8001b7e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b50:	f023 0312 	bic.w	r3, r3, #18
 8001b54:	f043 0210 	orr.w	r2, r3, #16
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b60:	f043 0201 	orr.w	r2, r3, #1
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b6c:	e007      	b.n	8001b7e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b72:	f043 0210 	orr.w	r2, r3, #16
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	ffe1f7fd 	.word	0xffe1f7fd
 8001b8c:	ff1f0efe 	.word	0xff1f0efe

08001b90 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d101      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x20>
 8001bac:	2302      	movs	r3, #2
 8001bae:	e0dc      	b.n	8001d6a <HAL_ADC_ConfigChannel+0x1da>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b06      	cmp	r3, #6
 8001bbe:	d81c      	bhi.n	8001bfa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685a      	ldr	r2, [r3, #4]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	4413      	add	r3, r2
 8001bd0:	3b05      	subs	r3, #5
 8001bd2:	221f      	movs	r2, #31
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	4019      	ands	r1, r3
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	6818      	ldr	r0, [r3, #0]
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685a      	ldr	r2, [r3, #4]
 8001be4:	4613      	mov	r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	4413      	add	r3, r2
 8001bea:	3b05      	subs	r3, #5
 8001bec:	fa00 f203 	lsl.w	r2, r0, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	635a      	str	r2, [r3, #52]	; 0x34
 8001bf8:	e03c      	b.n	8001c74 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b0c      	cmp	r3, #12
 8001c00:	d81c      	bhi.n	8001c3c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4413      	add	r3, r2
 8001c12:	3b23      	subs	r3, #35	; 0x23
 8001c14:	221f      	movs	r2, #31
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	4019      	ands	r1, r3
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	6818      	ldr	r0, [r3, #0]
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685a      	ldr	r2, [r3, #4]
 8001c26:	4613      	mov	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	4413      	add	r3, r2
 8001c2c:	3b23      	subs	r3, #35	; 0x23
 8001c2e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	430a      	orrs	r2, r1
 8001c38:	631a      	str	r2, [r3, #48]	; 0x30
 8001c3a:	e01b      	b.n	8001c74 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685a      	ldr	r2, [r3, #4]
 8001c46:	4613      	mov	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	3b41      	subs	r3, #65	; 0x41
 8001c4e:	221f      	movs	r2, #31
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	43db      	mvns	r3, r3
 8001c56:	4019      	ands	r1, r3
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	6818      	ldr	r0, [r3, #0]
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	4613      	mov	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4413      	add	r3, r2
 8001c66:	3b41      	subs	r3, #65	; 0x41
 8001c68:	fa00 f203 	lsl.w	r2, r0, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	430a      	orrs	r2, r1
 8001c72:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2b09      	cmp	r3, #9
 8001c7a:	d91c      	bls.n	8001cb6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	68d9      	ldr	r1, [r3, #12]
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	4613      	mov	r3, r2
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	4413      	add	r3, r2
 8001c8c:	3b1e      	subs	r3, #30
 8001c8e:	2207      	movs	r2, #7
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	43db      	mvns	r3, r3
 8001c96:	4019      	ands	r1, r3
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	6898      	ldr	r0, [r3, #8]
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	4413      	add	r3, r2
 8001ca6:	3b1e      	subs	r3, #30
 8001ca8:	fa00 f203 	lsl.w	r2, r0, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	60da      	str	r2, [r3, #12]
 8001cb4:	e019      	b.n	8001cea <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	6919      	ldr	r1, [r3, #16]
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	4413      	add	r3, r2
 8001cc6:	2207      	movs	r2, #7
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	4019      	ands	r1, r3
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	6898      	ldr	r0, [r3, #8]
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	4413      	add	r3, r2
 8001cde:	fa00 f203 	lsl.w	r2, r0, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2b10      	cmp	r3, #16
 8001cf0:	d003      	beq.n	8001cfa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001cf6:	2b11      	cmp	r3, #17
 8001cf8:	d132      	bne.n	8001d60 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a1d      	ldr	r2, [pc, #116]	; (8001d74 <HAL_ADC_ConfigChannel+0x1e4>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d125      	bne.n	8001d50 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d126      	bne.n	8001d60 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001d20:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2b10      	cmp	r3, #16
 8001d28:	d11a      	bne.n	8001d60 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d2a:	4b13      	ldr	r3, [pc, #76]	; (8001d78 <HAL_ADC_ConfigChannel+0x1e8>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a13      	ldr	r2, [pc, #76]	; (8001d7c <HAL_ADC_ConfigChannel+0x1ec>)
 8001d30:	fba2 2303 	umull	r2, r3, r2, r3
 8001d34:	0c9a      	lsrs	r2, r3, #18
 8001d36:	4613      	mov	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4413      	add	r3, r2
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d40:	e002      	b.n	8001d48 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	3b01      	subs	r3, #1
 8001d46:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1f9      	bne.n	8001d42 <HAL_ADC_ConfigChannel+0x1b2>
 8001d4e:	e007      	b.n	8001d60 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d54:	f043 0220 	orr.w	r2, r3, #32
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3714      	adds	r7, #20
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr
 8001d74:	40012400 	.word	0x40012400
 8001d78:	20000000 	.word	0x20000000
 8001d7c:	431bde83 	.word	0x431bde83

08001d80 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d12e      	bne.n	8001df8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 0201 	bic.w	r2, r2, #1
 8001da8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001daa:	f7ff fdeb 	bl	8001984 <HAL_GetTick>
 8001dae:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001db0:	e01b      	b.n	8001dea <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001db2:	f7ff fde7 	bl	8001984 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d914      	bls.n	8001dea <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d10d      	bne.n	8001dea <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd2:	f043 0210 	orr.w	r2, r3, #16
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dde:	f043 0201 	orr.w	r2, r3, #1
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e007      	b.n	8001dfa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d0dc      	beq.n	8001db2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
	...

08001e04 <__NVIC_SetPriorityGrouping>:
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e14:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <__NVIC_SetPriorityGrouping+0x44>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e20:	4013      	ands	r3, r2
 8001e22:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e36:	4a04      	ldr	r2, [pc, #16]	; (8001e48 <__NVIC_SetPriorityGrouping+0x44>)
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	60d3      	str	r3, [r2, #12]
}
 8001e3c:	bf00      	nop
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bc80      	pop	{r7}
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	e000ed00 	.word	0xe000ed00

08001e4c <__NVIC_GetPriorityGrouping>:
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e50:	4b04      	ldr	r3, [pc, #16]	; (8001e64 <__NVIC_GetPriorityGrouping+0x18>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	0a1b      	lsrs	r3, r3, #8
 8001e56:	f003 0307 	and.w	r3, r3, #7
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bc80      	pop	{r7}
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	e000ed00 	.word	0xe000ed00

08001e68 <__NVIC_SetPriority>:
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	6039      	str	r1, [r7, #0]
 8001e72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	db0a      	blt.n	8001e92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	490c      	ldr	r1, [pc, #48]	; (8001eb4 <__NVIC_SetPriority+0x4c>)
 8001e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e86:	0112      	lsls	r2, r2, #4
 8001e88:	b2d2      	uxtb	r2, r2
 8001e8a:	440b      	add	r3, r1
 8001e8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e90:	e00a      	b.n	8001ea8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	4908      	ldr	r1, [pc, #32]	; (8001eb8 <__NVIC_SetPriority+0x50>)
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	3b04      	subs	r3, #4
 8001ea0:	0112      	lsls	r2, r2, #4
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	440b      	add	r3, r1
 8001ea6:	761a      	strb	r2, [r3, #24]
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bc80      	pop	{r7}
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	e000e100 	.word	0xe000e100
 8001eb8:	e000ed00 	.word	0xe000ed00

08001ebc <NVIC_EncodePriority>:
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b089      	sub	sp, #36	; 0x24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	f1c3 0307 	rsb	r3, r3, #7
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	bf28      	it	cs
 8001eda:	2304      	movcs	r3, #4
 8001edc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	2b06      	cmp	r3, #6
 8001ee4:	d902      	bls.n	8001eec <NVIC_EncodePriority+0x30>
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	3b03      	subs	r3, #3
 8001eea:	e000      	b.n	8001eee <NVIC_EncodePriority+0x32>
 8001eec:	2300      	movs	r3, #0
 8001eee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43da      	mvns	r2, r3
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	401a      	ands	r2, r3
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f04:	f04f 31ff 	mov.w	r1, #4294967295
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0e:	43d9      	mvns	r1, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f14:	4313      	orrs	r3, r2
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3724      	adds	r7, #36	; 0x24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr

08001f20 <SysTick_Config>:
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f30:	d301      	bcc.n	8001f36 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001f32:	2301      	movs	r3, #1
 8001f34:	e00f      	b.n	8001f56 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f36:	4a0a      	ldr	r2, [pc, #40]	; (8001f60 <SysTick_Config+0x40>)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f3e:	210f      	movs	r1, #15
 8001f40:	f04f 30ff 	mov.w	r0, #4294967295
 8001f44:	f7ff ff90 	bl	8001e68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f48:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <SysTick_Config+0x40>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f4e:	4b04      	ldr	r3, [pc, #16]	; (8001f60 <SysTick_Config+0x40>)
 8001f50:	2207      	movs	r2, #7
 8001f52:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	e000e010 	.word	0xe000e010

08001f64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7ff ff49 	bl	8001e04 <__NVIC_SetPriorityGrouping>
}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b086      	sub	sp, #24
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	4603      	mov	r3, r0
 8001f82:	60b9      	str	r1, [r7, #8]
 8001f84:	607a      	str	r2, [r7, #4]
 8001f86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f8c:	f7ff ff5e 	bl	8001e4c <__NVIC_GetPriorityGrouping>
 8001f90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	68b9      	ldr	r1, [r7, #8]
 8001f96:	6978      	ldr	r0, [r7, #20]
 8001f98:	f7ff ff90 	bl	8001ebc <NVIC_EncodePriority>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fa2:	4611      	mov	r1, r2
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff ff5f 	bl	8001e68 <__NVIC_SetPriority>
}
 8001faa:	bf00      	nop
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7ff ffb0 	bl	8001f20 <SysTick_Config>
 8001fc0:	4603      	mov	r3, r0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
	...

08001fcc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b08b      	sub	sp, #44	; 0x2c
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fde:	e169      	b.n	80022b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	69fa      	ldr	r2, [r7, #28]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	f040 8158 	bne.w	80022ae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	4a9a      	ldr	r2, [pc, #616]	; (800226c <HAL_GPIO_Init+0x2a0>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d05e      	beq.n	80020c6 <HAL_GPIO_Init+0xfa>
 8002008:	4a98      	ldr	r2, [pc, #608]	; (800226c <HAL_GPIO_Init+0x2a0>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d875      	bhi.n	80020fa <HAL_GPIO_Init+0x12e>
 800200e:	4a98      	ldr	r2, [pc, #608]	; (8002270 <HAL_GPIO_Init+0x2a4>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d058      	beq.n	80020c6 <HAL_GPIO_Init+0xfa>
 8002014:	4a96      	ldr	r2, [pc, #600]	; (8002270 <HAL_GPIO_Init+0x2a4>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d86f      	bhi.n	80020fa <HAL_GPIO_Init+0x12e>
 800201a:	4a96      	ldr	r2, [pc, #600]	; (8002274 <HAL_GPIO_Init+0x2a8>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d052      	beq.n	80020c6 <HAL_GPIO_Init+0xfa>
 8002020:	4a94      	ldr	r2, [pc, #592]	; (8002274 <HAL_GPIO_Init+0x2a8>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d869      	bhi.n	80020fa <HAL_GPIO_Init+0x12e>
 8002026:	4a94      	ldr	r2, [pc, #592]	; (8002278 <HAL_GPIO_Init+0x2ac>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d04c      	beq.n	80020c6 <HAL_GPIO_Init+0xfa>
 800202c:	4a92      	ldr	r2, [pc, #584]	; (8002278 <HAL_GPIO_Init+0x2ac>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d863      	bhi.n	80020fa <HAL_GPIO_Init+0x12e>
 8002032:	4a92      	ldr	r2, [pc, #584]	; (800227c <HAL_GPIO_Init+0x2b0>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d046      	beq.n	80020c6 <HAL_GPIO_Init+0xfa>
 8002038:	4a90      	ldr	r2, [pc, #576]	; (800227c <HAL_GPIO_Init+0x2b0>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d85d      	bhi.n	80020fa <HAL_GPIO_Init+0x12e>
 800203e:	2b12      	cmp	r3, #18
 8002040:	d82a      	bhi.n	8002098 <HAL_GPIO_Init+0xcc>
 8002042:	2b12      	cmp	r3, #18
 8002044:	d859      	bhi.n	80020fa <HAL_GPIO_Init+0x12e>
 8002046:	a201      	add	r2, pc, #4	; (adr r2, 800204c <HAL_GPIO_Init+0x80>)
 8002048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800204c:	080020c7 	.word	0x080020c7
 8002050:	080020a1 	.word	0x080020a1
 8002054:	080020b3 	.word	0x080020b3
 8002058:	080020f5 	.word	0x080020f5
 800205c:	080020fb 	.word	0x080020fb
 8002060:	080020fb 	.word	0x080020fb
 8002064:	080020fb 	.word	0x080020fb
 8002068:	080020fb 	.word	0x080020fb
 800206c:	080020fb 	.word	0x080020fb
 8002070:	080020fb 	.word	0x080020fb
 8002074:	080020fb 	.word	0x080020fb
 8002078:	080020fb 	.word	0x080020fb
 800207c:	080020fb 	.word	0x080020fb
 8002080:	080020fb 	.word	0x080020fb
 8002084:	080020fb 	.word	0x080020fb
 8002088:	080020fb 	.word	0x080020fb
 800208c:	080020fb 	.word	0x080020fb
 8002090:	080020a9 	.word	0x080020a9
 8002094:	080020bd 	.word	0x080020bd
 8002098:	4a79      	ldr	r2, [pc, #484]	; (8002280 <HAL_GPIO_Init+0x2b4>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d013      	beq.n	80020c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800209e:	e02c      	b.n	80020fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	623b      	str	r3, [r7, #32]
          break;
 80020a6:	e029      	b.n	80020fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	3304      	adds	r3, #4
 80020ae:	623b      	str	r3, [r7, #32]
          break;
 80020b0:	e024      	b.n	80020fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	3308      	adds	r3, #8
 80020b8:	623b      	str	r3, [r7, #32]
          break;
 80020ba:	e01f      	b.n	80020fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	330c      	adds	r3, #12
 80020c2:	623b      	str	r3, [r7, #32]
          break;
 80020c4:	e01a      	b.n	80020fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d102      	bne.n	80020d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020ce:	2304      	movs	r3, #4
 80020d0:	623b      	str	r3, [r7, #32]
          break;
 80020d2:	e013      	b.n	80020fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d105      	bne.n	80020e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020dc:	2308      	movs	r3, #8
 80020de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	69fa      	ldr	r2, [r7, #28]
 80020e4:	611a      	str	r2, [r3, #16]
          break;
 80020e6:	e009      	b.n	80020fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020e8:	2308      	movs	r3, #8
 80020ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	69fa      	ldr	r2, [r7, #28]
 80020f0:	615a      	str	r2, [r3, #20]
          break;
 80020f2:	e003      	b.n	80020fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020f4:	2300      	movs	r3, #0
 80020f6:	623b      	str	r3, [r7, #32]
          break;
 80020f8:	e000      	b.n	80020fc <HAL_GPIO_Init+0x130>
          break;
 80020fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	2bff      	cmp	r3, #255	; 0xff
 8002100:	d801      	bhi.n	8002106 <HAL_GPIO_Init+0x13a>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	e001      	b.n	800210a <HAL_GPIO_Init+0x13e>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3304      	adds	r3, #4
 800210a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	2bff      	cmp	r3, #255	; 0xff
 8002110:	d802      	bhi.n	8002118 <HAL_GPIO_Init+0x14c>
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	e002      	b.n	800211e <HAL_GPIO_Init+0x152>
 8002118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211a:	3b08      	subs	r3, #8
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	210f      	movs	r1, #15
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	fa01 f303 	lsl.w	r3, r1, r3
 800212c:	43db      	mvns	r3, r3
 800212e:	401a      	ands	r2, r3
 8002130:	6a39      	ldr	r1, [r7, #32]
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	fa01 f303 	lsl.w	r3, r1, r3
 8002138:	431a      	orrs	r2, r3
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002146:	2b00      	cmp	r3, #0
 8002148:	f000 80b1 	beq.w	80022ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800214c:	4b4d      	ldr	r3, [pc, #308]	; (8002284 <HAL_GPIO_Init+0x2b8>)
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	4a4c      	ldr	r2, [pc, #304]	; (8002284 <HAL_GPIO_Init+0x2b8>)
 8002152:	f043 0301 	orr.w	r3, r3, #1
 8002156:	6193      	str	r3, [r2, #24]
 8002158:	4b4a      	ldr	r3, [pc, #296]	; (8002284 <HAL_GPIO_Init+0x2b8>)
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	f003 0301 	and.w	r3, r3, #1
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002164:	4a48      	ldr	r2, [pc, #288]	; (8002288 <HAL_GPIO_Init+0x2bc>)
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	089b      	lsrs	r3, r3, #2
 800216a:	3302      	adds	r3, #2
 800216c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002170:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002174:	f003 0303 	and.w	r3, r3, #3
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	220f      	movs	r2, #15
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	43db      	mvns	r3, r3
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	4013      	ands	r3, r2
 8002186:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a40      	ldr	r2, [pc, #256]	; (800228c <HAL_GPIO_Init+0x2c0>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d013      	beq.n	80021b8 <HAL_GPIO_Init+0x1ec>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a3f      	ldr	r2, [pc, #252]	; (8002290 <HAL_GPIO_Init+0x2c4>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d00d      	beq.n	80021b4 <HAL_GPIO_Init+0x1e8>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a3e      	ldr	r2, [pc, #248]	; (8002294 <HAL_GPIO_Init+0x2c8>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d007      	beq.n	80021b0 <HAL_GPIO_Init+0x1e4>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a3d      	ldr	r2, [pc, #244]	; (8002298 <HAL_GPIO_Init+0x2cc>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d101      	bne.n	80021ac <HAL_GPIO_Init+0x1e0>
 80021a8:	2303      	movs	r3, #3
 80021aa:	e006      	b.n	80021ba <HAL_GPIO_Init+0x1ee>
 80021ac:	2304      	movs	r3, #4
 80021ae:	e004      	b.n	80021ba <HAL_GPIO_Init+0x1ee>
 80021b0:	2302      	movs	r3, #2
 80021b2:	e002      	b.n	80021ba <HAL_GPIO_Init+0x1ee>
 80021b4:	2301      	movs	r3, #1
 80021b6:	e000      	b.n	80021ba <HAL_GPIO_Init+0x1ee>
 80021b8:	2300      	movs	r3, #0
 80021ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021bc:	f002 0203 	and.w	r2, r2, #3
 80021c0:	0092      	lsls	r2, r2, #2
 80021c2:	4093      	lsls	r3, r2
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021ca:	492f      	ldr	r1, [pc, #188]	; (8002288 <HAL_GPIO_Init+0x2bc>)
 80021cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ce:	089b      	lsrs	r3, r3, #2
 80021d0:	3302      	adds	r3, #2
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d006      	beq.n	80021f2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021e4:	4b2d      	ldr	r3, [pc, #180]	; (800229c <HAL_GPIO_Init+0x2d0>)
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	492c      	ldr	r1, [pc, #176]	; (800229c <HAL_GPIO_Init+0x2d0>)
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	600b      	str	r3, [r1, #0]
 80021f0:	e006      	b.n	8002200 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021f2:	4b2a      	ldr	r3, [pc, #168]	; (800229c <HAL_GPIO_Init+0x2d0>)
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	43db      	mvns	r3, r3
 80021fa:	4928      	ldr	r1, [pc, #160]	; (800229c <HAL_GPIO_Init+0x2d0>)
 80021fc:	4013      	ands	r3, r2
 80021fe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d006      	beq.n	800221a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800220c:	4b23      	ldr	r3, [pc, #140]	; (800229c <HAL_GPIO_Init+0x2d0>)
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	4922      	ldr	r1, [pc, #136]	; (800229c <HAL_GPIO_Init+0x2d0>)
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	4313      	orrs	r3, r2
 8002216:	604b      	str	r3, [r1, #4]
 8002218:	e006      	b.n	8002228 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800221a:	4b20      	ldr	r3, [pc, #128]	; (800229c <HAL_GPIO_Init+0x2d0>)
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	43db      	mvns	r3, r3
 8002222:	491e      	ldr	r1, [pc, #120]	; (800229c <HAL_GPIO_Init+0x2d0>)
 8002224:	4013      	ands	r3, r2
 8002226:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d006      	beq.n	8002242 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002234:	4b19      	ldr	r3, [pc, #100]	; (800229c <HAL_GPIO_Init+0x2d0>)
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	4918      	ldr	r1, [pc, #96]	; (800229c <HAL_GPIO_Init+0x2d0>)
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	4313      	orrs	r3, r2
 800223e:	608b      	str	r3, [r1, #8]
 8002240:	e006      	b.n	8002250 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002242:	4b16      	ldr	r3, [pc, #88]	; (800229c <HAL_GPIO_Init+0x2d0>)
 8002244:	689a      	ldr	r2, [r3, #8]
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	43db      	mvns	r3, r3
 800224a:	4914      	ldr	r1, [pc, #80]	; (800229c <HAL_GPIO_Init+0x2d0>)
 800224c:	4013      	ands	r3, r2
 800224e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d021      	beq.n	80022a0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800225c:	4b0f      	ldr	r3, [pc, #60]	; (800229c <HAL_GPIO_Init+0x2d0>)
 800225e:	68da      	ldr	r2, [r3, #12]
 8002260:	490e      	ldr	r1, [pc, #56]	; (800229c <HAL_GPIO_Init+0x2d0>)
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	4313      	orrs	r3, r2
 8002266:	60cb      	str	r3, [r1, #12]
 8002268:	e021      	b.n	80022ae <HAL_GPIO_Init+0x2e2>
 800226a:	bf00      	nop
 800226c:	10320000 	.word	0x10320000
 8002270:	10310000 	.word	0x10310000
 8002274:	10220000 	.word	0x10220000
 8002278:	10210000 	.word	0x10210000
 800227c:	10120000 	.word	0x10120000
 8002280:	10110000 	.word	0x10110000
 8002284:	40021000 	.word	0x40021000
 8002288:	40010000 	.word	0x40010000
 800228c:	40010800 	.word	0x40010800
 8002290:	40010c00 	.word	0x40010c00
 8002294:	40011000 	.word	0x40011000
 8002298:	40011400 	.word	0x40011400
 800229c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022a0:	4b0b      	ldr	r3, [pc, #44]	; (80022d0 <HAL_GPIO_Init+0x304>)
 80022a2:	68da      	ldr	r2, [r3, #12]
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	43db      	mvns	r3, r3
 80022a8:	4909      	ldr	r1, [pc, #36]	; (80022d0 <HAL_GPIO_Init+0x304>)
 80022aa:	4013      	ands	r3, r2
 80022ac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	3301      	adds	r3, #1
 80022b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ba:	fa22 f303 	lsr.w	r3, r2, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f47f ae8e 	bne.w	8001fe0 <HAL_GPIO_Init+0x14>
  }
}
 80022c4:	bf00      	nop
 80022c6:	bf00      	nop
 80022c8:	372c      	adds	r7, #44	; 0x2c
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr
 80022d0:	40010400 	.word	0x40010400

080022d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	887b      	ldrh	r3, [r7, #2]
 80022e6:	4013      	ands	r3, r2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d002      	beq.n	80022f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022ec:	2301      	movs	r3, #1
 80022ee:	73fb      	strb	r3, [r7, #15]
 80022f0:	e001      	b.n	80022f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022f2:	2300      	movs	r3, #0
 80022f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bc80      	pop	{r7}
 8002300:	4770      	bx	lr

08002302 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
 800230a:	460b      	mov	r3, r1
 800230c:	807b      	strh	r3, [r7, #2]
 800230e:	4613      	mov	r3, r2
 8002310:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002312:	787b      	ldrb	r3, [r7, #1]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d003      	beq.n	8002320 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002318:	887a      	ldrh	r2, [r7, #2]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800231e:	e003      	b.n	8002328 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002320:	887b      	ldrh	r3, [r7, #2]
 8002322:	041a      	lsls	r2, r3, #16
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	611a      	str	r2, [r3, #16]
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	bc80      	pop	{r7}
 8002330:	4770      	bx	lr
	...

08002334 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e12b      	b.n	800259e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d106      	bne.n	8002360 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7ff f872 	bl	8001444 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2224      	movs	r2, #36	; 0x24
 8002364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 0201 	bic.w	r2, r2, #1
 8002376:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002386:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002396:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002398:	f000 fce4 	bl	8002d64 <HAL_RCC_GetPCLK1Freq>
 800239c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	4a81      	ldr	r2, [pc, #516]	; (80025a8 <HAL_I2C_Init+0x274>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d807      	bhi.n	80023b8 <HAL_I2C_Init+0x84>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	4a80      	ldr	r2, [pc, #512]	; (80025ac <HAL_I2C_Init+0x278>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	bf94      	ite	ls
 80023b0:	2301      	movls	r3, #1
 80023b2:	2300      	movhi	r3, #0
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	e006      	b.n	80023c6 <HAL_I2C_Init+0x92>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	4a7d      	ldr	r2, [pc, #500]	; (80025b0 <HAL_I2C_Init+0x27c>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	bf94      	ite	ls
 80023c0:	2301      	movls	r3, #1
 80023c2:	2300      	movhi	r3, #0
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e0e7      	b.n	800259e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	4a78      	ldr	r2, [pc, #480]	; (80025b4 <HAL_I2C_Init+0x280>)
 80023d2:	fba2 2303 	umull	r2, r3, r2, r3
 80023d6:	0c9b      	lsrs	r3, r3, #18
 80023d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68ba      	ldr	r2, [r7, #8]
 80023ea:	430a      	orrs	r2, r1
 80023ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	4a6a      	ldr	r2, [pc, #424]	; (80025a8 <HAL_I2C_Init+0x274>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d802      	bhi.n	8002408 <HAL_I2C_Init+0xd4>
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	3301      	adds	r3, #1
 8002406:	e009      	b.n	800241c <HAL_I2C_Init+0xe8>
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800240e:	fb02 f303 	mul.w	r3, r2, r3
 8002412:	4a69      	ldr	r2, [pc, #420]	; (80025b8 <HAL_I2C_Init+0x284>)
 8002414:	fba2 2303 	umull	r2, r3, r2, r3
 8002418:	099b      	lsrs	r3, r3, #6
 800241a:	3301      	adds	r3, #1
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	6812      	ldr	r2, [r2, #0]
 8002420:	430b      	orrs	r3, r1
 8002422:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800242e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	495c      	ldr	r1, [pc, #368]	; (80025a8 <HAL_I2C_Init+0x274>)
 8002438:	428b      	cmp	r3, r1
 800243a:	d819      	bhi.n	8002470 <HAL_I2C_Init+0x13c>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	1e59      	subs	r1, r3, #1
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	fbb1 f3f3 	udiv	r3, r1, r3
 800244a:	1c59      	adds	r1, r3, #1
 800244c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002450:	400b      	ands	r3, r1
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00a      	beq.n	800246c <HAL_I2C_Init+0x138>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	1e59      	subs	r1, r3, #1
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	fbb1 f3f3 	udiv	r3, r1, r3
 8002464:	3301      	adds	r3, #1
 8002466:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800246a:	e051      	b.n	8002510 <HAL_I2C_Init+0x1dc>
 800246c:	2304      	movs	r3, #4
 800246e:	e04f      	b.n	8002510 <HAL_I2C_Init+0x1dc>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d111      	bne.n	800249c <HAL_I2C_Init+0x168>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	1e58      	subs	r0, r3, #1
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6859      	ldr	r1, [r3, #4]
 8002480:	460b      	mov	r3, r1
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	440b      	add	r3, r1
 8002486:	fbb0 f3f3 	udiv	r3, r0, r3
 800248a:	3301      	adds	r3, #1
 800248c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002490:	2b00      	cmp	r3, #0
 8002492:	bf0c      	ite	eq
 8002494:	2301      	moveq	r3, #1
 8002496:	2300      	movne	r3, #0
 8002498:	b2db      	uxtb	r3, r3
 800249a:	e012      	b.n	80024c2 <HAL_I2C_Init+0x18e>
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	1e58      	subs	r0, r3, #1
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6859      	ldr	r1, [r3, #4]
 80024a4:	460b      	mov	r3, r1
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	440b      	add	r3, r1
 80024aa:	0099      	lsls	r1, r3, #2
 80024ac:	440b      	add	r3, r1
 80024ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80024b2:	3301      	adds	r3, #1
 80024b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	bf0c      	ite	eq
 80024bc:	2301      	moveq	r3, #1
 80024be:	2300      	movne	r3, #0
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <HAL_I2C_Init+0x196>
 80024c6:	2301      	movs	r3, #1
 80024c8:	e022      	b.n	8002510 <HAL_I2C_Init+0x1dc>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10e      	bne.n	80024f0 <HAL_I2C_Init+0x1bc>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	1e58      	subs	r0, r3, #1
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6859      	ldr	r1, [r3, #4]
 80024da:	460b      	mov	r3, r1
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	440b      	add	r3, r1
 80024e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80024e4:	3301      	adds	r3, #1
 80024e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024ee:	e00f      	b.n	8002510 <HAL_I2C_Init+0x1dc>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	1e58      	subs	r0, r3, #1
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6859      	ldr	r1, [r3, #4]
 80024f8:	460b      	mov	r3, r1
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	440b      	add	r3, r1
 80024fe:	0099      	lsls	r1, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	fbb0 f3f3 	udiv	r3, r0, r3
 8002506:	3301      	adds	r3, #1
 8002508:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800250c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	6809      	ldr	r1, [r1, #0]
 8002514:	4313      	orrs	r3, r2
 8002516:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69da      	ldr	r2, [r3, #28]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	431a      	orrs	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	430a      	orrs	r2, r1
 8002532:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800253e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	6911      	ldr	r1, [r2, #16]
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	68d2      	ldr	r2, [r2, #12]
 800254a:	4311      	orrs	r1, r2
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	6812      	ldr	r2, [r2, #0]
 8002550:	430b      	orrs	r3, r1
 8002552:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	695a      	ldr	r2, [r3, #20]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	430a      	orrs	r2, r1
 800256e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 0201 	orr.w	r2, r2, #1
 800257e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2220      	movs	r2, #32
 800258a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	000186a0 	.word	0x000186a0
 80025ac:	001e847f 	.word	0x001e847f
 80025b0:	003d08ff 	.word	0x003d08ff
 80025b4:	431bde83 	.word	0x431bde83
 80025b8:	10624dd3 	.word	0x10624dd3

080025bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e272      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f000 8087 	beq.w	80026ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025dc:	4b92      	ldr	r3, [pc, #584]	; (8002828 <HAL_RCC_OscConfig+0x26c>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f003 030c 	and.w	r3, r3, #12
 80025e4:	2b04      	cmp	r3, #4
 80025e6:	d00c      	beq.n	8002602 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025e8:	4b8f      	ldr	r3, [pc, #572]	; (8002828 <HAL_RCC_OscConfig+0x26c>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f003 030c 	and.w	r3, r3, #12
 80025f0:	2b08      	cmp	r3, #8
 80025f2:	d112      	bne.n	800261a <HAL_RCC_OscConfig+0x5e>
 80025f4:	4b8c      	ldr	r3, [pc, #560]	; (8002828 <HAL_RCC_OscConfig+0x26c>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002600:	d10b      	bne.n	800261a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002602:	4b89      	ldr	r3, [pc, #548]	; (8002828 <HAL_RCC_OscConfig+0x26c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d06c      	beq.n	80026e8 <HAL_RCC_OscConfig+0x12c>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d168      	bne.n	80026e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e24c      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002622:	d106      	bne.n	8002632 <HAL_RCC_OscConfig+0x76>
 8002624:	4b80      	ldr	r3, [pc, #512]	; (8002828 <HAL_RCC_OscConfig+0x26c>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a7f      	ldr	r2, [pc, #508]	; (8002828 <HAL_RCC_OscConfig+0x26c>)
 800262a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800262e:	6013      	str	r3, [r2, #0]
 8002630:	e02e      	b.n	8002690 <HAL_RCC_OscConfig+0xd4>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d10c      	bne.n	8002654 <HAL_RCC_OscConfig+0x98>
 800263a:	4b7b      	ldr	r3, [pc, #492]	; (8002828 <HAL_RCC_OscConfig+0x26c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a7a      	ldr	r2, [pc, #488]	; (8002828 <HAL_RCC_OscConfig+0x26c>)
 8002640:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002644:	6013      	str	r3, [r2, #0]
 8002646:	4b78      	ldr	r3, [pc, #480]	; (8002828 <HAL_RCC_OscConfig+0x26c>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a77      	ldr	r2, [pc, #476]	; (8002828 <HAL_RCC_OscConfig+0x26c>)
 800264c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002650:	6013      	str	r3, [r2, #0]
 8002652:	e01d      	b.n	8002690 <HAL_RCC_OscConfig+0xd4>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800265c:	d10c      	bne.n	8002678 <HAL_RCC_OscConfig+0xbc>
 800265e:	4b72      	ldr	r3, [pc, #456]	; (8002828 <HAL_RCC_OscConfig+0x26c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a71      	ldr	r2, [pc, #452]	; (8002828 <HAL_RCC_OscConfig+0x26c>)
 8002664:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002668:	6013      	str	r3, [r2, #0]
 800266a:	4b6f      	ldr	r3, [pc, #444]	; (8002828 <HAL_RCC_OscConfig+0x26c>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a6e      	ldr	r2, [pc, #440]	; (8002828 <HAL_RCC_OscConfig+0x26c>)
 8002670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002674:	6013      	str	r3, [r2, #0]
 8002676:	e00b      	b.n	8002690 <HAL_RCC_OscConfig+0xd4>
 8002678:	4b6b      	ldr	r3, [pc, #428]	; (8002828 <HAL_RCC_OscConfig+0x26c>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a6a      	ldr	r2, [pc, #424]	; (8002828 <HAL_RCC_OscConfig+0x26c>)
 800267e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002682:	6013      	str	r3, [r2, #0]
 8002684:	4b68      	ldr	r3, [pc, #416]	; (8002828 <HAL_RCC_OscConfig+0x26c>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a67      	ldr	r2, [pc, #412]	; (8002828 <HAL_RCC_OscConfig+0x26c>)
 800268a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800268e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d013      	beq.n	80026c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002698:	f7ff f974 	bl	8001984 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026a0:	f7ff f970 	bl	8001984 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b64      	cmp	r3, #100	; 0x64
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e200      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b2:	4b5d      	ldr	r3, [pc, #372]	; (8002828 <HAL_RCC_OscConfig+0x26c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d0f0      	beq.n	80026a0 <HAL_RCC_OscConfig+0xe4>
 80026be:	e014      	b.n	80026ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c0:	f7ff f960 	bl	8001984 <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026c8:	f7ff f95c 	bl	8001984 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b64      	cmp	r3, #100	; 0x64
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e1ec      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026da:	4b53      	ldr	r3, [pc, #332]	; (8002828 <HAL_RCC_OscConfig+0x26c>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1f0      	bne.n	80026c8 <HAL_RCC_OscConfig+0x10c>
 80026e6:	e000      	b.n	80026ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d063      	beq.n	80027be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026f6:	4b4c      	ldr	r3, [pc, #304]	; (8002828 <HAL_RCC_OscConfig+0x26c>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f003 030c 	and.w	r3, r3, #12
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00b      	beq.n	800271a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002702:	4b49      	ldr	r3, [pc, #292]	; (8002828 <HAL_RCC_OscConfig+0x26c>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f003 030c 	and.w	r3, r3, #12
 800270a:	2b08      	cmp	r3, #8
 800270c:	d11c      	bne.n	8002748 <HAL_RCC_OscConfig+0x18c>
 800270e:	4b46      	ldr	r3, [pc, #280]	; (8002828 <HAL_RCC_OscConfig+0x26c>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d116      	bne.n	8002748 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800271a:	4b43      	ldr	r3, [pc, #268]	; (8002828 <HAL_RCC_OscConfig+0x26c>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d005      	beq.n	8002732 <HAL_RCC_OscConfig+0x176>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d001      	beq.n	8002732 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e1c0      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002732:	4b3d      	ldr	r3, [pc, #244]	; (8002828 <HAL_RCC_OscConfig+0x26c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	4939      	ldr	r1, [pc, #228]	; (8002828 <HAL_RCC_OscConfig+0x26c>)
 8002742:	4313      	orrs	r3, r2
 8002744:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002746:	e03a      	b.n	80027be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d020      	beq.n	8002792 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002750:	4b36      	ldr	r3, [pc, #216]	; (800282c <HAL_RCC_OscConfig+0x270>)
 8002752:	2201      	movs	r2, #1
 8002754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002756:	f7ff f915 	bl	8001984 <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800275c:	e008      	b.n	8002770 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800275e:	f7ff f911 	bl	8001984 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e1a1      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002770:	4b2d      	ldr	r3, [pc, #180]	; (8002828 <HAL_RCC_OscConfig+0x26c>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0f0      	beq.n	800275e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800277c:	4b2a      	ldr	r3, [pc, #168]	; (8002828 <HAL_RCC_OscConfig+0x26c>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	695b      	ldr	r3, [r3, #20]
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	4927      	ldr	r1, [pc, #156]	; (8002828 <HAL_RCC_OscConfig+0x26c>)
 800278c:	4313      	orrs	r3, r2
 800278e:	600b      	str	r3, [r1, #0]
 8002790:	e015      	b.n	80027be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002792:	4b26      	ldr	r3, [pc, #152]	; (800282c <HAL_RCC_OscConfig+0x270>)
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002798:	f7ff f8f4 	bl	8001984 <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027a0:	f7ff f8f0 	bl	8001984 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e180      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027b2:	4b1d      	ldr	r3, [pc, #116]	; (8002828 <HAL_RCC_OscConfig+0x26c>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f0      	bne.n	80027a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0308 	and.w	r3, r3, #8
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d03a      	beq.n	8002840 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d019      	beq.n	8002806 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027d2:	4b17      	ldr	r3, [pc, #92]	; (8002830 <HAL_RCC_OscConfig+0x274>)
 80027d4:	2201      	movs	r2, #1
 80027d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027d8:	f7ff f8d4 	bl	8001984 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027e0:	f7ff f8d0 	bl	8001984 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e160      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027f2:	4b0d      	ldr	r3, [pc, #52]	; (8002828 <HAL_RCC_OscConfig+0x26c>)
 80027f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0f0      	beq.n	80027e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80027fe:	2001      	movs	r0, #1
 8002800:	f000 fad8 	bl	8002db4 <RCC_Delay>
 8002804:	e01c      	b.n	8002840 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002806:	4b0a      	ldr	r3, [pc, #40]	; (8002830 <HAL_RCC_OscConfig+0x274>)
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800280c:	f7ff f8ba 	bl	8001984 <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002812:	e00f      	b.n	8002834 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002814:	f7ff f8b6 	bl	8001984 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d908      	bls.n	8002834 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e146      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4f8>
 8002826:	bf00      	nop
 8002828:	40021000 	.word	0x40021000
 800282c:	42420000 	.word	0x42420000
 8002830:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002834:	4b92      	ldr	r3, [pc, #584]	; (8002a80 <HAL_RCC_OscConfig+0x4c4>)
 8002836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1e9      	bne.n	8002814 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 80a6 	beq.w	800299a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800284e:	2300      	movs	r3, #0
 8002850:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002852:	4b8b      	ldr	r3, [pc, #556]	; (8002a80 <HAL_RCC_OscConfig+0x4c4>)
 8002854:	69db      	ldr	r3, [r3, #28]
 8002856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10d      	bne.n	800287a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800285e:	4b88      	ldr	r3, [pc, #544]	; (8002a80 <HAL_RCC_OscConfig+0x4c4>)
 8002860:	69db      	ldr	r3, [r3, #28]
 8002862:	4a87      	ldr	r2, [pc, #540]	; (8002a80 <HAL_RCC_OscConfig+0x4c4>)
 8002864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002868:	61d3      	str	r3, [r2, #28]
 800286a:	4b85      	ldr	r3, [pc, #532]	; (8002a80 <HAL_RCC_OscConfig+0x4c4>)
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002872:	60bb      	str	r3, [r7, #8]
 8002874:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002876:	2301      	movs	r3, #1
 8002878:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800287a:	4b82      	ldr	r3, [pc, #520]	; (8002a84 <HAL_RCC_OscConfig+0x4c8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002882:	2b00      	cmp	r3, #0
 8002884:	d118      	bne.n	80028b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002886:	4b7f      	ldr	r3, [pc, #508]	; (8002a84 <HAL_RCC_OscConfig+0x4c8>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a7e      	ldr	r2, [pc, #504]	; (8002a84 <HAL_RCC_OscConfig+0x4c8>)
 800288c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002890:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002892:	f7ff f877 	bl	8001984 <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002898:	e008      	b.n	80028ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800289a:	f7ff f873 	bl	8001984 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b64      	cmp	r3, #100	; 0x64
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e103      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ac:	4b75      	ldr	r3, [pc, #468]	; (8002a84 <HAL_RCC_OscConfig+0x4c8>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0f0      	beq.n	800289a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d106      	bne.n	80028ce <HAL_RCC_OscConfig+0x312>
 80028c0:	4b6f      	ldr	r3, [pc, #444]	; (8002a80 <HAL_RCC_OscConfig+0x4c4>)
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	4a6e      	ldr	r2, [pc, #440]	; (8002a80 <HAL_RCC_OscConfig+0x4c4>)
 80028c6:	f043 0301 	orr.w	r3, r3, #1
 80028ca:	6213      	str	r3, [r2, #32]
 80028cc:	e02d      	b.n	800292a <HAL_RCC_OscConfig+0x36e>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d10c      	bne.n	80028f0 <HAL_RCC_OscConfig+0x334>
 80028d6:	4b6a      	ldr	r3, [pc, #424]	; (8002a80 <HAL_RCC_OscConfig+0x4c4>)
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	4a69      	ldr	r2, [pc, #420]	; (8002a80 <HAL_RCC_OscConfig+0x4c4>)
 80028dc:	f023 0301 	bic.w	r3, r3, #1
 80028e0:	6213      	str	r3, [r2, #32]
 80028e2:	4b67      	ldr	r3, [pc, #412]	; (8002a80 <HAL_RCC_OscConfig+0x4c4>)
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	4a66      	ldr	r2, [pc, #408]	; (8002a80 <HAL_RCC_OscConfig+0x4c4>)
 80028e8:	f023 0304 	bic.w	r3, r3, #4
 80028ec:	6213      	str	r3, [r2, #32]
 80028ee:	e01c      	b.n	800292a <HAL_RCC_OscConfig+0x36e>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	2b05      	cmp	r3, #5
 80028f6:	d10c      	bne.n	8002912 <HAL_RCC_OscConfig+0x356>
 80028f8:	4b61      	ldr	r3, [pc, #388]	; (8002a80 <HAL_RCC_OscConfig+0x4c4>)
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	4a60      	ldr	r2, [pc, #384]	; (8002a80 <HAL_RCC_OscConfig+0x4c4>)
 80028fe:	f043 0304 	orr.w	r3, r3, #4
 8002902:	6213      	str	r3, [r2, #32]
 8002904:	4b5e      	ldr	r3, [pc, #376]	; (8002a80 <HAL_RCC_OscConfig+0x4c4>)
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	4a5d      	ldr	r2, [pc, #372]	; (8002a80 <HAL_RCC_OscConfig+0x4c4>)
 800290a:	f043 0301 	orr.w	r3, r3, #1
 800290e:	6213      	str	r3, [r2, #32]
 8002910:	e00b      	b.n	800292a <HAL_RCC_OscConfig+0x36e>
 8002912:	4b5b      	ldr	r3, [pc, #364]	; (8002a80 <HAL_RCC_OscConfig+0x4c4>)
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	4a5a      	ldr	r2, [pc, #360]	; (8002a80 <HAL_RCC_OscConfig+0x4c4>)
 8002918:	f023 0301 	bic.w	r3, r3, #1
 800291c:	6213      	str	r3, [r2, #32]
 800291e:	4b58      	ldr	r3, [pc, #352]	; (8002a80 <HAL_RCC_OscConfig+0x4c4>)
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	4a57      	ldr	r2, [pc, #348]	; (8002a80 <HAL_RCC_OscConfig+0x4c4>)
 8002924:	f023 0304 	bic.w	r3, r3, #4
 8002928:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d015      	beq.n	800295e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002932:	f7ff f827 	bl	8001984 <HAL_GetTick>
 8002936:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002938:	e00a      	b.n	8002950 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800293a:	f7ff f823 	bl	8001984 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	f241 3288 	movw	r2, #5000	; 0x1388
 8002948:	4293      	cmp	r3, r2
 800294a:	d901      	bls.n	8002950 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e0b1      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002950:	4b4b      	ldr	r3, [pc, #300]	; (8002a80 <HAL_RCC_OscConfig+0x4c4>)
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d0ee      	beq.n	800293a <HAL_RCC_OscConfig+0x37e>
 800295c:	e014      	b.n	8002988 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800295e:	f7ff f811 	bl	8001984 <HAL_GetTick>
 8002962:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002964:	e00a      	b.n	800297c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002966:	f7ff f80d 	bl	8001984 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	f241 3288 	movw	r2, #5000	; 0x1388
 8002974:	4293      	cmp	r3, r2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e09b      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800297c:	4b40      	ldr	r3, [pc, #256]	; (8002a80 <HAL_RCC_OscConfig+0x4c4>)
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1ee      	bne.n	8002966 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002988:	7dfb      	ldrb	r3, [r7, #23]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d105      	bne.n	800299a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800298e:	4b3c      	ldr	r3, [pc, #240]	; (8002a80 <HAL_RCC_OscConfig+0x4c4>)
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	4a3b      	ldr	r2, [pc, #236]	; (8002a80 <HAL_RCC_OscConfig+0x4c4>)
 8002994:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002998:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f000 8087 	beq.w	8002ab2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029a4:	4b36      	ldr	r3, [pc, #216]	; (8002a80 <HAL_RCC_OscConfig+0x4c4>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f003 030c 	and.w	r3, r3, #12
 80029ac:	2b08      	cmp	r3, #8
 80029ae:	d061      	beq.n	8002a74 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	69db      	ldr	r3, [r3, #28]
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d146      	bne.n	8002a46 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029b8:	4b33      	ldr	r3, [pc, #204]	; (8002a88 <HAL_RCC_OscConfig+0x4cc>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029be:	f7fe ffe1 	bl	8001984 <HAL_GetTick>
 80029c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029c4:	e008      	b.n	80029d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c6:	f7fe ffdd 	bl	8001984 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e06d      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029d8:	4b29      	ldr	r3, [pc, #164]	; (8002a80 <HAL_RCC_OscConfig+0x4c4>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1f0      	bne.n	80029c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ec:	d108      	bne.n	8002a00 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029ee:	4b24      	ldr	r3, [pc, #144]	; (8002a80 <HAL_RCC_OscConfig+0x4c4>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	4921      	ldr	r1, [pc, #132]	; (8002a80 <HAL_RCC_OscConfig+0x4c4>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a00:	4b1f      	ldr	r3, [pc, #124]	; (8002a80 <HAL_RCC_OscConfig+0x4c4>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a19      	ldr	r1, [r3, #32]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a10:	430b      	orrs	r3, r1
 8002a12:	491b      	ldr	r1, [pc, #108]	; (8002a80 <HAL_RCC_OscConfig+0x4c4>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a18:	4b1b      	ldr	r3, [pc, #108]	; (8002a88 <HAL_RCC_OscConfig+0x4cc>)
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1e:	f7fe ffb1 	bl	8001984 <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a24:	e008      	b.n	8002a38 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a26:	f7fe ffad 	bl	8001984 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e03d      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a38:	4b11      	ldr	r3, [pc, #68]	; (8002a80 <HAL_RCC_OscConfig+0x4c4>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d0f0      	beq.n	8002a26 <HAL_RCC_OscConfig+0x46a>
 8002a44:	e035      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a46:	4b10      	ldr	r3, [pc, #64]	; (8002a88 <HAL_RCC_OscConfig+0x4cc>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4c:	f7fe ff9a 	bl	8001984 <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a54:	f7fe ff96 	bl	8001984 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e026      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a66:	4b06      	ldr	r3, [pc, #24]	; (8002a80 <HAL_RCC_OscConfig+0x4c4>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1f0      	bne.n	8002a54 <HAL_RCC_OscConfig+0x498>
 8002a72:	e01e      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	69db      	ldr	r3, [r3, #28]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d107      	bne.n	8002a8c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e019      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4f8>
 8002a80:	40021000 	.word	0x40021000
 8002a84:	40007000 	.word	0x40007000
 8002a88:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a8c:	4b0b      	ldr	r3, [pc, #44]	; (8002abc <HAL_RCC_OscConfig+0x500>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d106      	bne.n	8002aae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d001      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e000      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3718      	adds	r7, #24
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40021000 	.word	0x40021000

08002ac0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e0d0      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ad4:	4b6a      	ldr	r3, [pc, #424]	; (8002c80 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d910      	bls.n	8002b04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ae2:	4b67      	ldr	r3, [pc, #412]	; (8002c80 <HAL_RCC_ClockConfig+0x1c0>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f023 0207 	bic.w	r2, r3, #7
 8002aea:	4965      	ldr	r1, [pc, #404]	; (8002c80 <HAL_RCC_ClockConfig+0x1c0>)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af2:	4b63      	ldr	r3, [pc, #396]	; (8002c80 <HAL_RCC_ClockConfig+0x1c0>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d001      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e0b8      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d020      	beq.n	8002b52 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d005      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b1c:	4b59      	ldr	r3, [pc, #356]	; (8002c84 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	4a58      	ldr	r2, [pc, #352]	; (8002c84 <HAL_RCC_ClockConfig+0x1c4>)
 8002b22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b26:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0308 	and.w	r3, r3, #8
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d005      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b34:	4b53      	ldr	r3, [pc, #332]	; (8002c84 <HAL_RCC_ClockConfig+0x1c4>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	4a52      	ldr	r2, [pc, #328]	; (8002c84 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b3e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b40:	4b50      	ldr	r3, [pc, #320]	; (8002c84 <HAL_RCC_ClockConfig+0x1c4>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	494d      	ldr	r1, [pc, #308]	; (8002c84 <HAL_RCC_ClockConfig+0x1c4>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d040      	beq.n	8002be0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d107      	bne.n	8002b76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b66:	4b47      	ldr	r3, [pc, #284]	; (8002c84 <HAL_RCC_ClockConfig+0x1c4>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d115      	bne.n	8002b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e07f      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d107      	bne.n	8002b8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b7e:	4b41      	ldr	r3, [pc, #260]	; (8002c84 <HAL_RCC_ClockConfig+0x1c4>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d109      	bne.n	8002b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e073      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b8e:	4b3d      	ldr	r3, [pc, #244]	; (8002c84 <HAL_RCC_ClockConfig+0x1c4>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e06b      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b9e:	4b39      	ldr	r3, [pc, #228]	; (8002c84 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f023 0203 	bic.w	r2, r3, #3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	4936      	ldr	r1, [pc, #216]	; (8002c84 <HAL_RCC_ClockConfig+0x1c4>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bb0:	f7fe fee8 	bl	8001984 <HAL_GetTick>
 8002bb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bb6:	e00a      	b.n	8002bce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bb8:	f7fe fee4 	bl	8001984 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e053      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bce:	4b2d      	ldr	r3, [pc, #180]	; (8002c84 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f003 020c 	and.w	r2, r3, #12
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d1eb      	bne.n	8002bb8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002be0:	4b27      	ldr	r3, [pc, #156]	; (8002c80 <HAL_RCC_ClockConfig+0x1c0>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d210      	bcs.n	8002c10 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bee:	4b24      	ldr	r3, [pc, #144]	; (8002c80 <HAL_RCC_ClockConfig+0x1c0>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f023 0207 	bic.w	r2, r3, #7
 8002bf6:	4922      	ldr	r1, [pc, #136]	; (8002c80 <HAL_RCC_ClockConfig+0x1c0>)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfe:	4b20      	ldr	r3, [pc, #128]	; (8002c80 <HAL_RCC_ClockConfig+0x1c0>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d001      	beq.n	8002c10 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e032      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0304 	and.w	r3, r3, #4
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d008      	beq.n	8002c2e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c1c:	4b19      	ldr	r3, [pc, #100]	; (8002c84 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	4916      	ldr	r1, [pc, #88]	; (8002c84 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d009      	beq.n	8002c4e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c3a:	4b12      	ldr	r3, [pc, #72]	; (8002c84 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	490e      	ldr	r1, [pc, #56]	; (8002c84 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c4e:	f000 f821 	bl	8002c94 <HAL_RCC_GetSysClockFreq>
 8002c52:	4602      	mov	r2, r0
 8002c54:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <HAL_RCC_ClockConfig+0x1c4>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	091b      	lsrs	r3, r3, #4
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	490a      	ldr	r1, [pc, #40]	; (8002c88 <HAL_RCC_ClockConfig+0x1c8>)
 8002c60:	5ccb      	ldrb	r3, [r1, r3]
 8002c62:	fa22 f303 	lsr.w	r3, r2, r3
 8002c66:	4a09      	ldr	r2, [pc, #36]	; (8002c8c <HAL_RCC_ClockConfig+0x1cc>)
 8002c68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c6a:	4b09      	ldr	r3, [pc, #36]	; (8002c90 <HAL_RCC_ClockConfig+0x1d0>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7fe fe46 	bl	8001900 <HAL_InitTick>

  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40022000 	.word	0x40022000
 8002c84:	40021000 	.word	0x40021000
 8002c88:	08005690 	.word	0x08005690
 8002c8c:	20000000 	.word	0x20000000
 8002c90:	20000004 	.word	0x20000004

08002c94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c94:	b490      	push	{r4, r7}
 8002c96:	b08a      	sub	sp, #40	; 0x28
 8002c98:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002c9a:	4b29      	ldr	r3, [pc, #164]	; (8002d40 <HAL_RCC_GetSysClockFreq+0xac>)
 8002c9c:	1d3c      	adds	r4, r7, #4
 8002c9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ca0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ca4:	f240 2301 	movw	r3, #513	; 0x201
 8002ca8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002caa:	2300      	movs	r3, #0
 8002cac:	61fb      	str	r3, [r7, #28]
 8002cae:	2300      	movs	r3, #0
 8002cb0:	61bb      	str	r3, [r7, #24]
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002cbe:	4b21      	ldr	r3, [pc, #132]	; (8002d44 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	f003 030c 	and.w	r3, r3, #12
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	d002      	beq.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x40>
 8002cce:	2b08      	cmp	r3, #8
 8002cd0:	d003      	beq.n	8002cda <HAL_RCC_GetSysClockFreq+0x46>
 8002cd2:	e02b      	b.n	8002d2c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cd4:	4b1c      	ldr	r3, [pc, #112]	; (8002d48 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002cd6:	623b      	str	r3, [r7, #32]
      break;
 8002cd8:	e02b      	b.n	8002d32 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	0c9b      	lsrs	r3, r3, #18
 8002cde:	f003 030f 	and.w	r3, r3, #15
 8002ce2:	3328      	adds	r3, #40	; 0x28
 8002ce4:	443b      	add	r3, r7
 8002ce6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002cea:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d012      	beq.n	8002d1c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002cf6:	4b13      	ldr	r3, [pc, #76]	; (8002d44 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	0c5b      	lsrs	r3, r3, #17
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	3328      	adds	r3, #40	; 0x28
 8002d02:	443b      	add	r3, r7
 8002d04:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002d08:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	4a0e      	ldr	r2, [pc, #56]	; (8002d48 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d0e:	fb03 f202 	mul.w	r2, r3, r2
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d18:	627b      	str	r3, [r7, #36]	; 0x24
 8002d1a:	e004      	b.n	8002d26 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	4a0b      	ldr	r2, [pc, #44]	; (8002d4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d20:	fb02 f303 	mul.w	r3, r2, r3
 8002d24:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d28:	623b      	str	r3, [r7, #32]
      break;
 8002d2a:	e002      	b.n	8002d32 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d2c:	4b06      	ldr	r3, [pc, #24]	; (8002d48 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d2e:	623b      	str	r3, [r7, #32]
      break;
 8002d30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d32:	6a3b      	ldr	r3, [r7, #32]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3728      	adds	r7, #40	; 0x28
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bc90      	pop	{r4, r7}
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	08005660 	.word	0x08005660
 8002d44:	40021000 	.word	0x40021000
 8002d48:	007a1200 	.word	0x007a1200
 8002d4c:	003d0900 	.word	0x003d0900

08002d50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d54:	4b02      	ldr	r3, [pc, #8]	; (8002d60 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d56:	681b      	ldr	r3, [r3, #0]
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr
 8002d60:	20000000 	.word	0x20000000

08002d64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d68:	f7ff fff2 	bl	8002d50 <HAL_RCC_GetHCLKFreq>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	4b05      	ldr	r3, [pc, #20]	; (8002d84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	0a1b      	lsrs	r3, r3, #8
 8002d74:	f003 0307 	and.w	r3, r3, #7
 8002d78:	4903      	ldr	r1, [pc, #12]	; (8002d88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d7a:	5ccb      	ldrb	r3, [r1, r3]
 8002d7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40021000 	.word	0x40021000
 8002d88:	080056a0 	.word	0x080056a0

08002d8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d90:	f7ff ffde 	bl	8002d50 <HAL_RCC_GetHCLKFreq>
 8002d94:	4602      	mov	r2, r0
 8002d96:	4b05      	ldr	r3, [pc, #20]	; (8002dac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	0adb      	lsrs	r3, r3, #11
 8002d9c:	f003 0307 	and.w	r3, r3, #7
 8002da0:	4903      	ldr	r1, [pc, #12]	; (8002db0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002da2:	5ccb      	ldrb	r3, [r1, r3]
 8002da4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40021000 	.word	0x40021000
 8002db0:	080056a0 	.word	0x080056a0

08002db4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002dbc:	4b0a      	ldr	r3, [pc, #40]	; (8002de8 <RCC_Delay+0x34>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a0a      	ldr	r2, [pc, #40]	; (8002dec <RCC_Delay+0x38>)
 8002dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc6:	0a5b      	lsrs	r3, r3, #9
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	fb02 f303 	mul.w	r3, r2, r3
 8002dce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002dd0:	bf00      	nop
  }
  while (Delay --);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	1e5a      	subs	r2, r3, #1
 8002dd6:	60fa      	str	r2, [r7, #12]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1f9      	bne.n	8002dd0 <RCC_Delay+0x1c>
}
 8002ddc:	bf00      	nop
 8002dde:	bf00      	nop
 8002de0:	3714      	adds	r7, #20
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bc80      	pop	{r7}
 8002de6:	4770      	bx	lr
 8002de8:	20000000 	.word	0x20000000
 8002dec:	10624dd3 	.word	0x10624dd3

08002df0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	613b      	str	r3, [r7, #16]
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d07d      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e10:	4b4f      	ldr	r3, [pc, #316]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e12:	69db      	ldr	r3, [r3, #28]
 8002e14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d10d      	bne.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e1c:	4b4c      	ldr	r3, [pc, #304]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e1e:	69db      	ldr	r3, [r3, #28]
 8002e20:	4a4b      	ldr	r2, [pc, #300]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e26:	61d3      	str	r3, [r2, #28]
 8002e28:	4b49      	ldr	r3, [pc, #292]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e2a:	69db      	ldr	r3, [r3, #28]
 8002e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e30:	60bb      	str	r3, [r7, #8]
 8002e32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e34:	2301      	movs	r3, #1
 8002e36:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e38:	4b46      	ldr	r3, [pc, #280]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d118      	bne.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e44:	4b43      	ldr	r3, [pc, #268]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a42      	ldr	r2, [pc, #264]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e4e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e50:	f7fe fd98 	bl	8001984 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e56:	e008      	b.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e58:	f7fe fd94 	bl	8001984 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b64      	cmp	r3, #100	; 0x64
 8002e64:	d901      	bls.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e06d      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e6a:	4b3a      	ldr	r3, [pc, #232]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d0f0      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e76:	4b36      	ldr	r3, [pc, #216]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e7e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d02e      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d027      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e94:	4b2e      	ldr	r3, [pc, #184]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e9c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e9e:	4b2e      	ldr	r3, [pc, #184]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ea4:	4b2c      	ldr	r3, [pc, #176]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002eaa:	4a29      	ldr	r2, [pc, #164]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d014      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eba:	f7fe fd63 	bl	8001984 <HAL_GetTick>
 8002ebe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ec0:	e00a      	b.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ec2:	f7fe fd5f 	bl	8001984 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d901      	bls.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e036      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed8:	4b1d      	ldr	r3, [pc, #116]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d0ee      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ee4:	4b1a      	ldr	r3, [pc, #104]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	4917      	ldr	r1, [pc, #92]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ef6:	7dfb      	ldrb	r3, [r7, #23]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d105      	bne.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002efc:	4b14      	ldr	r3, [pc, #80]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	4a13      	ldr	r2, [pc, #76]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f06:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d008      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f14:	4b0e      	ldr	r3, [pc, #56]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	490b      	ldr	r1, [pc, #44]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0310 	and.w	r3, r3, #16
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d008      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f32:	4b07      	ldr	r3, [pc, #28]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	4904      	ldr	r1, [pc, #16]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3718      	adds	r7, #24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	40021000 	.word	0x40021000
 8002f54:	40007000 	.word	0x40007000
 8002f58:	42420440 	.word	0x42420440

08002f5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e07e      	b.n	800306c <HAL_SPI_Init+0x110>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d108      	bne.n	8002f88 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f7e:	d009      	beq.n	8002f94 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	61da      	str	r2, [r3, #28]
 8002f86:	e005      	b.n	8002f94 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d106      	bne.n	8002fae <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f7fe fa89 	bl	80014c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fc4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002fd6:	431a      	orrs	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fe0:	431a      	orrs	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	431a      	orrs	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ffe:	431a      	orrs	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	69db      	ldr	r3, [r3, #28]
 8003004:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003008:	431a      	orrs	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003012:	ea42 0103 	orr.w	r1, r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	430a      	orrs	r2, r1
 8003024:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	0c1a      	lsrs	r2, r3, #16
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f002 0204 	and.w	r2, r2, #4
 8003034:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800303e:	d105      	bne.n	800304c <HAL_SPI_Init+0xf0>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	b292      	uxth	r2, r2
 800304a:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	69da      	ldr	r2, [r3, #28]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800305a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3708      	adds	r7, #8
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b088      	sub	sp, #32
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	603b      	str	r3, [r7, #0]
 8003080:	4613      	mov	r3, r2
 8003082:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003084:	2300      	movs	r3, #0
 8003086:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800308e:	2b01      	cmp	r3, #1
 8003090:	d101      	bne.n	8003096 <HAL_SPI_Transmit+0x22>
 8003092:	2302      	movs	r3, #2
 8003094:	e148      	b.n	8003328 <HAL_SPI_Transmit+0x2b4>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800309e:	f7fe fc71 	bl	8001984 <HAL_GetTick>
 80030a2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80030a4:	88fb      	ldrh	r3, [r7, #6]
 80030a6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d002      	beq.n	80030ba <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80030b4:	2302      	movs	r3, #2
 80030b6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80030b8:	e12d      	b.n	8003316 <HAL_SPI_Transmit+0x2a2>
  }

  if ((pData == NULL) || (Size == 0U))
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d002      	beq.n	80030c6 <HAL_SPI_Transmit+0x52>
 80030c0:	88fb      	ldrh	r3, [r7, #6]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d102      	bne.n	80030cc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80030ca:	e124      	b.n	8003316 <HAL_SPI_Transmit+0x2a2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2203      	movs	r2, #3
 80030d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	68ba      	ldr	r2, [r7, #8]
 80030de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	88fa      	ldrh	r2, [r7, #6]
 80030e4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	88fa      	ldrh	r2, [r7, #6]
 80030ea:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003112:	d10f      	bne.n	8003134 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003122:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003132:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003138:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800313c:	d10f      	bne.n	800315e <HAL_SPI_Transmit+0xea>
  {
    SPI_RESET_CRC(hspi);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800315c:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003168:	2b40      	cmp	r3, #64	; 0x40
 800316a:	d007      	beq.n	800317c <HAL_SPI_Transmit+0x108>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800317a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003184:	d14b      	bne.n	800321e <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d002      	beq.n	8003194 <HAL_SPI_Transmit+0x120>
 800318e:	8afb      	ldrh	r3, [r7, #22]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d13e      	bne.n	8003212 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003198:	881a      	ldrh	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a4:	1c9a      	adds	r2, r3, #2
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	3b01      	subs	r3, #1
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80031b8:	e02b      	b.n	8003212 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d112      	bne.n	80031ee <HAL_SPI_Transmit+0x17a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031cc:	881a      	ldrh	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d8:	1c9a      	adds	r2, r3, #2
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	3b01      	subs	r3, #1
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	86da      	strh	r2, [r3, #54]	; 0x36
 80031ec:	e011      	b.n	8003212 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031ee:	f7fe fbc9 	bl	8001984 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d803      	bhi.n	8003206 <HAL_SPI_Transmit+0x192>
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003204:	d102      	bne.n	800320c <HAL_SPI_Transmit+0x198>
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d102      	bne.n	8003212 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003210:	e081      	b.n	8003316 <HAL_SPI_Transmit+0x2a2>
    while (hspi->TxXferCount > 0U)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003216:	b29b      	uxth	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1ce      	bne.n	80031ba <HAL_SPI_Transmit+0x146>
 800321c:	e04c      	b.n	80032b8 <HAL_SPI_Transmit+0x244>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d002      	beq.n	800322c <HAL_SPI_Transmit+0x1b8>
 8003226:	8afb      	ldrh	r3, [r7, #22]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d140      	bne.n	80032ae <HAL_SPI_Transmit+0x23a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	330c      	adds	r3, #12
 8003236:	7812      	ldrb	r2, [r2, #0]
 8003238:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	1c5a      	adds	r2, r3, #1
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003248:	b29b      	uxth	r3, r3
 800324a:	3b01      	subs	r3, #1
 800324c:	b29a      	uxth	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003252:	e02c      	b.n	80032ae <HAL_SPI_Transmit+0x23a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b02      	cmp	r3, #2
 8003260:	d113      	bne.n	800328a <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	330c      	adds	r3, #12
 800326c:	7812      	ldrb	r2, [r2, #0]
 800326e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003274:	1c5a      	adds	r2, r3, #1
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800327e:	b29b      	uxth	r3, r3
 8003280:	3b01      	subs	r3, #1
 8003282:	b29a      	uxth	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	86da      	strh	r2, [r3, #54]	; 0x36
 8003288:	e011      	b.n	80032ae <HAL_SPI_Transmit+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800328a:	f7fe fb7b 	bl	8001984 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	429a      	cmp	r2, r3
 8003298:	d803      	bhi.n	80032a2 <HAL_SPI_Transmit+0x22e>
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a0:	d102      	bne.n	80032a8 <HAL_SPI_Transmit+0x234>
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d102      	bne.n	80032ae <HAL_SPI_Transmit+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80032ac:	e033      	b.n	8003316 <HAL_SPI_Transmit+0x2a2>
    while (hspi->TxXferCount > 0U)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d1cd      	bne.n	8003254 <HAL_SPI_Transmit+0x1e0>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032c0:	d107      	bne.n	80032d2 <HAL_SPI_Transmit+0x25e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80032d0:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	6839      	ldr	r1, [r7, #0]
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f000 fcec 	bl	8003cb4 <SPI_EndRxTxTransaction>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d002      	beq.n	80032e8 <HAL_SPI_Transmit+0x274>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2220      	movs	r2, #32
 80032e6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d10a      	bne.n	8003306 <HAL_SPI_Transmit+0x292>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032f0:	2300      	movs	r3, #0
 80032f2:	613b      	str	r3, [r7, #16]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	613b      	str	r3, [r7, #16]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	613b      	str	r3, [r7, #16]
 8003304:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800330a:	2b00      	cmp	r3, #0
 800330c:	d002      	beq.n	8003314 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	77fb      	strb	r3, [r7, #31]
 8003312:	e000      	b.n	8003316 <HAL_SPI_Transmit+0x2a2>
  }

error:
 8003314:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003326:	7ffb      	ldrb	r3, [r7, #31]
}
 8003328:	4618      	mov	r0, r3
 800332a:	3720      	adds	r7, #32
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b08a      	sub	sp, #40	; 0x28
 8003334:	af02      	add	r7, sp, #8
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	603b      	str	r3, [r7, #0]
 800333c:	4613      	mov	r3, r2
 800333e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8003340:	2300      	movs	r3, #0
 8003342:	617b      	str	r3, [r7, #20]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003344:	2300      	movs	r3, #0
 8003346:	77fb      	strb	r3, [r7, #31]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003350:	d112      	bne.n	8003378 <HAL_SPI_Receive+0x48>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10e      	bne.n	8003378 <HAL_SPI_Receive+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2204      	movs	r2, #4
 800335e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003362:	88fa      	ldrh	r2, [r7, #6]
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	9300      	str	r3, [sp, #0]
 8003368:	4613      	mov	r3, r2
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	68b9      	ldr	r1, [r7, #8]
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f000 f98f 	bl	8003692 <HAL_SPI_TransmitReceive>
 8003374:	4603      	mov	r3, r0
 8003376:	e188      	b.n	800368a <HAL_SPI_Receive+0x35a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800337e:	2b01      	cmp	r3, #1
 8003380:	d101      	bne.n	8003386 <HAL_SPI_Receive+0x56>
 8003382:	2302      	movs	r3, #2
 8003384:	e181      	b.n	800368a <HAL_SPI_Receive+0x35a>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800338e:	f7fe faf9 	bl	8001984 <HAL_GetTick>
 8003392:	61b8      	str	r0, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2b01      	cmp	r3, #1
 800339e:	d002      	beq.n	80033a6 <HAL_SPI_Receive+0x76>
  {
    errorcode = HAL_BUSY;
 80033a0:	2302      	movs	r3, #2
 80033a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80033a4:	e168      	b.n	8003678 <HAL_SPI_Receive+0x348>
  }

  if ((pData == NULL) || (Size == 0U))
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d002      	beq.n	80033b2 <HAL_SPI_Receive+0x82>
 80033ac:	88fb      	ldrh	r3, [r7, #6]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d102      	bne.n	80033b8 <HAL_SPI_Receive+0x88>
  {
    errorcode = HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80033b6:	e15f      	b.n	8003678 <HAL_SPI_Receive+0x348>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2204      	movs	r2, #4
 80033bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	68ba      	ldr	r2, [r7, #8]
 80033ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	88fa      	ldrh	r2, [r7, #6]
 80033d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	88fa      	ldrh	r2, [r7, #6]
 80033d6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033fe:	d116      	bne.n	800342e <HAL_SPI_Receive+0xfe>
  {
    SPI_RESET_CRC(hspi);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800341e:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003424:	b29b      	uxth	r3, r3
 8003426:	3b01      	subs	r3, #1
 8003428:	b29a      	uxth	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	87da      	strh	r2, [r3, #62]	; 0x3e
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003436:	d10f      	bne.n	8003458 <HAL_SPI_Receive+0x128>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003446:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003456:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003462:	2b40      	cmp	r3, #64	; 0x40
 8003464:	d007      	beq.n	8003476 <HAL_SPI_Receive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003474:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d162      	bne.n	8003544 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800347e:	e02e      	b.n	80034de <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b01      	cmp	r3, #1
 800348c:	d115      	bne.n	80034ba <HAL_SPI_Receive+0x18a>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f103 020c 	add.w	r2, r3, #12
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800349a:	7812      	ldrb	r2, [r2, #0]
 800349c:	b2d2      	uxtb	r2, r2
 800349e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a4:	1c5a      	adds	r2, r3, #1
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	3b01      	subs	r3, #1
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80034b8:	e011      	b.n	80034de <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034ba:	f7fe fa63 	bl	8001984 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d803      	bhi.n	80034d2 <HAL_SPI_Receive+0x1a2>
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d0:	d102      	bne.n	80034d8 <HAL_SPI_Receive+0x1a8>
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d102      	bne.n	80034de <HAL_SPI_Receive+0x1ae>
        {
          errorcode = HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80034dc:	e0cc      	b.n	8003678 <HAL_SPI_Receive+0x348>
    while (hspi->RxXferCount > 0U)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1cb      	bne.n	8003480 <HAL_SPI_Receive+0x150>
 80034e8:	e031      	b.n	800354e <HAL_SPI_Receive+0x21e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f003 0301 	and.w	r3, r3, #1
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d113      	bne.n	8003520 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68da      	ldr	r2, [r3, #12]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003502:	b292      	uxth	r2, r2
 8003504:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350a:	1c9a      	adds	r2, r3, #2
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003514:	b29b      	uxth	r3, r3
 8003516:	3b01      	subs	r3, #1
 8003518:	b29a      	uxth	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800351e:	e011      	b.n	8003544 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003520:	f7fe fa30 	bl	8001984 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	429a      	cmp	r2, r3
 800352e:	d803      	bhi.n	8003538 <HAL_SPI_Receive+0x208>
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003536:	d102      	bne.n	800353e <HAL_SPI_Receive+0x20e>
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d102      	bne.n	8003544 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003542:	e099      	b.n	8003678 <HAL_SPI_Receive+0x348>
    while (hspi->RxXferCount > 0U)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003548:	b29b      	uxth	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1cd      	bne.n	80034ea <HAL_SPI_Receive+0x1ba>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003552:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003556:	d153      	bne.n	8003600 <HAL_SPI_Receive+0x2d0>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003566:	601a      	str	r2, [r3, #0]

    /* Check if CRCNEXT is well reseted by hardware */
    if (READ_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT))
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d007      	beq.n	8003586 <HAL_SPI_Receive+0x256>
    {
      /* Workaround to force CRCNEXT bit to zero in case of CRCNEXT is not reset automatically by hardware */
      CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003584:	601a      	str	r2, [r3, #0]
    }
    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	9300      	str	r3, [sp, #0]
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	2201      	movs	r2, #1
 800358e:	2101      	movs	r1, #1
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f000 fab5 	bl	8003b00 <SPI_WaitFlagStateUntilTimeout>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d002      	beq.n	80035a2 <HAL_SPI_Receive+0x272>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	77fb      	strb	r3, [r7, #31]
      goto error;
 80035a0:	e06a      	b.n	8003678 <HAL_SPI_Receive+0x348>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035aa:	d107      	bne.n	80035bc <HAL_SPI_Receive+0x28c>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68da      	ldr	r2, [r3, #12]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b6:	b292      	uxth	r2, r2
 80035b8:	801a      	strh	r2, [r3, #0]
 80035ba:	e008      	b.n	80035ce <HAL_SPI_Receive+0x29e>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f103 020c 	add.w	r2, r3, #12
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c8:	7812      	ldrb	r2, [r2, #0]
 80035ca:	b2d2      	uxtb	r2, r2
 80035cc:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	2201      	movs	r2, #1
 80035d6:	2101      	movs	r1, #1
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f000 fa91 	bl	8003b00 <SPI_WaitFlagStateUntilTimeout>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d008      	beq.n	80035f6 <HAL_SPI_Receive+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e8:	f043 0202 	orr.w	r2, r3, #2
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	77fb      	strb	r3, [r7, #31]
      goto error;
 80035f4:	e040      	b.n	8003678 <HAL_SPI_Receive+0x348>
    }

    /* Read CRC to Flush DR and RXNE flag */
    tmpreg = READ_REG(hspi->Instance->DR);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	617b      	str	r3, [r7, #20]
    /* To avoid GCC warning */
    UNUSED(tmpreg);
 80035fe:	697b      	ldr	r3, [r7, #20]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	6839      	ldr	r1, [r7, #0]
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f000 fb03 	bl	8003c10 <SPI_EndRxTransaction>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d002      	beq.n	8003616 <HAL_SPI_Receive+0x2e6>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2220      	movs	r2, #32
 8003614:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f003 0310 	and.w	r3, r3, #16
 8003620:	2b10      	cmp	r3, #16
 8003622:	d121      	bne.n	8003668 <HAL_SPI_Receive+0x338>
  {
    /* Check if CRC error is valid or not (workaround to be applied or not) */
    if (SPI_ISCRCErrorValid(hspi) == SPI_VALID_CRC_ERROR)
 8003624:	68f8      	ldr	r0, [r7, #12]
 8003626:	f000 fb63 	bl	8003cf0 <SPI_ISCRCErrorValid>
 800362a:	4603      	mov	r3, r0
 800362c:	2b01      	cmp	r3, #1
 800362e:	d116      	bne.n	800365e <HAL_SPI_Receive+0x32e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003634:	f043 0202 	orr.w	r2, r3, #2
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Reset CRC Calculation */
      SPI_RESET_CRC(hspi);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800364a:	601a      	str	r2, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800365a:	601a      	str	r2, [r3, #0]
 800365c:	e004      	b.n	8003668 <HAL_SPI_Receive+0x338>
    }
    else
    {
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8003666:	609a      	str	r2, [r3, #8]
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800366c:	2b00      	cmp	r3, #0
 800366e:	d002      	beq.n	8003676 <HAL_SPI_Receive+0x346>
  {
    errorcode = HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	77fb      	strb	r3, [r7, #31]
 8003674:	e000      	b.n	8003678 <HAL_SPI_Receive+0x348>
  }

error :
 8003676:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003688:	7ffb      	ldrb	r3, [r7, #31]
}
 800368a:	4618      	mov	r0, r3
 800368c:	3720      	adds	r7, #32
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b08e      	sub	sp, #56	; 0x38
 8003696:	af02      	add	r7, sp, #8
 8003698:	60f8      	str	r0, [r7, #12]
 800369a:	60b9      	str	r1, [r7, #8]
 800369c:	607a      	str	r2, [r7, #4]
 800369e:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_TxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 80036a0:	2300      	movs	r3, #0
 80036a2:	617b      	str	r3, [r7, #20]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80036a4:	2301      	movs	r3, #1
 80036a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80036a8:	2300      	movs	r3, #0
 80036aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d101      	bne.n	80036bc <HAL_SPI_TransmitReceive+0x2a>
 80036b8:	2302      	movs	r3, #2
 80036ba:	e20f      	b.n	8003adc <HAL_SPI_TransmitReceive+0x44a>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036c4:	f7fe f95e 	bl	8001984 <HAL_GetTick>
 80036c8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80036da:	887b      	ldrh	r3, [r7, #2]
 80036dc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80036de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d00f      	beq.n	8003706 <HAL_SPI_TransmitReceive+0x74>
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036ec:	d107      	bne.n	80036fe <HAL_SPI_TransmitReceive+0x6c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d103      	bne.n	80036fe <HAL_SPI_TransmitReceive+0x6c>
 80036f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036fa:	2b04      	cmp	r3, #4
 80036fc:	d003      	beq.n	8003706 <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 80036fe:	2302      	movs	r3, #2
 8003700:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003704:	e1e0      	b.n	8003ac8 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d005      	beq.n	8003718 <HAL_SPI_TransmitReceive+0x86>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d002      	beq.n	8003718 <HAL_SPI_TransmitReceive+0x86>
 8003712:	887b      	ldrh	r3, [r7, #2]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d103      	bne.n	8003720 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800371e:	e1d3      	b.n	8003ac8 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b04      	cmp	r3, #4
 800372a:	d003      	beq.n	8003734 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2205      	movs	r2, #5
 8003730:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	887a      	ldrh	r2, [r7, #2]
 8003744:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	887a      	ldrh	r2, [r7, #2]
 800374a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	68ba      	ldr	r2, [r7, #8]
 8003750:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	887a      	ldrh	r2, [r7, #2]
 8003756:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	887a      	ldrh	r2, [r7, #2]
 800375c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003772:	d10f      	bne.n	8003794 <HAL_SPI_TransmitReceive+0x102>
  {
    SPI_RESET_CRC(hspi);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003782:	601a      	str	r2, [r3, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003792:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800379e:	2b40      	cmp	r3, #64	; 0x40
 80037a0:	d007      	beq.n	80037b2 <HAL_SPI_TransmitReceive+0x120>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037ba:	f040 808b 	bne.w	80038d4 <HAL_SPI_TransmitReceive+0x242>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d002      	beq.n	80037cc <HAL_SPI_TransmitReceive+0x13a>
 80037c6:	8b7b      	ldrh	r3, [r7, #26]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d178      	bne.n	80038be <HAL_SPI_TransmitReceive+0x22c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d0:	881a      	ldrh	r2, [r3, #0]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037dc:	1c9a      	adds	r2, r3, #2
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	3b01      	subs	r3, #1
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037f0:	e065      	b.n	80038be <HAL_SPI_TransmitReceive+0x22c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d12d      	bne.n	800385c <HAL_SPI_TransmitReceive+0x1ca>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003804:	b29b      	uxth	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d028      	beq.n	800385c <HAL_SPI_TransmitReceive+0x1ca>
 800380a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800380c:	2b01      	cmp	r3, #1
 800380e:	d125      	bne.n	800385c <HAL_SPI_TransmitReceive+0x1ca>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003814:	881a      	ldrh	r2, [r3, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003820:	1c9a      	adds	r2, r3, #2
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800382a:	b29b      	uxth	r3, r3
 800382c:	3b01      	subs	r3, #1
 800382e:	b29a      	uxth	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003834:	2300      	movs	r3, #0
 8003836:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800383c:	b29b      	uxth	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10c      	bne.n	800385c <HAL_SPI_TransmitReceive+0x1ca>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003846:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800384a:	d107      	bne.n	800385c <HAL_SPI_TransmitReceive+0x1ca>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800385a:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b01      	cmp	r3, #1
 8003868:	d119      	bne.n	800389e <HAL_SPI_TransmitReceive+0x20c>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800386e:	b29b      	uxth	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	d014      	beq.n	800389e <HAL_SPI_TransmitReceive+0x20c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68da      	ldr	r2, [r3, #12]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387e:	b292      	uxth	r2, r2
 8003880:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003886:	1c9a      	adds	r2, r3, #2
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003890:	b29b      	uxth	r3, r3
 8003892:	3b01      	subs	r3, #1
 8003894:	b29a      	uxth	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800389a:	2301      	movs	r3, #1
 800389c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800389e:	f7fe f871 	bl	8001984 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d807      	bhi.n	80038be <HAL_SPI_TransmitReceive+0x22c>
 80038ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b4:	d003      	beq.n	80038be <HAL_SPI_TransmitReceive+0x22c>
      {
        errorcode = HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80038bc:	e104      	b.n	8003ac8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d194      	bne.n	80037f2 <HAL_SPI_TransmitReceive+0x160>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d18f      	bne.n	80037f2 <HAL_SPI_TransmitReceive+0x160>
 80038d2:	e08e      	b.n	80039f2 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d002      	beq.n	80038e2 <HAL_SPI_TransmitReceive+0x250>
 80038dc:	8b7b      	ldrh	r3, [r7, #26]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d17d      	bne.n	80039de <HAL_SPI_TransmitReceive+0x34c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	330c      	adds	r3, #12
 80038ec:	7812      	ldrb	r2, [r2, #0]
 80038ee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f4:	1c5a      	adds	r2, r3, #1
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038fe:	b29b      	uxth	r3, r3
 8003900:	3b01      	subs	r3, #1
 8003902:	b29a      	uxth	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003908:	e069      	b.n	80039de <HAL_SPI_TransmitReceive+0x34c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b02      	cmp	r3, #2
 8003916:	d12e      	bne.n	8003976 <HAL_SPI_TransmitReceive+0x2e4>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800391c:	b29b      	uxth	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d029      	beq.n	8003976 <HAL_SPI_TransmitReceive+0x2e4>
 8003922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003924:	2b01      	cmp	r3, #1
 8003926:	d126      	bne.n	8003976 <HAL_SPI_TransmitReceive+0x2e4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	330c      	adds	r3, #12
 8003932:	7812      	ldrb	r2, [r2, #0]
 8003934:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393a:	1c5a      	adds	r2, r3, #1
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003944:	b29b      	uxth	r3, r3
 8003946:	3b01      	subs	r3, #1
 8003948:	b29a      	uxth	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800394e:	2300      	movs	r3, #0
 8003950:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003956:	b29b      	uxth	r3, r3
 8003958:	2b00      	cmp	r3, #0
 800395a:	d10c      	bne.n	8003976 <HAL_SPI_TransmitReceive+0x2e4>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003960:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003964:	d107      	bne.n	8003976 <HAL_SPI_TransmitReceive+0x2e4>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003974:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f003 0301 	and.w	r3, r3, #1
 8003980:	2b01      	cmp	r3, #1
 8003982:	d119      	bne.n	80039b8 <HAL_SPI_TransmitReceive+0x326>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003988:	b29b      	uxth	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d014      	beq.n	80039b8 <HAL_SPI_TransmitReceive+0x326>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68da      	ldr	r2, [r3, #12]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003998:	b2d2      	uxtb	r2, r2
 800399a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a0:	1c5a      	adds	r2, r3, #1
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	3b01      	subs	r3, #1
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80039b4:	2301      	movs	r3, #1
 80039b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80039b8:	f7fd ffe4 	bl	8001984 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d803      	bhi.n	80039d0 <HAL_SPI_TransmitReceive+0x33e>
 80039c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ce:	d102      	bne.n	80039d6 <HAL_SPI_TransmitReceive+0x344>
 80039d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d103      	bne.n	80039de <HAL_SPI_TransmitReceive+0x34c>
      {
        errorcode = HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80039dc:	e074      	b.n	8003ac8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d190      	bne.n	800390a <HAL_SPI_TransmitReceive+0x278>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d18b      	bne.n	800390a <HAL_SPI_TransmitReceive+0x278>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039fa:	d119      	bne.n	8003a30 <HAL_SPI_TransmitReceive+0x39e>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80039fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fe:	9300      	str	r3, [sp, #0]
 8003a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a02:	2201      	movs	r2, #1
 8003a04:	2101      	movs	r1, #1
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f000 f87a 	bl	8003b00 <SPI_WaitFlagStateUntilTimeout>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d009      	beq.n	8003a26 <HAL_SPI_TransmitReceive+0x394>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a16:	f043 0202 	orr.w	r2, r3, #2
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 8003a24:	e050      	b.n	8003ac8 <HAL_SPI_TransmitReceive+0x436>
    }
    /* Read CRC */
    tmpreg = READ_REG(hspi->Instance->DR);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	617b      	str	r3, [r7, #20]
    /* To avoid GCC warning */
    UNUSED(tmpreg);
 8003a2e:	697b      	ldr	r3, [r7, #20]
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f003 0310 	and.w	r3, r3, #16
 8003a3a:	2b10      	cmp	r3, #16
 8003a3c:	d124      	bne.n	8003a88 <HAL_SPI_TransmitReceive+0x3f6>
  {
    /* Check if CRC error is valid or not (workaround to be applied or not) */
    if (SPI_ISCRCErrorValid(hspi) == SPI_VALID_CRC_ERROR)
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f000 f956 	bl	8003cf0 <SPI_ISCRCErrorValid>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d119      	bne.n	8003a7e <HAL_SPI_TransmitReceive+0x3ec>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a4e:	f043 0202 	orr.w	r2, r3, #2
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	655a      	str	r2, [r3, #84]	; 0x54

      /* Reset CRC Calculation */
      SPI_RESET_CRC(hspi);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a74:	601a      	str	r2, [r3, #0]

      errorcode = HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a7c:	e004      	b.n	8003a88 <HAL_SPI_TransmitReceive+0x3f6>
    }
    else
    {
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8003a86:	609a      	str	r2, [r3, #8]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a8a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f000 f911 	bl	8003cb4 <SPI_EndRxTxTransaction>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d006      	beq.n	8003aa6 <HAL_SPI_TransmitReceive+0x414>
  {
    errorcode = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2220      	movs	r2, #32
 8003aa2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003aa4:	e010      	b.n	8003ac8 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10b      	bne.n	8003ac6 <HAL_SPI_TransmitReceive+0x434>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003aae:	2300      	movs	r3, #0
 8003ab0:	613b      	str	r3, [r7, #16]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	613b      	str	r3, [r7, #16]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	613b      	str	r3, [r7, #16]
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	e000      	b.n	8003ac8 <HAL_SPI_TransmitReceive+0x436>
  }

error :
 8003ac6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ad8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3730      	adds	r7, #48	; 0x30
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003af2:	b2db      	uxtb	r3, r3
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bc80      	pop	{r7}
 8003afc:	4770      	bx	lr
	...

08003b00 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b088      	sub	sp, #32
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	603b      	str	r3, [r7, #0]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b10:	f7fd ff38 	bl	8001984 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b18:	1a9b      	subs	r3, r3, r2
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b20:	f7fd ff30 	bl	8001984 <HAL_GetTick>
 8003b24:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b26:	4b39      	ldr	r3, [pc, #228]	; (8003c0c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	015b      	lsls	r3, r3, #5
 8003b2c:	0d1b      	lsrs	r3, r3, #20
 8003b2e:	69fa      	ldr	r2, [r7, #28]
 8003b30:	fb02 f303 	mul.w	r3, r2, r3
 8003b34:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b36:	e054      	b.n	8003be2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3e:	d050      	beq.n	8003be2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b40:	f7fd ff20 	bl	8001984 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	69fa      	ldr	r2, [r7, #28]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d902      	bls.n	8003b56 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d13d      	bne.n	8003bd2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	685a      	ldr	r2, [r3, #4]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b64:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b6e:	d111      	bne.n	8003b94 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b78:	d004      	beq.n	8003b84 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b82:	d107      	bne.n	8003b94 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b92:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b9c:	d10f      	bne.n	8003bbe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bac:	601a      	str	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bbc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e017      	b.n	8003c02 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d101      	bne.n	8003bdc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	3b01      	subs	r3, #1
 8003be0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	689a      	ldr	r2, [r3, #8]
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	4013      	ands	r3, r2
 8003bec:	68ba      	ldr	r2, [r7, #8]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	bf0c      	ite	eq
 8003bf2:	2301      	moveq	r3, #1
 8003bf4:	2300      	movne	r3, #0
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	79fb      	ldrb	r3, [r7, #7]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d19b      	bne.n	8003b38 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3720      	adds	r7, #32
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	20000000 	.word	0x20000000

08003c10 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af02      	add	r7, sp, #8
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c24:	d111      	bne.n	8003c4a <SPI_EndRxTransaction+0x3a>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c2e:	d004      	beq.n	8003c3a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c38:	d107      	bne.n	8003c4a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c48:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c52:	d117      	bne.n	8003c84 <SPI_EndRxTransaction+0x74>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c5c:	d112      	bne.n	8003c84 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	9300      	str	r3, [sp, #0]
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	2200      	movs	r2, #0
 8003c66:	2101      	movs	r1, #1
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f7ff ff49 	bl	8003b00 <SPI_WaitFlagStateUntilTimeout>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d01a      	beq.n	8003caa <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c78:	f043 0220 	orr.w	r2, r3, #32
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e013      	b.n	8003cac <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	9300      	str	r3, [sp, #0]
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	2180      	movs	r1, #128	; 0x80
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f7ff ff36 	bl	8003b00 <SPI_WaitFlagStateUntilTimeout>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d007      	beq.n	8003caa <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c9e:	f043 0220 	orr.w	r2, r3, #32
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e000      	b.n	8003cac <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af02      	add	r7, sp, #8
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	2180      	movs	r1, #128	; 0x80
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f7ff ff18 	bl	8003b00 <SPI_WaitFlagStateUntilTimeout>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d007      	beq.n	8003ce6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cda:	f043 0220 	orr.w	r2, r3, #32
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e000      	b.n	8003ce8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <SPI_ISCRCErrorValid>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval CRC error validity (SPI_INVALID_CRC_ERROR or SPI_VALID_CRC_ERROR).
  */
uint8_t SPI_ISCRCErrorValid(SPI_HandleTypeDef *hspi)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  }
#endif
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);

  return (SPI_VALID_CRC_ERROR);
 8003cf8:	2301      	movs	r3, #1
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bc80      	pop	{r7}
 8003d02:	4770      	bx	lr

08003d04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e03f      	b.n	8003d96 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d106      	bne.n	8003d30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f7fd fc12 	bl	8001554 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2224      	movs	r2, #36	; 0x24
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68da      	ldr	r2, [r3, #12]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f000 f905 	bl	8003f58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	691a      	ldr	r2, [r3, #16]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	695a      	ldr	r2, [r3, #20]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68da      	ldr	r2, [r3, #12]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2220      	movs	r2, #32
 8003d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3708      	adds	r7, #8
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b08a      	sub	sp, #40	; 0x28
 8003da2:	af02      	add	r7, sp, #8
 8003da4:	60f8      	str	r0, [r7, #12]
 8003da6:	60b9      	str	r1, [r7, #8]
 8003da8:	603b      	str	r3, [r7, #0]
 8003daa:	4613      	mov	r3, r2
 8003dac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003dae:	2300      	movs	r3, #0
 8003db0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b20      	cmp	r3, #32
 8003dbc:	d17c      	bne.n	8003eb8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d002      	beq.n	8003dca <HAL_UART_Transmit+0x2c>
 8003dc4:	88fb      	ldrh	r3, [r7, #6]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e075      	b.n	8003eba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d101      	bne.n	8003ddc <HAL_UART_Transmit+0x3e>
 8003dd8:	2302      	movs	r3, #2
 8003dda:	e06e      	b.n	8003eba <HAL_UART_Transmit+0x11c>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2221      	movs	r2, #33	; 0x21
 8003dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003df2:	f7fd fdc7 	bl	8001984 <HAL_GetTick>
 8003df6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	88fa      	ldrh	r2, [r7, #6]
 8003dfc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	88fa      	ldrh	r2, [r7, #6]
 8003e02:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e0c:	d108      	bne.n	8003e20 <HAL_UART_Transmit+0x82>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d104      	bne.n	8003e20 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003e16:	2300      	movs	r3, #0
 8003e18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	61bb      	str	r3, [r7, #24]
 8003e1e:	e003      	b.n	8003e28 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e24:	2300      	movs	r3, #0
 8003e26:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003e30:	e02a      	b.n	8003e88 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	9300      	str	r3, [sp, #0]
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	2180      	movs	r1, #128	; 0x80
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	f000 f840 	bl	8003ec2 <UART_WaitOnFlagUntilTimeout>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d001      	beq.n	8003e4c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e036      	b.n	8003eba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10b      	bne.n	8003e6a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	881b      	ldrh	r3, [r3, #0]
 8003e56:	461a      	mov	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e60:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	3302      	adds	r3, #2
 8003e66:	61bb      	str	r3, [r7, #24]
 8003e68:	e007      	b.n	8003e7a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	781a      	ldrb	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	3301      	adds	r3, #1
 8003e78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	3b01      	subs	r3, #1
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1cf      	bne.n	8003e32 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	2140      	movs	r1, #64	; 0x40
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f000 f810 	bl	8003ec2 <UART_WaitOnFlagUntilTimeout>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e006      	b.n	8003eba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	e000      	b.n	8003eba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003eb8:	2302      	movs	r3, #2
  }
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3720      	adds	r7, #32
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b084      	sub	sp, #16
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	60f8      	str	r0, [r7, #12]
 8003eca:	60b9      	str	r1, [r7, #8]
 8003ecc:	603b      	str	r3, [r7, #0]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ed2:	e02c      	b.n	8003f2e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eda:	d028      	beq.n	8003f2e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d007      	beq.n	8003ef2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ee2:	f7fd fd4f 	bl	8001984 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d21d      	bcs.n	8003f2e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68da      	ldr	r2, [r3, #12]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f00:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	695a      	ldr	r2, [r3, #20]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 0201 	bic.w	r2, r2, #1
 8003f10:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2220      	movs	r2, #32
 8003f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2220      	movs	r2, #32
 8003f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e00f      	b.n	8003f4e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	4013      	ands	r3, r2
 8003f38:	68ba      	ldr	r2, [r7, #8]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	bf0c      	ite	eq
 8003f3e:	2301      	moveq	r3, #1
 8003f40:	2300      	movne	r3, #0
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	461a      	mov	r2, r3
 8003f46:	79fb      	ldrb	r3, [r7, #7]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d0c3      	beq.n	8003ed4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
	...

08003f58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	68da      	ldr	r2, [r3, #12]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	430a      	orrs	r2, r1
 8003f74:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	689a      	ldr	r2, [r3, #8]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003f92:	f023 030c 	bic.w	r3, r3, #12
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	6812      	ldr	r2, [r2, #0]
 8003f9a:	68b9      	ldr	r1, [r7, #8]
 8003f9c:	430b      	orrs	r3, r1
 8003f9e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	699a      	ldr	r2, [r3, #24]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a2c      	ldr	r2, [pc, #176]	; (800406c <UART_SetConfig+0x114>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d103      	bne.n	8003fc8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003fc0:	f7fe fee4 	bl	8002d8c <HAL_RCC_GetPCLK2Freq>
 8003fc4:	60f8      	str	r0, [r7, #12]
 8003fc6:	e002      	b.n	8003fce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003fc8:	f7fe fecc 	bl	8002d64 <HAL_RCC_GetPCLK1Freq>
 8003fcc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	4413      	add	r3, r2
 8003fd6:	009a      	lsls	r2, r3, #2
 8003fd8:	441a      	add	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe4:	4a22      	ldr	r2, [pc, #136]	; (8004070 <UART_SetConfig+0x118>)
 8003fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fea:	095b      	lsrs	r3, r3, #5
 8003fec:	0119      	lsls	r1, r3, #4
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	4413      	add	r3, r2
 8003ff6:	009a      	lsls	r2, r3, #2
 8003ff8:	441a      	add	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	fbb2 f2f3 	udiv	r2, r2, r3
 8004004:	4b1a      	ldr	r3, [pc, #104]	; (8004070 <UART_SetConfig+0x118>)
 8004006:	fba3 0302 	umull	r0, r3, r3, r2
 800400a:	095b      	lsrs	r3, r3, #5
 800400c:	2064      	movs	r0, #100	; 0x64
 800400e:	fb00 f303 	mul.w	r3, r0, r3
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	011b      	lsls	r3, r3, #4
 8004016:	3332      	adds	r3, #50	; 0x32
 8004018:	4a15      	ldr	r2, [pc, #84]	; (8004070 <UART_SetConfig+0x118>)
 800401a:	fba2 2303 	umull	r2, r3, r2, r3
 800401e:	095b      	lsrs	r3, r3, #5
 8004020:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004024:	4419      	add	r1, r3
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	4613      	mov	r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	4413      	add	r3, r2
 800402e:	009a      	lsls	r2, r3, #2
 8004030:	441a      	add	r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	fbb2 f2f3 	udiv	r2, r2, r3
 800403c:	4b0c      	ldr	r3, [pc, #48]	; (8004070 <UART_SetConfig+0x118>)
 800403e:	fba3 0302 	umull	r0, r3, r3, r2
 8004042:	095b      	lsrs	r3, r3, #5
 8004044:	2064      	movs	r0, #100	; 0x64
 8004046:	fb00 f303 	mul.w	r3, r0, r3
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	011b      	lsls	r3, r3, #4
 800404e:	3332      	adds	r3, #50	; 0x32
 8004050:	4a07      	ldr	r2, [pc, #28]	; (8004070 <UART_SetConfig+0x118>)
 8004052:	fba2 2303 	umull	r2, r3, r2, r3
 8004056:	095b      	lsrs	r3, r3, #5
 8004058:	f003 020f 	and.w	r2, r3, #15
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	440a      	add	r2, r1
 8004062:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004064:	bf00      	nop
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	40013800 	.word	0x40013800
 8004070:	51eb851f 	.word	0x51eb851f

08004074 <__errno>:
 8004074:	4b01      	ldr	r3, [pc, #4]	; (800407c <__errno+0x8>)
 8004076:	6818      	ldr	r0, [r3, #0]
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	2000000c 	.word	0x2000000c

08004080 <__libc_init_array>:
 8004080:	b570      	push	{r4, r5, r6, lr}
 8004082:	2600      	movs	r6, #0
 8004084:	4d0c      	ldr	r5, [pc, #48]	; (80040b8 <__libc_init_array+0x38>)
 8004086:	4c0d      	ldr	r4, [pc, #52]	; (80040bc <__libc_init_array+0x3c>)
 8004088:	1b64      	subs	r4, r4, r5
 800408a:	10a4      	asrs	r4, r4, #2
 800408c:	42a6      	cmp	r6, r4
 800408e:	d109      	bne.n	80040a4 <__libc_init_array+0x24>
 8004090:	f001 fa08 	bl	80054a4 <_init>
 8004094:	2600      	movs	r6, #0
 8004096:	4d0a      	ldr	r5, [pc, #40]	; (80040c0 <__libc_init_array+0x40>)
 8004098:	4c0a      	ldr	r4, [pc, #40]	; (80040c4 <__libc_init_array+0x44>)
 800409a:	1b64      	subs	r4, r4, r5
 800409c:	10a4      	asrs	r4, r4, #2
 800409e:	42a6      	cmp	r6, r4
 80040a0:	d105      	bne.n	80040ae <__libc_init_array+0x2e>
 80040a2:	bd70      	pop	{r4, r5, r6, pc}
 80040a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80040a8:	4798      	blx	r3
 80040aa:	3601      	adds	r6, #1
 80040ac:	e7ee      	b.n	800408c <__libc_init_array+0xc>
 80040ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80040b2:	4798      	blx	r3
 80040b4:	3601      	adds	r6, #1
 80040b6:	e7f2      	b.n	800409e <__libc_init_array+0x1e>
 80040b8:	08005748 	.word	0x08005748
 80040bc:	08005748 	.word	0x08005748
 80040c0:	08005748 	.word	0x08005748
 80040c4:	0800574c 	.word	0x0800574c

080040c8 <memcpy>:
 80040c8:	440a      	add	r2, r1
 80040ca:	4291      	cmp	r1, r2
 80040cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80040d0:	d100      	bne.n	80040d4 <memcpy+0xc>
 80040d2:	4770      	bx	lr
 80040d4:	b510      	push	{r4, lr}
 80040d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040da:	4291      	cmp	r1, r2
 80040dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040e0:	d1f9      	bne.n	80040d6 <memcpy+0xe>
 80040e2:	bd10      	pop	{r4, pc}

080040e4 <memset>:
 80040e4:	4603      	mov	r3, r0
 80040e6:	4402      	add	r2, r0
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d100      	bne.n	80040ee <memset+0xa>
 80040ec:	4770      	bx	lr
 80040ee:	f803 1b01 	strb.w	r1, [r3], #1
 80040f2:	e7f9      	b.n	80040e8 <memset+0x4>

080040f4 <iprintf>:
 80040f4:	b40f      	push	{r0, r1, r2, r3}
 80040f6:	4b0a      	ldr	r3, [pc, #40]	; (8004120 <iprintf+0x2c>)
 80040f8:	b513      	push	{r0, r1, r4, lr}
 80040fa:	681c      	ldr	r4, [r3, #0]
 80040fc:	b124      	cbz	r4, 8004108 <iprintf+0x14>
 80040fe:	69a3      	ldr	r3, [r4, #24]
 8004100:	b913      	cbnz	r3, 8004108 <iprintf+0x14>
 8004102:	4620      	mov	r0, r4
 8004104:	f000 fa7a 	bl	80045fc <__sinit>
 8004108:	ab05      	add	r3, sp, #20
 800410a:	4620      	mov	r0, r4
 800410c:	9a04      	ldr	r2, [sp, #16]
 800410e:	68a1      	ldr	r1, [r4, #8]
 8004110:	9301      	str	r3, [sp, #4]
 8004112:	f000 fdd9 	bl	8004cc8 <_vfiprintf_r>
 8004116:	b002      	add	sp, #8
 8004118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800411c:	b004      	add	sp, #16
 800411e:	4770      	bx	lr
 8004120:	2000000c 	.word	0x2000000c

08004124 <_puts_r>:
 8004124:	b570      	push	{r4, r5, r6, lr}
 8004126:	460e      	mov	r6, r1
 8004128:	4605      	mov	r5, r0
 800412a:	b118      	cbz	r0, 8004134 <_puts_r+0x10>
 800412c:	6983      	ldr	r3, [r0, #24]
 800412e:	b90b      	cbnz	r3, 8004134 <_puts_r+0x10>
 8004130:	f000 fa64 	bl	80045fc <__sinit>
 8004134:	69ab      	ldr	r3, [r5, #24]
 8004136:	68ac      	ldr	r4, [r5, #8]
 8004138:	b913      	cbnz	r3, 8004140 <_puts_r+0x1c>
 800413a:	4628      	mov	r0, r5
 800413c:	f000 fa5e 	bl	80045fc <__sinit>
 8004140:	4b2c      	ldr	r3, [pc, #176]	; (80041f4 <_puts_r+0xd0>)
 8004142:	429c      	cmp	r4, r3
 8004144:	d120      	bne.n	8004188 <_puts_r+0x64>
 8004146:	686c      	ldr	r4, [r5, #4]
 8004148:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800414a:	07db      	lsls	r3, r3, #31
 800414c:	d405      	bmi.n	800415a <_puts_r+0x36>
 800414e:	89a3      	ldrh	r3, [r4, #12]
 8004150:	0598      	lsls	r0, r3, #22
 8004152:	d402      	bmi.n	800415a <_puts_r+0x36>
 8004154:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004156:	f000 faef 	bl	8004738 <__retarget_lock_acquire_recursive>
 800415a:	89a3      	ldrh	r3, [r4, #12]
 800415c:	0719      	lsls	r1, r3, #28
 800415e:	d51d      	bpl.n	800419c <_puts_r+0x78>
 8004160:	6923      	ldr	r3, [r4, #16]
 8004162:	b1db      	cbz	r3, 800419c <_puts_r+0x78>
 8004164:	3e01      	subs	r6, #1
 8004166:	68a3      	ldr	r3, [r4, #8]
 8004168:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800416c:	3b01      	subs	r3, #1
 800416e:	60a3      	str	r3, [r4, #8]
 8004170:	bb39      	cbnz	r1, 80041c2 <_puts_r+0x9e>
 8004172:	2b00      	cmp	r3, #0
 8004174:	da38      	bge.n	80041e8 <_puts_r+0xc4>
 8004176:	4622      	mov	r2, r4
 8004178:	210a      	movs	r1, #10
 800417a:	4628      	mov	r0, r5
 800417c:	f000 f868 	bl	8004250 <__swbuf_r>
 8004180:	3001      	adds	r0, #1
 8004182:	d011      	beq.n	80041a8 <_puts_r+0x84>
 8004184:	250a      	movs	r5, #10
 8004186:	e011      	b.n	80041ac <_puts_r+0x88>
 8004188:	4b1b      	ldr	r3, [pc, #108]	; (80041f8 <_puts_r+0xd4>)
 800418a:	429c      	cmp	r4, r3
 800418c:	d101      	bne.n	8004192 <_puts_r+0x6e>
 800418e:	68ac      	ldr	r4, [r5, #8]
 8004190:	e7da      	b.n	8004148 <_puts_r+0x24>
 8004192:	4b1a      	ldr	r3, [pc, #104]	; (80041fc <_puts_r+0xd8>)
 8004194:	429c      	cmp	r4, r3
 8004196:	bf08      	it	eq
 8004198:	68ec      	ldreq	r4, [r5, #12]
 800419a:	e7d5      	b.n	8004148 <_puts_r+0x24>
 800419c:	4621      	mov	r1, r4
 800419e:	4628      	mov	r0, r5
 80041a0:	f000 f8a8 	bl	80042f4 <__swsetup_r>
 80041a4:	2800      	cmp	r0, #0
 80041a6:	d0dd      	beq.n	8004164 <_puts_r+0x40>
 80041a8:	f04f 35ff 	mov.w	r5, #4294967295
 80041ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80041ae:	07da      	lsls	r2, r3, #31
 80041b0:	d405      	bmi.n	80041be <_puts_r+0x9a>
 80041b2:	89a3      	ldrh	r3, [r4, #12]
 80041b4:	059b      	lsls	r3, r3, #22
 80041b6:	d402      	bmi.n	80041be <_puts_r+0x9a>
 80041b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041ba:	f000 fabe 	bl	800473a <__retarget_lock_release_recursive>
 80041be:	4628      	mov	r0, r5
 80041c0:	bd70      	pop	{r4, r5, r6, pc}
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	da04      	bge.n	80041d0 <_puts_r+0xac>
 80041c6:	69a2      	ldr	r2, [r4, #24]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	dc06      	bgt.n	80041da <_puts_r+0xb6>
 80041cc:	290a      	cmp	r1, #10
 80041ce:	d004      	beq.n	80041da <_puts_r+0xb6>
 80041d0:	6823      	ldr	r3, [r4, #0]
 80041d2:	1c5a      	adds	r2, r3, #1
 80041d4:	6022      	str	r2, [r4, #0]
 80041d6:	7019      	strb	r1, [r3, #0]
 80041d8:	e7c5      	b.n	8004166 <_puts_r+0x42>
 80041da:	4622      	mov	r2, r4
 80041dc:	4628      	mov	r0, r5
 80041de:	f000 f837 	bl	8004250 <__swbuf_r>
 80041e2:	3001      	adds	r0, #1
 80041e4:	d1bf      	bne.n	8004166 <_puts_r+0x42>
 80041e6:	e7df      	b.n	80041a8 <_puts_r+0x84>
 80041e8:	250a      	movs	r5, #10
 80041ea:	6823      	ldr	r3, [r4, #0]
 80041ec:	1c5a      	adds	r2, r3, #1
 80041ee:	6022      	str	r2, [r4, #0]
 80041f0:	701d      	strb	r5, [r3, #0]
 80041f2:	e7db      	b.n	80041ac <_puts_r+0x88>
 80041f4:	080056cc 	.word	0x080056cc
 80041f8:	080056ec 	.word	0x080056ec
 80041fc:	080056ac 	.word	0x080056ac

08004200 <puts>:
 8004200:	4b02      	ldr	r3, [pc, #8]	; (800420c <puts+0xc>)
 8004202:	4601      	mov	r1, r0
 8004204:	6818      	ldr	r0, [r3, #0]
 8004206:	f7ff bf8d 	b.w	8004124 <_puts_r>
 800420a:	bf00      	nop
 800420c:	2000000c 	.word	0x2000000c

08004210 <siprintf>:
 8004210:	b40e      	push	{r1, r2, r3}
 8004212:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004216:	b500      	push	{lr}
 8004218:	b09c      	sub	sp, #112	; 0x70
 800421a:	ab1d      	add	r3, sp, #116	; 0x74
 800421c:	9002      	str	r0, [sp, #8]
 800421e:	9006      	str	r0, [sp, #24]
 8004220:	9107      	str	r1, [sp, #28]
 8004222:	9104      	str	r1, [sp, #16]
 8004224:	4808      	ldr	r0, [pc, #32]	; (8004248 <siprintf+0x38>)
 8004226:	4909      	ldr	r1, [pc, #36]	; (800424c <siprintf+0x3c>)
 8004228:	f853 2b04 	ldr.w	r2, [r3], #4
 800422c:	9105      	str	r1, [sp, #20]
 800422e:	6800      	ldr	r0, [r0, #0]
 8004230:	a902      	add	r1, sp, #8
 8004232:	9301      	str	r3, [sp, #4]
 8004234:	f000 fc20 	bl	8004a78 <_svfiprintf_r>
 8004238:	2200      	movs	r2, #0
 800423a:	9b02      	ldr	r3, [sp, #8]
 800423c:	701a      	strb	r2, [r3, #0]
 800423e:	b01c      	add	sp, #112	; 0x70
 8004240:	f85d eb04 	ldr.w	lr, [sp], #4
 8004244:	b003      	add	sp, #12
 8004246:	4770      	bx	lr
 8004248:	2000000c 	.word	0x2000000c
 800424c:	ffff0208 	.word	0xffff0208

08004250 <__swbuf_r>:
 8004250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004252:	460e      	mov	r6, r1
 8004254:	4614      	mov	r4, r2
 8004256:	4605      	mov	r5, r0
 8004258:	b118      	cbz	r0, 8004262 <__swbuf_r+0x12>
 800425a:	6983      	ldr	r3, [r0, #24]
 800425c:	b90b      	cbnz	r3, 8004262 <__swbuf_r+0x12>
 800425e:	f000 f9cd 	bl	80045fc <__sinit>
 8004262:	4b21      	ldr	r3, [pc, #132]	; (80042e8 <__swbuf_r+0x98>)
 8004264:	429c      	cmp	r4, r3
 8004266:	d12b      	bne.n	80042c0 <__swbuf_r+0x70>
 8004268:	686c      	ldr	r4, [r5, #4]
 800426a:	69a3      	ldr	r3, [r4, #24]
 800426c:	60a3      	str	r3, [r4, #8]
 800426e:	89a3      	ldrh	r3, [r4, #12]
 8004270:	071a      	lsls	r2, r3, #28
 8004272:	d52f      	bpl.n	80042d4 <__swbuf_r+0x84>
 8004274:	6923      	ldr	r3, [r4, #16]
 8004276:	b36b      	cbz	r3, 80042d4 <__swbuf_r+0x84>
 8004278:	6923      	ldr	r3, [r4, #16]
 800427a:	6820      	ldr	r0, [r4, #0]
 800427c:	b2f6      	uxtb	r6, r6
 800427e:	1ac0      	subs	r0, r0, r3
 8004280:	6963      	ldr	r3, [r4, #20]
 8004282:	4637      	mov	r7, r6
 8004284:	4283      	cmp	r3, r0
 8004286:	dc04      	bgt.n	8004292 <__swbuf_r+0x42>
 8004288:	4621      	mov	r1, r4
 800428a:	4628      	mov	r0, r5
 800428c:	f000 f922 	bl	80044d4 <_fflush_r>
 8004290:	bb30      	cbnz	r0, 80042e0 <__swbuf_r+0x90>
 8004292:	68a3      	ldr	r3, [r4, #8]
 8004294:	3001      	adds	r0, #1
 8004296:	3b01      	subs	r3, #1
 8004298:	60a3      	str	r3, [r4, #8]
 800429a:	6823      	ldr	r3, [r4, #0]
 800429c:	1c5a      	adds	r2, r3, #1
 800429e:	6022      	str	r2, [r4, #0]
 80042a0:	701e      	strb	r6, [r3, #0]
 80042a2:	6963      	ldr	r3, [r4, #20]
 80042a4:	4283      	cmp	r3, r0
 80042a6:	d004      	beq.n	80042b2 <__swbuf_r+0x62>
 80042a8:	89a3      	ldrh	r3, [r4, #12]
 80042aa:	07db      	lsls	r3, r3, #31
 80042ac:	d506      	bpl.n	80042bc <__swbuf_r+0x6c>
 80042ae:	2e0a      	cmp	r6, #10
 80042b0:	d104      	bne.n	80042bc <__swbuf_r+0x6c>
 80042b2:	4621      	mov	r1, r4
 80042b4:	4628      	mov	r0, r5
 80042b6:	f000 f90d 	bl	80044d4 <_fflush_r>
 80042ba:	b988      	cbnz	r0, 80042e0 <__swbuf_r+0x90>
 80042bc:	4638      	mov	r0, r7
 80042be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042c0:	4b0a      	ldr	r3, [pc, #40]	; (80042ec <__swbuf_r+0x9c>)
 80042c2:	429c      	cmp	r4, r3
 80042c4:	d101      	bne.n	80042ca <__swbuf_r+0x7a>
 80042c6:	68ac      	ldr	r4, [r5, #8]
 80042c8:	e7cf      	b.n	800426a <__swbuf_r+0x1a>
 80042ca:	4b09      	ldr	r3, [pc, #36]	; (80042f0 <__swbuf_r+0xa0>)
 80042cc:	429c      	cmp	r4, r3
 80042ce:	bf08      	it	eq
 80042d0:	68ec      	ldreq	r4, [r5, #12]
 80042d2:	e7ca      	b.n	800426a <__swbuf_r+0x1a>
 80042d4:	4621      	mov	r1, r4
 80042d6:	4628      	mov	r0, r5
 80042d8:	f000 f80c 	bl	80042f4 <__swsetup_r>
 80042dc:	2800      	cmp	r0, #0
 80042de:	d0cb      	beq.n	8004278 <__swbuf_r+0x28>
 80042e0:	f04f 37ff 	mov.w	r7, #4294967295
 80042e4:	e7ea      	b.n	80042bc <__swbuf_r+0x6c>
 80042e6:	bf00      	nop
 80042e8:	080056cc 	.word	0x080056cc
 80042ec:	080056ec 	.word	0x080056ec
 80042f0:	080056ac 	.word	0x080056ac

080042f4 <__swsetup_r>:
 80042f4:	4b32      	ldr	r3, [pc, #200]	; (80043c0 <__swsetup_r+0xcc>)
 80042f6:	b570      	push	{r4, r5, r6, lr}
 80042f8:	681d      	ldr	r5, [r3, #0]
 80042fa:	4606      	mov	r6, r0
 80042fc:	460c      	mov	r4, r1
 80042fe:	b125      	cbz	r5, 800430a <__swsetup_r+0x16>
 8004300:	69ab      	ldr	r3, [r5, #24]
 8004302:	b913      	cbnz	r3, 800430a <__swsetup_r+0x16>
 8004304:	4628      	mov	r0, r5
 8004306:	f000 f979 	bl	80045fc <__sinit>
 800430a:	4b2e      	ldr	r3, [pc, #184]	; (80043c4 <__swsetup_r+0xd0>)
 800430c:	429c      	cmp	r4, r3
 800430e:	d10f      	bne.n	8004330 <__swsetup_r+0x3c>
 8004310:	686c      	ldr	r4, [r5, #4]
 8004312:	89a3      	ldrh	r3, [r4, #12]
 8004314:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004318:	0719      	lsls	r1, r3, #28
 800431a:	d42c      	bmi.n	8004376 <__swsetup_r+0x82>
 800431c:	06dd      	lsls	r5, r3, #27
 800431e:	d411      	bmi.n	8004344 <__swsetup_r+0x50>
 8004320:	2309      	movs	r3, #9
 8004322:	6033      	str	r3, [r6, #0]
 8004324:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004328:	f04f 30ff 	mov.w	r0, #4294967295
 800432c:	81a3      	strh	r3, [r4, #12]
 800432e:	e03e      	b.n	80043ae <__swsetup_r+0xba>
 8004330:	4b25      	ldr	r3, [pc, #148]	; (80043c8 <__swsetup_r+0xd4>)
 8004332:	429c      	cmp	r4, r3
 8004334:	d101      	bne.n	800433a <__swsetup_r+0x46>
 8004336:	68ac      	ldr	r4, [r5, #8]
 8004338:	e7eb      	b.n	8004312 <__swsetup_r+0x1e>
 800433a:	4b24      	ldr	r3, [pc, #144]	; (80043cc <__swsetup_r+0xd8>)
 800433c:	429c      	cmp	r4, r3
 800433e:	bf08      	it	eq
 8004340:	68ec      	ldreq	r4, [r5, #12]
 8004342:	e7e6      	b.n	8004312 <__swsetup_r+0x1e>
 8004344:	0758      	lsls	r0, r3, #29
 8004346:	d512      	bpl.n	800436e <__swsetup_r+0x7a>
 8004348:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800434a:	b141      	cbz	r1, 800435e <__swsetup_r+0x6a>
 800434c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004350:	4299      	cmp	r1, r3
 8004352:	d002      	beq.n	800435a <__swsetup_r+0x66>
 8004354:	4630      	mov	r0, r6
 8004356:	f000 fa57 	bl	8004808 <_free_r>
 800435a:	2300      	movs	r3, #0
 800435c:	6363      	str	r3, [r4, #52]	; 0x34
 800435e:	89a3      	ldrh	r3, [r4, #12]
 8004360:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004364:	81a3      	strh	r3, [r4, #12]
 8004366:	2300      	movs	r3, #0
 8004368:	6063      	str	r3, [r4, #4]
 800436a:	6923      	ldr	r3, [r4, #16]
 800436c:	6023      	str	r3, [r4, #0]
 800436e:	89a3      	ldrh	r3, [r4, #12]
 8004370:	f043 0308 	orr.w	r3, r3, #8
 8004374:	81a3      	strh	r3, [r4, #12]
 8004376:	6923      	ldr	r3, [r4, #16]
 8004378:	b94b      	cbnz	r3, 800438e <__swsetup_r+0x9a>
 800437a:	89a3      	ldrh	r3, [r4, #12]
 800437c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004380:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004384:	d003      	beq.n	800438e <__swsetup_r+0x9a>
 8004386:	4621      	mov	r1, r4
 8004388:	4630      	mov	r0, r6
 800438a:	f000 f9fd 	bl	8004788 <__smakebuf_r>
 800438e:	89a0      	ldrh	r0, [r4, #12]
 8004390:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004394:	f010 0301 	ands.w	r3, r0, #1
 8004398:	d00a      	beq.n	80043b0 <__swsetup_r+0xbc>
 800439a:	2300      	movs	r3, #0
 800439c:	60a3      	str	r3, [r4, #8]
 800439e:	6963      	ldr	r3, [r4, #20]
 80043a0:	425b      	negs	r3, r3
 80043a2:	61a3      	str	r3, [r4, #24]
 80043a4:	6923      	ldr	r3, [r4, #16]
 80043a6:	b943      	cbnz	r3, 80043ba <__swsetup_r+0xc6>
 80043a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80043ac:	d1ba      	bne.n	8004324 <__swsetup_r+0x30>
 80043ae:	bd70      	pop	{r4, r5, r6, pc}
 80043b0:	0781      	lsls	r1, r0, #30
 80043b2:	bf58      	it	pl
 80043b4:	6963      	ldrpl	r3, [r4, #20]
 80043b6:	60a3      	str	r3, [r4, #8]
 80043b8:	e7f4      	b.n	80043a4 <__swsetup_r+0xb0>
 80043ba:	2000      	movs	r0, #0
 80043bc:	e7f7      	b.n	80043ae <__swsetup_r+0xba>
 80043be:	bf00      	nop
 80043c0:	2000000c 	.word	0x2000000c
 80043c4:	080056cc 	.word	0x080056cc
 80043c8:	080056ec 	.word	0x080056ec
 80043cc:	080056ac 	.word	0x080056ac

080043d0 <__sflush_r>:
 80043d0:	898a      	ldrh	r2, [r1, #12]
 80043d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043d4:	4605      	mov	r5, r0
 80043d6:	0710      	lsls	r0, r2, #28
 80043d8:	460c      	mov	r4, r1
 80043da:	d457      	bmi.n	800448c <__sflush_r+0xbc>
 80043dc:	684b      	ldr	r3, [r1, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	dc04      	bgt.n	80043ec <__sflush_r+0x1c>
 80043e2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	dc01      	bgt.n	80043ec <__sflush_r+0x1c>
 80043e8:	2000      	movs	r0, #0
 80043ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80043ee:	2e00      	cmp	r6, #0
 80043f0:	d0fa      	beq.n	80043e8 <__sflush_r+0x18>
 80043f2:	2300      	movs	r3, #0
 80043f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80043f8:	682f      	ldr	r7, [r5, #0]
 80043fa:	602b      	str	r3, [r5, #0]
 80043fc:	d032      	beq.n	8004464 <__sflush_r+0x94>
 80043fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004400:	89a3      	ldrh	r3, [r4, #12]
 8004402:	075a      	lsls	r2, r3, #29
 8004404:	d505      	bpl.n	8004412 <__sflush_r+0x42>
 8004406:	6863      	ldr	r3, [r4, #4]
 8004408:	1ac0      	subs	r0, r0, r3
 800440a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800440c:	b10b      	cbz	r3, 8004412 <__sflush_r+0x42>
 800440e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004410:	1ac0      	subs	r0, r0, r3
 8004412:	2300      	movs	r3, #0
 8004414:	4602      	mov	r2, r0
 8004416:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004418:	4628      	mov	r0, r5
 800441a:	6a21      	ldr	r1, [r4, #32]
 800441c:	47b0      	blx	r6
 800441e:	1c43      	adds	r3, r0, #1
 8004420:	89a3      	ldrh	r3, [r4, #12]
 8004422:	d106      	bne.n	8004432 <__sflush_r+0x62>
 8004424:	6829      	ldr	r1, [r5, #0]
 8004426:	291d      	cmp	r1, #29
 8004428:	d82c      	bhi.n	8004484 <__sflush_r+0xb4>
 800442a:	4a29      	ldr	r2, [pc, #164]	; (80044d0 <__sflush_r+0x100>)
 800442c:	40ca      	lsrs	r2, r1
 800442e:	07d6      	lsls	r6, r2, #31
 8004430:	d528      	bpl.n	8004484 <__sflush_r+0xb4>
 8004432:	2200      	movs	r2, #0
 8004434:	6062      	str	r2, [r4, #4]
 8004436:	6922      	ldr	r2, [r4, #16]
 8004438:	04d9      	lsls	r1, r3, #19
 800443a:	6022      	str	r2, [r4, #0]
 800443c:	d504      	bpl.n	8004448 <__sflush_r+0x78>
 800443e:	1c42      	adds	r2, r0, #1
 8004440:	d101      	bne.n	8004446 <__sflush_r+0x76>
 8004442:	682b      	ldr	r3, [r5, #0]
 8004444:	b903      	cbnz	r3, 8004448 <__sflush_r+0x78>
 8004446:	6560      	str	r0, [r4, #84]	; 0x54
 8004448:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800444a:	602f      	str	r7, [r5, #0]
 800444c:	2900      	cmp	r1, #0
 800444e:	d0cb      	beq.n	80043e8 <__sflush_r+0x18>
 8004450:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004454:	4299      	cmp	r1, r3
 8004456:	d002      	beq.n	800445e <__sflush_r+0x8e>
 8004458:	4628      	mov	r0, r5
 800445a:	f000 f9d5 	bl	8004808 <_free_r>
 800445e:	2000      	movs	r0, #0
 8004460:	6360      	str	r0, [r4, #52]	; 0x34
 8004462:	e7c2      	b.n	80043ea <__sflush_r+0x1a>
 8004464:	6a21      	ldr	r1, [r4, #32]
 8004466:	2301      	movs	r3, #1
 8004468:	4628      	mov	r0, r5
 800446a:	47b0      	blx	r6
 800446c:	1c41      	adds	r1, r0, #1
 800446e:	d1c7      	bne.n	8004400 <__sflush_r+0x30>
 8004470:	682b      	ldr	r3, [r5, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d0c4      	beq.n	8004400 <__sflush_r+0x30>
 8004476:	2b1d      	cmp	r3, #29
 8004478:	d001      	beq.n	800447e <__sflush_r+0xae>
 800447a:	2b16      	cmp	r3, #22
 800447c:	d101      	bne.n	8004482 <__sflush_r+0xb2>
 800447e:	602f      	str	r7, [r5, #0]
 8004480:	e7b2      	b.n	80043e8 <__sflush_r+0x18>
 8004482:	89a3      	ldrh	r3, [r4, #12]
 8004484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004488:	81a3      	strh	r3, [r4, #12]
 800448a:	e7ae      	b.n	80043ea <__sflush_r+0x1a>
 800448c:	690f      	ldr	r7, [r1, #16]
 800448e:	2f00      	cmp	r7, #0
 8004490:	d0aa      	beq.n	80043e8 <__sflush_r+0x18>
 8004492:	0793      	lsls	r3, r2, #30
 8004494:	bf18      	it	ne
 8004496:	2300      	movne	r3, #0
 8004498:	680e      	ldr	r6, [r1, #0]
 800449a:	bf08      	it	eq
 800449c:	694b      	ldreq	r3, [r1, #20]
 800449e:	1bf6      	subs	r6, r6, r7
 80044a0:	600f      	str	r7, [r1, #0]
 80044a2:	608b      	str	r3, [r1, #8]
 80044a4:	2e00      	cmp	r6, #0
 80044a6:	dd9f      	ble.n	80043e8 <__sflush_r+0x18>
 80044a8:	4633      	mov	r3, r6
 80044aa:	463a      	mov	r2, r7
 80044ac:	4628      	mov	r0, r5
 80044ae:	6a21      	ldr	r1, [r4, #32]
 80044b0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80044b4:	47e0      	blx	ip
 80044b6:	2800      	cmp	r0, #0
 80044b8:	dc06      	bgt.n	80044c8 <__sflush_r+0xf8>
 80044ba:	89a3      	ldrh	r3, [r4, #12]
 80044bc:	f04f 30ff 	mov.w	r0, #4294967295
 80044c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044c4:	81a3      	strh	r3, [r4, #12]
 80044c6:	e790      	b.n	80043ea <__sflush_r+0x1a>
 80044c8:	4407      	add	r7, r0
 80044ca:	1a36      	subs	r6, r6, r0
 80044cc:	e7ea      	b.n	80044a4 <__sflush_r+0xd4>
 80044ce:	bf00      	nop
 80044d0:	20400001 	.word	0x20400001

080044d4 <_fflush_r>:
 80044d4:	b538      	push	{r3, r4, r5, lr}
 80044d6:	690b      	ldr	r3, [r1, #16]
 80044d8:	4605      	mov	r5, r0
 80044da:	460c      	mov	r4, r1
 80044dc:	b913      	cbnz	r3, 80044e4 <_fflush_r+0x10>
 80044de:	2500      	movs	r5, #0
 80044e0:	4628      	mov	r0, r5
 80044e2:	bd38      	pop	{r3, r4, r5, pc}
 80044e4:	b118      	cbz	r0, 80044ee <_fflush_r+0x1a>
 80044e6:	6983      	ldr	r3, [r0, #24]
 80044e8:	b90b      	cbnz	r3, 80044ee <_fflush_r+0x1a>
 80044ea:	f000 f887 	bl	80045fc <__sinit>
 80044ee:	4b14      	ldr	r3, [pc, #80]	; (8004540 <_fflush_r+0x6c>)
 80044f0:	429c      	cmp	r4, r3
 80044f2:	d11b      	bne.n	800452c <_fflush_r+0x58>
 80044f4:	686c      	ldr	r4, [r5, #4]
 80044f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d0ef      	beq.n	80044de <_fflush_r+0xa>
 80044fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004500:	07d0      	lsls	r0, r2, #31
 8004502:	d404      	bmi.n	800450e <_fflush_r+0x3a>
 8004504:	0599      	lsls	r1, r3, #22
 8004506:	d402      	bmi.n	800450e <_fflush_r+0x3a>
 8004508:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800450a:	f000 f915 	bl	8004738 <__retarget_lock_acquire_recursive>
 800450e:	4628      	mov	r0, r5
 8004510:	4621      	mov	r1, r4
 8004512:	f7ff ff5d 	bl	80043d0 <__sflush_r>
 8004516:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004518:	4605      	mov	r5, r0
 800451a:	07da      	lsls	r2, r3, #31
 800451c:	d4e0      	bmi.n	80044e0 <_fflush_r+0xc>
 800451e:	89a3      	ldrh	r3, [r4, #12]
 8004520:	059b      	lsls	r3, r3, #22
 8004522:	d4dd      	bmi.n	80044e0 <_fflush_r+0xc>
 8004524:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004526:	f000 f908 	bl	800473a <__retarget_lock_release_recursive>
 800452a:	e7d9      	b.n	80044e0 <_fflush_r+0xc>
 800452c:	4b05      	ldr	r3, [pc, #20]	; (8004544 <_fflush_r+0x70>)
 800452e:	429c      	cmp	r4, r3
 8004530:	d101      	bne.n	8004536 <_fflush_r+0x62>
 8004532:	68ac      	ldr	r4, [r5, #8]
 8004534:	e7df      	b.n	80044f6 <_fflush_r+0x22>
 8004536:	4b04      	ldr	r3, [pc, #16]	; (8004548 <_fflush_r+0x74>)
 8004538:	429c      	cmp	r4, r3
 800453a:	bf08      	it	eq
 800453c:	68ec      	ldreq	r4, [r5, #12]
 800453e:	e7da      	b.n	80044f6 <_fflush_r+0x22>
 8004540:	080056cc 	.word	0x080056cc
 8004544:	080056ec 	.word	0x080056ec
 8004548:	080056ac 	.word	0x080056ac

0800454c <std>:
 800454c:	2300      	movs	r3, #0
 800454e:	b510      	push	{r4, lr}
 8004550:	4604      	mov	r4, r0
 8004552:	e9c0 3300 	strd	r3, r3, [r0]
 8004556:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800455a:	6083      	str	r3, [r0, #8]
 800455c:	8181      	strh	r1, [r0, #12]
 800455e:	6643      	str	r3, [r0, #100]	; 0x64
 8004560:	81c2      	strh	r2, [r0, #14]
 8004562:	6183      	str	r3, [r0, #24]
 8004564:	4619      	mov	r1, r3
 8004566:	2208      	movs	r2, #8
 8004568:	305c      	adds	r0, #92	; 0x5c
 800456a:	f7ff fdbb 	bl	80040e4 <memset>
 800456e:	4b05      	ldr	r3, [pc, #20]	; (8004584 <std+0x38>)
 8004570:	6224      	str	r4, [r4, #32]
 8004572:	6263      	str	r3, [r4, #36]	; 0x24
 8004574:	4b04      	ldr	r3, [pc, #16]	; (8004588 <std+0x3c>)
 8004576:	62a3      	str	r3, [r4, #40]	; 0x28
 8004578:	4b04      	ldr	r3, [pc, #16]	; (800458c <std+0x40>)
 800457a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800457c:	4b04      	ldr	r3, [pc, #16]	; (8004590 <std+0x44>)
 800457e:	6323      	str	r3, [r4, #48]	; 0x30
 8004580:	bd10      	pop	{r4, pc}
 8004582:	bf00      	nop
 8004584:	08005275 	.word	0x08005275
 8004588:	08005297 	.word	0x08005297
 800458c:	080052cf 	.word	0x080052cf
 8004590:	080052f3 	.word	0x080052f3

08004594 <_cleanup_r>:
 8004594:	4901      	ldr	r1, [pc, #4]	; (800459c <_cleanup_r+0x8>)
 8004596:	f000 b8af 	b.w	80046f8 <_fwalk_reent>
 800459a:	bf00      	nop
 800459c:	080044d5 	.word	0x080044d5

080045a0 <__sfmoreglue>:
 80045a0:	2268      	movs	r2, #104	; 0x68
 80045a2:	b570      	push	{r4, r5, r6, lr}
 80045a4:	1e4d      	subs	r5, r1, #1
 80045a6:	4355      	muls	r5, r2
 80045a8:	460e      	mov	r6, r1
 80045aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80045ae:	f000 f993 	bl	80048d8 <_malloc_r>
 80045b2:	4604      	mov	r4, r0
 80045b4:	b140      	cbz	r0, 80045c8 <__sfmoreglue+0x28>
 80045b6:	2100      	movs	r1, #0
 80045b8:	e9c0 1600 	strd	r1, r6, [r0]
 80045bc:	300c      	adds	r0, #12
 80045be:	60a0      	str	r0, [r4, #8]
 80045c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80045c4:	f7ff fd8e 	bl	80040e4 <memset>
 80045c8:	4620      	mov	r0, r4
 80045ca:	bd70      	pop	{r4, r5, r6, pc}

080045cc <__sfp_lock_acquire>:
 80045cc:	4801      	ldr	r0, [pc, #4]	; (80045d4 <__sfp_lock_acquire+0x8>)
 80045ce:	f000 b8b3 	b.w	8004738 <__retarget_lock_acquire_recursive>
 80045d2:	bf00      	nop
 80045d4:	200003c5 	.word	0x200003c5

080045d8 <__sfp_lock_release>:
 80045d8:	4801      	ldr	r0, [pc, #4]	; (80045e0 <__sfp_lock_release+0x8>)
 80045da:	f000 b8ae 	b.w	800473a <__retarget_lock_release_recursive>
 80045de:	bf00      	nop
 80045e0:	200003c5 	.word	0x200003c5

080045e4 <__sinit_lock_acquire>:
 80045e4:	4801      	ldr	r0, [pc, #4]	; (80045ec <__sinit_lock_acquire+0x8>)
 80045e6:	f000 b8a7 	b.w	8004738 <__retarget_lock_acquire_recursive>
 80045ea:	bf00      	nop
 80045ec:	200003c6 	.word	0x200003c6

080045f0 <__sinit_lock_release>:
 80045f0:	4801      	ldr	r0, [pc, #4]	; (80045f8 <__sinit_lock_release+0x8>)
 80045f2:	f000 b8a2 	b.w	800473a <__retarget_lock_release_recursive>
 80045f6:	bf00      	nop
 80045f8:	200003c6 	.word	0x200003c6

080045fc <__sinit>:
 80045fc:	b510      	push	{r4, lr}
 80045fe:	4604      	mov	r4, r0
 8004600:	f7ff fff0 	bl	80045e4 <__sinit_lock_acquire>
 8004604:	69a3      	ldr	r3, [r4, #24]
 8004606:	b11b      	cbz	r3, 8004610 <__sinit+0x14>
 8004608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800460c:	f7ff bff0 	b.w	80045f0 <__sinit_lock_release>
 8004610:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004614:	6523      	str	r3, [r4, #80]	; 0x50
 8004616:	4b13      	ldr	r3, [pc, #76]	; (8004664 <__sinit+0x68>)
 8004618:	4a13      	ldr	r2, [pc, #76]	; (8004668 <__sinit+0x6c>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	62a2      	str	r2, [r4, #40]	; 0x28
 800461e:	42a3      	cmp	r3, r4
 8004620:	bf08      	it	eq
 8004622:	2301      	moveq	r3, #1
 8004624:	4620      	mov	r0, r4
 8004626:	bf08      	it	eq
 8004628:	61a3      	streq	r3, [r4, #24]
 800462a:	f000 f81f 	bl	800466c <__sfp>
 800462e:	6060      	str	r0, [r4, #4]
 8004630:	4620      	mov	r0, r4
 8004632:	f000 f81b 	bl	800466c <__sfp>
 8004636:	60a0      	str	r0, [r4, #8]
 8004638:	4620      	mov	r0, r4
 800463a:	f000 f817 	bl	800466c <__sfp>
 800463e:	2200      	movs	r2, #0
 8004640:	2104      	movs	r1, #4
 8004642:	60e0      	str	r0, [r4, #12]
 8004644:	6860      	ldr	r0, [r4, #4]
 8004646:	f7ff ff81 	bl	800454c <std>
 800464a:	2201      	movs	r2, #1
 800464c:	2109      	movs	r1, #9
 800464e:	68a0      	ldr	r0, [r4, #8]
 8004650:	f7ff ff7c 	bl	800454c <std>
 8004654:	2202      	movs	r2, #2
 8004656:	2112      	movs	r1, #18
 8004658:	68e0      	ldr	r0, [r4, #12]
 800465a:	f7ff ff77 	bl	800454c <std>
 800465e:	2301      	movs	r3, #1
 8004660:	61a3      	str	r3, [r4, #24]
 8004662:	e7d1      	b.n	8004608 <__sinit+0xc>
 8004664:	080056a8 	.word	0x080056a8
 8004668:	08004595 	.word	0x08004595

0800466c <__sfp>:
 800466c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800466e:	4607      	mov	r7, r0
 8004670:	f7ff ffac 	bl	80045cc <__sfp_lock_acquire>
 8004674:	4b1e      	ldr	r3, [pc, #120]	; (80046f0 <__sfp+0x84>)
 8004676:	681e      	ldr	r6, [r3, #0]
 8004678:	69b3      	ldr	r3, [r6, #24]
 800467a:	b913      	cbnz	r3, 8004682 <__sfp+0x16>
 800467c:	4630      	mov	r0, r6
 800467e:	f7ff ffbd 	bl	80045fc <__sinit>
 8004682:	3648      	adds	r6, #72	; 0x48
 8004684:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004688:	3b01      	subs	r3, #1
 800468a:	d503      	bpl.n	8004694 <__sfp+0x28>
 800468c:	6833      	ldr	r3, [r6, #0]
 800468e:	b30b      	cbz	r3, 80046d4 <__sfp+0x68>
 8004690:	6836      	ldr	r6, [r6, #0]
 8004692:	e7f7      	b.n	8004684 <__sfp+0x18>
 8004694:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004698:	b9d5      	cbnz	r5, 80046d0 <__sfp+0x64>
 800469a:	4b16      	ldr	r3, [pc, #88]	; (80046f4 <__sfp+0x88>)
 800469c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80046a0:	60e3      	str	r3, [r4, #12]
 80046a2:	6665      	str	r5, [r4, #100]	; 0x64
 80046a4:	f000 f847 	bl	8004736 <__retarget_lock_init_recursive>
 80046a8:	f7ff ff96 	bl	80045d8 <__sfp_lock_release>
 80046ac:	2208      	movs	r2, #8
 80046ae:	4629      	mov	r1, r5
 80046b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80046b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80046b8:	6025      	str	r5, [r4, #0]
 80046ba:	61a5      	str	r5, [r4, #24]
 80046bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80046c0:	f7ff fd10 	bl	80040e4 <memset>
 80046c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80046c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80046cc:	4620      	mov	r0, r4
 80046ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046d0:	3468      	adds	r4, #104	; 0x68
 80046d2:	e7d9      	b.n	8004688 <__sfp+0x1c>
 80046d4:	2104      	movs	r1, #4
 80046d6:	4638      	mov	r0, r7
 80046d8:	f7ff ff62 	bl	80045a0 <__sfmoreglue>
 80046dc:	4604      	mov	r4, r0
 80046de:	6030      	str	r0, [r6, #0]
 80046e0:	2800      	cmp	r0, #0
 80046e2:	d1d5      	bne.n	8004690 <__sfp+0x24>
 80046e4:	f7ff ff78 	bl	80045d8 <__sfp_lock_release>
 80046e8:	230c      	movs	r3, #12
 80046ea:	603b      	str	r3, [r7, #0]
 80046ec:	e7ee      	b.n	80046cc <__sfp+0x60>
 80046ee:	bf00      	nop
 80046f0:	080056a8 	.word	0x080056a8
 80046f4:	ffff0001 	.word	0xffff0001

080046f8 <_fwalk_reent>:
 80046f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046fc:	4606      	mov	r6, r0
 80046fe:	4688      	mov	r8, r1
 8004700:	2700      	movs	r7, #0
 8004702:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004706:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800470a:	f1b9 0901 	subs.w	r9, r9, #1
 800470e:	d505      	bpl.n	800471c <_fwalk_reent+0x24>
 8004710:	6824      	ldr	r4, [r4, #0]
 8004712:	2c00      	cmp	r4, #0
 8004714:	d1f7      	bne.n	8004706 <_fwalk_reent+0xe>
 8004716:	4638      	mov	r0, r7
 8004718:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800471c:	89ab      	ldrh	r3, [r5, #12]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d907      	bls.n	8004732 <_fwalk_reent+0x3a>
 8004722:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004726:	3301      	adds	r3, #1
 8004728:	d003      	beq.n	8004732 <_fwalk_reent+0x3a>
 800472a:	4629      	mov	r1, r5
 800472c:	4630      	mov	r0, r6
 800472e:	47c0      	blx	r8
 8004730:	4307      	orrs	r7, r0
 8004732:	3568      	adds	r5, #104	; 0x68
 8004734:	e7e9      	b.n	800470a <_fwalk_reent+0x12>

08004736 <__retarget_lock_init_recursive>:
 8004736:	4770      	bx	lr

08004738 <__retarget_lock_acquire_recursive>:
 8004738:	4770      	bx	lr

0800473a <__retarget_lock_release_recursive>:
 800473a:	4770      	bx	lr

0800473c <__swhatbuf_r>:
 800473c:	b570      	push	{r4, r5, r6, lr}
 800473e:	460e      	mov	r6, r1
 8004740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004744:	4614      	mov	r4, r2
 8004746:	2900      	cmp	r1, #0
 8004748:	461d      	mov	r5, r3
 800474a:	b096      	sub	sp, #88	; 0x58
 800474c:	da08      	bge.n	8004760 <__swhatbuf_r+0x24>
 800474e:	2200      	movs	r2, #0
 8004750:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004754:	602a      	str	r2, [r5, #0]
 8004756:	061a      	lsls	r2, r3, #24
 8004758:	d410      	bmi.n	800477c <__swhatbuf_r+0x40>
 800475a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800475e:	e00e      	b.n	800477e <__swhatbuf_r+0x42>
 8004760:	466a      	mov	r2, sp
 8004762:	f000 fded 	bl	8005340 <_fstat_r>
 8004766:	2800      	cmp	r0, #0
 8004768:	dbf1      	blt.n	800474e <__swhatbuf_r+0x12>
 800476a:	9a01      	ldr	r2, [sp, #4]
 800476c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004770:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004774:	425a      	negs	r2, r3
 8004776:	415a      	adcs	r2, r3
 8004778:	602a      	str	r2, [r5, #0]
 800477a:	e7ee      	b.n	800475a <__swhatbuf_r+0x1e>
 800477c:	2340      	movs	r3, #64	; 0x40
 800477e:	2000      	movs	r0, #0
 8004780:	6023      	str	r3, [r4, #0]
 8004782:	b016      	add	sp, #88	; 0x58
 8004784:	bd70      	pop	{r4, r5, r6, pc}
	...

08004788 <__smakebuf_r>:
 8004788:	898b      	ldrh	r3, [r1, #12]
 800478a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800478c:	079d      	lsls	r5, r3, #30
 800478e:	4606      	mov	r6, r0
 8004790:	460c      	mov	r4, r1
 8004792:	d507      	bpl.n	80047a4 <__smakebuf_r+0x1c>
 8004794:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004798:	6023      	str	r3, [r4, #0]
 800479a:	6123      	str	r3, [r4, #16]
 800479c:	2301      	movs	r3, #1
 800479e:	6163      	str	r3, [r4, #20]
 80047a0:	b002      	add	sp, #8
 80047a2:	bd70      	pop	{r4, r5, r6, pc}
 80047a4:	466a      	mov	r2, sp
 80047a6:	ab01      	add	r3, sp, #4
 80047a8:	f7ff ffc8 	bl	800473c <__swhatbuf_r>
 80047ac:	9900      	ldr	r1, [sp, #0]
 80047ae:	4605      	mov	r5, r0
 80047b0:	4630      	mov	r0, r6
 80047b2:	f000 f891 	bl	80048d8 <_malloc_r>
 80047b6:	b948      	cbnz	r0, 80047cc <__smakebuf_r+0x44>
 80047b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047bc:	059a      	lsls	r2, r3, #22
 80047be:	d4ef      	bmi.n	80047a0 <__smakebuf_r+0x18>
 80047c0:	f023 0303 	bic.w	r3, r3, #3
 80047c4:	f043 0302 	orr.w	r3, r3, #2
 80047c8:	81a3      	strh	r3, [r4, #12]
 80047ca:	e7e3      	b.n	8004794 <__smakebuf_r+0xc>
 80047cc:	4b0d      	ldr	r3, [pc, #52]	; (8004804 <__smakebuf_r+0x7c>)
 80047ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80047d0:	89a3      	ldrh	r3, [r4, #12]
 80047d2:	6020      	str	r0, [r4, #0]
 80047d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047d8:	81a3      	strh	r3, [r4, #12]
 80047da:	9b00      	ldr	r3, [sp, #0]
 80047dc:	6120      	str	r0, [r4, #16]
 80047de:	6163      	str	r3, [r4, #20]
 80047e0:	9b01      	ldr	r3, [sp, #4]
 80047e2:	b15b      	cbz	r3, 80047fc <__smakebuf_r+0x74>
 80047e4:	4630      	mov	r0, r6
 80047e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047ea:	f000 fdbb 	bl	8005364 <_isatty_r>
 80047ee:	b128      	cbz	r0, 80047fc <__smakebuf_r+0x74>
 80047f0:	89a3      	ldrh	r3, [r4, #12]
 80047f2:	f023 0303 	bic.w	r3, r3, #3
 80047f6:	f043 0301 	orr.w	r3, r3, #1
 80047fa:	81a3      	strh	r3, [r4, #12]
 80047fc:	89a0      	ldrh	r0, [r4, #12]
 80047fe:	4305      	orrs	r5, r0
 8004800:	81a5      	strh	r5, [r4, #12]
 8004802:	e7cd      	b.n	80047a0 <__smakebuf_r+0x18>
 8004804:	08004595 	.word	0x08004595

08004808 <_free_r>:
 8004808:	b538      	push	{r3, r4, r5, lr}
 800480a:	4605      	mov	r5, r0
 800480c:	2900      	cmp	r1, #0
 800480e:	d040      	beq.n	8004892 <_free_r+0x8a>
 8004810:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004814:	1f0c      	subs	r4, r1, #4
 8004816:	2b00      	cmp	r3, #0
 8004818:	bfb8      	it	lt
 800481a:	18e4      	addlt	r4, r4, r3
 800481c:	f000 fdec 	bl	80053f8 <__malloc_lock>
 8004820:	4a1c      	ldr	r2, [pc, #112]	; (8004894 <_free_r+0x8c>)
 8004822:	6813      	ldr	r3, [r2, #0]
 8004824:	b933      	cbnz	r3, 8004834 <_free_r+0x2c>
 8004826:	6063      	str	r3, [r4, #4]
 8004828:	6014      	str	r4, [r2, #0]
 800482a:	4628      	mov	r0, r5
 800482c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004830:	f000 bde8 	b.w	8005404 <__malloc_unlock>
 8004834:	42a3      	cmp	r3, r4
 8004836:	d908      	bls.n	800484a <_free_r+0x42>
 8004838:	6820      	ldr	r0, [r4, #0]
 800483a:	1821      	adds	r1, r4, r0
 800483c:	428b      	cmp	r3, r1
 800483e:	bf01      	itttt	eq
 8004840:	6819      	ldreq	r1, [r3, #0]
 8004842:	685b      	ldreq	r3, [r3, #4]
 8004844:	1809      	addeq	r1, r1, r0
 8004846:	6021      	streq	r1, [r4, #0]
 8004848:	e7ed      	b.n	8004826 <_free_r+0x1e>
 800484a:	461a      	mov	r2, r3
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	b10b      	cbz	r3, 8004854 <_free_r+0x4c>
 8004850:	42a3      	cmp	r3, r4
 8004852:	d9fa      	bls.n	800484a <_free_r+0x42>
 8004854:	6811      	ldr	r1, [r2, #0]
 8004856:	1850      	adds	r0, r2, r1
 8004858:	42a0      	cmp	r0, r4
 800485a:	d10b      	bne.n	8004874 <_free_r+0x6c>
 800485c:	6820      	ldr	r0, [r4, #0]
 800485e:	4401      	add	r1, r0
 8004860:	1850      	adds	r0, r2, r1
 8004862:	4283      	cmp	r3, r0
 8004864:	6011      	str	r1, [r2, #0]
 8004866:	d1e0      	bne.n	800482a <_free_r+0x22>
 8004868:	6818      	ldr	r0, [r3, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	4401      	add	r1, r0
 800486e:	6011      	str	r1, [r2, #0]
 8004870:	6053      	str	r3, [r2, #4]
 8004872:	e7da      	b.n	800482a <_free_r+0x22>
 8004874:	d902      	bls.n	800487c <_free_r+0x74>
 8004876:	230c      	movs	r3, #12
 8004878:	602b      	str	r3, [r5, #0]
 800487a:	e7d6      	b.n	800482a <_free_r+0x22>
 800487c:	6820      	ldr	r0, [r4, #0]
 800487e:	1821      	adds	r1, r4, r0
 8004880:	428b      	cmp	r3, r1
 8004882:	bf01      	itttt	eq
 8004884:	6819      	ldreq	r1, [r3, #0]
 8004886:	685b      	ldreq	r3, [r3, #4]
 8004888:	1809      	addeq	r1, r1, r0
 800488a:	6021      	streq	r1, [r4, #0]
 800488c:	6063      	str	r3, [r4, #4]
 800488e:	6054      	str	r4, [r2, #4]
 8004890:	e7cb      	b.n	800482a <_free_r+0x22>
 8004892:	bd38      	pop	{r3, r4, r5, pc}
 8004894:	200003c8 	.word	0x200003c8

08004898 <sbrk_aligned>:
 8004898:	b570      	push	{r4, r5, r6, lr}
 800489a:	4e0e      	ldr	r6, [pc, #56]	; (80048d4 <sbrk_aligned+0x3c>)
 800489c:	460c      	mov	r4, r1
 800489e:	6831      	ldr	r1, [r6, #0]
 80048a0:	4605      	mov	r5, r0
 80048a2:	b911      	cbnz	r1, 80048aa <sbrk_aligned+0x12>
 80048a4:	f000 fcd6 	bl	8005254 <_sbrk_r>
 80048a8:	6030      	str	r0, [r6, #0]
 80048aa:	4621      	mov	r1, r4
 80048ac:	4628      	mov	r0, r5
 80048ae:	f000 fcd1 	bl	8005254 <_sbrk_r>
 80048b2:	1c43      	adds	r3, r0, #1
 80048b4:	d00a      	beq.n	80048cc <sbrk_aligned+0x34>
 80048b6:	1cc4      	adds	r4, r0, #3
 80048b8:	f024 0403 	bic.w	r4, r4, #3
 80048bc:	42a0      	cmp	r0, r4
 80048be:	d007      	beq.n	80048d0 <sbrk_aligned+0x38>
 80048c0:	1a21      	subs	r1, r4, r0
 80048c2:	4628      	mov	r0, r5
 80048c4:	f000 fcc6 	bl	8005254 <_sbrk_r>
 80048c8:	3001      	adds	r0, #1
 80048ca:	d101      	bne.n	80048d0 <sbrk_aligned+0x38>
 80048cc:	f04f 34ff 	mov.w	r4, #4294967295
 80048d0:	4620      	mov	r0, r4
 80048d2:	bd70      	pop	{r4, r5, r6, pc}
 80048d4:	200003cc 	.word	0x200003cc

080048d8 <_malloc_r>:
 80048d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048dc:	1ccd      	adds	r5, r1, #3
 80048de:	f025 0503 	bic.w	r5, r5, #3
 80048e2:	3508      	adds	r5, #8
 80048e4:	2d0c      	cmp	r5, #12
 80048e6:	bf38      	it	cc
 80048e8:	250c      	movcc	r5, #12
 80048ea:	2d00      	cmp	r5, #0
 80048ec:	4607      	mov	r7, r0
 80048ee:	db01      	blt.n	80048f4 <_malloc_r+0x1c>
 80048f0:	42a9      	cmp	r1, r5
 80048f2:	d905      	bls.n	8004900 <_malloc_r+0x28>
 80048f4:	230c      	movs	r3, #12
 80048f6:	2600      	movs	r6, #0
 80048f8:	603b      	str	r3, [r7, #0]
 80048fa:	4630      	mov	r0, r6
 80048fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004900:	4e2e      	ldr	r6, [pc, #184]	; (80049bc <_malloc_r+0xe4>)
 8004902:	f000 fd79 	bl	80053f8 <__malloc_lock>
 8004906:	6833      	ldr	r3, [r6, #0]
 8004908:	461c      	mov	r4, r3
 800490a:	bb34      	cbnz	r4, 800495a <_malloc_r+0x82>
 800490c:	4629      	mov	r1, r5
 800490e:	4638      	mov	r0, r7
 8004910:	f7ff ffc2 	bl	8004898 <sbrk_aligned>
 8004914:	1c43      	adds	r3, r0, #1
 8004916:	4604      	mov	r4, r0
 8004918:	d14d      	bne.n	80049b6 <_malloc_r+0xde>
 800491a:	6834      	ldr	r4, [r6, #0]
 800491c:	4626      	mov	r6, r4
 800491e:	2e00      	cmp	r6, #0
 8004920:	d140      	bne.n	80049a4 <_malloc_r+0xcc>
 8004922:	6823      	ldr	r3, [r4, #0]
 8004924:	4631      	mov	r1, r6
 8004926:	4638      	mov	r0, r7
 8004928:	eb04 0803 	add.w	r8, r4, r3
 800492c:	f000 fc92 	bl	8005254 <_sbrk_r>
 8004930:	4580      	cmp	r8, r0
 8004932:	d13a      	bne.n	80049aa <_malloc_r+0xd2>
 8004934:	6821      	ldr	r1, [r4, #0]
 8004936:	3503      	adds	r5, #3
 8004938:	1a6d      	subs	r5, r5, r1
 800493a:	f025 0503 	bic.w	r5, r5, #3
 800493e:	3508      	adds	r5, #8
 8004940:	2d0c      	cmp	r5, #12
 8004942:	bf38      	it	cc
 8004944:	250c      	movcc	r5, #12
 8004946:	4638      	mov	r0, r7
 8004948:	4629      	mov	r1, r5
 800494a:	f7ff ffa5 	bl	8004898 <sbrk_aligned>
 800494e:	3001      	adds	r0, #1
 8004950:	d02b      	beq.n	80049aa <_malloc_r+0xd2>
 8004952:	6823      	ldr	r3, [r4, #0]
 8004954:	442b      	add	r3, r5
 8004956:	6023      	str	r3, [r4, #0]
 8004958:	e00e      	b.n	8004978 <_malloc_r+0xa0>
 800495a:	6822      	ldr	r2, [r4, #0]
 800495c:	1b52      	subs	r2, r2, r5
 800495e:	d41e      	bmi.n	800499e <_malloc_r+0xc6>
 8004960:	2a0b      	cmp	r2, #11
 8004962:	d916      	bls.n	8004992 <_malloc_r+0xba>
 8004964:	1961      	adds	r1, r4, r5
 8004966:	42a3      	cmp	r3, r4
 8004968:	6025      	str	r5, [r4, #0]
 800496a:	bf18      	it	ne
 800496c:	6059      	strne	r1, [r3, #4]
 800496e:	6863      	ldr	r3, [r4, #4]
 8004970:	bf08      	it	eq
 8004972:	6031      	streq	r1, [r6, #0]
 8004974:	5162      	str	r2, [r4, r5]
 8004976:	604b      	str	r3, [r1, #4]
 8004978:	4638      	mov	r0, r7
 800497a:	f104 060b 	add.w	r6, r4, #11
 800497e:	f000 fd41 	bl	8005404 <__malloc_unlock>
 8004982:	f026 0607 	bic.w	r6, r6, #7
 8004986:	1d23      	adds	r3, r4, #4
 8004988:	1af2      	subs	r2, r6, r3
 800498a:	d0b6      	beq.n	80048fa <_malloc_r+0x22>
 800498c:	1b9b      	subs	r3, r3, r6
 800498e:	50a3      	str	r3, [r4, r2]
 8004990:	e7b3      	b.n	80048fa <_malloc_r+0x22>
 8004992:	6862      	ldr	r2, [r4, #4]
 8004994:	42a3      	cmp	r3, r4
 8004996:	bf0c      	ite	eq
 8004998:	6032      	streq	r2, [r6, #0]
 800499a:	605a      	strne	r2, [r3, #4]
 800499c:	e7ec      	b.n	8004978 <_malloc_r+0xa0>
 800499e:	4623      	mov	r3, r4
 80049a0:	6864      	ldr	r4, [r4, #4]
 80049a2:	e7b2      	b.n	800490a <_malloc_r+0x32>
 80049a4:	4634      	mov	r4, r6
 80049a6:	6876      	ldr	r6, [r6, #4]
 80049a8:	e7b9      	b.n	800491e <_malloc_r+0x46>
 80049aa:	230c      	movs	r3, #12
 80049ac:	4638      	mov	r0, r7
 80049ae:	603b      	str	r3, [r7, #0]
 80049b0:	f000 fd28 	bl	8005404 <__malloc_unlock>
 80049b4:	e7a1      	b.n	80048fa <_malloc_r+0x22>
 80049b6:	6025      	str	r5, [r4, #0]
 80049b8:	e7de      	b.n	8004978 <_malloc_r+0xa0>
 80049ba:	bf00      	nop
 80049bc:	200003c8 	.word	0x200003c8

080049c0 <__ssputs_r>:
 80049c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049c4:	688e      	ldr	r6, [r1, #8]
 80049c6:	4682      	mov	sl, r0
 80049c8:	429e      	cmp	r6, r3
 80049ca:	460c      	mov	r4, r1
 80049cc:	4690      	mov	r8, r2
 80049ce:	461f      	mov	r7, r3
 80049d0:	d838      	bhi.n	8004a44 <__ssputs_r+0x84>
 80049d2:	898a      	ldrh	r2, [r1, #12]
 80049d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80049d8:	d032      	beq.n	8004a40 <__ssputs_r+0x80>
 80049da:	6825      	ldr	r5, [r4, #0]
 80049dc:	6909      	ldr	r1, [r1, #16]
 80049de:	3301      	adds	r3, #1
 80049e0:	eba5 0901 	sub.w	r9, r5, r1
 80049e4:	6965      	ldr	r5, [r4, #20]
 80049e6:	444b      	add	r3, r9
 80049e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80049ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80049f0:	106d      	asrs	r5, r5, #1
 80049f2:	429d      	cmp	r5, r3
 80049f4:	bf38      	it	cc
 80049f6:	461d      	movcc	r5, r3
 80049f8:	0553      	lsls	r3, r2, #21
 80049fa:	d531      	bpl.n	8004a60 <__ssputs_r+0xa0>
 80049fc:	4629      	mov	r1, r5
 80049fe:	f7ff ff6b 	bl	80048d8 <_malloc_r>
 8004a02:	4606      	mov	r6, r0
 8004a04:	b950      	cbnz	r0, 8004a1c <__ssputs_r+0x5c>
 8004a06:	230c      	movs	r3, #12
 8004a08:	f04f 30ff 	mov.w	r0, #4294967295
 8004a0c:	f8ca 3000 	str.w	r3, [sl]
 8004a10:	89a3      	ldrh	r3, [r4, #12]
 8004a12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a16:	81a3      	strh	r3, [r4, #12]
 8004a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a1c:	464a      	mov	r2, r9
 8004a1e:	6921      	ldr	r1, [r4, #16]
 8004a20:	f7ff fb52 	bl	80040c8 <memcpy>
 8004a24:	89a3      	ldrh	r3, [r4, #12]
 8004a26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004a2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a2e:	81a3      	strh	r3, [r4, #12]
 8004a30:	6126      	str	r6, [r4, #16]
 8004a32:	444e      	add	r6, r9
 8004a34:	6026      	str	r6, [r4, #0]
 8004a36:	463e      	mov	r6, r7
 8004a38:	6165      	str	r5, [r4, #20]
 8004a3a:	eba5 0509 	sub.w	r5, r5, r9
 8004a3e:	60a5      	str	r5, [r4, #8]
 8004a40:	42be      	cmp	r6, r7
 8004a42:	d900      	bls.n	8004a46 <__ssputs_r+0x86>
 8004a44:	463e      	mov	r6, r7
 8004a46:	4632      	mov	r2, r6
 8004a48:	4641      	mov	r1, r8
 8004a4a:	6820      	ldr	r0, [r4, #0]
 8004a4c:	f000 fcba 	bl	80053c4 <memmove>
 8004a50:	68a3      	ldr	r3, [r4, #8]
 8004a52:	2000      	movs	r0, #0
 8004a54:	1b9b      	subs	r3, r3, r6
 8004a56:	60a3      	str	r3, [r4, #8]
 8004a58:	6823      	ldr	r3, [r4, #0]
 8004a5a:	4433      	add	r3, r6
 8004a5c:	6023      	str	r3, [r4, #0]
 8004a5e:	e7db      	b.n	8004a18 <__ssputs_r+0x58>
 8004a60:	462a      	mov	r2, r5
 8004a62:	f000 fcd5 	bl	8005410 <_realloc_r>
 8004a66:	4606      	mov	r6, r0
 8004a68:	2800      	cmp	r0, #0
 8004a6a:	d1e1      	bne.n	8004a30 <__ssputs_r+0x70>
 8004a6c:	4650      	mov	r0, sl
 8004a6e:	6921      	ldr	r1, [r4, #16]
 8004a70:	f7ff feca 	bl	8004808 <_free_r>
 8004a74:	e7c7      	b.n	8004a06 <__ssputs_r+0x46>
	...

08004a78 <_svfiprintf_r>:
 8004a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a7c:	4698      	mov	r8, r3
 8004a7e:	898b      	ldrh	r3, [r1, #12]
 8004a80:	4607      	mov	r7, r0
 8004a82:	061b      	lsls	r3, r3, #24
 8004a84:	460d      	mov	r5, r1
 8004a86:	4614      	mov	r4, r2
 8004a88:	b09d      	sub	sp, #116	; 0x74
 8004a8a:	d50e      	bpl.n	8004aaa <_svfiprintf_r+0x32>
 8004a8c:	690b      	ldr	r3, [r1, #16]
 8004a8e:	b963      	cbnz	r3, 8004aaa <_svfiprintf_r+0x32>
 8004a90:	2140      	movs	r1, #64	; 0x40
 8004a92:	f7ff ff21 	bl	80048d8 <_malloc_r>
 8004a96:	6028      	str	r0, [r5, #0]
 8004a98:	6128      	str	r0, [r5, #16]
 8004a9a:	b920      	cbnz	r0, 8004aa6 <_svfiprintf_r+0x2e>
 8004a9c:	230c      	movs	r3, #12
 8004a9e:	603b      	str	r3, [r7, #0]
 8004aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8004aa4:	e0d1      	b.n	8004c4a <_svfiprintf_r+0x1d2>
 8004aa6:	2340      	movs	r3, #64	; 0x40
 8004aa8:	616b      	str	r3, [r5, #20]
 8004aaa:	2300      	movs	r3, #0
 8004aac:	9309      	str	r3, [sp, #36]	; 0x24
 8004aae:	2320      	movs	r3, #32
 8004ab0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ab4:	2330      	movs	r3, #48	; 0x30
 8004ab6:	f04f 0901 	mov.w	r9, #1
 8004aba:	f8cd 800c 	str.w	r8, [sp, #12]
 8004abe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004c64 <_svfiprintf_r+0x1ec>
 8004ac2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ac6:	4623      	mov	r3, r4
 8004ac8:	469a      	mov	sl, r3
 8004aca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ace:	b10a      	cbz	r2, 8004ad4 <_svfiprintf_r+0x5c>
 8004ad0:	2a25      	cmp	r2, #37	; 0x25
 8004ad2:	d1f9      	bne.n	8004ac8 <_svfiprintf_r+0x50>
 8004ad4:	ebba 0b04 	subs.w	fp, sl, r4
 8004ad8:	d00b      	beq.n	8004af2 <_svfiprintf_r+0x7a>
 8004ada:	465b      	mov	r3, fp
 8004adc:	4622      	mov	r2, r4
 8004ade:	4629      	mov	r1, r5
 8004ae0:	4638      	mov	r0, r7
 8004ae2:	f7ff ff6d 	bl	80049c0 <__ssputs_r>
 8004ae6:	3001      	adds	r0, #1
 8004ae8:	f000 80aa 	beq.w	8004c40 <_svfiprintf_r+0x1c8>
 8004aec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004aee:	445a      	add	r2, fp
 8004af0:	9209      	str	r2, [sp, #36]	; 0x24
 8004af2:	f89a 3000 	ldrb.w	r3, [sl]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	f000 80a2 	beq.w	8004c40 <_svfiprintf_r+0x1c8>
 8004afc:	2300      	movs	r3, #0
 8004afe:	f04f 32ff 	mov.w	r2, #4294967295
 8004b02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b06:	f10a 0a01 	add.w	sl, sl, #1
 8004b0a:	9304      	str	r3, [sp, #16]
 8004b0c:	9307      	str	r3, [sp, #28]
 8004b0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b12:	931a      	str	r3, [sp, #104]	; 0x68
 8004b14:	4654      	mov	r4, sl
 8004b16:	2205      	movs	r2, #5
 8004b18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b1c:	4851      	ldr	r0, [pc, #324]	; (8004c64 <_svfiprintf_r+0x1ec>)
 8004b1e:	f000 fc43 	bl	80053a8 <memchr>
 8004b22:	9a04      	ldr	r2, [sp, #16]
 8004b24:	b9d8      	cbnz	r0, 8004b5e <_svfiprintf_r+0xe6>
 8004b26:	06d0      	lsls	r0, r2, #27
 8004b28:	bf44      	itt	mi
 8004b2a:	2320      	movmi	r3, #32
 8004b2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b30:	0711      	lsls	r1, r2, #28
 8004b32:	bf44      	itt	mi
 8004b34:	232b      	movmi	r3, #43	; 0x2b
 8004b36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b3a:	f89a 3000 	ldrb.w	r3, [sl]
 8004b3e:	2b2a      	cmp	r3, #42	; 0x2a
 8004b40:	d015      	beq.n	8004b6e <_svfiprintf_r+0xf6>
 8004b42:	4654      	mov	r4, sl
 8004b44:	2000      	movs	r0, #0
 8004b46:	f04f 0c0a 	mov.w	ip, #10
 8004b4a:	9a07      	ldr	r2, [sp, #28]
 8004b4c:	4621      	mov	r1, r4
 8004b4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b52:	3b30      	subs	r3, #48	; 0x30
 8004b54:	2b09      	cmp	r3, #9
 8004b56:	d94e      	bls.n	8004bf6 <_svfiprintf_r+0x17e>
 8004b58:	b1b0      	cbz	r0, 8004b88 <_svfiprintf_r+0x110>
 8004b5a:	9207      	str	r2, [sp, #28]
 8004b5c:	e014      	b.n	8004b88 <_svfiprintf_r+0x110>
 8004b5e:	eba0 0308 	sub.w	r3, r0, r8
 8004b62:	fa09 f303 	lsl.w	r3, r9, r3
 8004b66:	4313      	orrs	r3, r2
 8004b68:	46a2      	mov	sl, r4
 8004b6a:	9304      	str	r3, [sp, #16]
 8004b6c:	e7d2      	b.n	8004b14 <_svfiprintf_r+0x9c>
 8004b6e:	9b03      	ldr	r3, [sp, #12]
 8004b70:	1d19      	adds	r1, r3, #4
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	9103      	str	r1, [sp, #12]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	bfbb      	ittet	lt
 8004b7a:	425b      	neglt	r3, r3
 8004b7c:	f042 0202 	orrlt.w	r2, r2, #2
 8004b80:	9307      	strge	r3, [sp, #28]
 8004b82:	9307      	strlt	r3, [sp, #28]
 8004b84:	bfb8      	it	lt
 8004b86:	9204      	strlt	r2, [sp, #16]
 8004b88:	7823      	ldrb	r3, [r4, #0]
 8004b8a:	2b2e      	cmp	r3, #46	; 0x2e
 8004b8c:	d10c      	bne.n	8004ba8 <_svfiprintf_r+0x130>
 8004b8e:	7863      	ldrb	r3, [r4, #1]
 8004b90:	2b2a      	cmp	r3, #42	; 0x2a
 8004b92:	d135      	bne.n	8004c00 <_svfiprintf_r+0x188>
 8004b94:	9b03      	ldr	r3, [sp, #12]
 8004b96:	3402      	adds	r4, #2
 8004b98:	1d1a      	adds	r2, r3, #4
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	9203      	str	r2, [sp, #12]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	bfb8      	it	lt
 8004ba2:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ba6:	9305      	str	r3, [sp, #20]
 8004ba8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004c68 <_svfiprintf_r+0x1f0>
 8004bac:	2203      	movs	r2, #3
 8004bae:	4650      	mov	r0, sl
 8004bb0:	7821      	ldrb	r1, [r4, #0]
 8004bb2:	f000 fbf9 	bl	80053a8 <memchr>
 8004bb6:	b140      	cbz	r0, 8004bca <_svfiprintf_r+0x152>
 8004bb8:	2340      	movs	r3, #64	; 0x40
 8004bba:	eba0 000a 	sub.w	r0, r0, sl
 8004bbe:	fa03 f000 	lsl.w	r0, r3, r0
 8004bc2:	9b04      	ldr	r3, [sp, #16]
 8004bc4:	3401      	adds	r4, #1
 8004bc6:	4303      	orrs	r3, r0
 8004bc8:	9304      	str	r3, [sp, #16]
 8004bca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bce:	2206      	movs	r2, #6
 8004bd0:	4826      	ldr	r0, [pc, #152]	; (8004c6c <_svfiprintf_r+0x1f4>)
 8004bd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004bd6:	f000 fbe7 	bl	80053a8 <memchr>
 8004bda:	2800      	cmp	r0, #0
 8004bdc:	d038      	beq.n	8004c50 <_svfiprintf_r+0x1d8>
 8004bde:	4b24      	ldr	r3, [pc, #144]	; (8004c70 <_svfiprintf_r+0x1f8>)
 8004be0:	bb1b      	cbnz	r3, 8004c2a <_svfiprintf_r+0x1b2>
 8004be2:	9b03      	ldr	r3, [sp, #12]
 8004be4:	3307      	adds	r3, #7
 8004be6:	f023 0307 	bic.w	r3, r3, #7
 8004bea:	3308      	adds	r3, #8
 8004bec:	9303      	str	r3, [sp, #12]
 8004bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bf0:	4433      	add	r3, r6
 8004bf2:	9309      	str	r3, [sp, #36]	; 0x24
 8004bf4:	e767      	b.n	8004ac6 <_svfiprintf_r+0x4e>
 8004bf6:	460c      	mov	r4, r1
 8004bf8:	2001      	movs	r0, #1
 8004bfa:	fb0c 3202 	mla	r2, ip, r2, r3
 8004bfe:	e7a5      	b.n	8004b4c <_svfiprintf_r+0xd4>
 8004c00:	2300      	movs	r3, #0
 8004c02:	f04f 0c0a 	mov.w	ip, #10
 8004c06:	4619      	mov	r1, r3
 8004c08:	3401      	adds	r4, #1
 8004c0a:	9305      	str	r3, [sp, #20]
 8004c0c:	4620      	mov	r0, r4
 8004c0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c12:	3a30      	subs	r2, #48	; 0x30
 8004c14:	2a09      	cmp	r2, #9
 8004c16:	d903      	bls.n	8004c20 <_svfiprintf_r+0x1a8>
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d0c5      	beq.n	8004ba8 <_svfiprintf_r+0x130>
 8004c1c:	9105      	str	r1, [sp, #20]
 8004c1e:	e7c3      	b.n	8004ba8 <_svfiprintf_r+0x130>
 8004c20:	4604      	mov	r4, r0
 8004c22:	2301      	movs	r3, #1
 8004c24:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c28:	e7f0      	b.n	8004c0c <_svfiprintf_r+0x194>
 8004c2a:	ab03      	add	r3, sp, #12
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	462a      	mov	r2, r5
 8004c30:	4638      	mov	r0, r7
 8004c32:	4b10      	ldr	r3, [pc, #64]	; (8004c74 <_svfiprintf_r+0x1fc>)
 8004c34:	a904      	add	r1, sp, #16
 8004c36:	f3af 8000 	nop.w
 8004c3a:	1c42      	adds	r2, r0, #1
 8004c3c:	4606      	mov	r6, r0
 8004c3e:	d1d6      	bne.n	8004bee <_svfiprintf_r+0x176>
 8004c40:	89ab      	ldrh	r3, [r5, #12]
 8004c42:	065b      	lsls	r3, r3, #25
 8004c44:	f53f af2c 	bmi.w	8004aa0 <_svfiprintf_r+0x28>
 8004c48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c4a:	b01d      	add	sp, #116	; 0x74
 8004c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c50:	ab03      	add	r3, sp, #12
 8004c52:	9300      	str	r3, [sp, #0]
 8004c54:	462a      	mov	r2, r5
 8004c56:	4638      	mov	r0, r7
 8004c58:	4b06      	ldr	r3, [pc, #24]	; (8004c74 <_svfiprintf_r+0x1fc>)
 8004c5a:	a904      	add	r1, sp, #16
 8004c5c:	f000 f9d4 	bl	8005008 <_printf_i>
 8004c60:	e7eb      	b.n	8004c3a <_svfiprintf_r+0x1c2>
 8004c62:	bf00      	nop
 8004c64:	0800570c 	.word	0x0800570c
 8004c68:	08005712 	.word	0x08005712
 8004c6c:	08005716 	.word	0x08005716
 8004c70:	00000000 	.word	0x00000000
 8004c74:	080049c1 	.word	0x080049c1

08004c78 <__sfputc_r>:
 8004c78:	6893      	ldr	r3, [r2, #8]
 8004c7a:	b410      	push	{r4}
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	6093      	str	r3, [r2, #8]
 8004c82:	da07      	bge.n	8004c94 <__sfputc_r+0x1c>
 8004c84:	6994      	ldr	r4, [r2, #24]
 8004c86:	42a3      	cmp	r3, r4
 8004c88:	db01      	blt.n	8004c8e <__sfputc_r+0x16>
 8004c8a:	290a      	cmp	r1, #10
 8004c8c:	d102      	bne.n	8004c94 <__sfputc_r+0x1c>
 8004c8e:	bc10      	pop	{r4}
 8004c90:	f7ff bade 	b.w	8004250 <__swbuf_r>
 8004c94:	6813      	ldr	r3, [r2, #0]
 8004c96:	1c58      	adds	r0, r3, #1
 8004c98:	6010      	str	r0, [r2, #0]
 8004c9a:	7019      	strb	r1, [r3, #0]
 8004c9c:	4608      	mov	r0, r1
 8004c9e:	bc10      	pop	{r4}
 8004ca0:	4770      	bx	lr

08004ca2 <__sfputs_r>:
 8004ca2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ca4:	4606      	mov	r6, r0
 8004ca6:	460f      	mov	r7, r1
 8004ca8:	4614      	mov	r4, r2
 8004caa:	18d5      	adds	r5, r2, r3
 8004cac:	42ac      	cmp	r4, r5
 8004cae:	d101      	bne.n	8004cb4 <__sfputs_r+0x12>
 8004cb0:	2000      	movs	r0, #0
 8004cb2:	e007      	b.n	8004cc4 <__sfputs_r+0x22>
 8004cb4:	463a      	mov	r2, r7
 8004cb6:	4630      	mov	r0, r6
 8004cb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cbc:	f7ff ffdc 	bl	8004c78 <__sfputc_r>
 8004cc0:	1c43      	adds	r3, r0, #1
 8004cc2:	d1f3      	bne.n	8004cac <__sfputs_r+0xa>
 8004cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004cc8 <_vfiprintf_r>:
 8004cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ccc:	460d      	mov	r5, r1
 8004cce:	4614      	mov	r4, r2
 8004cd0:	4698      	mov	r8, r3
 8004cd2:	4606      	mov	r6, r0
 8004cd4:	b09d      	sub	sp, #116	; 0x74
 8004cd6:	b118      	cbz	r0, 8004ce0 <_vfiprintf_r+0x18>
 8004cd8:	6983      	ldr	r3, [r0, #24]
 8004cda:	b90b      	cbnz	r3, 8004ce0 <_vfiprintf_r+0x18>
 8004cdc:	f7ff fc8e 	bl	80045fc <__sinit>
 8004ce0:	4b89      	ldr	r3, [pc, #548]	; (8004f08 <_vfiprintf_r+0x240>)
 8004ce2:	429d      	cmp	r5, r3
 8004ce4:	d11b      	bne.n	8004d1e <_vfiprintf_r+0x56>
 8004ce6:	6875      	ldr	r5, [r6, #4]
 8004ce8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004cea:	07d9      	lsls	r1, r3, #31
 8004cec:	d405      	bmi.n	8004cfa <_vfiprintf_r+0x32>
 8004cee:	89ab      	ldrh	r3, [r5, #12]
 8004cf0:	059a      	lsls	r2, r3, #22
 8004cf2:	d402      	bmi.n	8004cfa <_vfiprintf_r+0x32>
 8004cf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004cf6:	f7ff fd1f 	bl	8004738 <__retarget_lock_acquire_recursive>
 8004cfa:	89ab      	ldrh	r3, [r5, #12]
 8004cfc:	071b      	lsls	r3, r3, #28
 8004cfe:	d501      	bpl.n	8004d04 <_vfiprintf_r+0x3c>
 8004d00:	692b      	ldr	r3, [r5, #16]
 8004d02:	b9eb      	cbnz	r3, 8004d40 <_vfiprintf_r+0x78>
 8004d04:	4629      	mov	r1, r5
 8004d06:	4630      	mov	r0, r6
 8004d08:	f7ff faf4 	bl	80042f4 <__swsetup_r>
 8004d0c:	b1c0      	cbz	r0, 8004d40 <_vfiprintf_r+0x78>
 8004d0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d10:	07dc      	lsls	r4, r3, #31
 8004d12:	d50e      	bpl.n	8004d32 <_vfiprintf_r+0x6a>
 8004d14:	f04f 30ff 	mov.w	r0, #4294967295
 8004d18:	b01d      	add	sp, #116	; 0x74
 8004d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d1e:	4b7b      	ldr	r3, [pc, #492]	; (8004f0c <_vfiprintf_r+0x244>)
 8004d20:	429d      	cmp	r5, r3
 8004d22:	d101      	bne.n	8004d28 <_vfiprintf_r+0x60>
 8004d24:	68b5      	ldr	r5, [r6, #8]
 8004d26:	e7df      	b.n	8004ce8 <_vfiprintf_r+0x20>
 8004d28:	4b79      	ldr	r3, [pc, #484]	; (8004f10 <_vfiprintf_r+0x248>)
 8004d2a:	429d      	cmp	r5, r3
 8004d2c:	bf08      	it	eq
 8004d2e:	68f5      	ldreq	r5, [r6, #12]
 8004d30:	e7da      	b.n	8004ce8 <_vfiprintf_r+0x20>
 8004d32:	89ab      	ldrh	r3, [r5, #12]
 8004d34:	0598      	lsls	r0, r3, #22
 8004d36:	d4ed      	bmi.n	8004d14 <_vfiprintf_r+0x4c>
 8004d38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d3a:	f7ff fcfe 	bl	800473a <__retarget_lock_release_recursive>
 8004d3e:	e7e9      	b.n	8004d14 <_vfiprintf_r+0x4c>
 8004d40:	2300      	movs	r3, #0
 8004d42:	9309      	str	r3, [sp, #36]	; 0x24
 8004d44:	2320      	movs	r3, #32
 8004d46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d4a:	2330      	movs	r3, #48	; 0x30
 8004d4c:	f04f 0901 	mov.w	r9, #1
 8004d50:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d54:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004f14 <_vfiprintf_r+0x24c>
 8004d58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d5c:	4623      	mov	r3, r4
 8004d5e:	469a      	mov	sl, r3
 8004d60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d64:	b10a      	cbz	r2, 8004d6a <_vfiprintf_r+0xa2>
 8004d66:	2a25      	cmp	r2, #37	; 0x25
 8004d68:	d1f9      	bne.n	8004d5e <_vfiprintf_r+0x96>
 8004d6a:	ebba 0b04 	subs.w	fp, sl, r4
 8004d6e:	d00b      	beq.n	8004d88 <_vfiprintf_r+0xc0>
 8004d70:	465b      	mov	r3, fp
 8004d72:	4622      	mov	r2, r4
 8004d74:	4629      	mov	r1, r5
 8004d76:	4630      	mov	r0, r6
 8004d78:	f7ff ff93 	bl	8004ca2 <__sfputs_r>
 8004d7c:	3001      	adds	r0, #1
 8004d7e:	f000 80aa 	beq.w	8004ed6 <_vfiprintf_r+0x20e>
 8004d82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d84:	445a      	add	r2, fp
 8004d86:	9209      	str	r2, [sp, #36]	; 0x24
 8004d88:	f89a 3000 	ldrb.w	r3, [sl]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f000 80a2 	beq.w	8004ed6 <_vfiprintf_r+0x20e>
 8004d92:	2300      	movs	r3, #0
 8004d94:	f04f 32ff 	mov.w	r2, #4294967295
 8004d98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d9c:	f10a 0a01 	add.w	sl, sl, #1
 8004da0:	9304      	str	r3, [sp, #16]
 8004da2:	9307      	str	r3, [sp, #28]
 8004da4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004da8:	931a      	str	r3, [sp, #104]	; 0x68
 8004daa:	4654      	mov	r4, sl
 8004dac:	2205      	movs	r2, #5
 8004dae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004db2:	4858      	ldr	r0, [pc, #352]	; (8004f14 <_vfiprintf_r+0x24c>)
 8004db4:	f000 faf8 	bl	80053a8 <memchr>
 8004db8:	9a04      	ldr	r2, [sp, #16]
 8004dba:	b9d8      	cbnz	r0, 8004df4 <_vfiprintf_r+0x12c>
 8004dbc:	06d1      	lsls	r1, r2, #27
 8004dbe:	bf44      	itt	mi
 8004dc0:	2320      	movmi	r3, #32
 8004dc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004dc6:	0713      	lsls	r3, r2, #28
 8004dc8:	bf44      	itt	mi
 8004dca:	232b      	movmi	r3, #43	; 0x2b
 8004dcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004dd0:	f89a 3000 	ldrb.w	r3, [sl]
 8004dd4:	2b2a      	cmp	r3, #42	; 0x2a
 8004dd6:	d015      	beq.n	8004e04 <_vfiprintf_r+0x13c>
 8004dd8:	4654      	mov	r4, sl
 8004dda:	2000      	movs	r0, #0
 8004ddc:	f04f 0c0a 	mov.w	ip, #10
 8004de0:	9a07      	ldr	r2, [sp, #28]
 8004de2:	4621      	mov	r1, r4
 8004de4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004de8:	3b30      	subs	r3, #48	; 0x30
 8004dea:	2b09      	cmp	r3, #9
 8004dec:	d94e      	bls.n	8004e8c <_vfiprintf_r+0x1c4>
 8004dee:	b1b0      	cbz	r0, 8004e1e <_vfiprintf_r+0x156>
 8004df0:	9207      	str	r2, [sp, #28]
 8004df2:	e014      	b.n	8004e1e <_vfiprintf_r+0x156>
 8004df4:	eba0 0308 	sub.w	r3, r0, r8
 8004df8:	fa09 f303 	lsl.w	r3, r9, r3
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	46a2      	mov	sl, r4
 8004e00:	9304      	str	r3, [sp, #16]
 8004e02:	e7d2      	b.n	8004daa <_vfiprintf_r+0xe2>
 8004e04:	9b03      	ldr	r3, [sp, #12]
 8004e06:	1d19      	adds	r1, r3, #4
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	9103      	str	r1, [sp, #12]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	bfbb      	ittet	lt
 8004e10:	425b      	neglt	r3, r3
 8004e12:	f042 0202 	orrlt.w	r2, r2, #2
 8004e16:	9307      	strge	r3, [sp, #28]
 8004e18:	9307      	strlt	r3, [sp, #28]
 8004e1a:	bfb8      	it	lt
 8004e1c:	9204      	strlt	r2, [sp, #16]
 8004e1e:	7823      	ldrb	r3, [r4, #0]
 8004e20:	2b2e      	cmp	r3, #46	; 0x2e
 8004e22:	d10c      	bne.n	8004e3e <_vfiprintf_r+0x176>
 8004e24:	7863      	ldrb	r3, [r4, #1]
 8004e26:	2b2a      	cmp	r3, #42	; 0x2a
 8004e28:	d135      	bne.n	8004e96 <_vfiprintf_r+0x1ce>
 8004e2a:	9b03      	ldr	r3, [sp, #12]
 8004e2c:	3402      	adds	r4, #2
 8004e2e:	1d1a      	adds	r2, r3, #4
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	9203      	str	r2, [sp, #12]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	bfb8      	it	lt
 8004e38:	f04f 33ff 	movlt.w	r3, #4294967295
 8004e3c:	9305      	str	r3, [sp, #20]
 8004e3e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8004f18 <_vfiprintf_r+0x250>
 8004e42:	2203      	movs	r2, #3
 8004e44:	4650      	mov	r0, sl
 8004e46:	7821      	ldrb	r1, [r4, #0]
 8004e48:	f000 faae 	bl	80053a8 <memchr>
 8004e4c:	b140      	cbz	r0, 8004e60 <_vfiprintf_r+0x198>
 8004e4e:	2340      	movs	r3, #64	; 0x40
 8004e50:	eba0 000a 	sub.w	r0, r0, sl
 8004e54:	fa03 f000 	lsl.w	r0, r3, r0
 8004e58:	9b04      	ldr	r3, [sp, #16]
 8004e5a:	3401      	adds	r4, #1
 8004e5c:	4303      	orrs	r3, r0
 8004e5e:	9304      	str	r3, [sp, #16]
 8004e60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e64:	2206      	movs	r2, #6
 8004e66:	482d      	ldr	r0, [pc, #180]	; (8004f1c <_vfiprintf_r+0x254>)
 8004e68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e6c:	f000 fa9c 	bl	80053a8 <memchr>
 8004e70:	2800      	cmp	r0, #0
 8004e72:	d03f      	beq.n	8004ef4 <_vfiprintf_r+0x22c>
 8004e74:	4b2a      	ldr	r3, [pc, #168]	; (8004f20 <_vfiprintf_r+0x258>)
 8004e76:	bb1b      	cbnz	r3, 8004ec0 <_vfiprintf_r+0x1f8>
 8004e78:	9b03      	ldr	r3, [sp, #12]
 8004e7a:	3307      	adds	r3, #7
 8004e7c:	f023 0307 	bic.w	r3, r3, #7
 8004e80:	3308      	adds	r3, #8
 8004e82:	9303      	str	r3, [sp, #12]
 8004e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e86:	443b      	add	r3, r7
 8004e88:	9309      	str	r3, [sp, #36]	; 0x24
 8004e8a:	e767      	b.n	8004d5c <_vfiprintf_r+0x94>
 8004e8c:	460c      	mov	r4, r1
 8004e8e:	2001      	movs	r0, #1
 8004e90:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e94:	e7a5      	b.n	8004de2 <_vfiprintf_r+0x11a>
 8004e96:	2300      	movs	r3, #0
 8004e98:	f04f 0c0a 	mov.w	ip, #10
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	3401      	adds	r4, #1
 8004ea0:	9305      	str	r3, [sp, #20]
 8004ea2:	4620      	mov	r0, r4
 8004ea4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ea8:	3a30      	subs	r2, #48	; 0x30
 8004eaa:	2a09      	cmp	r2, #9
 8004eac:	d903      	bls.n	8004eb6 <_vfiprintf_r+0x1ee>
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d0c5      	beq.n	8004e3e <_vfiprintf_r+0x176>
 8004eb2:	9105      	str	r1, [sp, #20]
 8004eb4:	e7c3      	b.n	8004e3e <_vfiprintf_r+0x176>
 8004eb6:	4604      	mov	r4, r0
 8004eb8:	2301      	movs	r3, #1
 8004eba:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ebe:	e7f0      	b.n	8004ea2 <_vfiprintf_r+0x1da>
 8004ec0:	ab03      	add	r3, sp, #12
 8004ec2:	9300      	str	r3, [sp, #0]
 8004ec4:	462a      	mov	r2, r5
 8004ec6:	4630      	mov	r0, r6
 8004ec8:	4b16      	ldr	r3, [pc, #88]	; (8004f24 <_vfiprintf_r+0x25c>)
 8004eca:	a904      	add	r1, sp, #16
 8004ecc:	f3af 8000 	nop.w
 8004ed0:	4607      	mov	r7, r0
 8004ed2:	1c78      	adds	r0, r7, #1
 8004ed4:	d1d6      	bne.n	8004e84 <_vfiprintf_r+0x1bc>
 8004ed6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ed8:	07d9      	lsls	r1, r3, #31
 8004eda:	d405      	bmi.n	8004ee8 <_vfiprintf_r+0x220>
 8004edc:	89ab      	ldrh	r3, [r5, #12]
 8004ede:	059a      	lsls	r2, r3, #22
 8004ee0:	d402      	bmi.n	8004ee8 <_vfiprintf_r+0x220>
 8004ee2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ee4:	f7ff fc29 	bl	800473a <__retarget_lock_release_recursive>
 8004ee8:	89ab      	ldrh	r3, [r5, #12]
 8004eea:	065b      	lsls	r3, r3, #25
 8004eec:	f53f af12 	bmi.w	8004d14 <_vfiprintf_r+0x4c>
 8004ef0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ef2:	e711      	b.n	8004d18 <_vfiprintf_r+0x50>
 8004ef4:	ab03      	add	r3, sp, #12
 8004ef6:	9300      	str	r3, [sp, #0]
 8004ef8:	462a      	mov	r2, r5
 8004efa:	4630      	mov	r0, r6
 8004efc:	4b09      	ldr	r3, [pc, #36]	; (8004f24 <_vfiprintf_r+0x25c>)
 8004efe:	a904      	add	r1, sp, #16
 8004f00:	f000 f882 	bl	8005008 <_printf_i>
 8004f04:	e7e4      	b.n	8004ed0 <_vfiprintf_r+0x208>
 8004f06:	bf00      	nop
 8004f08:	080056cc 	.word	0x080056cc
 8004f0c:	080056ec 	.word	0x080056ec
 8004f10:	080056ac 	.word	0x080056ac
 8004f14:	0800570c 	.word	0x0800570c
 8004f18:	08005712 	.word	0x08005712
 8004f1c:	08005716 	.word	0x08005716
 8004f20:	00000000 	.word	0x00000000
 8004f24:	08004ca3 	.word	0x08004ca3

08004f28 <_printf_common>:
 8004f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f2c:	4616      	mov	r6, r2
 8004f2e:	4699      	mov	r9, r3
 8004f30:	688a      	ldr	r2, [r1, #8]
 8004f32:	690b      	ldr	r3, [r1, #16]
 8004f34:	4607      	mov	r7, r0
 8004f36:	4293      	cmp	r3, r2
 8004f38:	bfb8      	it	lt
 8004f3a:	4613      	movlt	r3, r2
 8004f3c:	6033      	str	r3, [r6, #0]
 8004f3e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f42:	460c      	mov	r4, r1
 8004f44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f48:	b10a      	cbz	r2, 8004f4e <_printf_common+0x26>
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	6033      	str	r3, [r6, #0]
 8004f4e:	6823      	ldr	r3, [r4, #0]
 8004f50:	0699      	lsls	r1, r3, #26
 8004f52:	bf42      	ittt	mi
 8004f54:	6833      	ldrmi	r3, [r6, #0]
 8004f56:	3302      	addmi	r3, #2
 8004f58:	6033      	strmi	r3, [r6, #0]
 8004f5a:	6825      	ldr	r5, [r4, #0]
 8004f5c:	f015 0506 	ands.w	r5, r5, #6
 8004f60:	d106      	bne.n	8004f70 <_printf_common+0x48>
 8004f62:	f104 0a19 	add.w	sl, r4, #25
 8004f66:	68e3      	ldr	r3, [r4, #12]
 8004f68:	6832      	ldr	r2, [r6, #0]
 8004f6a:	1a9b      	subs	r3, r3, r2
 8004f6c:	42ab      	cmp	r3, r5
 8004f6e:	dc28      	bgt.n	8004fc2 <_printf_common+0x9a>
 8004f70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f74:	1e13      	subs	r3, r2, #0
 8004f76:	6822      	ldr	r2, [r4, #0]
 8004f78:	bf18      	it	ne
 8004f7a:	2301      	movne	r3, #1
 8004f7c:	0692      	lsls	r2, r2, #26
 8004f7e:	d42d      	bmi.n	8004fdc <_printf_common+0xb4>
 8004f80:	4649      	mov	r1, r9
 8004f82:	4638      	mov	r0, r7
 8004f84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f88:	47c0      	blx	r8
 8004f8a:	3001      	adds	r0, #1
 8004f8c:	d020      	beq.n	8004fd0 <_printf_common+0xa8>
 8004f8e:	6823      	ldr	r3, [r4, #0]
 8004f90:	68e5      	ldr	r5, [r4, #12]
 8004f92:	f003 0306 	and.w	r3, r3, #6
 8004f96:	2b04      	cmp	r3, #4
 8004f98:	bf18      	it	ne
 8004f9a:	2500      	movne	r5, #0
 8004f9c:	6832      	ldr	r2, [r6, #0]
 8004f9e:	f04f 0600 	mov.w	r6, #0
 8004fa2:	68a3      	ldr	r3, [r4, #8]
 8004fa4:	bf08      	it	eq
 8004fa6:	1aad      	subeq	r5, r5, r2
 8004fa8:	6922      	ldr	r2, [r4, #16]
 8004faa:	bf08      	it	eq
 8004fac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	bfc4      	itt	gt
 8004fb4:	1a9b      	subgt	r3, r3, r2
 8004fb6:	18ed      	addgt	r5, r5, r3
 8004fb8:	341a      	adds	r4, #26
 8004fba:	42b5      	cmp	r5, r6
 8004fbc:	d11a      	bne.n	8004ff4 <_printf_common+0xcc>
 8004fbe:	2000      	movs	r0, #0
 8004fc0:	e008      	b.n	8004fd4 <_printf_common+0xac>
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	4652      	mov	r2, sl
 8004fc6:	4649      	mov	r1, r9
 8004fc8:	4638      	mov	r0, r7
 8004fca:	47c0      	blx	r8
 8004fcc:	3001      	adds	r0, #1
 8004fce:	d103      	bne.n	8004fd8 <_printf_common+0xb0>
 8004fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fd8:	3501      	adds	r5, #1
 8004fda:	e7c4      	b.n	8004f66 <_printf_common+0x3e>
 8004fdc:	2030      	movs	r0, #48	; 0x30
 8004fde:	18e1      	adds	r1, r4, r3
 8004fe0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004fe4:	1c5a      	adds	r2, r3, #1
 8004fe6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004fea:	4422      	add	r2, r4
 8004fec:	3302      	adds	r3, #2
 8004fee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ff2:	e7c5      	b.n	8004f80 <_printf_common+0x58>
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	4622      	mov	r2, r4
 8004ff8:	4649      	mov	r1, r9
 8004ffa:	4638      	mov	r0, r7
 8004ffc:	47c0      	blx	r8
 8004ffe:	3001      	adds	r0, #1
 8005000:	d0e6      	beq.n	8004fd0 <_printf_common+0xa8>
 8005002:	3601      	adds	r6, #1
 8005004:	e7d9      	b.n	8004fba <_printf_common+0x92>
	...

08005008 <_printf_i>:
 8005008:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800500c:	7e0f      	ldrb	r7, [r1, #24]
 800500e:	4691      	mov	r9, r2
 8005010:	2f78      	cmp	r7, #120	; 0x78
 8005012:	4680      	mov	r8, r0
 8005014:	460c      	mov	r4, r1
 8005016:	469a      	mov	sl, r3
 8005018:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800501a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800501e:	d807      	bhi.n	8005030 <_printf_i+0x28>
 8005020:	2f62      	cmp	r7, #98	; 0x62
 8005022:	d80a      	bhi.n	800503a <_printf_i+0x32>
 8005024:	2f00      	cmp	r7, #0
 8005026:	f000 80d9 	beq.w	80051dc <_printf_i+0x1d4>
 800502a:	2f58      	cmp	r7, #88	; 0x58
 800502c:	f000 80a4 	beq.w	8005178 <_printf_i+0x170>
 8005030:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005034:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005038:	e03a      	b.n	80050b0 <_printf_i+0xa8>
 800503a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800503e:	2b15      	cmp	r3, #21
 8005040:	d8f6      	bhi.n	8005030 <_printf_i+0x28>
 8005042:	a101      	add	r1, pc, #4	; (adr r1, 8005048 <_printf_i+0x40>)
 8005044:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005048:	080050a1 	.word	0x080050a1
 800504c:	080050b5 	.word	0x080050b5
 8005050:	08005031 	.word	0x08005031
 8005054:	08005031 	.word	0x08005031
 8005058:	08005031 	.word	0x08005031
 800505c:	08005031 	.word	0x08005031
 8005060:	080050b5 	.word	0x080050b5
 8005064:	08005031 	.word	0x08005031
 8005068:	08005031 	.word	0x08005031
 800506c:	08005031 	.word	0x08005031
 8005070:	08005031 	.word	0x08005031
 8005074:	080051c3 	.word	0x080051c3
 8005078:	080050e5 	.word	0x080050e5
 800507c:	080051a5 	.word	0x080051a5
 8005080:	08005031 	.word	0x08005031
 8005084:	08005031 	.word	0x08005031
 8005088:	080051e5 	.word	0x080051e5
 800508c:	08005031 	.word	0x08005031
 8005090:	080050e5 	.word	0x080050e5
 8005094:	08005031 	.word	0x08005031
 8005098:	08005031 	.word	0x08005031
 800509c:	080051ad 	.word	0x080051ad
 80050a0:	682b      	ldr	r3, [r5, #0]
 80050a2:	1d1a      	adds	r2, r3, #4
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	602a      	str	r2, [r5, #0]
 80050a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050b0:	2301      	movs	r3, #1
 80050b2:	e0a4      	b.n	80051fe <_printf_i+0x1f6>
 80050b4:	6820      	ldr	r0, [r4, #0]
 80050b6:	6829      	ldr	r1, [r5, #0]
 80050b8:	0606      	lsls	r6, r0, #24
 80050ba:	f101 0304 	add.w	r3, r1, #4
 80050be:	d50a      	bpl.n	80050d6 <_printf_i+0xce>
 80050c0:	680e      	ldr	r6, [r1, #0]
 80050c2:	602b      	str	r3, [r5, #0]
 80050c4:	2e00      	cmp	r6, #0
 80050c6:	da03      	bge.n	80050d0 <_printf_i+0xc8>
 80050c8:	232d      	movs	r3, #45	; 0x2d
 80050ca:	4276      	negs	r6, r6
 80050cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050d0:	230a      	movs	r3, #10
 80050d2:	485e      	ldr	r0, [pc, #376]	; (800524c <_printf_i+0x244>)
 80050d4:	e019      	b.n	800510a <_printf_i+0x102>
 80050d6:	680e      	ldr	r6, [r1, #0]
 80050d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80050dc:	602b      	str	r3, [r5, #0]
 80050de:	bf18      	it	ne
 80050e0:	b236      	sxthne	r6, r6
 80050e2:	e7ef      	b.n	80050c4 <_printf_i+0xbc>
 80050e4:	682b      	ldr	r3, [r5, #0]
 80050e6:	6820      	ldr	r0, [r4, #0]
 80050e8:	1d19      	adds	r1, r3, #4
 80050ea:	6029      	str	r1, [r5, #0]
 80050ec:	0601      	lsls	r1, r0, #24
 80050ee:	d501      	bpl.n	80050f4 <_printf_i+0xec>
 80050f0:	681e      	ldr	r6, [r3, #0]
 80050f2:	e002      	b.n	80050fa <_printf_i+0xf2>
 80050f4:	0646      	lsls	r6, r0, #25
 80050f6:	d5fb      	bpl.n	80050f0 <_printf_i+0xe8>
 80050f8:	881e      	ldrh	r6, [r3, #0]
 80050fa:	2f6f      	cmp	r7, #111	; 0x6f
 80050fc:	bf0c      	ite	eq
 80050fe:	2308      	moveq	r3, #8
 8005100:	230a      	movne	r3, #10
 8005102:	4852      	ldr	r0, [pc, #328]	; (800524c <_printf_i+0x244>)
 8005104:	2100      	movs	r1, #0
 8005106:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800510a:	6865      	ldr	r5, [r4, #4]
 800510c:	2d00      	cmp	r5, #0
 800510e:	bfa8      	it	ge
 8005110:	6821      	ldrge	r1, [r4, #0]
 8005112:	60a5      	str	r5, [r4, #8]
 8005114:	bfa4      	itt	ge
 8005116:	f021 0104 	bicge.w	r1, r1, #4
 800511a:	6021      	strge	r1, [r4, #0]
 800511c:	b90e      	cbnz	r6, 8005122 <_printf_i+0x11a>
 800511e:	2d00      	cmp	r5, #0
 8005120:	d04d      	beq.n	80051be <_printf_i+0x1b6>
 8005122:	4615      	mov	r5, r2
 8005124:	fbb6 f1f3 	udiv	r1, r6, r3
 8005128:	fb03 6711 	mls	r7, r3, r1, r6
 800512c:	5dc7      	ldrb	r7, [r0, r7]
 800512e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005132:	4637      	mov	r7, r6
 8005134:	42bb      	cmp	r3, r7
 8005136:	460e      	mov	r6, r1
 8005138:	d9f4      	bls.n	8005124 <_printf_i+0x11c>
 800513a:	2b08      	cmp	r3, #8
 800513c:	d10b      	bne.n	8005156 <_printf_i+0x14e>
 800513e:	6823      	ldr	r3, [r4, #0]
 8005140:	07de      	lsls	r6, r3, #31
 8005142:	d508      	bpl.n	8005156 <_printf_i+0x14e>
 8005144:	6923      	ldr	r3, [r4, #16]
 8005146:	6861      	ldr	r1, [r4, #4]
 8005148:	4299      	cmp	r1, r3
 800514a:	bfde      	ittt	le
 800514c:	2330      	movle	r3, #48	; 0x30
 800514e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005152:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005156:	1b52      	subs	r2, r2, r5
 8005158:	6122      	str	r2, [r4, #16]
 800515a:	464b      	mov	r3, r9
 800515c:	4621      	mov	r1, r4
 800515e:	4640      	mov	r0, r8
 8005160:	f8cd a000 	str.w	sl, [sp]
 8005164:	aa03      	add	r2, sp, #12
 8005166:	f7ff fedf 	bl	8004f28 <_printf_common>
 800516a:	3001      	adds	r0, #1
 800516c:	d14c      	bne.n	8005208 <_printf_i+0x200>
 800516e:	f04f 30ff 	mov.w	r0, #4294967295
 8005172:	b004      	add	sp, #16
 8005174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005178:	4834      	ldr	r0, [pc, #208]	; (800524c <_printf_i+0x244>)
 800517a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800517e:	6829      	ldr	r1, [r5, #0]
 8005180:	6823      	ldr	r3, [r4, #0]
 8005182:	f851 6b04 	ldr.w	r6, [r1], #4
 8005186:	6029      	str	r1, [r5, #0]
 8005188:	061d      	lsls	r5, r3, #24
 800518a:	d514      	bpl.n	80051b6 <_printf_i+0x1ae>
 800518c:	07df      	lsls	r7, r3, #31
 800518e:	bf44      	itt	mi
 8005190:	f043 0320 	orrmi.w	r3, r3, #32
 8005194:	6023      	strmi	r3, [r4, #0]
 8005196:	b91e      	cbnz	r6, 80051a0 <_printf_i+0x198>
 8005198:	6823      	ldr	r3, [r4, #0]
 800519a:	f023 0320 	bic.w	r3, r3, #32
 800519e:	6023      	str	r3, [r4, #0]
 80051a0:	2310      	movs	r3, #16
 80051a2:	e7af      	b.n	8005104 <_printf_i+0xfc>
 80051a4:	6823      	ldr	r3, [r4, #0]
 80051a6:	f043 0320 	orr.w	r3, r3, #32
 80051aa:	6023      	str	r3, [r4, #0]
 80051ac:	2378      	movs	r3, #120	; 0x78
 80051ae:	4828      	ldr	r0, [pc, #160]	; (8005250 <_printf_i+0x248>)
 80051b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80051b4:	e7e3      	b.n	800517e <_printf_i+0x176>
 80051b6:	0659      	lsls	r1, r3, #25
 80051b8:	bf48      	it	mi
 80051ba:	b2b6      	uxthmi	r6, r6
 80051bc:	e7e6      	b.n	800518c <_printf_i+0x184>
 80051be:	4615      	mov	r5, r2
 80051c0:	e7bb      	b.n	800513a <_printf_i+0x132>
 80051c2:	682b      	ldr	r3, [r5, #0]
 80051c4:	6826      	ldr	r6, [r4, #0]
 80051c6:	1d18      	adds	r0, r3, #4
 80051c8:	6961      	ldr	r1, [r4, #20]
 80051ca:	6028      	str	r0, [r5, #0]
 80051cc:	0635      	lsls	r5, r6, #24
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	d501      	bpl.n	80051d6 <_printf_i+0x1ce>
 80051d2:	6019      	str	r1, [r3, #0]
 80051d4:	e002      	b.n	80051dc <_printf_i+0x1d4>
 80051d6:	0670      	lsls	r0, r6, #25
 80051d8:	d5fb      	bpl.n	80051d2 <_printf_i+0x1ca>
 80051da:	8019      	strh	r1, [r3, #0]
 80051dc:	2300      	movs	r3, #0
 80051de:	4615      	mov	r5, r2
 80051e0:	6123      	str	r3, [r4, #16]
 80051e2:	e7ba      	b.n	800515a <_printf_i+0x152>
 80051e4:	682b      	ldr	r3, [r5, #0]
 80051e6:	2100      	movs	r1, #0
 80051e8:	1d1a      	adds	r2, r3, #4
 80051ea:	602a      	str	r2, [r5, #0]
 80051ec:	681d      	ldr	r5, [r3, #0]
 80051ee:	6862      	ldr	r2, [r4, #4]
 80051f0:	4628      	mov	r0, r5
 80051f2:	f000 f8d9 	bl	80053a8 <memchr>
 80051f6:	b108      	cbz	r0, 80051fc <_printf_i+0x1f4>
 80051f8:	1b40      	subs	r0, r0, r5
 80051fa:	6060      	str	r0, [r4, #4]
 80051fc:	6863      	ldr	r3, [r4, #4]
 80051fe:	6123      	str	r3, [r4, #16]
 8005200:	2300      	movs	r3, #0
 8005202:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005206:	e7a8      	b.n	800515a <_printf_i+0x152>
 8005208:	462a      	mov	r2, r5
 800520a:	4649      	mov	r1, r9
 800520c:	4640      	mov	r0, r8
 800520e:	6923      	ldr	r3, [r4, #16]
 8005210:	47d0      	blx	sl
 8005212:	3001      	adds	r0, #1
 8005214:	d0ab      	beq.n	800516e <_printf_i+0x166>
 8005216:	6823      	ldr	r3, [r4, #0]
 8005218:	079b      	lsls	r3, r3, #30
 800521a:	d413      	bmi.n	8005244 <_printf_i+0x23c>
 800521c:	68e0      	ldr	r0, [r4, #12]
 800521e:	9b03      	ldr	r3, [sp, #12]
 8005220:	4298      	cmp	r0, r3
 8005222:	bfb8      	it	lt
 8005224:	4618      	movlt	r0, r3
 8005226:	e7a4      	b.n	8005172 <_printf_i+0x16a>
 8005228:	2301      	movs	r3, #1
 800522a:	4632      	mov	r2, r6
 800522c:	4649      	mov	r1, r9
 800522e:	4640      	mov	r0, r8
 8005230:	47d0      	blx	sl
 8005232:	3001      	adds	r0, #1
 8005234:	d09b      	beq.n	800516e <_printf_i+0x166>
 8005236:	3501      	adds	r5, #1
 8005238:	68e3      	ldr	r3, [r4, #12]
 800523a:	9903      	ldr	r1, [sp, #12]
 800523c:	1a5b      	subs	r3, r3, r1
 800523e:	42ab      	cmp	r3, r5
 8005240:	dcf2      	bgt.n	8005228 <_printf_i+0x220>
 8005242:	e7eb      	b.n	800521c <_printf_i+0x214>
 8005244:	2500      	movs	r5, #0
 8005246:	f104 0619 	add.w	r6, r4, #25
 800524a:	e7f5      	b.n	8005238 <_printf_i+0x230>
 800524c:	0800571d 	.word	0x0800571d
 8005250:	0800572e 	.word	0x0800572e

08005254 <_sbrk_r>:
 8005254:	b538      	push	{r3, r4, r5, lr}
 8005256:	2300      	movs	r3, #0
 8005258:	4d05      	ldr	r5, [pc, #20]	; (8005270 <_sbrk_r+0x1c>)
 800525a:	4604      	mov	r4, r0
 800525c:	4608      	mov	r0, r1
 800525e:	602b      	str	r3, [r5, #0]
 8005260:	f7fc faac 	bl	80017bc <_sbrk>
 8005264:	1c43      	adds	r3, r0, #1
 8005266:	d102      	bne.n	800526e <_sbrk_r+0x1a>
 8005268:	682b      	ldr	r3, [r5, #0]
 800526a:	b103      	cbz	r3, 800526e <_sbrk_r+0x1a>
 800526c:	6023      	str	r3, [r4, #0]
 800526e:	bd38      	pop	{r3, r4, r5, pc}
 8005270:	200003d0 	.word	0x200003d0

08005274 <__sread>:
 8005274:	b510      	push	{r4, lr}
 8005276:	460c      	mov	r4, r1
 8005278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800527c:	f000 f8f8 	bl	8005470 <_read_r>
 8005280:	2800      	cmp	r0, #0
 8005282:	bfab      	itete	ge
 8005284:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005286:	89a3      	ldrhlt	r3, [r4, #12]
 8005288:	181b      	addge	r3, r3, r0
 800528a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800528e:	bfac      	ite	ge
 8005290:	6563      	strge	r3, [r4, #84]	; 0x54
 8005292:	81a3      	strhlt	r3, [r4, #12]
 8005294:	bd10      	pop	{r4, pc}

08005296 <__swrite>:
 8005296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800529a:	461f      	mov	r7, r3
 800529c:	898b      	ldrh	r3, [r1, #12]
 800529e:	4605      	mov	r5, r0
 80052a0:	05db      	lsls	r3, r3, #23
 80052a2:	460c      	mov	r4, r1
 80052a4:	4616      	mov	r6, r2
 80052a6:	d505      	bpl.n	80052b4 <__swrite+0x1e>
 80052a8:	2302      	movs	r3, #2
 80052aa:	2200      	movs	r2, #0
 80052ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052b0:	f000 f868 	bl	8005384 <_lseek_r>
 80052b4:	89a3      	ldrh	r3, [r4, #12]
 80052b6:	4632      	mov	r2, r6
 80052b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052bc:	81a3      	strh	r3, [r4, #12]
 80052be:	4628      	mov	r0, r5
 80052c0:	463b      	mov	r3, r7
 80052c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052ca:	f000 b817 	b.w	80052fc <_write_r>

080052ce <__sseek>:
 80052ce:	b510      	push	{r4, lr}
 80052d0:	460c      	mov	r4, r1
 80052d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052d6:	f000 f855 	bl	8005384 <_lseek_r>
 80052da:	1c43      	adds	r3, r0, #1
 80052dc:	89a3      	ldrh	r3, [r4, #12]
 80052de:	bf15      	itete	ne
 80052e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80052e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80052e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80052ea:	81a3      	strheq	r3, [r4, #12]
 80052ec:	bf18      	it	ne
 80052ee:	81a3      	strhne	r3, [r4, #12]
 80052f0:	bd10      	pop	{r4, pc}

080052f2 <__sclose>:
 80052f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052f6:	f000 b813 	b.w	8005320 <_close_r>
	...

080052fc <_write_r>:
 80052fc:	b538      	push	{r3, r4, r5, lr}
 80052fe:	4604      	mov	r4, r0
 8005300:	4608      	mov	r0, r1
 8005302:	4611      	mov	r1, r2
 8005304:	2200      	movs	r2, #0
 8005306:	4d05      	ldr	r5, [pc, #20]	; (800531c <_write_r+0x20>)
 8005308:	602a      	str	r2, [r5, #0]
 800530a:	461a      	mov	r2, r3
 800530c:	f7fb fdb0 	bl	8000e70 <_write>
 8005310:	1c43      	adds	r3, r0, #1
 8005312:	d102      	bne.n	800531a <_write_r+0x1e>
 8005314:	682b      	ldr	r3, [r5, #0]
 8005316:	b103      	cbz	r3, 800531a <_write_r+0x1e>
 8005318:	6023      	str	r3, [r4, #0]
 800531a:	bd38      	pop	{r3, r4, r5, pc}
 800531c:	200003d0 	.word	0x200003d0

08005320 <_close_r>:
 8005320:	b538      	push	{r3, r4, r5, lr}
 8005322:	2300      	movs	r3, #0
 8005324:	4d05      	ldr	r5, [pc, #20]	; (800533c <_close_r+0x1c>)
 8005326:	4604      	mov	r4, r0
 8005328:	4608      	mov	r0, r1
 800532a:	602b      	str	r3, [r5, #0]
 800532c:	f7fc fa16 	bl	800175c <_close>
 8005330:	1c43      	adds	r3, r0, #1
 8005332:	d102      	bne.n	800533a <_close_r+0x1a>
 8005334:	682b      	ldr	r3, [r5, #0]
 8005336:	b103      	cbz	r3, 800533a <_close_r+0x1a>
 8005338:	6023      	str	r3, [r4, #0]
 800533a:	bd38      	pop	{r3, r4, r5, pc}
 800533c:	200003d0 	.word	0x200003d0

08005340 <_fstat_r>:
 8005340:	b538      	push	{r3, r4, r5, lr}
 8005342:	2300      	movs	r3, #0
 8005344:	4d06      	ldr	r5, [pc, #24]	; (8005360 <_fstat_r+0x20>)
 8005346:	4604      	mov	r4, r0
 8005348:	4608      	mov	r0, r1
 800534a:	4611      	mov	r1, r2
 800534c:	602b      	str	r3, [r5, #0]
 800534e:	f7fc fa10 	bl	8001772 <_fstat>
 8005352:	1c43      	adds	r3, r0, #1
 8005354:	d102      	bne.n	800535c <_fstat_r+0x1c>
 8005356:	682b      	ldr	r3, [r5, #0]
 8005358:	b103      	cbz	r3, 800535c <_fstat_r+0x1c>
 800535a:	6023      	str	r3, [r4, #0]
 800535c:	bd38      	pop	{r3, r4, r5, pc}
 800535e:	bf00      	nop
 8005360:	200003d0 	.word	0x200003d0

08005364 <_isatty_r>:
 8005364:	b538      	push	{r3, r4, r5, lr}
 8005366:	2300      	movs	r3, #0
 8005368:	4d05      	ldr	r5, [pc, #20]	; (8005380 <_isatty_r+0x1c>)
 800536a:	4604      	mov	r4, r0
 800536c:	4608      	mov	r0, r1
 800536e:	602b      	str	r3, [r5, #0]
 8005370:	f7fc fa0e 	bl	8001790 <_isatty>
 8005374:	1c43      	adds	r3, r0, #1
 8005376:	d102      	bne.n	800537e <_isatty_r+0x1a>
 8005378:	682b      	ldr	r3, [r5, #0]
 800537a:	b103      	cbz	r3, 800537e <_isatty_r+0x1a>
 800537c:	6023      	str	r3, [r4, #0]
 800537e:	bd38      	pop	{r3, r4, r5, pc}
 8005380:	200003d0 	.word	0x200003d0

08005384 <_lseek_r>:
 8005384:	b538      	push	{r3, r4, r5, lr}
 8005386:	4604      	mov	r4, r0
 8005388:	4608      	mov	r0, r1
 800538a:	4611      	mov	r1, r2
 800538c:	2200      	movs	r2, #0
 800538e:	4d05      	ldr	r5, [pc, #20]	; (80053a4 <_lseek_r+0x20>)
 8005390:	602a      	str	r2, [r5, #0]
 8005392:	461a      	mov	r2, r3
 8005394:	f7fc fa06 	bl	80017a4 <_lseek>
 8005398:	1c43      	adds	r3, r0, #1
 800539a:	d102      	bne.n	80053a2 <_lseek_r+0x1e>
 800539c:	682b      	ldr	r3, [r5, #0]
 800539e:	b103      	cbz	r3, 80053a2 <_lseek_r+0x1e>
 80053a0:	6023      	str	r3, [r4, #0]
 80053a2:	bd38      	pop	{r3, r4, r5, pc}
 80053a4:	200003d0 	.word	0x200003d0

080053a8 <memchr>:
 80053a8:	4603      	mov	r3, r0
 80053aa:	b510      	push	{r4, lr}
 80053ac:	b2c9      	uxtb	r1, r1
 80053ae:	4402      	add	r2, r0
 80053b0:	4293      	cmp	r3, r2
 80053b2:	4618      	mov	r0, r3
 80053b4:	d101      	bne.n	80053ba <memchr+0x12>
 80053b6:	2000      	movs	r0, #0
 80053b8:	e003      	b.n	80053c2 <memchr+0x1a>
 80053ba:	7804      	ldrb	r4, [r0, #0]
 80053bc:	3301      	adds	r3, #1
 80053be:	428c      	cmp	r4, r1
 80053c0:	d1f6      	bne.n	80053b0 <memchr+0x8>
 80053c2:	bd10      	pop	{r4, pc}

080053c4 <memmove>:
 80053c4:	4288      	cmp	r0, r1
 80053c6:	b510      	push	{r4, lr}
 80053c8:	eb01 0402 	add.w	r4, r1, r2
 80053cc:	d902      	bls.n	80053d4 <memmove+0x10>
 80053ce:	4284      	cmp	r4, r0
 80053d0:	4623      	mov	r3, r4
 80053d2:	d807      	bhi.n	80053e4 <memmove+0x20>
 80053d4:	1e43      	subs	r3, r0, #1
 80053d6:	42a1      	cmp	r1, r4
 80053d8:	d008      	beq.n	80053ec <memmove+0x28>
 80053da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80053e2:	e7f8      	b.n	80053d6 <memmove+0x12>
 80053e4:	4601      	mov	r1, r0
 80053e6:	4402      	add	r2, r0
 80053e8:	428a      	cmp	r2, r1
 80053ea:	d100      	bne.n	80053ee <memmove+0x2a>
 80053ec:	bd10      	pop	{r4, pc}
 80053ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80053f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80053f6:	e7f7      	b.n	80053e8 <memmove+0x24>

080053f8 <__malloc_lock>:
 80053f8:	4801      	ldr	r0, [pc, #4]	; (8005400 <__malloc_lock+0x8>)
 80053fa:	f7ff b99d 	b.w	8004738 <__retarget_lock_acquire_recursive>
 80053fe:	bf00      	nop
 8005400:	200003c4 	.word	0x200003c4

08005404 <__malloc_unlock>:
 8005404:	4801      	ldr	r0, [pc, #4]	; (800540c <__malloc_unlock+0x8>)
 8005406:	f7ff b998 	b.w	800473a <__retarget_lock_release_recursive>
 800540a:	bf00      	nop
 800540c:	200003c4 	.word	0x200003c4

08005410 <_realloc_r>:
 8005410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005414:	4680      	mov	r8, r0
 8005416:	4614      	mov	r4, r2
 8005418:	460e      	mov	r6, r1
 800541a:	b921      	cbnz	r1, 8005426 <_realloc_r+0x16>
 800541c:	4611      	mov	r1, r2
 800541e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005422:	f7ff ba59 	b.w	80048d8 <_malloc_r>
 8005426:	b92a      	cbnz	r2, 8005434 <_realloc_r+0x24>
 8005428:	f7ff f9ee 	bl	8004808 <_free_r>
 800542c:	4625      	mov	r5, r4
 800542e:	4628      	mov	r0, r5
 8005430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005434:	f000 f82e 	bl	8005494 <_malloc_usable_size_r>
 8005438:	4284      	cmp	r4, r0
 800543a:	4607      	mov	r7, r0
 800543c:	d802      	bhi.n	8005444 <_realloc_r+0x34>
 800543e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005442:	d812      	bhi.n	800546a <_realloc_r+0x5a>
 8005444:	4621      	mov	r1, r4
 8005446:	4640      	mov	r0, r8
 8005448:	f7ff fa46 	bl	80048d8 <_malloc_r>
 800544c:	4605      	mov	r5, r0
 800544e:	2800      	cmp	r0, #0
 8005450:	d0ed      	beq.n	800542e <_realloc_r+0x1e>
 8005452:	42bc      	cmp	r4, r7
 8005454:	4622      	mov	r2, r4
 8005456:	4631      	mov	r1, r6
 8005458:	bf28      	it	cs
 800545a:	463a      	movcs	r2, r7
 800545c:	f7fe fe34 	bl	80040c8 <memcpy>
 8005460:	4631      	mov	r1, r6
 8005462:	4640      	mov	r0, r8
 8005464:	f7ff f9d0 	bl	8004808 <_free_r>
 8005468:	e7e1      	b.n	800542e <_realloc_r+0x1e>
 800546a:	4635      	mov	r5, r6
 800546c:	e7df      	b.n	800542e <_realloc_r+0x1e>
	...

08005470 <_read_r>:
 8005470:	b538      	push	{r3, r4, r5, lr}
 8005472:	4604      	mov	r4, r0
 8005474:	4608      	mov	r0, r1
 8005476:	4611      	mov	r1, r2
 8005478:	2200      	movs	r2, #0
 800547a:	4d05      	ldr	r5, [pc, #20]	; (8005490 <_read_r+0x20>)
 800547c:	602a      	str	r2, [r5, #0]
 800547e:	461a      	mov	r2, r3
 8005480:	f7fc f94f 	bl	8001722 <_read>
 8005484:	1c43      	adds	r3, r0, #1
 8005486:	d102      	bne.n	800548e <_read_r+0x1e>
 8005488:	682b      	ldr	r3, [r5, #0]
 800548a:	b103      	cbz	r3, 800548e <_read_r+0x1e>
 800548c:	6023      	str	r3, [r4, #0]
 800548e:	bd38      	pop	{r3, r4, r5, pc}
 8005490:	200003d0 	.word	0x200003d0

08005494 <_malloc_usable_size_r>:
 8005494:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005498:	1f18      	subs	r0, r3, #4
 800549a:	2b00      	cmp	r3, #0
 800549c:	bfbc      	itt	lt
 800549e:	580b      	ldrlt	r3, [r1, r0]
 80054a0:	18c0      	addlt	r0, r0, r3
 80054a2:	4770      	bx	lr

080054a4 <_init>:
 80054a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054a6:	bf00      	nop
 80054a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054aa:	bc08      	pop	{r3}
 80054ac:	469e      	mov	lr, r3
 80054ae:	4770      	bx	lr

080054b0 <_fini>:
 80054b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054b2:	bf00      	nop
 80054b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054b6:	bc08      	pop	{r3}
 80054b8:	469e      	mov	lr, r3
 80054ba:	4770      	bx	lr
