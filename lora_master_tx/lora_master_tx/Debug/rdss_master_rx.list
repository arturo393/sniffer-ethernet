
rdss_master_rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a1c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08007b28  08007b28  00017b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b54  08007b54  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08007b54  08007b54  00017b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b5c  08007b5c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b5c  08007b5c  00017b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b60  08007b60  00017b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08007b64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ac  2000005c  08007bc0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000508  08007bc0  00020508  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001305c  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000339d  00000000  00000000  00033124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001100  00000000  00000000  000364c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d26  00000000  00000000  000375c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a438  00000000  00000000  000382ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016fc1  00000000  00000000  00052726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f33e  00000000  00000000  000696e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004994  00000000  00000000  000f8a28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000fd3bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08007b10 	.word	0x08007b10

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08007b10 	.word	0x08007b10

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2iz>:
 8000608:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30f      	bcc.n	8000632 <__aeabi_f2iz+0x2a>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d90d      	bls.n	8000638 <__aeabi_f2iz+0x30>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000628:	fa23 f002 	lsr.w	r0, r3, r2
 800062c:	bf18      	it	ne
 800062e:	4240      	negne	r0, r0
 8000630:	4770      	bx	lr
 8000632:	f04f 0000 	mov.w	r0, #0
 8000636:	4770      	bx	lr
 8000638:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800063c:	d101      	bne.n	8000642 <__aeabi_f2iz+0x3a>
 800063e:	0242      	lsls	r2, r0, #9
 8000640:	d105      	bne.n	800064e <__aeabi_f2iz+0x46>
 8000642:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000646:	bf08      	it	eq
 8000648:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr

08000654 <__aeabi_f2uiz>:
 8000654:	0042      	lsls	r2, r0, #1
 8000656:	d20e      	bcs.n	8000676 <__aeabi_f2uiz+0x22>
 8000658:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800065c:	d30b      	bcc.n	8000676 <__aeabi_f2uiz+0x22>
 800065e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000662:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000666:	d409      	bmi.n	800067c <__aeabi_f2uiz+0x28>
 8000668:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800066c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000670:	fa23 f002 	lsr.w	r0, r3, r2
 8000674:	4770      	bx	lr
 8000676:	f04f 0000 	mov.w	r0, #0
 800067a:	4770      	bx	lr
 800067c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000680:	d101      	bne.n	8000686 <__aeabi_f2uiz+0x32>
 8000682:	0242      	lsls	r2, r0, #9
 8000684:	d102      	bne.n	800068c <__aeabi_f2uiz+0x38>
 8000686:	f04f 30ff 	mov.w	r0, #4294967295
 800068a:	4770      	bx	lr
 800068c:	f04f 0000 	mov.w	r0, #0
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <__aeabi_uldivmod>:
 8000694:	b953      	cbnz	r3, 80006ac <__aeabi_uldivmod+0x18>
 8000696:	b94a      	cbnz	r2, 80006ac <__aeabi_uldivmod+0x18>
 8000698:	2900      	cmp	r1, #0
 800069a:	bf08      	it	eq
 800069c:	2800      	cmpeq	r0, #0
 800069e:	bf1c      	itt	ne
 80006a0:	f04f 31ff 	movne.w	r1, #4294967295
 80006a4:	f04f 30ff 	movne.w	r0, #4294967295
 80006a8:	f000 b972 	b.w	8000990 <__aeabi_idiv0>
 80006ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80006b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006b4:	f000 f806 	bl	80006c4 <__udivmoddi4>
 80006b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006c0:	b004      	add	sp, #16
 80006c2:	4770      	bx	lr

080006c4 <__udivmoddi4>:
 80006c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006c8:	9e08      	ldr	r6, [sp, #32]
 80006ca:	460d      	mov	r5, r1
 80006cc:	4604      	mov	r4, r0
 80006ce:	468e      	mov	lr, r1
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d14c      	bne.n	800076e <__udivmoddi4+0xaa>
 80006d4:	428a      	cmp	r2, r1
 80006d6:	4694      	mov	ip, r2
 80006d8:	d967      	bls.n	80007aa <__udivmoddi4+0xe6>
 80006da:	fab2 f382 	clz	r3, r2
 80006de:	b153      	cbz	r3, 80006f6 <__udivmoddi4+0x32>
 80006e0:	fa02 fc03 	lsl.w	ip, r2, r3
 80006e4:	f1c3 0220 	rsb	r2, r3, #32
 80006e8:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ec:	fa20 f202 	lsr.w	r2, r0, r2
 80006f0:	ea42 0e0e 	orr.w	lr, r2, lr
 80006f4:	409c      	lsls	r4, r3
 80006f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006fa:	fbbe f1f7 	udiv	r1, lr, r7
 80006fe:	fa1f f58c 	uxth.w	r5, ip
 8000702:	fb07 ee11 	mls	lr, r7, r1, lr
 8000706:	fb01 f005 	mul.w	r0, r1, r5
 800070a:	0c22      	lsrs	r2, r4, #16
 800070c:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000710:	4290      	cmp	r0, r2
 8000712:	d90a      	bls.n	800072a <__udivmoddi4+0x66>
 8000714:	eb1c 0202 	adds.w	r2, ip, r2
 8000718:	f101 3eff 	add.w	lr, r1, #4294967295
 800071c:	f080 8119 	bcs.w	8000952 <__udivmoddi4+0x28e>
 8000720:	4290      	cmp	r0, r2
 8000722:	f240 8116 	bls.w	8000952 <__udivmoddi4+0x28e>
 8000726:	3902      	subs	r1, #2
 8000728:	4462      	add	r2, ip
 800072a:	1a12      	subs	r2, r2, r0
 800072c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000730:	fb07 2210 	mls	r2, r7, r0, r2
 8000734:	fb00 f505 	mul.w	r5, r0, r5
 8000738:	b2a4      	uxth	r4, r4
 800073a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800073e:	42a5      	cmp	r5, r4
 8000740:	d90a      	bls.n	8000758 <__udivmoddi4+0x94>
 8000742:	eb1c 0404 	adds.w	r4, ip, r4
 8000746:	f100 32ff 	add.w	r2, r0, #4294967295
 800074a:	f080 8104 	bcs.w	8000956 <__udivmoddi4+0x292>
 800074e:	42a5      	cmp	r5, r4
 8000750:	f240 8101 	bls.w	8000956 <__udivmoddi4+0x292>
 8000754:	4464      	add	r4, ip
 8000756:	3802      	subs	r0, #2
 8000758:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800075c:	2100      	movs	r1, #0
 800075e:	1b64      	subs	r4, r4, r5
 8000760:	b11e      	cbz	r6, 800076a <__udivmoddi4+0xa6>
 8000762:	40dc      	lsrs	r4, r3
 8000764:	2300      	movs	r3, #0
 8000766:	e9c6 4300 	strd	r4, r3, [r6]
 800076a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800076e:	428b      	cmp	r3, r1
 8000770:	d908      	bls.n	8000784 <__udivmoddi4+0xc0>
 8000772:	2e00      	cmp	r6, #0
 8000774:	f000 80ea 	beq.w	800094c <__udivmoddi4+0x288>
 8000778:	2100      	movs	r1, #0
 800077a:	e9c6 0500 	strd	r0, r5, [r6]
 800077e:	4608      	mov	r0, r1
 8000780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000784:	fab3 f183 	clz	r1, r3
 8000788:	2900      	cmp	r1, #0
 800078a:	d148      	bne.n	800081e <__udivmoddi4+0x15a>
 800078c:	42ab      	cmp	r3, r5
 800078e:	d302      	bcc.n	8000796 <__udivmoddi4+0xd2>
 8000790:	4282      	cmp	r2, r0
 8000792:	f200 80f8 	bhi.w	8000986 <__udivmoddi4+0x2c2>
 8000796:	1a84      	subs	r4, r0, r2
 8000798:	eb65 0203 	sbc.w	r2, r5, r3
 800079c:	2001      	movs	r0, #1
 800079e:	4696      	mov	lr, r2
 80007a0:	2e00      	cmp	r6, #0
 80007a2:	d0e2      	beq.n	800076a <__udivmoddi4+0xa6>
 80007a4:	e9c6 4e00 	strd	r4, lr, [r6]
 80007a8:	e7df      	b.n	800076a <__udivmoddi4+0xa6>
 80007aa:	b902      	cbnz	r2, 80007ae <__udivmoddi4+0xea>
 80007ac:	deff      	udf	#255	; 0xff
 80007ae:	fab2 f382 	clz	r3, r2
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	f040 808e 	bne.w	80008d4 <__udivmoddi4+0x210>
 80007b8:	1a88      	subs	r0, r1, r2
 80007ba:	2101      	movs	r1, #1
 80007bc:	0c17      	lsrs	r7, r2, #16
 80007be:	fa1f fe82 	uxth.w	lr, r2
 80007c2:	fbb0 f5f7 	udiv	r5, r0, r7
 80007c6:	fb07 0015 	mls	r0, r7, r5, r0
 80007ca:	0c22      	lsrs	r2, r4, #16
 80007cc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80007d0:	fb0e f005 	mul.w	r0, lr, r5
 80007d4:	4290      	cmp	r0, r2
 80007d6:	d908      	bls.n	80007ea <__udivmoddi4+0x126>
 80007d8:	eb1c 0202 	adds.w	r2, ip, r2
 80007dc:	f105 38ff 	add.w	r8, r5, #4294967295
 80007e0:	d202      	bcs.n	80007e8 <__udivmoddi4+0x124>
 80007e2:	4290      	cmp	r0, r2
 80007e4:	f200 80cc 	bhi.w	8000980 <__udivmoddi4+0x2bc>
 80007e8:	4645      	mov	r5, r8
 80007ea:	1a12      	subs	r2, r2, r0
 80007ec:	fbb2 f0f7 	udiv	r0, r2, r7
 80007f0:	fb07 2210 	mls	r2, r7, r0, r2
 80007f4:	fb0e fe00 	mul.w	lr, lr, r0
 80007f8:	b2a4      	uxth	r4, r4
 80007fa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80007fe:	45a6      	cmp	lr, r4
 8000800:	d908      	bls.n	8000814 <__udivmoddi4+0x150>
 8000802:	eb1c 0404 	adds.w	r4, ip, r4
 8000806:	f100 32ff 	add.w	r2, r0, #4294967295
 800080a:	d202      	bcs.n	8000812 <__udivmoddi4+0x14e>
 800080c:	45a6      	cmp	lr, r4
 800080e:	f200 80b4 	bhi.w	800097a <__udivmoddi4+0x2b6>
 8000812:	4610      	mov	r0, r2
 8000814:	eba4 040e 	sub.w	r4, r4, lr
 8000818:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800081c:	e7a0      	b.n	8000760 <__udivmoddi4+0x9c>
 800081e:	f1c1 0720 	rsb	r7, r1, #32
 8000822:	408b      	lsls	r3, r1
 8000824:	fa22 fc07 	lsr.w	ip, r2, r7
 8000828:	ea4c 0c03 	orr.w	ip, ip, r3
 800082c:	fa25 fa07 	lsr.w	sl, r5, r7
 8000830:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000834:	fbba f8f9 	udiv	r8, sl, r9
 8000838:	408d      	lsls	r5, r1
 800083a:	fa20 f307 	lsr.w	r3, r0, r7
 800083e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000842:	fa1f fe8c 	uxth.w	lr, ip
 8000846:	432b      	orrs	r3, r5
 8000848:	fa00 f501 	lsl.w	r5, r0, r1
 800084c:	fb08 f00e 	mul.w	r0, r8, lr
 8000850:	0c1c      	lsrs	r4, r3, #16
 8000852:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000856:	42a0      	cmp	r0, r4
 8000858:	fa02 f201 	lsl.w	r2, r2, r1
 800085c:	d90b      	bls.n	8000876 <__udivmoddi4+0x1b2>
 800085e:	eb1c 0404 	adds.w	r4, ip, r4
 8000862:	f108 3aff 	add.w	sl, r8, #4294967295
 8000866:	f080 8086 	bcs.w	8000976 <__udivmoddi4+0x2b2>
 800086a:	42a0      	cmp	r0, r4
 800086c:	f240 8083 	bls.w	8000976 <__udivmoddi4+0x2b2>
 8000870:	f1a8 0802 	sub.w	r8, r8, #2
 8000874:	4464      	add	r4, ip
 8000876:	1a24      	subs	r4, r4, r0
 8000878:	b298      	uxth	r0, r3
 800087a:	fbb4 f3f9 	udiv	r3, r4, r9
 800087e:	fb09 4413 	mls	r4, r9, r3, r4
 8000882:	fb03 fe0e 	mul.w	lr, r3, lr
 8000886:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 800088a:	45a6      	cmp	lr, r4
 800088c:	d908      	bls.n	80008a0 <__udivmoddi4+0x1dc>
 800088e:	eb1c 0404 	adds.w	r4, ip, r4
 8000892:	f103 30ff 	add.w	r0, r3, #4294967295
 8000896:	d26a      	bcs.n	800096e <__udivmoddi4+0x2aa>
 8000898:	45a6      	cmp	lr, r4
 800089a:	d968      	bls.n	800096e <__udivmoddi4+0x2aa>
 800089c:	3b02      	subs	r3, #2
 800089e:	4464      	add	r4, ip
 80008a0:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80008a4:	fba0 9302 	umull	r9, r3, r0, r2
 80008a8:	eba4 040e 	sub.w	r4, r4, lr
 80008ac:	429c      	cmp	r4, r3
 80008ae:	46c8      	mov	r8, r9
 80008b0:	469e      	mov	lr, r3
 80008b2:	d354      	bcc.n	800095e <__udivmoddi4+0x29a>
 80008b4:	d051      	beq.n	800095a <__udivmoddi4+0x296>
 80008b6:	2e00      	cmp	r6, #0
 80008b8:	d067      	beq.n	800098a <__udivmoddi4+0x2c6>
 80008ba:	ebb5 0308 	subs.w	r3, r5, r8
 80008be:	eb64 040e 	sbc.w	r4, r4, lr
 80008c2:	40cb      	lsrs	r3, r1
 80008c4:	fa04 f707 	lsl.w	r7, r4, r7
 80008c8:	431f      	orrs	r7, r3
 80008ca:	40cc      	lsrs	r4, r1
 80008cc:	e9c6 7400 	strd	r7, r4, [r6]
 80008d0:	2100      	movs	r1, #0
 80008d2:	e74a      	b.n	800076a <__udivmoddi4+0xa6>
 80008d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80008d8:	f1c3 0020 	rsb	r0, r3, #32
 80008dc:	40c1      	lsrs	r1, r0
 80008de:	409d      	lsls	r5, r3
 80008e0:	fa24 f000 	lsr.w	r0, r4, r0
 80008e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008e8:	4328      	orrs	r0, r5
 80008ea:	fbb1 f5f7 	udiv	r5, r1, r7
 80008ee:	fb07 1115 	mls	r1, r7, r5, r1
 80008f2:	fa1f fe8c 	uxth.w	lr, ip
 80008f6:	0c02      	lsrs	r2, r0, #16
 80008f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008fc:	fb05 f10e 	mul.w	r1, r5, lr
 8000900:	4291      	cmp	r1, r2
 8000902:	fa04 f403 	lsl.w	r4, r4, r3
 8000906:	d908      	bls.n	800091a <__udivmoddi4+0x256>
 8000908:	eb1c 0202 	adds.w	r2, ip, r2
 800090c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000910:	d22f      	bcs.n	8000972 <__udivmoddi4+0x2ae>
 8000912:	4291      	cmp	r1, r2
 8000914:	d92d      	bls.n	8000972 <__udivmoddi4+0x2ae>
 8000916:	3d02      	subs	r5, #2
 8000918:	4462      	add	r2, ip
 800091a:	1a52      	subs	r2, r2, r1
 800091c:	fbb2 f1f7 	udiv	r1, r2, r7
 8000920:	fb07 2211 	mls	r2, r7, r1, r2
 8000924:	b280      	uxth	r0, r0
 8000926:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800092a:	fb01 f20e 	mul.w	r2, r1, lr
 800092e:	4282      	cmp	r2, r0
 8000930:	d908      	bls.n	8000944 <__udivmoddi4+0x280>
 8000932:	eb1c 0000 	adds.w	r0, ip, r0
 8000936:	f101 38ff 	add.w	r8, r1, #4294967295
 800093a:	d216      	bcs.n	800096a <__udivmoddi4+0x2a6>
 800093c:	4282      	cmp	r2, r0
 800093e:	d914      	bls.n	800096a <__udivmoddi4+0x2a6>
 8000940:	3902      	subs	r1, #2
 8000942:	4460      	add	r0, ip
 8000944:	1a80      	subs	r0, r0, r2
 8000946:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800094a:	e73a      	b.n	80007c2 <__udivmoddi4+0xfe>
 800094c:	4631      	mov	r1, r6
 800094e:	4630      	mov	r0, r6
 8000950:	e70b      	b.n	800076a <__udivmoddi4+0xa6>
 8000952:	4671      	mov	r1, lr
 8000954:	e6e9      	b.n	800072a <__udivmoddi4+0x66>
 8000956:	4610      	mov	r0, r2
 8000958:	e6fe      	b.n	8000758 <__udivmoddi4+0x94>
 800095a:	454d      	cmp	r5, r9
 800095c:	d2ab      	bcs.n	80008b6 <__udivmoddi4+0x1f2>
 800095e:	ebb9 0802 	subs.w	r8, r9, r2
 8000962:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000966:	3801      	subs	r0, #1
 8000968:	e7a5      	b.n	80008b6 <__udivmoddi4+0x1f2>
 800096a:	4641      	mov	r1, r8
 800096c:	e7ea      	b.n	8000944 <__udivmoddi4+0x280>
 800096e:	4603      	mov	r3, r0
 8000970:	e796      	b.n	80008a0 <__udivmoddi4+0x1dc>
 8000972:	4645      	mov	r5, r8
 8000974:	e7d1      	b.n	800091a <__udivmoddi4+0x256>
 8000976:	46d0      	mov	r8, sl
 8000978:	e77d      	b.n	8000876 <__udivmoddi4+0x1b2>
 800097a:	4464      	add	r4, ip
 800097c:	3802      	subs	r0, #2
 800097e:	e749      	b.n	8000814 <__udivmoddi4+0x150>
 8000980:	3d02      	subs	r5, #2
 8000982:	4462      	add	r2, ip
 8000984:	e731      	b.n	80007ea <__udivmoddi4+0x126>
 8000986:	4608      	mov	r0, r1
 8000988:	e70a      	b.n	80007a0 <__udivmoddi4+0xdc>
 800098a:	4631      	mov	r1, r6
 800098c:	e6ed      	b.n	800076a <__udivmoddi4+0xa6>
 800098e:	bf00      	nop

08000990 <__aeabi_idiv0>:
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop

08000994 <readRegister>:
 * https://github.com/realspinner/SX1278_LoRa
 */

#include <SX1278.h>

uint8_t readRegister(SPI_HandleTypeDef *spi, uint8_t address) {
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	460b      	mov	r3, r1
 800099e:	70fb      	strb	r3, [r7, #3]
	uint8_t rec = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET);  // pull the pin low
 80009a4:	2200      	movs	r2, #0
 80009a6:	2101      	movs	r1, #1
 80009a8:	480f      	ldr	r0, [pc, #60]	; (80009e8 <readRegister+0x54>)
 80009aa:	f003 fa24 	bl	8003df6 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80009ae:	2001      	movs	r0, #1
 80009b0:	f002 fc74 	bl	800329c <HAL_Delay>
	HAL_SPI_Transmit(spi, &address, 1, 100);  // send address
 80009b4:	1cf9      	adds	r1, r7, #3
 80009b6:	2364      	movs	r3, #100	; 0x64
 80009b8:	2201      	movs	r2, #1
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f005 fcd4 	bl	8006368 <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi, &rec, 1, 100);  // receive 6 bytes data
 80009c0:	f107 010f 	add.w	r1, r7, #15
 80009c4:	2364      	movs	r3, #100	; 0x64
 80009c6:	2201      	movs	r2, #1
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f005 fe10 	bl	80065ee <HAL_SPI_Receive>
	HAL_Delay(1);
 80009ce:	2001      	movs	r0, #1
 80009d0:	f002 fc64 	bl	800329c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);  // pull the pin high
 80009d4:	2201      	movs	r2, #1
 80009d6:	2101      	movs	r1, #1
 80009d8:	4803      	ldr	r0, [pc, #12]	; (80009e8 <readRegister+0x54>)
 80009da:	f003 fa0c 	bl	8003df6 <HAL_GPIO_WritePin>
	return rec;
 80009de:	7bfb      	ldrb	r3, [r7, #15]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3710      	adds	r7, #16
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40010c00 	.word	0x40010c00

080009ec <writeRegister>:

void writeRegister(SPI_HandleTypeDef *spi, uint8_t address, uint8_t *cmd,
		uint8_t lenght) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b088      	sub	sp, #32
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	607a      	str	r2, [r7, #4]
 80009f6:	461a      	mov	r2, r3
 80009f8:	460b      	mov	r3, r1
 80009fa:	72fb      	strb	r3, [r7, #11]
 80009fc:	4613      	mov	r3, r2
 80009fe:	72bb      	strb	r3, [r7, #10]
	if (lenght > 4)
 8000a00:	7abb      	ldrb	r3, [r7, #10]
 8000a02:	2b04      	cmp	r3, #4
 8000a04:	d837      	bhi.n	8000a76 <writeRegister+0x8a>
		return;
	uint8_t tx_data[5] = { 0 };
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	753b      	strb	r3, [r7, #20]
	tx_data[0] = address | 0x80;
 8000a0e:	7afb      	ldrb	r3, [r7, #11]
 8000a10:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	743b      	strb	r3, [r7, #16]
	int j = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]
	for (int i = 1; i <= lenght; i++) {
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	61bb      	str	r3, [r7, #24]
 8000a20:	e00f      	b.n	8000a42 <writeRegister+0x56>
		tx_data[i] = cmd[j++];
 8000a22:	69fb      	ldr	r3, [r7, #28]
 8000a24:	1c5a      	adds	r2, r3, #1
 8000a26:	61fa      	str	r2, [r7, #28]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	7819      	ldrb	r1, [r3, #0]
 8000a30:	f107 0210 	add.w	r2, r7, #16
 8000a34:	69bb      	ldr	r3, [r7, #24]
 8000a36:	4413      	add	r3, r2
 8000a38:	460a      	mov	r2, r1
 8000a3a:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i <= lenght; i++) {
 8000a3c:	69bb      	ldr	r3, [r7, #24]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	61bb      	str	r3, [r7, #24]
 8000a42:	7abb      	ldrb	r3, [r7, #10]
 8000a44:	69ba      	ldr	r2, [r7, #24]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	ddeb      	ble.n	8000a22 <writeRegister+0x36>
	}
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET);  // pull the pin low
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	480c      	ldr	r0, [pc, #48]	; (8000a80 <writeRegister+0x94>)
 8000a50:	f003 f9d1 	bl	8003df6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi, tx_data, lenght + 1, 1000);
 8000a54:	7abb      	ldrb	r3, [r7, #10]
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	3301      	adds	r3, #1
 8000a5a:	b29a      	uxth	r2, r3
 8000a5c:	f107 0110 	add.w	r1, r7, #16
 8000a60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a64:	68f8      	ldr	r0, [r7, #12]
 8000a66:	f005 fc7f 	bl	8006368 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);  // pull the pin high
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	4804      	ldr	r0, [pc, #16]	; (8000a80 <writeRegister+0x94>)
 8000a70:	f003 f9c1 	bl	8003df6 <HAL_GPIO_WritePin>
 8000a74:	e000      	b.n	8000a78 <writeRegister+0x8c>
		return;
 8000a76:	bf00      	nop
//	HAL_Delay(10);
}
 8000a78:	3720      	adds	r7, #32
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40010c00 	.word	0x40010c00

08000a84 <setRFFrequencyReg>:
	rec = spi->Instance->DR; // read data
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);  // pull the pin high
	return rec;
}

void setRFFrequencyReg(SX1278_t *module) {
 8000a84:	b5b0      	push	{r4, r5, r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
	uint64_t freq = ((uint64_t) module->frequency << 19) / FXOSC;
 8000a8c:	6879      	ldr	r1, [r7, #4]
 8000a8e:	6809      	ldr	r1, [r1, #0]
 8000a90:	2000      	movs	r0, #0
 8000a92:	460a      	mov	r2, r1
 8000a94:	4603      	mov	r3, r0
 8000a96:	0b55      	lsrs	r5, r2, #13
 8000a98:	04d4      	lsls	r4, r2, #19
 8000a9a:	4a19      	ldr	r2, [pc, #100]	; (8000b00 <setRFFrequencyReg+0x7c>)
 8000a9c:	f04f 0300 	mov.w	r3, #0
 8000aa0:	4620      	mov	r0, r4
 8000aa2:	4629      	mov	r1, r5
 8000aa4:	f7ff fdf6 	bl	8000694 <__aeabi_uldivmod>
 8000aa8:	4602      	mov	r2, r0
 8000aaa:	460b      	mov	r3, r1
 8000aac:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 8000ab0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000ab4:	f04f 0200 	mov.w	r2, #0
 8000ab8:	f04f 0300 	mov.w	r3, #0
 8000abc:	0c02      	lsrs	r2, r0, #16
 8000abe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ac2:	0c0b      	lsrs	r3, r1, #16
 8000ac4:	b2d3      	uxtb	r3, r2
 8000ac6:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 8000ac8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000acc:	f04f 0200 	mov.w	r2, #0
 8000ad0:	f04f 0300 	mov.w	r3, #0
 8000ad4:	0a02      	lsrs	r2, r0, #8
 8000ad6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000ada:	0a0b      	lsrs	r3, r1, #8
 8000adc:	b2d3      	uxtb	r3, r2
 8000ade:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 8000ae0:	7c3b      	ldrb	r3, [r7, #16]
 8000ae2:	73bb      	strb	r3, [r7, #14]
	writeRegister(module->spi, LR_RegFrMsb, freq_reg, sizeof(freq_reg));
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000aea:	f107 020c 	add.w	r2, r7, #12
 8000aee:	2303      	movs	r3, #3
 8000af0:	2106      	movs	r1, #6
 8000af2:	f7ff ff7b 	bl	80009ec <writeRegister>

}
 8000af6:	bf00      	nop
 8000af8:	3718      	adds	r7, #24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bdb0      	pop	{r4, r5, r7, pc}
 8000afe:	bf00      	nop
 8000b00:	01e84800 	.word	0x01e84800

08000b04 <setOutputPower>:

void setOutputPower(SX1278_t *module) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
	writeRegister(module->spi, LR_RegPaConfig, &(module->power), 1);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	f103 020c 	add.w	r2, r3, #12
 8000b18:	2301      	movs	r3, #1
 8000b1a:	2109      	movs	r1, #9
 8000b1c:	f7ff ff66 	bl	80009ec <writeRegister>
}
 8000b20:	bf00      	nop
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <setOvercurrentProtect>:

void setLORAWAN(SX1278_t *module) {
	writeRegister(module->spi, RegSyncWord, &(module->syncWord), 1);
}

void setOvercurrentProtect(SX1278_t *module) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
	writeRegister(module->spi, LR_RegOcp, &(module->ocp), 1);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	f103 0212 	add.w	r2, r3, #18
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	210b      	movs	r1, #11
 8000b40:	f7ff ff54 	bl	80009ec <writeRegister>
}
 8000b44:	bf00      	nop
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <setPreambleParameters>:

void setLNAGain(SX1278_t *module) {
	writeRegister(module->spi, LR_RegLna, &(module->lnaGain), 1);
}

void setPreambleParameters(SX1278_t *module) {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]

	writeRegister(module->spi, LR_RegSymbTimeoutLsb, &(module->symbTimeoutLsb),
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	f103 0215 	add.w	r2, r3, #21
 8000b60:	2301      	movs	r3, #1
 8000b62:	211f      	movs	r1, #31
 8000b64:	f7ff ff42 	bl	80009ec <writeRegister>
			1);
	writeRegister(module->spi, LR_RegPreambleMsb, &(module->preambleLengthMsb),
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	f103 0217 	add.w	r2, r3, #23
 8000b74:	2301      	movs	r3, #1
 8000b76:	2120      	movs	r1, #32
 8000b78:	f7ff ff38 	bl	80009ec <writeRegister>
			1);
	writeRegister(module->spi, LR_RegPreambleLsb, &(module->preambleLengthLsb),
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	f103 0218 	add.w	r2, r3, #24
 8000b88:	2301      	movs	r3, #1
 8000b8a:	2121      	movs	r1, #33	; 0x21
 8000b8c:	f7ff ff2e 	bl	80009ec <writeRegister>
			1);
}
 8000b90:	bf00      	nop
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <setReModemConfig>:

void setReModemConfig(SX1278_t *module) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
	uint8_t cmd = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	73fb      	strb	r3, [r7, #15]
	cmd = module->bandwidth << 4;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	7b9b      	ldrb	r3, [r3, #14]
 8000ba8:	011b      	lsls	r3, r3, #4
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	73fb      	strb	r3, [r7, #15]
	cmd += module->codingRate << 1;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	7bdb      	ldrb	r3, [r3, #15]
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	7bfb      	ldrb	r3, [r7, #15]
 8000bb8:	4413      	add	r3, r2
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	73fb      	strb	r3, [r7, #15]
	cmd += module->headerMode;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	7f1a      	ldrb	r2, [r3, #28]
 8000bc2:	7bfb      	ldrb	r3, [r7, #15]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegModemConfig1, &cmd, 1); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000bd0:	f107 020f 	add.w	r2, r7, #15
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	211d      	movs	r1, #29
 8000bd8:	f7ff ff08 	bl	80009ec <writeRegister>

	cmd = module->spreadFactor << 4;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	7b5b      	ldrb	r3, [r3, #13]
 8000be0:	011b      	lsls	r3, r3, #4
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	73fb      	strb	r3, [r7, #15]
	cmd += module->LoRa_CRC_sum << 2;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	7c1b      	ldrb	r3, [r3, #16]
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	7bfb      	ldrb	r3, [r7, #15]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	73fb      	strb	r3, [r7, #15]
	cmd += module->symbTimeoutMsb;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	7d9a      	ldrb	r2, [r3, #22]
 8000bfa:	7bfb      	ldrb	r3, [r7, #15]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegModemConfig2, &cmd, 1);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000c08:	f107 020f 	add.w	r2, r7, #15
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	211e      	movs	r1, #30
 8000c10:	f7ff feec 	bl	80009ec <writeRegister>
	writeRegister(module->spi, LR_RegModemConfig3, &(module->AgcAutoOn), 1);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	f103 0214 	add.w	r2, r3, #20
 8000c20:	2301      	movs	r3, #1
 8000c22:	2126      	movs	r1, #38	; 0x26
 8000c24:	f7ff fee2 	bl	80009ec <writeRegister>
}
 8000c28:	bf00      	nop
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <setDetectionParametersReg>:

void setDetectionParametersReg(SX1278_t *module) {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = readRegister(module->spi, LR_RegDetectOptimize);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8000c3e:	2131      	movs	r1, #49	; 0x31
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff fea7 	bl	8000994 <readRegister>
 8000c46:	4603      	mov	r3, r0
 8000c48:	73fb      	strb	r3, [r7, #15]
	tmp &= 0xF8;
 8000c4a:	7bfb      	ldrb	r3, [r7, #15]
 8000c4c:	f023 0307 	bic.w	r3, r3, #7
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	73fb      	strb	r3, [r7, #15]
	tmp |= 0x05;
 8000c54:	7bfb      	ldrb	r3, [r7, #15]
 8000c56:	f043 0305 	orr.w	r3, r3, #5
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegDetectOptimize, &tmp, 1);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000c64:	f107 020f 	add.w	r2, r7, #15
 8000c68:	2301      	movs	r3, #1
 8000c6a:	2131      	movs	r1, #49	; 0x31
 8000c6c:	f7ff febe 	bl	80009ec <writeRegister>
	tmp = 0x0C;
 8000c70:	230c      	movs	r3, #12
 8000c72:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegDetectionThreshold, &tmp, 1);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000c7a:	f107 020f 	add.w	r2, r7, #15
 8000c7e:	2301      	movs	r3, #1
 8000c80:	2137      	movs	r1, #55	; 0x37
 8000c82:	f7ff feb3 	bl	80009ec <writeRegister>
}
 8000c86:	bf00      	nop
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <setLoRaLowFreqModeReg>:
void readOperatingMode(SX1278_t *module) {
	module->operatingMode = (0x07 & readRegister(module->spi,
	LR_RegOpMode));
}

void setLoRaLowFreqModeReg(SX1278_t *module, OPERATING_MODE_t mode) {
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b084      	sub	sp, #16
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
 8000c96:	460b      	mov	r3, r1
 8000c98:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd = LORA_MODE_ACTIVATION | LOW_FREQUENCY_MODE | mode;
 8000c9a:	78fb      	ldrb	r3, [r7, #3]
 8000c9c:	f063 0377 	orn	r3, r3, #119	; 0x77
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegOpMode, &cmd, 1);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000caa:	f107 020f 	add.w	r2, r7, #15
 8000cae:	2301      	movs	r3, #1
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	f7ff fe9b 	bl	80009ec <writeRegister>
	module->operatingMode = mode;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	78fa      	ldrb	r2, [r7, #3]
 8000cba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8000cbe:	bf00      	nop
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <clearIrqFlagsReg>:

void clearIrqFlagsReg(SX1278_t *module) {
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b084      	sub	sp, #16
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
	uint8_t cmd = 0xFF;
 8000cce:	23ff      	movs	r3, #255	; 0xff
 8000cd0:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegIrqFlags, &cmd, 1);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000cd8:	f107 020f 	add.w	r2, r7, #15
 8000cdc:	2301      	movs	r3, #1
 8000cde:	2112      	movs	r1, #18
 8000ce0:	f7ff fe84 	bl	80009ec <writeRegister>
}
 8000ce4:	bf00      	nop
 8000ce6:	3710      	adds	r7, #16
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <writeLoRaParametersReg>:

void writeLoRaParametersReg(SX1278_t *module) {
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
	setLoRaLowFreqModeReg(module, SLEEP);
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f7ff ffc9 	bl	8000c8e <setLoRaLowFreqModeReg>
	HAL_Delay(15);
 8000cfc:	200f      	movs	r0, #15
 8000cfe:	f002 facd 	bl	800329c <HAL_Delay>
	setRFFrequencyReg(module);
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f7ff febe 	bl	8000a84 <setRFFrequencyReg>
	writeRegister(module->spi, RegSyncWord, &(module->syncWord), 1);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	f103 0211 	add.w	r2, r3, #17
 8000d14:	2301      	movs	r3, #1
 8000d16:	2139      	movs	r1, #57	; 0x39
 8000d18:	f7ff fe68 	bl	80009ec <writeRegister>
	setOutputPower(module);
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	f7ff fef1 	bl	8000b04 <setOutputPower>
	setOvercurrentProtect(module);
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f7ff ff00 	bl	8000b28 <setOvercurrentProtect>
	writeRegister(module->spi, LR_RegLna, &(module->lnaGain), 1);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f103 0213 	add.w	r2, r3, #19
 8000d34:	2301      	movs	r3, #1
 8000d36:	210c      	movs	r1, #12
 8000d38:	f7ff fe58 	bl	80009ec <writeRegister>
	if (module->spreadFactor == SF_6) {
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	7b5b      	ldrb	r3, [r3, #13]
 8000d40:	2b06      	cmp	r3, #6
 8000d42:	d109      	bne.n	8000d58 <writeLoRaParametersReg+0x6c>
		module->headerMode = IMPLICIT;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2201      	movs	r2, #1
 8000d48:	771a      	strb	r2, [r3, #28]
		module->symbTimeoutMsb = 0x03;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2203      	movs	r2, #3
 8000d4e:	759a      	strb	r2, [r3, #22]
		setDetectionParametersReg(module);
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f7ff ff6d 	bl	8000c30 <setDetectionParametersReg>
 8000d56:	e005      	b.n	8000d64 <writeLoRaParametersReg+0x78>
	} else {
		module->headerMode = EXPLICIT;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	771a      	strb	r2, [r3, #28]
		module->symbTimeoutMsb = 0x00;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2200      	movs	r2, #0
 8000d62:	759a      	strb	r2, [r3, #22]
	}

	setReModemConfig(module);
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f7ff ff17 	bl	8000b98 <setReModemConfig>
	setPreambleParameters(module);
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f7ff feee 	bl	8000b4c <setPreambleParameters>
	writeRegister(module->spi, LR_RegHopPeriod, &(module->fhssValue), 1);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f103 0219 	add.w	r2, r3, #25
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	2124      	movs	r1, #36	; 0x24
 8000d80:	f7ff fe34 	bl	80009ec <writeRegister>
	writeRegister(module->spi, LR_RegDioMapping1, &(module->dioConfig), 1);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f103 021a 	add.w	r2, r3, #26
 8000d90:	2301      	movs	r3, #1
 8000d92:	2140      	movs	r1, #64	; 0x40
 8000d94:	f7ff fe2a 	bl	80009ec <writeRegister>
	clearIrqFlagsReg(module);
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f7ff ff94 	bl	8000cc6 <clearIrqFlagsReg>
	writeRegister(module->spi, LR_RegIrqFlagsMask, &(module->flagsMode), 1);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f103 021b 	add.w	r2, r3, #27
 8000daa:	2301      	movs	r3, #1
 8000dac:	2111      	movs	r1, #17
 8000dae:	f7ff fe1d 	bl	80009ec <writeRegister>
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <changeMode>:

void changeMode(SX1278_t *module, Lora_Mode_t mode) {
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b084      	sub	sp, #16
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	70fb      	strb	r3, [r7, #3]
	uint32_t timeStart = HAL_GetTick();
 8000dc6:	f002 fa5f 	bl	8003288 <HAL_GetTick>
 8000dca:	60f8      	str	r0, [r7, #12]
	if (mode == SLAVE_SENDER || mode == MASTER_SENDER) {
 8000dcc:	78fb      	ldrb	r3, [r7, #3]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d002      	beq.n	8000dd8 <changeMode+0x1e>
 8000dd2:	78fb      	ldrb	r3, [r7, #3]
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d11f      	bne.n	8000e18 <changeMode+0x5e>
		module->frequency =
				(mode == SLAVE_SENDER) ? module->upFreq : module->dlFreq;
 8000dd8:	78fb      	ldrb	r3, [r7, #3]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d102      	bne.n	8000de4 <changeMode+0x2a>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	e001      	b.n	8000de8 <changeMode+0x2e>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	685b      	ldr	r3, [r3, #4]
		module->frequency =
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	6013      	str	r3, [r2, #0]
		module->dioConfig = DIO0_TX_DONE | DIO1_RX_TIMEOUT
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2241      	movs	r2, #65	; 0x41
 8000df0:	769a      	strb	r2, [r3, #26]
				| DIO2_FHSS_CHANGE_CHANNEL | DIO3_VALID_HEADER;
		module->flagsMode = 0xff;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	22ff      	movs	r2, #255	; 0xff
 8000df6:	76da      	strb	r2, [r3, #27]
		CLEAR_BIT(module->flagsMode, TX_DONE_MASK);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	7edb      	ldrb	r3, [r3, #27]
 8000dfc:	f023 0308 	bic.w	r3, r3, #8
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	76da      	strb	r2, [r3, #27]
		module->mode = mode;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	78fa      	ldrb	r2, [r7, #3]
 8000e0a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		module->status = TX_MODE;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2201      	movs	r2, #1
 8000e12:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8000e16:	e024      	b.n	8000e62 <changeMode+0xa8>

	} else if (mode == SLAVE_RECEIVER || mode == MASTER_RECEIVER) {
 8000e18:	78fb      	ldrb	r3, [r7, #3]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d002      	beq.n	8000e24 <changeMode+0x6a>
 8000e1e:	78fb      	ldrb	r3, [r7, #3]
 8000e20:	2b03      	cmp	r3, #3
 8000e22:	d11e      	bne.n	8000e62 <changeMode+0xa8>
		module->frequency =
				(mode == SLAVE_RECEIVER) ? module->dlFreq : module->upFreq;
 8000e24:	78fb      	ldrb	r3, [r7, #3]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d102      	bne.n	8000e30 <changeMode+0x76>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	e001      	b.n	8000e34 <changeMode+0x7a>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	689b      	ldr	r3, [r3, #8]
		module->frequency =
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	6013      	str	r3, [r2, #0]

		module->dioConfig = DIO0_RX_DONE | DIO1_RX_TIMEOUT
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	769a      	strb	r2, [r3, #26]
				| DIO2_FHSS_CHANGE_CHANNEL | DIO3_VALID_HEADER;
		module->flagsMode = 0xff;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	22ff      	movs	r2, #255	; 0xff
 8000e42:	76da      	strb	r2, [r3, #27]
		module->flagsMode &= ~(RX_DONE_MASK) & ~(PAYLOAD_CRC_ERROR_MASK);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	7edb      	ldrb	r3, [r3, #27]
 8000e48:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	76da      	strb	r2, [r3, #27]
		module->mode = mode;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	78fa      	ldrb	r2, [r7, #3]
 8000e56:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		module->status = RX_MODE;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2202      	movs	r2, #2
 8000e5e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	}

	setLoRaLowFreqModeReg(module, STANDBY);
 8000e62:	2101      	movs	r1, #1
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f7ff ff12 	bl	8000c8e <setLoRaLowFreqModeReg>
	//HAL_Delay(1);
	setRFFrequencyReg(module);
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff fe0a 	bl	8000a84 <setRFFrequencyReg>
	writeRegister(module->spi, LR_RegDioMapping1, &(module->dioConfig), 1);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	f103 021a 	add.w	r2, r3, #26
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	2140      	movs	r1, #64	; 0x40
 8000e80:	f7ff fdb4 	bl	80009ec <writeRegister>
	clearIrqFlagsReg(module);
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f7ff ff1e 	bl	8000cc6 <clearIrqFlagsReg>
	writeRegister(module->spi, LR_RegIrqFlagsMask, &(module->flagsMode), 1);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f103 021b 	add.w	r2, r3, #27
 8000e96:	2301      	movs	r3, #1
 8000e98:	2111      	movs	r1, #17
 8000e9a:	f7ff fda7 	bl	80009ec <writeRegister>
}
 8000e9e:	bf00      	nop
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
	...

08000ea8 <sx1278Reset>:
	module->preambleLengthLsb = PREAMBLE_LENGTH_LSB;
	module->preambleLengthLsb = 6; // for L-TEL PROTOCOL
	module->fhssValue = HOPS_PERIOD; // for L-TEL PROTOCOL
}

void sx1278Reset() {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 8000eac:	2201      	movs	r2, #1
 8000eae:	2101      	movs	r1, #1
 8000eb0:	480a      	ldr	r0, [pc, #40]	; (8000edc <sx1278Reset+0x34>)
 8000eb2:	f002 ffa0 	bl	8003df6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2101      	movs	r1, #1
 8000eba:	4808      	ldr	r0, [pc, #32]	; (8000edc <sx1278Reset+0x34>)
 8000ebc:	f002 ff9b 	bl	8003df6 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	f002 f9eb 	bl	800329c <HAL_Delay>
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	2101      	movs	r1, #1
 8000eca:	4804      	ldr	r0, [pc, #16]	; (8000edc <sx1278Reset+0x34>)
 8000ecc:	f002 ff93 	bl	8003df6 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000ed0:	2064      	movs	r0, #100	; 0x64
 8000ed2:	f002 f9e3 	bl	800329c <HAL_Delay>
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40010c00 	.word	0x40010c00

08000ee0 <waitForTxEnd>:

void waitForTxEnd(SX1278_t *loRa) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	int timeStart = HAL_GetTick();
 8000ee8:	f002 f9ce 	bl	8003288 <HAL_GetTick>
 8000eec:	4603      	mov	r3, r0
 8000eee:	60fb      	str	r3, [r7, #12]


	while (1) {
		if (HAL_GPIO_ReadPin(LORA_BUSSY_GPIO_Port, LORA_BUSSY_Pin)) {
 8000ef0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ef4:	4819      	ldr	r0, [pc, #100]	; (8000f5c <waitForTxEnd+0x7c>)
 8000ef6:	f002 ff67 	bl	8003dc8 <HAL_GPIO_ReadPin>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d015      	beq.n	8000f2c <waitForTxEnd+0x4c>

			readRegister(loRa->spi, LR_RegIrqFlags);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8000f06:	2112      	movs	r1, #18
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff fd43 	bl	8000994 <readRegister>
			clearIrqFlagsReg(loRa);
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff fed9 	bl	8000cc6 <clearIrqFlagsReg>
			loRa->status = TX_DONE;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2203      	movs	r2, #3
 8000f18:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			loRa->lastTxTime = HAL_GetTick() - timeStart;
 8000f1c:	f002 f9b4 	bl	8003288 <HAL_GetTick>
 8000f20:	4602      	mov	r2, r0
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	1ad2      	subs	r2, r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	621a      	str	r2, [r3, #32]
			return;
 8000f2a:	e013      	b.n	8000f54 <waitForTxEnd+0x74>
		}
		if (HAL_GetTick() - timeStart > LORA_SEND_TIMEOUT) {
 8000f2c:	f002 f9ac 	bl	8003288 <HAL_GetTick>
 8000f30:	4602      	mov	r2, r0
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d906      	bls.n	8000f4c <waitForTxEnd+0x6c>
			sx1278Reset();
 8000f3e:	f7ff ffb3 	bl	8000ea8 <sx1278Reset>
			loRa->status = TX_TIMEOUT;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2205      	movs	r2, #5
 8000f46:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			return;
 8000f4a:	e003      	b.n	8000f54 <waitForTxEnd+0x74>
		}
		HAL_Delay(1);
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	f002 f9a5 	bl	800329c <HAL_Delay>
		if (HAL_GPIO_ReadPin(LORA_BUSSY_GPIO_Port, LORA_BUSSY_Pin)) {
 8000f52:	e7cd      	b.n	8000ef0 <waitForTxEnd+0x10>
	}
}
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40010c00 	.word	0x40010c00

08000f60 <getRxFifoData>:
	flags = readRegister(module->spi, LR_RegIrqFlags);
	uint8_t errorActivation = READ_BIT(flags, PAYLOAD_CRC_ERROR_MASK);
	return errorActivation;
}

void getRxFifoData(SX1278_t *loRa) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	uint8_t timeout = 100;
 8000f68:	2364      	movs	r3, #100	; 0x64
 8000f6a:	73fb      	strb	r3, [r7, #15]
	uint8_t addr = 0x00;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	73bb      	strb	r3, [r7, #14]
	loRa->rxSize = readRegister(loRa->spi, LR_RegRxNbBytes); //Number for received bytes
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8000f76:	2113      	movs	r1, #19
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff fd0b 	bl	8000994 <readRegister>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	461a      	mov	r2, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
	if (loRa->rxSize > 0) {
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f893 315b 	ldrb.w	r3, [r3, #347]	; 0x15b
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d021      	beq.n	8000fd6 <getRxFifoData+0x76>
		HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET); // pull the pin low
 8000f92:	2200      	movs	r2, #0
 8000f94:	2101      	movs	r1, #1
 8000f96:	4812      	ldr	r0, [pc, #72]	; (8000fe0 <getRxFifoData+0x80>)
 8000f98:	f002 ff2d 	bl	8003df6 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(loRa->spi, &addr, 1, timeout); // send address
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	f107 010e 	add.w	r1, r7, #14
 8000fa8:	2201      	movs	r2, #1
 8000faa:	f005 f9dd 	bl	8006368 <HAL_SPI_Transmit>
		HAL_SPI_Receive(loRa->spi, loRa->rxData, 256, timeout); // receive 6 bytes data
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f103 012f 	add.w	r1, r3, #47	; 0x2f
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
 8000fbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fc0:	f005 fb15 	bl	80065ee <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET); // pull the pin high
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <getRxFifoData+0x80>)
 8000fca:	f002 ff14 	bl	8003df6 <HAL_GPIO_WritePin>
		loRa->status = RX_DONE;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2204      	movs	r2, #4
 8000fd2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	}

}
 8000fd6:	bf00      	nop
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40010c00 	.word	0x40010c00

08000fe4 <setTxFifoData>:
	uint8_t addr = 0x00;
	writeRegister(module->spi, LR_RegFifoAddrPtr, &addr, 1); //RegFifoAddrPtr
	module->rxSize = readRegister(module->spi, LR_RegPayloadLength);
}

uint8_t setTxFifoData(SX1278_t *loRa) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	uint8_t cmd = loRa->txSize;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8000ff2:	72fb      	strb	r3, [r7, #11]
	uint8_t base_addr = 0x80;
 8000ff4:	2380      	movs	r3, #128	; 0x80
 8000ff6:	72bb      	strb	r3, [r7, #10]
	if (loRa->txSize > 0) {
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d02a      	beq.n	8001058 <setTxFifoData+0x74>
		writeRegister(loRa->spi, LR_RegPayloadLength, &(cmd), 1);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8001008:	f107 020b 	add.w	r2, r7, #11
 800100c:	2301      	movs	r3, #1
 800100e:	2122      	movs	r1, #34	; 0x22
 8001010:	f7ff fcec 	bl	80009ec <writeRegister>
		writeRegister(loRa->spi, LR_RegFifoAddrPtr, &base_addr, 1);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 800101a:	f107 020a 	add.w	r2, r7, #10
 800101e:	2301      	movs	r3, #1
 8001020:	210d      	movs	r1, #13
 8001022:	f7ff fce3 	bl	80009ec <writeRegister>
		for (int i = 0; i < loRa->txSize; i++)
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	e00e      	b.n	800104a <setTxFifoData+0x66>
			writeRegister(loRa->spi, 0x00, loRa->txData + i, 1);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	441a      	add	r2, r3
 800103c:	2301      	movs	r3, #1
 800103e:	2100      	movs	r1, #0
 8001040:	f7ff fcd4 	bl	80009ec <writeRegister>
		for (int i = 0; i < loRa->txSize; i++)
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	3301      	adds	r3, #1
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8001050:	461a      	mov	r2, r3
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	4293      	cmp	r3, r2
 8001056:	dbe9      	blt.n	800102c <setTxFifoData+0x48>
	}
	return (loRa->txSize);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
}
 800105e:	4618      	mov	r0, r3
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <transmit>:
	clearRxMemory(loRa);
	waitForRxDone(loRa);
	getRxFifoData(loRa);
}

void transmit(SX1278_t *loRa) {
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
	setTxFifoData(loRa);
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f7ff ffb8 	bl	8000fe4 <setTxFifoData>
	setLoRaLowFreqModeReg(loRa, TX);
 8001074:	2103      	movs	r1, #3
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff fe09 	bl	8000c8e <setLoRaLowFreqModeReg>
	waitForTxEnd(loRa);
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ff2f 	bl	8000ee0 <waitForTxEnd>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <HAL_readLoRaSettings>:

	if (loRa->dlFreq < DOWNLINK_FREQ_MIN || loRa->dlFreq > DOWNLINK_FREQ_MAX)
		loRa->dlFreq = DOWNLINK_FREQ;
}

void HAL_readLoRaSettings(SX1278_t *loRa) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]

	readPage(M24C64_PAGE0, &(loRa->spreadFactor), 0, 1);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f103 010d 	add.w	r1, r3, #13
 800109a:	2301      	movs	r3, #1
 800109c:	2200      	movs	r2, #0
 800109e:	2000      	movs	r0, #0
 80010a0:	f000 f8c8 	bl	8001234 <readPage>
	readPage(M24C64_PAGE0, &(loRa->bandwidth), 1, 1);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f103 010e 	add.w	r1, r3, #14
 80010aa:	2301      	movs	r3, #1
 80010ac:	2201      	movs	r2, #1
 80010ae:	2000      	movs	r0, #0
 80010b0:	f000 f8c0 	bl	8001234 <readPage>
	readPage(M24C64_PAGE0, &(loRa->codingRate), 2, 1);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f103 010f 	add.w	r1, r3, #15
 80010ba:	2301      	movs	r3, #1
 80010bc:	2202      	movs	r2, #2
 80010be:	2000      	movs	r0, #0
 80010c0:	f000 f8b8 	bl	8001234 <readPage>
	readPage(M24C64_PAGE1, (uint8_t*) &(loRa->dlFreq), 0, 4);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	1d19      	adds	r1, r3, #4
 80010c8:	2304      	movs	r3, #4
 80010ca:	2200      	movs	r2, #0
 80010cc:	2001      	movs	r0, #1
 80010ce:	f000 f8b1 	bl	8001234 <readPage>
	readPage(M24C64_PAGE1, (uint8_t*) &(loRa->upFreq), 4, 4);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f103 0108 	add.w	r1, r3, #8
 80010d8:	2304      	movs	r3, #4
 80010da:	2204      	movs	r2, #4
 80010dc:	2001      	movs	r0, #1
 80010de:	f000 f8a9 	bl	8001234 <readPage>
	if (loRa->spreadFactor < SF_6 || loRa->spreadFactor > SF_12)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	7b5b      	ldrb	r3, [r3, #13]
 80010e6:	2b05      	cmp	r3, #5
 80010e8:	d903      	bls.n	80010f2 <HAL_readLoRaSettings+0x66>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	7b5b      	ldrb	r3, [r3, #13]
 80010ee:	2b0c      	cmp	r3, #12
 80010f0:	d902      	bls.n	80010f8 <HAL_readLoRaSettings+0x6c>
		loRa->spreadFactor = SF_10;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	220a      	movs	r2, #10
 80010f6:	735a      	strb	r2, [r3, #13]

	if (loRa->bandwidth < LORABW_7_8KHZ || loRa->bandwidth > LORABW_500KHZ)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	7b9b      	ldrb	r3, [r3, #14]
 80010fc:	2b09      	cmp	r3, #9
 80010fe:	d902      	bls.n	8001106 <HAL_readLoRaSettings+0x7a>
		loRa->bandwidth = LORABW_62_5KHZ;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2206      	movs	r2, #6
 8001104:	739a      	strb	r2, [r3, #14]

	if (loRa->codingRate < LORA_CR_4_5 || loRa->codingRate > LORA_CR_4_8)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	7bdb      	ldrb	r3, [r3, #15]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <HAL_readLoRaSettings+0x8a>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	7bdb      	ldrb	r3, [r3, #15]
 8001112:	2b04      	cmp	r3, #4
 8001114:	d902      	bls.n	800111c <HAL_readLoRaSettings+0x90>
		loRa->codingRate = LORA_CR_4_6;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2202      	movs	r2, #2
 800111a:	73da      	strb	r2, [r3, #15]

	if (loRa->upFreq < UPLINK_FREQ_MIN || loRa->upFreq > UPLINK_FREQ_MAX)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	4a0d      	ldr	r2, [pc, #52]	; (8001158 <HAL_readLoRaSettings+0xcc>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d904      	bls.n	8001130 <HAL_readLoRaSettings+0xa4>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	4a0c      	ldr	r2, [pc, #48]	; (800115c <HAL_readLoRaSettings+0xd0>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d902      	bls.n	8001136 <HAL_readLoRaSettings+0xaa>
		loRa->upFreq = UPLINK_FREQ;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a0b      	ldr	r2, [pc, #44]	; (8001160 <HAL_readLoRaSettings+0xd4>)
 8001134:	609a      	str	r2, [r3, #8]

	if (loRa->dlFreq < DOWNLINK_FREQ_MIN || loRa->dlFreq > DOWNLINK_FREQ_MAX)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	4a0a      	ldr	r2, [pc, #40]	; (8001164 <HAL_readLoRaSettings+0xd8>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d904      	bls.n	800114a <HAL_readLoRaSettings+0xbe>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	4a08      	ldr	r2, [pc, #32]	; (8001168 <HAL_readLoRaSettings+0xdc>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d902      	bls.n	8001150 <HAL_readLoRaSettings+0xc4>
		loRa->dlFreq = DOWNLINK_FREQ;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a07      	ldr	r2, [pc, #28]	; (800116c <HAL_readLoRaSettings+0xe0>)
 800114e:	605a      	str	r2, [r3, #4]
}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	09c670ff 	.word	0x09c670ff
 800115c:	0a5f0780 	.word	0x0a5f0780
 8001160:	0a408300 	.word	0x0a408300
 8001164:	08d24cff 	.word	0x08d24cff
 8001168:	095ba140 	.word	0x095ba140
 800116c:	093d1cc0 	.word	0x093d1cc0

08001170 <loRaInit>:

SX1278_t* loRaInit(SPI_HandleTypeDef *hspi1, Lora_Mode_t loRaMode) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	460b      	mov	r3, r1
 800117a:	70fb      	strb	r3, [r7, #3]
	SX1278_t *loRa;
	loRa = malloc(sizeof(SX1278_t));
 800117c:	f44f 70b4 	mov.w	r0, #360	; 0x168
 8001180:	f006 fb7e 	bl	8007880 <malloc>
 8001184:	4603      	mov	r3, r0
 8001186:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 8001188:	2201      	movs	r2, #1
 800118a:	2101      	movs	r1, #1
 800118c:	4828      	ldr	r0, [pc, #160]	; (8001230 <loRaInit+0xc0>)
 800118e:	f002 fe32 	bl	8003df6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_SET);
 8001192:	2201      	movs	r2, #1
 8001194:	2102      	movs	r1, #2
 8001196:	4826      	ldr	r0, [pc, #152]	; (8001230 <loRaInit+0xc0>)
 8001198:	f002 fe2d 	bl	8003df6 <HAL_GPIO_WritePin>
	loRa->spi = hspi1;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
	loRa->operatingMode = readRegister(loRa->spi, LR_RegOpMode);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 80011aa:	2101      	movs	r1, #1
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff fbf1 	bl	8000994 <readRegister>
 80011b2:	4603      	mov	r3, r0
 80011b4:	461a      	mov	r2, r3
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	loRa->mode = -1;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	22ff      	movs	r2, #255	; 0xff
 80011c0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	loRa->power = SX1278_POWER_17DBM;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	22fc      	movs	r2, #252	; 0xfc
 80011c8:	731a      	strb	r2, [r3, #12]
	loRa->LoRa_CRC_sum = CRC_ENABLE;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	2201      	movs	r2, #1
 80011ce:	741a      	strb	r2, [r3, #16]
	loRa->ocp = OVERCURRENTPROTECT;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	220b      	movs	r2, #11
 80011d4:	749a      	strb	r2, [r3, #18]
	loRa->lnaGain = LNAGAIN;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	2223      	movs	r2, #35	; 0x23
 80011da:	74da      	strb	r2, [r3, #19]
	loRa->AgcAutoOn = 12; // for L-TEL PROTOCOL
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	220c      	movs	r2, #12
 80011e0:	751a      	strb	r2, [r3, #20]
	loRa->syncWord = 0x12; // for L-TEL PROTOCOL
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	2212      	movs	r2, #18
 80011e6:	745a      	strb	r2, [r3, #17]
	loRa->symbTimeoutLsb = RX_TIMEOUT_LSB;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	2208      	movs	r2, #8
 80011ec:	755a      	strb	r2, [r3, #21]
	loRa->preambleLengthMsb = PREAMBLE_LENGTH_MSB;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	2200      	movs	r2, #0
 80011f2:	75da      	strb	r2, [r3, #23]
	loRa->preambleLengthLsb = PREAMBLE_LENGTH_LSB;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2208      	movs	r2, #8
 80011f8:	761a      	strb	r2, [r3, #24]
	loRa->preambleLengthLsb = 12; // for L-TEL PROTOCOL
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	220c      	movs	r2, #12
 80011fe:	761a      	strb	r2, [r3, #24]
	loRa->fhssValue = HOPS_PERIOD; // for L-TEL PROTOCOL
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	2207      	movs	r2, #7
 8001204:	765a      	strb	r2, [r3, #25]
	loRa->rxSize = 0;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	2200      	movs	r2, #0
 800120a:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
	HAL_readLoRaSettings(loRa);
 800120e:	68f8      	ldr	r0, [r7, #12]
 8001210:	f7ff ff3c 	bl	800108c <HAL_readLoRaSettings>
	changeMode(loRa, loRaMode);
 8001214:	78fb      	ldrb	r3, [r7, #3]
 8001216:	4619      	mov	r1, r3
 8001218:	68f8      	ldr	r0, [r7, #12]
 800121a:	f7ff fdce 	bl	8000dba <changeMode>
	writeLoRaParametersReg(loRa);
 800121e:	68f8      	ldr	r0, [r7, #12]
 8001220:	f7ff fd64 	bl	8000cec <writeLoRaParametersReg>
	return loRa;
 8001224:	68fb      	ldr	r3, [r7, #12]
}
 8001226:	4618      	mov	r0, r3
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40010c00 	.word	0x40010c00

08001234 <readPage>:
		i2c1MasterTransmit(CHIP_ADDR, buff, size + 1, 50);
	}
	HAL_Delay(6);
}

HAL_StatusTypeDef readPage(uint16_t page, uint8_t *data, uint16_t offset, uint16_t size) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b08a      	sub	sp, #40	; 0x28
 8001238:	af04      	add	r7, sp, #16
 800123a:	60b9      	str	r1, [r7, #8]
 800123c:	4611      	mov	r1, r2
 800123e:	461a      	mov	r2, r3
 8001240:	4603      	mov	r3, r0
 8001242:	81fb      	strh	r3, [r7, #14]
 8001244:	460b      	mov	r3, r1
 8001246:	81bb      	strh	r3, [r7, #12]
 8001248:	4613      	mov	r3, r2
 800124a:	80fb      	strh	r3, [r7, #6]
    uint16_t MemAddress = (page << 8) | offset;
 800124c:	89fb      	ldrh	r3, [r7, #14]
 800124e:	021b      	lsls	r3, r3, #8
 8001250:	b21a      	sxth	r2, r3
 8001252:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001256:	4313      	orrs	r3, r2
 8001258:	b21b      	sxth	r3, r3
 800125a:	82fb      	strh	r3, [r7, #22]
    HAL_StatusTypeDef res;
    res = HAL_I2C_Mem_Read(&hi2c1, M24C64_CHIP_ADDR, MemAddress, I2C_MEMADD_SIZE_16BIT, data, size, 1000);
 800125c:	8afa      	ldrh	r2, [r7, #22]
 800125e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001262:	9302      	str	r3, [sp, #8]
 8001264:	88fb      	ldrh	r3, [r7, #6]
 8001266:	9301      	str	r3, [sp, #4]
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	2310      	movs	r3, #16
 800126e:	21a0      	movs	r1, #160	; 0xa0
 8001270:	4808      	ldr	r0, [pc, #32]	; (8001294 <readPage+0x60>)
 8001272:	f003 fb81 	bl	8004978 <HAL_I2C_Mem_Read>
 8001276:	4603      	mov	r3, r0
 8001278:	757b      	strb	r3, [r7, #21]
    if (res != HAL_OK)
 800127a:	7d7b      	ldrb	r3, [r7, #21]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <readPage+0x50>
        return res;
 8001280:	7d7b      	ldrb	r3, [r7, #21]
 8001282:	e003      	b.n	800128c <readPage+0x58>

    HAL_Delay(5);
 8001284:	2005      	movs	r0, #5
 8001286:	f002 f809 	bl	800329c <HAL_Delay>
    return res;
 800128a:	7d7b      	ldrb	r3, [r7, #21]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3718      	adds	r7, #24
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	200000b8 	.word	0x200000b8

08001298 <HAL_savePage>:


HAL_StatusTypeDef HAL_savePage(uint16_t page, uint8_t *data, uint16_t offset, uint16_t size) {
 8001298:	b580      	push	{r7, lr}
 800129a:	b08e      	sub	sp, #56	; 0x38
 800129c:	af04      	add	r7, sp, #16
 800129e:	60b9      	str	r1, [r7, #8]
 80012a0:	4611      	mov	r1, r2
 80012a2:	461a      	mov	r2, r3
 80012a4:	4603      	mov	r3, r0
 80012a6:	81fb      	strh	r3, [r7, #14]
 80012a8:	460b      	mov	r3, r1
 80012aa:	81bb      	strh	r3, [r7, #12]
 80012ac:	4613      	mov	r3, r2
 80012ae:	80fb      	strh	r3, [r7, #6]
    uint8_t read[16]={0};
 80012b0:	2300      	movs	r3, #0
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
    bool notEqual = false;
 80012c0:	2300      	movs	r3, #0
 80012c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    HAL_StatusTypeDef res;

    res = readPage(page, read, offset, size);
 80012c6:	88fb      	ldrh	r3, [r7, #6]
 80012c8:	89ba      	ldrh	r2, [r7, #12]
 80012ca:	f107 0110 	add.w	r1, r7, #16
 80012ce:	89f8      	ldrh	r0, [r7, #14]
 80012d0:	f7ff ffb0 	bl	8001234 <readPage>
 80012d4:	4603      	mov	r3, r0
 80012d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    for (uint16_t i = 0; i < size; i++)
 80012da:	2300      	movs	r3, #0
 80012dc:	84bb      	strh	r3, [r7, #36]	; 0x24
 80012de:	e011      	b.n	8001304 <HAL_savePage+0x6c>
        if (data[i] != read[i]) {
 80012e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	4413      	add	r3, r2
 80012e6:	781a      	ldrb	r2, [r3, #0]
 80012e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012ea:	3328      	adds	r3, #40	; 0x28
 80012ec:	443b      	add	r3, r7
 80012ee:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d003      	beq.n	80012fe <HAL_savePage+0x66>
            notEqual = true;
 80012f6:	2301      	movs	r3, #1
 80012f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80012fc:	e006      	b.n	800130c <HAL_savePage+0x74>
    for (uint16_t i = 0; i < size; i++)
 80012fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001300:	3301      	adds	r3, #1
 8001302:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001304:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001306:	88fb      	ldrh	r3, [r7, #6]
 8001308:	429a      	cmp	r2, r3
 800130a:	d3e9      	bcc.n	80012e0 <HAL_savePage+0x48>
        }

    if (notEqual) {
 800130c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001310:	2b00      	cmp	r3, #0
 8001312:	d016      	beq.n	8001342 <HAL_savePage+0xaa>
        uint16_t memAddress = (page << 8) | offset;
 8001314:	89fb      	ldrh	r3, [r7, #14]
 8001316:	021b      	lsls	r3, r3, #8
 8001318:	b21a      	sxth	r2, r3
 800131a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800131e:	4313      	orrs	r3, r2
 8001320:	b21b      	sxth	r3, r3
 8001322:	847b      	strh	r3, [r7, #34]	; 0x22
        res = HAL_I2C_Mem_Write(&hi2c1, M24C64_CHIP_ADDR, memAddress, I2C_MEMADD_SIZE_16BIT, data, size, 50);
 8001324:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001326:	2332      	movs	r3, #50	; 0x32
 8001328:	9302      	str	r3, [sp, #8]
 800132a:	88fb      	ldrh	r3, [r7, #6]
 800132c:	9301      	str	r3, [sp, #4]
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	2310      	movs	r3, #16
 8001334:	21a0      	movs	r1, #160	; 0xa0
 8001336:	4807      	ldr	r0, [pc, #28]	; (8001354 <HAL_savePage+0xbc>)
 8001338:	f003 fa24 	bl	8004784 <HAL_I2C_Mem_Write>
 800133c:	4603      	mov	r3, r0
 800133e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    }
    HAL_Delay(6);
 8001342:	2006      	movs	r0, #6
 8001344:	f001 ffaa 	bl	800329c <HAL_Delay>

    return res;
 8001348:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
}
 800134c:	4618      	mov	r0, r3
 800134e:	3728      	adds	r7, #40	; 0x28
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	200000b8 	.word	0x200000b8

08001358 <ledInit>:
 *  Created on: Sep 26, 2022
 *      Author: sigmadev
 */
#include "led.h"

void ledInit(LED_t *led) {
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	/*CURRENT NORMAL LED PA7 (A)*/
	SET_BIT(GPIOB->ODR, GPIO_ODR_ODR5);
 8001360:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <ledInit+0x60>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	4a14      	ldr	r2, [pc, #80]	; (80013b8 <ledInit+0x60>)
 8001366:	f043 0320 	orr.w	r3, r3, #32
 800136a:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(GPIOB->ODR, GPIO_ODR_ODR5);
 800136c:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <ledInit+0x60>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	4a11      	ldr	r2, [pc, #68]	; (80013b8 <ledInit+0x60>)
 8001372:	f023 0320 	bic.w	r3, r3, #32
 8001376:	60d3      	str	r3, [r2, #12]
	/*CURRENT NORMAL LED PB0 (B)*/
	SET_BIT(GPIOB->ODR, GPIO_ODR_ODR4);
 8001378:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <ledInit+0x60>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	4a0e      	ldr	r2, [pc, #56]	; (80013b8 <ledInit+0x60>)
 800137e:	f043 0310 	orr.w	r3, r3, #16
 8001382:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(GPIOB->ODR, GPIO_ODR_ODR4);
 8001384:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <ledInit+0x60>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	4a0b      	ldr	r2, [pc, #44]	; (80013b8 <ledInit+0x60>)
 800138a:	f023 0310 	bic.w	r3, r3, #16
 800138e:	60d3      	str	r3, [r2, #12]
	/*CURRENT NORMAL LED PB1 (SR)*/
	SET_BIT(GPIOB->ODR, GPIO_ODR_ODR3);
 8001390:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <ledInit+0x60>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	4a08      	ldr	r2, [pc, #32]	; (80013b8 <ledInit+0x60>)
 8001396:	f043 0308 	orr.w	r3, r3, #8
 800139a:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(GPIOB->ODR, GPIO_ODR_ODR3);
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <ledInit+0x60>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	4a05      	ldr	r2, [pc, #20]	; (80013b8 <ledInit+0x60>)
 80013a2:	f023 0308 	bic.w	r3, r3, #8
 80013a6:	60d3      	str	r3, [r2, #12]
	led_reset(led);
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f000 f807 	bl	80013bc <led_reset>
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40010c00 	.word	0x40010c00

080013bc <led_reset>:
		SYS_RP_LED_ON();
	} else if (HAL_GetTick() - l->kaCounter > LED_KA_ON_TIMEOUT)
		SYS_RP_LED_OFF();
}

void led_reset(LED_t *l) {
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
	l->chCounter = 0;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
	l->clCounter = 0;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	605a      	str	r2, [r3, #4]
	l->cnCounter = 0;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
	l->kaCounter = HAL_GetTick();
 80013d6:	f001 ff57 	bl	8003288 <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	601a      	str	r2, [r3, #0]
	l->sysrpCounter = 0;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	611a      	str	r2, [r3, #16]
	l->thCounter = 0;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	619a      	str	r2, [r3, #24]
	l->tokCounter = 0;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	615a      	str	r2, [r3, #20]
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
	...

080013fc <lm75_init>:
#include "lm75.h"

HAL_StatusTypeDef lm75_init(void ) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af02      	add	r7, sp, #8
	uint8_t cmd[2];
	cmd[0] = LM75_Conf;
 8001402:	2301      	movs	r3, #1
 8001404:	713b      	strb	r3, [r7, #4]
	cmd[1] = 0x0;
 8001406:	2300      	movs	r3, #0
 8001408:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef res;
	res = HAL_I2C_Master_Transmit(&hi2c1, LM75_ADDR<<1, cmd,2,50);
 800140a:	1d3a      	adds	r2, r7, #4
 800140c:	2332      	movs	r3, #50	; 0x32
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	2302      	movs	r3, #2
 8001412:	219e      	movs	r1, #158	; 0x9e
 8001414:	4804      	ldr	r0, [pc, #16]	; (8001428 <lm75_init+0x2c>)
 8001416:	f002 fe4b 	bl	80040b0 <HAL_I2C_Master_Transmit>
 800141a:	4603      	mov	r3, r0
 800141c:	71fb      	strb	r3, [r7, #7]

	return res;
 800141e:	79fb      	ldrb	r3, [r7, #7]

}
 8001420:	4618      	mov	r0, r3
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	200000b8 	.word	0x200000b8

0800142c <lm75_read>:

uint16_t lm75_read(void) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af02      	add	r7, sp, #8
	uint8_t cmd[2];
	float result = 0;
 8001432:	f04f 0300 	mov.w	r3, #0
 8001436:	607b      	str	r3, [r7, #4]
	cmd[0] = LM75_Temp;
 8001438:	2300      	movs	r3, #0
 800143a:	703b      	strb	r3, [r7, #0]
    HAL_StatusTypeDef res;
    res = HAL_I2C_Master_Transmit(&hi2c1, LM75_ADDR<<1, cmd,1,50);
 800143c:	463a      	mov	r2, r7
 800143e:	2332      	movs	r3, #50	; 0x32
 8001440:	9300      	str	r3, [sp, #0]
 8001442:	2301      	movs	r3, #1
 8001444:	219e      	movs	r1, #158	; 0x9e
 8001446:	4818      	ldr	r0, [pc, #96]	; (80014a8 <lm75_read+0x7c>)
 8001448:	f002 fe32 	bl	80040b0 <HAL_I2C_Master_Transmit>
 800144c:	4603      	mov	r3, r0
 800144e:	70fb      	strb	r3, [r7, #3]
	if(res != HAL_OK)
 8001450:	78fb      	ldrb	r3, [r7, #3]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d005      	beq.n	8001462 <lm75_read+0x36>
		return result;
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f7ff f8fc 	bl	8000654 <__aeabi_f2uiz>
 800145c:	4603      	mov	r3, r0
 800145e:	b29b      	uxth	r3, r3
 8001460:	e01d      	b.n	800149e <lm75_read+0x72>
    res = HAL_I2C_Master_Receive(&hi2c1, LM75_ADDR<<1 | 1, cmd,2,50);
 8001462:	463a      	mov	r2, r7
 8001464:	2332      	movs	r3, #50	; 0x32
 8001466:	9300      	str	r3, [sp, #0]
 8001468:	2302      	movs	r3, #2
 800146a:	219f      	movs	r1, #159	; 0x9f
 800146c:	480e      	ldr	r0, [pc, #56]	; (80014a8 <lm75_read+0x7c>)
 800146e:	f002 ff1d 	bl	80042ac <HAL_I2C_Master_Receive>
 8001472:	4603      	mov	r3, r0
 8001474:	70fb      	strb	r3, [r7, #3]
	result = (float) ((cmd[0] << 8) | cmd[1]) / 256.0f;
 8001476:	783b      	ldrb	r3, [r7, #0]
 8001478:	021b      	lsls	r3, r3, #8
 800147a:	787a      	ldrb	r2, [r7, #1]
 800147c:	4313      	orrs	r3, r2
 800147e:	4618      	mov	r0, r3
 8001480:	f7fe ff1e 	bl	80002c0 <__aeabi_i2f>
 8001484:	4603      	mov	r3, r0
 8001486:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff f820 	bl	80004d0 <__aeabi_fdiv>
 8001490:	4603      	mov	r3, r0
 8001492:	607b      	str	r3, [r7, #4]
	return result;
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff f8dd 	bl	8000654 <__aeabi_f2uiz>
 800149a:	4603      	mov	r3, r0
 800149c:	b29b      	uxth	r3, r3
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	200000b8 	.word	0x200000b8

080014ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014ac:	b590      	push	{r4, r7, lr}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	uart1_ptr = &u1;
 80014b2:	4b50      	ldr	r3, [pc, #320]	; (80015f4 <main+0x148>)
 80014b4:	4a50      	ldr	r2, [pc, #320]	; (80015f8 <main+0x14c>)
 80014b6:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014b8:	f001 fe8e 	bl	80031d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014bc:	f000 f8b2 	bl	8001624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014c0:	f000 fa88 	bl	80019d4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80014c4:	f000 f98a 	bl	80017dc <MX_I2C1_Init>
  MX_SPI1_Init();
 80014c8:	f000 f9d0 	bl	800186c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80014cc:	f000 fa04 	bl	80018d8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80014d0:	f000 fa2c 	bl	800192c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80014d4:	f000 fa54 	bl	8001980 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80014d8:	f000 f900 	bl	80016dc <MX_ADC1_Init>
  MX_CRC_Init();
 80014dc:	f000 f96a 	bl	80017b4 <MX_CRC_Init>
  MX_IWDG_Init();
 80014e0:	f000 f9aa 	bl	8001838 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(KEEP_ALIVE_GPIO_Port, KEEP_ALIVE_Pin, GPIO_PIN_SET);
 80014e4:	2201      	movs	r2, #1
 80014e6:	2120      	movs	r1, #32
 80014e8:	4844      	ldr	r0, [pc, #272]	; (80015fc <main+0x150>)
 80014ea:	f002 fc84 	bl	8003df6 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80014ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014f2:	f001 fed3 	bl	800329c <HAL_Delay>
	HAL_GPIO_WritePin(KEEP_ALIVE_GPIO_Port, LORA_TX_OK_Pin, GPIO_PIN_SET);
 80014f6:	2201      	movs	r2, #1
 80014f8:	2108      	movs	r1, #8
 80014fa:	4840      	ldr	r0, [pc, #256]	; (80015fc <main+0x150>)
 80014fc:	f002 fc7b 	bl	8003df6 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8001500:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001504:	f001 feca 	bl	800329c <HAL_Delay>
	HAL_GPIO_WritePin(KEEP_ALIVE_GPIO_Port, LORA_RX_OK_Pin, GPIO_PIN_SET);
 8001508:	2201      	movs	r2, #1
 800150a:	2110      	movs	r1, #16
 800150c:	483b      	ldr	r0, [pc, #236]	; (80015fc <main+0x150>)
 800150e:	f002 fc72 	bl	8003df6 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8001512:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001516:	f001 fec1 	bl	800329c <HAL_Delay>
	vlad = vladInit(SERVER);
 800151a:	2000      	movs	r0, #0
 800151c:	f001 f940 	bl	80027a0 <vladInit>
 8001520:	4603      	mov	r3, r0
 8001522:	4a37      	ldr	r2, [pc, #220]	; (8001600 <main+0x154>)
 8001524:	6013      	str	r3, [r2, #0]
	server = serverInit(SERVER);
 8001526:	2000      	movs	r0, #0
 8001528:	f001 f9ae 	bl	8002888 <serverInit>
 800152c:	4603      	mov	r3, r0
 800152e:	4a35      	ldr	r2, [pc, #212]	; (8001604 <main+0x158>)
 8001530:	6013      	str	r3, [r2, #0]
	ledInit(&led);
 8001532:	4835      	ldr	r0, [pc, #212]	; (8001608 <main+0x15c>)
 8001534:	f7ff ff10 	bl	8001358 <ledInit>
	rdss = rdssInit(0);
 8001538:	2000      	movs	r0, #0
 800153a:	f001 f9ca 	bl	80028d2 <rdssInit>
 800153e:	4603      	mov	r3, r0
 8001540:	4a32      	ldr	r2, [pc, #200]	; (800160c <main+0x160>)
 8001542:	6013      	str	r3, [r2, #0]
	loRa = loRaInit(&hspi1, MASTER_SENDER);
 8001544:	2102      	movs	r1, #2
 8001546:	4832      	ldr	r0, [pc, #200]	; (8001610 <main+0x164>)
 8001548:	f7ff fe12 	bl	8001170 <loRaInit>
 800154c:	4603      	mov	r3, r0
 800154e:	4a31      	ldr	r2, [pc, #196]	; (8001614 <main+0x168>)
 8001550:	6013      	str	r3, [r2, #0]
	lm75_init();
 8001552:	f7ff ff53 	bl	80013fc <lm75_init>
	HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001556:	2200      	movs	r2, #0
 8001558:	2100      	movs	r1, #0
 800155a:	2025      	movs	r0, #37	; 0x25
 800155c:	f002 f9ab 	bl	80038b6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001560:	2025      	movs	r0, #37	; 0x25
 8001562:	f002 f9c4 	bl	80038ee <HAL_NVIC_EnableIRQ>
	HAL_UART_Receive_IT(&huart1, &rxData, 1);
 8001566:	2201      	movs	r2, #1
 8001568:	492b      	ldr	r1, [pc, #172]	; (8001618 <main+0x16c>)
 800156a:	482c      	ldr	r0, [pc, #176]	; (800161c <main+0x170>)
 800156c:	f005 fc50 	bl	8006e10 <HAL_UART_Receive_IT>

	configureGPIO();
 8001570:	f001 f810 	bl	8002594 <configureGPIO>
	configureADC();
 8001574:	f000 ffd0 	bl	8002518 <configureADC>
	calibrateADC();
 8001578:	f000 fff6 	bl	8002568 <calibrateADC>
	uint32_t keepAliveStartTicks = HAL_GetTick();
 800157c:	f001 fe84 	bl	8003288 <HAL_GetTick>
 8001580:	6078      	str	r0, [r7, #4]
	rdss->lastUpdateTicks = HAL_GetTick();
 8001582:	4b22      	ldr	r3, [pc, #136]	; (800160c <main+0x160>)
 8001584:	681c      	ldr	r4, [r3, #0]
 8001586:	f001 fe7f 	bl	8003288 <HAL_GetTick>
 800158a:	4603      	mov	r3, r0
 800158c:	6363      	str	r3, [r4, #52]	; 0x34
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		adcValues[0] = readADCChannel(0);
 800158e:	2000      	movs	r0, #0
 8001590:	f001 f840 	bl	8002614 <readADCChannel>
 8001594:	4603      	mov	r3, r0
 8001596:	461a      	mov	r2, r3
 8001598:	4b21      	ldr	r3, [pc, #132]	; (8001620 <main+0x174>)
 800159a:	801a      	strh	r2, [r3, #0]
		adcValues[1] = readADCChannel(1);
 800159c:	2001      	movs	r0, #1
 800159e:	f001 f839 	bl	8002614 <readADCChannel>
 80015a2:	4603      	mov	r3, r0
 80015a4:	461a      	mov	r2, r3
 80015a6:	4b1e      	ldr	r3, [pc, #120]	; (8001620 <main+0x174>)
 80015a8:	805a      	strh	r2, [r3, #2]
		adcValues[2] = lm75_read();
 80015aa:	f7ff ff3f 	bl	800142c <lm75_read>
 80015ae:	4603      	mov	r3, r0
 80015b0:	461a      	mov	r2, r3
 80015b2:	4b1b      	ldr	r3, [pc, #108]	; (8001620 <main+0x174>)
 80015b4:	809a      	strh	r2, [r3, #4]
		updateMasterStatus(rdss, adcValues, 5000);
 80015b6:	4b15      	ldr	r3, [pc, #84]	; (800160c <main+0x160>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80015be:	4918      	ldr	r1, [pc, #96]	; (8001620 <main+0x174>)
 80015c0:	4618      	mov	r0, r3
 80015c2:	f001 f841 	bl	8002648 <updateMasterStatus>
		processUart1Rx(&u1, rdss, server, loRa);
 80015c6:	4b11      	ldr	r3, [pc, #68]	; (800160c <main+0x160>)
 80015c8:	6819      	ldr	r1, [r3, #0]
 80015ca:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <main+0x158>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	4b11      	ldr	r3, [pc, #68]	; (8001614 <main+0x168>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4809      	ldr	r0, [pc, #36]	; (80015f8 <main+0x14c>)
 80015d4:	f000 fda2 	bl	800211c <processUart1Rx>
		//configureLoRaRx(loRa, MASTER_RECEIVER);
		masterProcessLoRaRx(loRa, rdss, vlad);
 80015d8:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <main+0x168>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a0b      	ldr	r2, [pc, #44]	; (800160c <main+0x160>)
 80015de:	6811      	ldr	r1, [r2, #0]
 80015e0:	4a07      	ldr	r2, [pc, #28]	; (8001600 <main+0x154>)
 80015e2:	6812      	ldr	r2, [r2, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f000 ff0d 	bl	8002404 <masterProcessLoRaRx>

#ifdef IWDG_DEBUG
		HAL_IWDG_Refresh(&hiwdg);
#endif
		keepAliveStartTicks = enableKeepAliveLed(keepAliveStartTicks);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f000 ff6c 	bl	80024c8 <enableKeepAliveLed>
 80015f0:	6078      	str	r0, [r7, #4]
		adcValues[0] = readADCChannel(0);
 80015f2:	e7cc      	b.n	800158e <main+0xe2>
 80015f4:	20000248 	.word	0x20000248
 80015f8:	2000026c 	.word	0x2000026c
 80015fc:	40010c00 	.word	0x40010c00
 8001600:	200003a8 	.word	0x200003a8
 8001604:	200003b0 	.word	0x200003b0
 8001608:	2000024c 	.word	0x2000024c
 800160c:	20000268 	.word	0x20000268
 8001610:	20000118 	.word	0x20000118
 8001614:	200003ac 	.word	0x200003ac
 8001618:	200003b4 	.word	0x200003b4
 800161c:	20000170 	.word	0x20000170
 8001620:	20000078 	.word	0x20000078

08001624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b094      	sub	sp, #80	; 0x50
 8001628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800162a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800162e:	2228      	movs	r2, #40	; 0x28
 8001630:	2100      	movs	r1, #0
 8001632:	4618      	mov	r0, r3
 8001634:	f006 f9e0 	bl	80079f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001648:	1d3b      	adds	r3, r7, #4
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001654:	2309      	movs	r3, #9
 8001656:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001658:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800165c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800165e:	2300      	movs	r3, #0
 8001660:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001662:	2301      	movs	r3, #1
 8001664:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001666:	2301      	movs	r3, #1
 8001668:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800166a:	2302      	movs	r3, #2
 800166c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800166e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001672:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001674:	2300      	movs	r3, #0
 8001676:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001678:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800167c:	4618      	mov	r0, r3
 800167e:	f004 f929 	bl	80058d4 <HAL_RCC_OscConfig>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001688:	f001 f885 	bl	8002796 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800168c:	230f      	movs	r3, #15
 800168e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001690:	2302      	movs	r3, #2
 8001692:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001694:	2300      	movs	r3, #0
 8001696:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001698:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800169c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800169e:	2300      	movs	r3, #0
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016a2:	f107 0314 	add.w	r3, r7, #20
 80016a6:	2100      	movs	r1, #0
 80016a8:	4618      	mov	r0, r3
 80016aa:	f004 fb95 	bl	8005dd8 <HAL_RCC_ClockConfig>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016b4:	f001 f86f 	bl	8002796 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80016b8:	2302      	movs	r3, #2
 80016ba:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80016bc:	2300      	movs	r3, #0
 80016be:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016c0:	1d3b      	adds	r3, r7, #4
 80016c2:	4618      	mov	r0, r3
 80016c4:	f004 fd16 	bl	80060f4 <HAL_RCCEx_PeriphCLKConfig>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80016ce:	f001 f862 	bl	8002796 <Error_Handler>
  }
}
 80016d2:	bf00      	nop
 80016d4:	3750      	adds	r7, #80	; 0x50
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
	...

080016dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016e2:	1d3b      	adds	r3, r7, #4
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80016ec:	4b2f      	ldr	r3, [pc, #188]	; (80017ac <MX_ADC1_Init+0xd0>)
 80016ee:	4a30      	ldr	r2, [pc, #192]	; (80017b0 <MX_ADC1_Init+0xd4>)
 80016f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80016f2:	4b2e      	ldr	r3, [pc, #184]	; (80017ac <MX_ADC1_Init+0xd0>)
 80016f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80016fa:	4b2c      	ldr	r3, [pc, #176]	; (80017ac <MX_ADC1_Init+0xd0>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001700:	4b2a      	ldr	r3, [pc, #168]	; (80017ac <MX_ADC1_Init+0xd0>)
 8001702:	2200      	movs	r2, #0
 8001704:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001706:	4b29      	ldr	r3, [pc, #164]	; (80017ac <MX_ADC1_Init+0xd0>)
 8001708:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800170c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800170e:	4b27      	ldr	r3, [pc, #156]	; (80017ac <MX_ADC1_Init+0xd0>)
 8001710:	2200      	movs	r2, #0
 8001712:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8001714:	4b25      	ldr	r3, [pc, #148]	; (80017ac <MX_ADC1_Init+0xd0>)
 8001716:	2204      	movs	r2, #4
 8001718:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800171a:	4824      	ldr	r0, [pc, #144]	; (80017ac <MX_ADC1_Init+0xd0>)
 800171c:	f001 fde2 	bl	80032e4 <HAL_ADC_Init>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001726:	f001 f836 	bl	8002796 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800172a:	2300      	movs	r3, #0
 800172c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800172e:	2301      	movs	r3, #1
 8001730:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001732:	2307      	movs	r3, #7
 8001734:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001736:	1d3b      	adds	r3, r7, #4
 8001738:	4619      	mov	r1, r3
 800173a:	481c      	ldr	r0, [pc, #112]	; (80017ac <MX_ADC1_Init+0xd0>)
 800173c:	f001 feaa 	bl	8003494 <HAL_ADC_ConfigChannel>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001746:	f001 f826 	bl	8002796 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800174a:	2301      	movs	r3, #1
 800174c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800174e:	2302      	movs	r3, #2
 8001750:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001752:	1d3b      	adds	r3, r7, #4
 8001754:	4619      	mov	r1, r3
 8001756:	4815      	ldr	r0, [pc, #84]	; (80017ac <MX_ADC1_Init+0xd0>)
 8001758:	f001 fe9c 	bl	8003494 <HAL_ADC_ConfigChannel>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001762:	f001 f818 	bl	8002796 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001766:	2311      	movs	r3, #17
 8001768:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800176a:	2303      	movs	r3, #3
 800176c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800176e:	1d3b      	adds	r3, r7, #4
 8001770:	4619      	mov	r1, r3
 8001772:	480e      	ldr	r0, [pc, #56]	; (80017ac <MX_ADC1_Init+0xd0>)
 8001774:	f001 fe8e 	bl	8003494 <HAL_ADC_ConfigChannel>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800177e:	f001 f80a 	bl	8002796 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001782:	2300      	movs	r3, #0
 8001784:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001786:	2304      	movs	r3, #4
 8001788:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800178e:	1d3b      	adds	r3, r7, #4
 8001790:	4619      	mov	r1, r3
 8001792:	4806      	ldr	r0, [pc, #24]	; (80017ac <MX_ADC1_Init+0xd0>)
 8001794:	f001 fe7e 	bl	8003494 <HAL_ADC_ConfigChannel>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800179e:	f000 fffa 	bl	8002796 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017a2:	bf00      	nop
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000080 	.word	0x20000080
 80017b0:	40012400 	.word	0x40012400

080017b4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80017b8:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <MX_CRC_Init+0x20>)
 80017ba:	4a07      	ldr	r2, [pc, #28]	; (80017d8 <MX_CRC_Init+0x24>)
 80017bc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80017be:	4805      	ldr	r0, [pc, #20]	; (80017d4 <MX_CRC_Init+0x20>)
 80017c0:	f002 f8af 	bl	8003922 <HAL_CRC_Init>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80017ca:	f000 ffe4 	bl	8002796 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	200000b0 	.word	0x200000b0
 80017d8:	40023000 	.word	0x40023000

080017dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017e0:	4b12      	ldr	r3, [pc, #72]	; (800182c <MX_I2C1_Init+0x50>)
 80017e2:	4a13      	ldr	r2, [pc, #76]	; (8001830 <MX_I2C1_Init+0x54>)
 80017e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017e6:	4b11      	ldr	r3, [pc, #68]	; (800182c <MX_I2C1_Init+0x50>)
 80017e8:	4a12      	ldr	r2, [pc, #72]	; (8001834 <MX_I2C1_Init+0x58>)
 80017ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017ec:	4b0f      	ldr	r3, [pc, #60]	; (800182c <MX_I2C1_Init+0x50>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017f2:	4b0e      	ldr	r3, [pc, #56]	; (800182c <MX_I2C1_Init+0x50>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017f8:	4b0c      	ldr	r3, [pc, #48]	; (800182c <MX_I2C1_Init+0x50>)
 80017fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001800:	4b0a      	ldr	r3, [pc, #40]	; (800182c <MX_I2C1_Init+0x50>)
 8001802:	2200      	movs	r2, #0
 8001804:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001806:	4b09      	ldr	r3, [pc, #36]	; (800182c <MX_I2C1_Init+0x50>)
 8001808:	2200      	movs	r2, #0
 800180a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800180c:	4b07      	ldr	r3, [pc, #28]	; (800182c <MX_I2C1_Init+0x50>)
 800180e:	2200      	movs	r2, #0
 8001810:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001812:	4b06      	ldr	r3, [pc, #24]	; (800182c <MX_I2C1_Init+0x50>)
 8001814:	2200      	movs	r2, #0
 8001816:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001818:	4804      	ldr	r0, [pc, #16]	; (800182c <MX_I2C1_Init+0x50>)
 800181a:	f002 fb05 	bl	8003e28 <HAL_I2C_Init>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001824:	f000 ffb7 	bl	8002796 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}
 800182c:	200000b8 	.word	0x200000b8
 8001830:	40005400 	.word	0x40005400
 8001834:	000186a0 	.word	0x000186a0

08001838 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800183c:	4b09      	ldr	r3, [pc, #36]	; (8001864 <MX_IWDG_Init+0x2c>)
 800183e:	4a0a      	ldr	r2, [pc, #40]	; (8001868 <MX_IWDG_Init+0x30>)
 8001840:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 8001842:	4b08      	ldr	r3, [pc, #32]	; (8001864 <MX_IWDG_Init+0x2c>)
 8001844:	2203      	movs	r2, #3
 8001846:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 1875;
 8001848:	4b06      	ldr	r3, [pc, #24]	; (8001864 <MX_IWDG_Init+0x2c>)
 800184a:	f240 7253 	movw	r2, #1875	; 0x753
 800184e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001850:	4804      	ldr	r0, [pc, #16]	; (8001864 <MX_IWDG_Init+0x2c>)
 8001852:	f003 fffc 	bl	800584e <HAL_IWDG_Init>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 800185c:	f000 ff9b 	bl	8002796 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}
 8001864:	2000010c 	.word	0x2000010c
 8001868:	40003000 	.word	0x40003000

0800186c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001870:	4b17      	ldr	r3, [pc, #92]	; (80018d0 <MX_SPI1_Init+0x64>)
 8001872:	4a18      	ldr	r2, [pc, #96]	; (80018d4 <MX_SPI1_Init+0x68>)
 8001874:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001876:	4b16      	ldr	r3, [pc, #88]	; (80018d0 <MX_SPI1_Init+0x64>)
 8001878:	f44f 7282 	mov.w	r2, #260	; 0x104
 800187c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800187e:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <MX_SPI1_Init+0x64>)
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001884:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <MX_SPI1_Init+0x64>)
 8001886:	2200      	movs	r2, #0
 8001888:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800188a:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <MX_SPI1_Init+0x64>)
 800188c:	2200      	movs	r2, #0
 800188e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001890:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <MX_SPI1_Init+0x64>)
 8001892:	2200      	movs	r2, #0
 8001894:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001896:	4b0e      	ldr	r3, [pc, #56]	; (80018d0 <MX_SPI1_Init+0x64>)
 8001898:	f44f 7200 	mov.w	r2, #512	; 0x200
 800189c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800189e:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <MX_SPI1_Init+0x64>)
 80018a0:	2218      	movs	r2, #24
 80018a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018a4:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <MX_SPI1_Init+0x64>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018aa:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <MX_SPI1_Init+0x64>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018b0:	4b07      	ldr	r3, [pc, #28]	; (80018d0 <MX_SPI1_Init+0x64>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018b6:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <MX_SPI1_Init+0x64>)
 80018b8:	220a      	movs	r2, #10
 80018ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018bc:	4804      	ldr	r0, [pc, #16]	; (80018d0 <MX_SPI1_Init+0x64>)
 80018be:	f004 fccf 	bl	8006260 <HAL_SPI_Init>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80018c8:	f000 ff65 	bl	8002796 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018cc:	bf00      	nop
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20000118 	.word	0x20000118
 80018d4:	40013000 	.word	0x40013000

080018d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018dc:	4b11      	ldr	r3, [pc, #68]	; (8001924 <MX_USART1_UART_Init+0x4c>)
 80018de:	4a12      	ldr	r2, [pc, #72]	; (8001928 <MX_USART1_UART_Init+0x50>)
 80018e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 80018e2:	4b10      	ldr	r3, [pc, #64]	; (8001924 <MX_USART1_UART_Init+0x4c>)
 80018e4:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80018e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018ea:	4b0e      	ldr	r3, [pc, #56]	; (8001924 <MX_USART1_UART_Init+0x4c>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018f0:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <MX_USART1_UART_Init+0x4c>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018f6:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <MX_USART1_UART_Init+0x4c>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018fc:	4b09      	ldr	r3, [pc, #36]	; (8001924 <MX_USART1_UART_Init+0x4c>)
 80018fe:	220c      	movs	r2, #12
 8001900:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001902:	4b08      	ldr	r3, [pc, #32]	; (8001924 <MX_USART1_UART_Init+0x4c>)
 8001904:	2200      	movs	r2, #0
 8001906:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001908:	4b06      	ldr	r3, [pc, #24]	; (8001924 <MX_USART1_UART_Init+0x4c>)
 800190a:	2200      	movs	r2, #0
 800190c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800190e:	4805      	ldr	r0, [pc, #20]	; (8001924 <MX_USART1_UART_Init+0x4c>)
 8001910:	f005 fa2e 	bl	8006d70 <HAL_UART_Init>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800191a:	f000 ff3c 	bl	8002796 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000170 	.word	0x20000170
 8001928:	40013800 	.word	0x40013800

0800192c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001930:	4b11      	ldr	r3, [pc, #68]	; (8001978 <MX_USART2_UART_Init+0x4c>)
 8001932:	4a12      	ldr	r2, [pc, #72]	; (800197c <MX_USART2_UART_Init+0x50>)
 8001934:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001936:	4b10      	ldr	r3, [pc, #64]	; (8001978 <MX_USART2_UART_Init+0x4c>)
 8001938:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800193c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800193e:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <MX_USART2_UART_Init+0x4c>)
 8001940:	2200      	movs	r2, #0
 8001942:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001944:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <MX_USART2_UART_Init+0x4c>)
 8001946:	2200      	movs	r2, #0
 8001948:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800194a:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <MX_USART2_UART_Init+0x4c>)
 800194c:	2200      	movs	r2, #0
 800194e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001950:	4b09      	ldr	r3, [pc, #36]	; (8001978 <MX_USART2_UART_Init+0x4c>)
 8001952:	220c      	movs	r2, #12
 8001954:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001956:	4b08      	ldr	r3, [pc, #32]	; (8001978 <MX_USART2_UART_Init+0x4c>)
 8001958:	2200      	movs	r2, #0
 800195a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <MX_USART2_UART_Init+0x4c>)
 800195e:	2200      	movs	r2, #0
 8001960:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001962:	4805      	ldr	r0, [pc, #20]	; (8001978 <MX_USART2_UART_Init+0x4c>)
 8001964:	f005 fa04 	bl	8006d70 <HAL_UART_Init>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800196e:	f000 ff12 	bl	8002796 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	200001b8 	.word	0x200001b8
 800197c:	40004400 	.word	0x40004400

08001980 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001984:	4b11      	ldr	r3, [pc, #68]	; (80019cc <MX_USART3_UART_Init+0x4c>)
 8001986:	4a12      	ldr	r2, [pc, #72]	; (80019d0 <MX_USART3_UART_Init+0x50>)
 8001988:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800198a:	4b10      	ldr	r3, [pc, #64]	; (80019cc <MX_USART3_UART_Init+0x4c>)
 800198c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001990:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001992:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <MX_USART3_UART_Init+0x4c>)
 8001994:	2200      	movs	r2, #0
 8001996:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <MX_USART3_UART_Init+0x4c>)
 800199a:	2200      	movs	r2, #0
 800199c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800199e:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <MX_USART3_UART_Init+0x4c>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019a4:	4b09      	ldr	r3, [pc, #36]	; (80019cc <MX_USART3_UART_Init+0x4c>)
 80019a6:	220c      	movs	r2, #12
 80019a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019aa:	4b08      	ldr	r3, [pc, #32]	; (80019cc <MX_USART3_UART_Init+0x4c>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <MX_USART3_UART_Init+0x4c>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019b6:	4805      	ldr	r0, [pc, #20]	; (80019cc <MX_USART3_UART_Init+0x4c>)
 80019b8:	f005 f9da 	bl	8006d70 <HAL_UART_Init>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80019c2:	f000 fee8 	bl	8002796 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000200 	.word	0x20000200
 80019d0:	40004800 	.word	0x40004800

080019d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b088      	sub	sp, #32
 80019d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019da:	f107 0310 	add.w	r3, r7, #16
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	605a      	str	r2, [r3, #4]
 80019e4:	609a      	str	r2, [r3, #8]
 80019e6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019e8:	4b1e      	ldr	r3, [pc, #120]	; (8001a64 <MX_GPIO_Init+0x90>)
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	4a1d      	ldr	r2, [pc, #116]	; (8001a64 <MX_GPIO_Init+0x90>)
 80019ee:	f043 0320 	orr.w	r3, r3, #32
 80019f2:	6193      	str	r3, [r2, #24]
 80019f4:	4b1b      	ldr	r3, [pc, #108]	; (8001a64 <MX_GPIO_Init+0x90>)
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	f003 0320 	and.w	r3, r3, #32
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a00:	4b18      	ldr	r3, [pc, #96]	; (8001a64 <MX_GPIO_Init+0x90>)
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	4a17      	ldr	r2, [pc, #92]	; (8001a64 <MX_GPIO_Init+0x90>)
 8001a06:	f043 0304 	orr.w	r3, r3, #4
 8001a0a:	6193      	str	r3, [r2, #24]
 8001a0c:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <MX_GPIO_Init+0x90>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	f003 0304 	and.w	r3, r3, #4
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a18:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <MX_GPIO_Init+0x90>)
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	4a11      	ldr	r2, [pc, #68]	; (8001a64 <MX_GPIO_Init+0x90>)
 8001a1e:	f043 0308 	orr.w	r3, r3, #8
 8001a22:	6193      	str	r3, [r2, #24]
 8001a24:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <MX_GPIO_Init+0x90>)
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	f003 0308 	and.w	r3, r3, #8
 8001a2c:	607b      	str	r3, [r7, #4]
 8001a2e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin|LORA_RST_Pin|LORA_DIO3_Pin|LORA_DIO1_Pin
 8001a30:	2200      	movs	r2, #0
 8001a32:	f247 313b 	movw	r1, #29499	; 0x733b
 8001a36:	480c      	ldr	r0, [pc, #48]	; (8001a68 <MX_GPIO_Init+0x94>)
 8001a38:	f002 f9dd 	bl	8003df6 <HAL_GPIO_WritePin>
                          |RS485_DE_Pin|BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LORA_NSS_Pin LORA_RST_Pin LORA_DIO3_Pin LORA_DIO1_Pin
                           LORA_BUSSY_Pin LORA_TX_OK_Pin LORA_RX_OK_Pin KEEP_ALIVE_Pin
                           RS485_DE_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = LORA_NSS_Pin|LORA_RST_Pin|LORA_DIO3_Pin|LORA_DIO1_Pin
 8001a3c:	f247 333b 	movw	r3, #29499	; 0x733b
 8001a40:	613b      	str	r3, [r7, #16]
                          |LORA_BUSSY_Pin|LORA_TX_OK_Pin|LORA_RX_OK_Pin|KEEP_ALIVE_Pin
                          |RS485_DE_Pin|BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a42:	2301      	movs	r3, #1
 8001a44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a4e:	f107 0310 	add.w	r3, r7, #16
 8001a52:	4619      	mov	r1, r3
 8001a54:	4804      	ldr	r0, [pc, #16]	; (8001a68 <MX_GPIO_Init+0x94>)
 8001a56:	f002 f833 	bl	8003ac0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a5a:	bf00      	nop
 8001a5c:	3720      	adds	r7, #32
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40021000 	.word	0x40021000
 8001a68:	40010c00 	.word	0x40010c00

08001a6c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
	/* Read received data from UART1 */
	if (uart1_ptr->rxSize >= UART2_RX_BUFFLEN) {
		cleanRx(uart1_ptr);
		uart1_ptr->rxSize = 0;
	}
	HAL_UART_Receive_IT(&huart1, &rxData, 1);
 8001a74:	2201      	movs	r2, #1
 8001a76:	490f      	ldr	r1, [pc, #60]	; (8001ab4 <HAL_UART_RxCpltCallback+0x48>)
 8001a78:	480f      	ldr	r0, [pc, #60]	; (8001ab8 <HAL_UART_RxCpltCallback+0x4c>)
 8001a7a:	f005 f9c9 	bl	8006e10 <HAL_UART_Receive_IT>
	uart1_ptr->rxData[uart1_ptr->rxSize++] = rxData;
 8001a7e:	4b0f      	ldr	r3, [pc, #60]	; (8001abc <HAL_UART_RxCpltCallback+0x50>)
 8001a80:	6819      	ldr	r1, [r3, #0]
 8001a82:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <HAL_UART_RxCpltCallback+0x50>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f893 2131 	ldrb.w	r2, [r3, #305]	; 0x131
 8001a8a:	1c50      	adds	r0, r2, #1
 8001a8c:	b2c0      	uxtb	r0, r0
 8001a8e:	f883 0131 	strb.w	r0, [r3, #305]	; 0x131
 8001a92:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <HAL_UART_RxCpltCallback+0x48>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	548b      	strb	r3, [r1, r2]
	if (rxData == RDSS_END_MARK)
 8001a98:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <HAL_UART_RxCpltCallback+0x48>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b7f      	cmp	r3, #127	; 0x7f
 8001a9e:	d104      	bne.n	8001aaa <HAL_UART_RxCpltCallback+0x3e>
		uart1_ptr->isReceivedDataReady = true;
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <HAL_UART_RxCpltCallback+0x50>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	200003b4 	.word	0x200003b4
 8001ab8:	20000170 	.word	0x20000170
 8001abc:	20000248 	.word	0x20000248

08001ac0 <executeServerCmd>:
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
	printf("SPI RX Done .. Do Something ...");
}

uint8_t executeServerCmd(uint8_t *buffer, RDSS_t *rdss, SX1278_t *loRa,
		Server_t *server) {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
 8001acc:	603b      	str	r3, [r7, #0]
	uint8_t index = 0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef res;

	if (rdss->buffSize < LTEL_QUERY_LENGTH || rdss->buffSize > LTEL_SET_LENGTH)
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	7a1b      	ldrb	r3, [r3, #8]
 8001ad6:	2b08      	cmp	r3, #8
 8001ad8:	d903      	bls.n	8001ae2 <executeServerCmd+0x22>
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	7a1b      	ldrb	r3, [r3, #8]
 8001ade:	2b0d      	cmp	r3, #13
 8001ae0:	d901      	bls.n	8001ae6 <executeServerCmd+0x26>
		return 0;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	e272      	b.n	8001fcc <executeServerCmd+0x50c>

	index = setRdssStartData(rdss, buffer, server->function);
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	7d5b      	ldrb	r3, [r3, #21]
 8001aea:	461a      	mov	r2, r3
 8001aec:	68f9      	ldr	r1, [r7, #12]
 8001aee:	68b8      	ldr	r0, [r7, #8]
 8001af0:	f001 f81f 	bl	8002b32 <setRdssStartData>
 8001af4:	4603      	mov	r3, r0
 8001af6:	75fb      	strb	r3, [r7, #23]

	switch (rdss->cmd) {
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b25      	cmp	r3, #37	; 0x25
 8001afe:	f300 808b 	bgt.w	8001c18 <executeServerCmd+0x158>
 8001b02:	2b10      	cmp	r3, #16
 8001b04:	da54      	bge.n	8001bb0 <executeServerCmd+0xf0>
		changeMode(loRa, loRa->mode);
		writeLoRaParametersReg(loRa);
		break;

	default:
		break;
 8001b06:	e24a      	b.n	8001f9e <executeServerCmd+0x4de>
	switch (rdss->cmd) {
 8001b08:	3b90      	subs	r3, #144	; 0x90
 8001b0a:	2b25      	cmp	r3, #37	; 0x25
 8001b0c:	f200 8247 	bhi.w	8001f9e <executeServerCmd+0x4de>
 8001b10:	a201      	add	r2, pc, #4	; (adr r2, 8001b18 <executeServerCmd+0x58>)
 8001b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b16:	bf00      	nop
 8001b18:	08001d8f 	.word	0x08001d8f
 8001b1c:	08001f9f 	.word	0x08001f9f
 8001b20:	08001f9f 	.word	0x08001f9f
 8001b24:	08001f9f 	.word	0x08001f9f
 8001b28:	08001f9f 	.word	0x08001f9f
 8001b2c:	08001f9f 	.word	0x08001f9f
 8001b30:	08001f9f 	.word	0x08001f9f
 8001b34:	08001f9f 	.word	0x08001f9f
 8001b38:	08001f9f 	.word	0x08001f9f
 8001b3c:	08001f9f 	.word	0x08001f9f
 8001b40:	08001f9f 	.word	0x08001f9f
 8001b44:	08001f9f 	.word	0x08001f9f
 8001b48:	08001f9f 	.word	0x08001f9f
 8001b4c:	08001f9f 	.word	0x08001f9f
 8001b50:	08001f9f 	.word	0x08001f9f
 8001b54:	08001f9f 	.word	0x08001f9f
 8001b58:	08001f9f 	.word	0x08001f9f
 8001b5c:	08001f9f 	.word	0x08001f9f
 8001b60:	08001f9f 	.word	0x08001f9f
 8001b64:	08001f9f 	.word	0x08001f9f
 8001b68:	08001f9f 	.word	0x08001f9f
 8001b6c:	08001f9f 	.word	0x08001f9f
 8001b70:	08001f9f 	.word	0x08001f9f
 8001b74:	08001f9f 	.word	0x08001f9f
 8001b78:	08001f9f 	.word	0x08001f9f
 8001b7c:	08001f9f 	.word	0x08001f9f
 8001b80:	08001f9f 	.word	0x08001f9f
 8001b84:	08001f9f 	.word	0x08001f9f
 8001b88:	08001f9f 	.word	0x08001f9f
 8001b8c:	08001f9f 	.word	0x08001f9f
 8001b90:	08001f9f 	.word	0x08001f9f
 8001b94:	08001f9f 	.word	0x08001f9f
 8001b98:	08001e09 	.word	0x08001e09
 8001b9c:	08001e5d 	.word	0x08001e5d
 8001ba0:	08001f9f 	.word	0x08001f9f
 8001ba4:	08001eb3 	.word	0x08001eb3
 8001ba8:	08001f03 	.word	0x08001f03
 8001bac:	08001f53 	.word	0x08001f53
 8001bb0:	3b10      	subs	r3, #16
 8001bb2:	2b15      	cmp	r3, #21
 8001bb4:	f200 81f3 	bhi.w	8001f9e <executeServerCmd+0x4de>
 8001bb8:	a201      	add	r2, pc, #4	; (adr r2, 8001bc0 <executeServerCmd+0x100>)
 8001bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bbe:	bf00      	nop
 8001bc0:	08001d01 	.word	0x08001d01
 8001bc4:	08001c27 	.word	0x08001c27
 8001bc8:	08001f9f 	.word	0x08001f9f
 8001bcc:	08001f9f 	.word	0x08001f9f
 8001bd0:	08001f9f 	.word	0x08001f9f
 8001bd4:	08001f9f 	.word	0x08001f9f
 8001bd8:	08001f9f 	.word	0x08001f9f
 8001bdc:	08001f9f 	.word	0x08001f9f
 8001be0:	08001f9f 	.word	0x08001f9f
 8001be4:	08001f9f 	.word	0x08001f9f
 8001be8:	08001f9f 	.word	0x08001f9f
 8001bec:	08001f9f 	.word	0x08001f9f
 8001bf0:	08001f9f 	.word	0x08001f9f
 8001bf4:	08001f9f 	.word	0x08001f9f
 8001bf8:	08001f9f 	.word	0x08001f9f
 8001bfc:	08001f9f 	.word	0x08001f9f
 8001c00:	08001c5d 	.word	0x08001c5d
 8001c04:	08001c2d 	.word	0x08001c2d
 8001c08:	08001f9f 	.word	0x08001f9f
 8001c0c:	08001cd9 	.word	0x08001cd9
 8001c10:	08001c8d 	.word	0x08001c8d
 8001c14:	08001cb5 	.word	0x08001cb5
 8001c18:	2bb5      	cmp	r3, #181	; 0xb5
 8001c1a:	f300 81c0 	bgt.w	8001f9e <executeServerCmd+0x4de>
 8001c1e:	2b90      	cmp	r3, #144	; 0x90
 8001c20:	f6bf af72 	bge.w	8001b08 <executeServerCmd+0x48>
		break;
 8001c24:	e1bb      	b.n	8001f9e <executeServerCmd+0x4de>
		index = 0;
 8001c26:	2300      	movs	r3, #0
 8001c28:	75fb      	strb	r3, [r7, #23]
		break;
 8001c2a:	e1b9      	b.n	8001fa0 <executeServerCmd+0x4e0>
		buffer[index++] = 4;
 8001c2c:	7dfb      	ldrb	r3, [r7, #23]
 8001c2e:	1c5a      	adds	r2, r3, #1
 8001c30:	75fa      	strb	r2, [r7, #23]
 8001c32:	461a      	mov	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4413      	add	r3, r2
 8001c38:	2204      	movs	r2, #4
 8001c3a:	701a      	strb	r2, [r3, #0]
		freqEncode(buffer + index, loRa->upFreq);
 8001c3c:	7dfb      	ldrb	r3, [r7, #23]
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	441a      	add	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	4619      	mov	r1, r3
 8001c48:	4610      	mov	r0, r2
 8001c4a:	f000 ffed 	bl	8002c28 <freqEncode>
		index += sizeof(loRa->upFreq);
 8001c4e:	7dfb      	ldrb	r3, [r7, #23]
 8001c50:	3304      	adds	r3, #4
 8001c52:	75fb      	strb	r3, [r7, #23]
		index++;
 8001c54:	7dfb      	ldrb	r3, [r7, #23]
 8001c56:	3301      	adds	r3, #1
 8001c58:	75fb      	strb	r3, [r7, #23]
		break;
 8001c5a:	e1a1      	b.n	8001fa0 <executeServerCmd+0x4e0>
		buffer[index++] = 4;
 8001c5c:	7dfb      	ldrb	r3, [r7, #23]
 8001c5e:	1c5a      	adds	r2, r3, #1
 8001c60:	75fa      	strb	r2, [r7, #23]
 8001c62:	461a      	mov	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	4413      	add	r3, r2
 8001c68:	2204      	movs	r2, #4
 8001c6a:	701a      	strb	r2, [r3, #0]
		freqEncode(buffer + index, loRa->dlFreq);
 8001c6c:	7dfb      	ldrb	r3, [r7, #23]
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	441a      	add	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	4619      	mov	r1, r3
 8001c78:	4610      	mov	r0, r2
 8001c7a:	f000 ffd5 	bl	8002c28 <freqEncode>
		index += sizeof(loRa->dlFreq);
 8001c7e:	7dfb      	ldrb	r3, [r7, #23]
 8001c80:	3304      	adds	r3, #4
 8001c82:	75fb      	strb	r3, [r7, #23]
		index++;
 8001c84:	7dfb      	ldrb	r3, [r7, #23]
 8001c86:	3301      	adds	r3, #1
 8001c88:	75fb      	strb	r3, [r7, #23]
		break;
 8001c8a:	e189      	b.n	8001fa0 <executeServerCmd+0x4e0>
		buffer[index++] = 1;
 8001c8c:	7dfb      	ldrb	r3, [r7, #23]
 8001c8e:	1c5a      	adds	r2, r3, #1
 8001c90:	75fa      	strb	r2, [r7, #23]
 8001c92:	461a      	mov	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4413      	add	r3, r2
 8001c98:	2201      	movs	r2, #1
 8001c9a:	701a      	strb	r2, [r3, #0]
		buffer[index++] = loRa->spreadFactor - 6;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	7b5a      	ldrb	r2, [r3, #13]
 8001ca0:	7dfb      	ldrb	r3, [r7, #23]
 8001ca2:	1c59      	adds	r1, r3, #1
 8001ca4:	75f9      	strb	r1, [r7, #23]
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	440b      	add	r3, r1
 8001cac:	3a06      	subs	r2, #6
 8001cae:	b2d2      	uxtb	r2, r2
 8001cb0:	701a      	strb	r2, [r3, #0]
		break;
 8001cb2:	e175      	b.n	8001fa0 <executeServerCmd+0x4e0>
		buffer[index++] = 1;
 8001cb4:	7dfb      	ldrb	r3, [r7, #23]
 8001cb6:	1c5a      	adds	r2, r3, #1
 8001cb8:	75fa      	strb	r2, [r7, #23]
 8001cba:	461a      	mov	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	701a      	strb	r2, [r3, #0]
		buffer[index++] = loRa->codingRate;
 8001cc4:	7dfb      	ldrb	r3, [r7, #23]
 8001cc6:	1c5a      	adds	r2, r3, #1
 8001cc8:	75fa      	strb	r2, [r7, #23]
 8001cca:	461a      	mov	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	4413      	add	r3, r2
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	7bd2      	ldrb	r2, [r2, #15]
 8001cd4:	701a      	strb	r2, [r3, #0]
		break;
 8001cd6:	e163      	b.n	8001fa0 <executeServerCmd+0x4e0>
		buffer[index++] = 1;
 8001cd8:	7dfb      	ldrb	r3, [r7, #23]
 8001cda:	1c5a      	adds	r2, r3, #1
 8001cdc:	75fa      	strb	r2, [r7, #23]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	701a      	strb	r2, [r3, #0]
		buffer[index++] = loRa->bandwidth + 1;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	7b9a      	ldrb	r2, [r3, #14]
 8001cec:	7dfb      	ldrb	r3, [r7, #23]
 8001cee:	1c59      	adds	r1, r3, #1
 8001cf0:	75f9      	strb	r1, [r7, #23]
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	440b      	add	r3, r1
 8001cf8:	3201      	adds	r2, #1
 8001cfa:	b2d2      	uxtb	r2, r2
 8001cfc:	701a      	strb	r2, [r3, #0]
		break;
 8001cfe:	e14f      	b.n	8001fa0 <executeServerCmd+0x4e0>
		index = 0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	75fb      	strb	r3, [r7, #23]
		buffer[index++] = RDSS_START_MARK;
 8001d04:	7dfb      	ldrb	r3, [r7, #23]
 8001d06:	1c5a      	adds	r2, r3, #1
 8001d08:	75fa      	strb	r2, [r7, #23]
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4413      	add	r3, r2
 8001d10:	227e      	movs	r2, #126	; 0x7e
 8001d12:	701a      	strb	r2, [r3, #0]
		buffer[index++] = server->function;
 8001d14:	7dfb      	ldrb	r3, [r7, #23]
 8001d16:	1c5a      	adds	r2, r3, #1
 8001d18:	75fa      	strb	r2, [r7, #23]
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	4413      	add	r3, r2
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	7d52      	ldrb	r2, [r2, #21]
 8001d24:	701a      	strb	r2, [r3, #0]
		buffer[index++] = rdss->id;
 8001d26:	7dfb      	ldrb	r3, [r7, #23]
 8001d28:	1c5a      	adds	r2, r3, #1
 8001d2a:	75fa      	strb	r2, [r7, #23]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	4413      	add	r3, r2
 8001d32:	68ba      	ldr	r2, [r7, #8]
 8001d34:	7c12      	ldrb	r2, [r2, #16]
 8001d36:	701a      	strb	r2, [r3, #0]
		buffer[index++] = QUERY_MODULE_ID;
 8001d38:	7dfb      	ldrb	r3, [r7, #23]
 8001d3a:	1c5a      	adds	r2, r3, #1
 8001d3c:	75fa      	strb	r2, [r7, #23]
 8001d3e:	461a      	mov	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	4413      	add	r3, r2
 8001d44:	2210      	movs	r2, #16
 8001d46:	701a      	strb	r2, [r3, #0]
		buffer[index++] = 0x00;
 8001d48:	7dfb      	ldrb	r3, [r7, #23]
 8001d4a:	1c5a      	adds	r2, r3, #1
 8001d4c:	75fa      	strb	r2, [r7, #23]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	4413      	add	r3, r2
 8001d54:	2200      	movs	r2, #0
 8001d56:	701a      	strb	r2, [r3, #0]
		buffer[index++] = 2;
 8001d58:	7dfb      	ldrb	r3, [r7, #23]
 8001d5a:	1c5a      	adds	r2, r3, #1
 8001d5c:	75fa      	strb	r2, [r7, #23]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	4413      	add	r3, r2
 8001d64:	2202      	movs	r2, #2
 8001d66:	701a      	strb	r2, [r3, #0]
		buffer[index++] = server->function;
 8001d68:	7dfb      	ldrb	r3, [r7, #23]
 8001d6a:	1c5a      	adds	r2, r3, #1
 8001d6c:	75fa      	strb	r2, [r7, #23]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4413      	add	r3, r2
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	7d52      	ldrb	r2, [r2, #21]
 8001d78:	701a      	strb	r2, [r3, #0]
		buffer[index++] = rdss->id;
 8001d7a:	7dfb      	ldrb	r3, [r7, #23]
 8001d7c:	1c5a      	adds	r2, r3, #1
 8001d7e:	75fa      	strb	r2, [r7, #23]
 8001d80:	461a      	mov	r2, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	4413      	add	r3, r2
 8001d86:	68ba      	ldr	r2, [r7, #8]
 8001d88:	7c12      	ldrb	r2, [r2, #16]
 8001d8a:	701a      	strb	r2, [r3, #0]
		break;
 8001d8c:	e108      	b.n	8001fa0 <executeServerCmd+0x4e0>
		server->function = rdss->buff[6];
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	3306      	adds	r3, #6
 8001d94:	781a      	ldrb	r2, [r3, #0]
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	755a      	strb	r2, [r3, #21]
		server->id = rdss->buff[7];
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	3307      	adds	r3, #7
 8001da0:	781a      	ldrb	r2, [r3, #0]
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	751a      	strb	r2, [r3, #20]
		rdss->id = server->id;
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	7d1a      	ldrb	r2, [r3, #20]
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	741a      	strb	r2, [r3, #16]
		index = setRdssStartData(rdss, buffer, server->function);
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	7d5b      	ldrb	r3, [r3, #21]
 8001db2:	461a      	mov	r2, r3
 8001db4:	68f9      	ldr	r1, [r7, #12]
 8001db6:	68b8      	ldr	r0, [r7, #8]
 8001db8:	f000 febb 	bl	8002b32 <setRdssStartData>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	75fb      	strb	r3, [r7, #23]
		buffer[index++] = SERVER;
 8001dc0:	7dfb      	ldrb	r3, [r7, #23]
 8001dc2:	1c5a      	adds	r2, r3, #1
 8001dc4:	75fa      	strb	r2, [r7, #23]
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	4413      	add	r3, r2
 8001dcc:	2200      	movs	r2, #0
 8001dce:	701a      	strb	r2, [r3, #0]
		buffer[index++] = rdss->id;
 8001dd0:	7dfb      	ldrb	r3, [r7, #23]
 8001dd2:	1c5a      	adds	r2, r3, #1
 8001dd4:	75fa      	strb	r2, [r7, #23]
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	4413      	add	r3, r2
 8001ddc:	68ba      	ldr	r2, [r7, #8]
 8001dde:	7c12      	ldrb	r2, [r2, #16]
 8001de0:	701a      	strb	r2, [r3, #0]
		HAL_savePage(M24C64_PAGE0, (uint8_t*) &(vlad->function), 3, 1);
 8001de2:	4b7c      	ldr	r3, [pc, #496]	; (8001fd4 <executeServerCmd+0x514>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f103 012d 	add.w	r1, r3, #45	; 0x2d
 8001dea:	2301      	movs	r3, #1
 8001dec:	2203      	movs	r2, #3
 8001dee:	2000      	movs	r0, #0
 8001df0:	f7ff fa52 	bl	8001298 <HAL_savePage>
		HAL_savePage(M24C64_PAGE0, (uint8_t*) &(vlad->id), 4, 1);
 8001df4:	4b77      	ldr	r3, [pc, #476]	; (8001fd4 <executeServerCmd+0x514>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	2204      	movs	r2, #4
 8001e00:	2000      	movs	r0, #0
 8001e02:	f7ff fa49 	bl	8001298 <HAL_savePage>
		break;
 8001e06:	e0cb      	b.n	8001fa0 <executeServerCmd+0x4e0>
		buffer[index++] = 4;
 8001e08:	7dfb      	ldrb	r3, [r7, #23]
 8001e0a:	1c5a      	adds	r2, r3, #1
 8001e0c:	75fa      	strb	r2, [r7, #23]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	4413      	add	r3, r2
 8001e14:	2204      	movs	r2, #4
 8001e16:	701a      	strb	r2, [r3, #0]
		loRa->dlFreq = freqDecode(rdss->buff + index);
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	685a      	ldr	r2, [r3, #4]
 8001e1c:	7dfb      	ldrb	r3, [r7, #23]
 8001e1e:	4413      	add	r3, r2
 8001e20:	4618      	mov	r0, r3
 8001e22:	f000 fecf 	bl	8002bc4 <freqDecode>
 8001e26:	4603      	mov	r3, r0
 8001e28:	461a      	mov	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	605a      	str	r2, [r3, #4]
		index += sizeof(loRa->dlFreq);
 8001e2e:	7dfb      	ldrb	r3, [r7, #23]
 8001e30:	3304      	adds	r3, #4
 8001e32:	75fb      	strb	r3, [r7, #23]
		res = HAL_savePage(M24C64_PAGE1, (uint8_t*) &(loRa->dlFreq), 0, 4);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	1d19      	adds	r1, r3, #4
 8001e38:	2304      	movs	r3, #4
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2001      	movs	r0, #1
 8001e3e:	f7ff fa2b 	bl	8001298 <HAL_savePage>
 8001e42:	4603      	mov	r3, r0
 8001e44:	75bb      	strb	r3, [r7, #22]
		changeMode(loRa, loRa->mode);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7fe ffb3 	bl	8000dba <changeMode>
		writeLoRaParametersReg(loRa);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7fe ff49 	bl	8000cec <writeLoRaParametersReg>
		break;
 8001e5a:	e0a1      	b.n	8001fa0 <executeServerCmd+0x4e0>
		buffer[index++] = 4;
 8001e5c:	7dfb      	ldrb	r3, [r7, #23]
 8001e5e:	1c5a      	adds	r2, r3, #1
 8001e60:	75fa      	strb	r2, [r7, #23]
 8001e62:	461a      	mov	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	4413      	add	r3, r2
 8001e68:	2204      	movs	r2, #4
 8001e6a:	701a      	strb	r2, [r3, #0]
		loRa->upFreq = freqDecode(rdss->buff + index);
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	685a      	ldr	r2, [r3, #4]
 8001e70:	7dfb      	ldrb	r3, [r7, #23]
 8001e72:	4413      	add	r3, r2
 8001e74:	4618      	mov	r0, r3
 8001e76:	f000 fea5 	bl	8002bc4 <freqDecode>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	609a      	str	r2, [r3, #8]
		index += sizeof(loRa->upFreq);
 8001e82:	7dfb      	ldrb	r3, [r7, #23]
 8001e84:	3304      	adds	r3, #4
 8001e86:	75fb      	strb	r3, [r7, #23]
		res = HAL_savePage(M24C64_PAGE1, (uint8_t*) &(loRa->upFreq), 4, 4);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f103 0108 	add.w	r1, r3, #8
 8001e8e:	2304      	movs	r3, #4
 8001e90:	2204      	movs	r2, #4
 8001e92:	2001      	movs	r0, #1
 8001e94:	f7ff fa00 	bl	8001298 <HAL_savePage>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	75bb      	strb	r3, [r7, #22]
		changeMode(loRa, loRa->mode);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f7fe ff88 	bl	8000dba <changeMode>
		writeLoRaParametersReg(loRa);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7fe ff1e 	bl	8000cec <writeLoRaParametersReg>
		break;
 8001eb0:	e076      	b.n	8001fa0 <executeServerCmd+0x4e0>
		buffer[index++] = 1;
 8001eb2:	7dfb      	ldrb	r3, [r7, #23]
 8001eb4:	1c5a      	adds	r2, r3, #1
 8001eb6:	75fa      	strb	r2, [r7, #23]
 8001eb8:	461a      	mov	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	701a      	strb	r2, [r3, #0]
		loRa->bandwidth = rdss->buff[index++] - 1;
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	7dfb      	ldrb	r3, [r7, #23]
 8001ec8:	1c59      	adds	r1, r3, #1
 8001eca:	75f9      	strb	r1, [r7, #23]
 8001ecc:	4413      	add	r3, r2
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	739a      	strb	r2, [r3, #14]
		res = HAL_savePage(M24C64_PAGE0, &(loRa->bandwidth), 1, 1);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f103 010e 	add.w	r1, r3, #14
 8001ede:	2301      	movs	r3, #1
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	2000      	movs	r0, #0
 8001ee4:	f7ff f9d8 	bl	8001298 <HAL_savePage>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	75bb      	strb	r3, [r7, #22]
		changeMode(loRa, loRa->mode);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f7fe ff60 	bl	8000dba <changeMode>
		writeLoRaParametersReg(loRa);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7fe fef6 	bl	8000cec <writeLoRaParametersReg>
		break;
 8001f00:	e04e      	b.n	8001fa0 <executeServerCmd+0x4e0>
		buffer[index++] = 1;
 8001f02:	7dfb      	ldrb	r3, [r7, #23]
 8001f04:	1c5a      	adds	r2, r3, #1
 8001f06:	75fa      	strb	r2, [r7, #23]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	2201      	movs	r2, #1
 8001f10:	701a      	strb	r2, [r3, #0]
		loRa->spreadFactor = rdss->buff[index++] + 6;
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	7dfb      	ldrb	r3, [r7, #23]
 8001f18:	1c59      	adds	r1, r3, #1
 8001f1a:	75f9      	strb	r1, [r7, #23]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	3306      	adds	r3, #6
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	735a      	strb	r2, [r3, #13]
		res = HAL_savePage(M24C64_PAGE0, &(loRa->spreadFactor), 0, 1);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f103 010d 	add.w	r1, r3, #13
 8001f2e:	2301      	movs	r3, #1
 8001f30:	2200      	movs	r2, #0
 8001f32:	2000      	movs	r0, #0
 8001f34:	f7ff f9b0 	bl	8001298 <HAL_savePage>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	75bb      	strb	r3, [r7, #22]
		changeMode(loRa, loRa->mode);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001f42:	4619      	mov	r1, r3
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7fe ff38 	bl	8000dba <changeMode>
		writeLoRaParametersReg(loRa);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f7fe fece 	bl	8000cec <writeLoRaParametersReg>
		break;
 8001f50:	e026      	b.n	8001fa0 <executeServerCmd+0x4e0>
		buffer[index++] = 1;
 8001f52:	7dfb      	ldrb	r3, [r7, #23]
 8001f54:	1c5a      	adds	r2, r3, #1
 8001f56:	75fa      	strb	r2, [r7, #23]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	2201      	movs	r2, #1
 8001f60:	701a      	strb	r2, [r3, #0]
		loRa->codingRate = rdss->buff[index++];
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	685a      	ldr	r2, [r3, #4]
 8001f66:	7dfb      	ldrb	r3, [r7, #23]
 8001f68:	1c59      	adds	r1, r3, #1
 8001f6a:	75f9      	strb	r1, [r7, #23]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	781a      	ldrb	r2, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	73da      	strb	r2, [r3, #15]
		res = HAL_savePage(M24C64_PAGE0, &(loRa->codingRate), 2, 1);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f103 010f 	add.w	r1, r3, #15
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	2000      	movs	r0, #0
 8001f80:	f7ff f98a 	bl	8001298 <HAL_savePage>
 8001f84:	4603      	mov	r3, r0
 8001f86:	75bb      	strb	r3, [r7, #22]
		changeMode(loRa, loRa->mode);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001f8e:	4619      	mov	r1, r3
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f7fe ff12 	bl	8000dba <changeMode>
		writeLoRaParametersReg(loRa);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7fe fea8 	bl	8000cec <writeLoRaParametersReg>
		break;
 8001f9c:	e000      	b.n	8001fa0 <executeServerCmd+0x4e0>
		break;
 8001f9e:	bf00      	nop
	}

	index += setCrc(buffer, index);
 8001fa0:	7dfb      	ldrb	r3, [r7, #23]
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	68f8      	ldr	r0, [r7, #12]
 8001fa6:	f000 fd9c 	bl	8002ae2 <setCrc>
 8001faa:	4603      	mov	r3, r0
 8001fac:	461a      	mov	r2, r3
 8001fae:	7dfb      	ldrb	r3, [r7, #23]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	75fb      	strb	r3, [r7, #23]
	buffer[index++] = RDSS_END_MARK;
 8001fb4:	7dfb      	ldrb	r3, [r7, #23]
 8001fb6:	1c5a      	adds	r2, r3, #1
 8001fb8:	75fa      	strb	r2, [r7, #23]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	227f      	movs	r2, #127	; 0x7f
 8001fc2:	701a      	strb	r2, [r3, #0]
	rdss->status = UART_SEND;
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	220d      	movs	r2, #13
 8001fc8:	745a      	strb	r2, [r3, #17]
	return index;
 8001fca:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3718      	adds	r7, #24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	200003a8 	.word	0x200003a8

08001fd8 <clearRx>:
		break;
	}
	cleanTx(u1);
}

void clearRx(UART1_t *u1) {
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
	memset(u1->rxData, 0, sizeof(u1->rxData));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f005 fd05 	bl	80079f8 <memset>
	u1->rxSize = 0;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <transmitRdssQuery>:

void transmitRdssQuery(RDSS_t *rdss, SX1278_t *loRa) {
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]

	rdss->idQuery = rdss->idReceived;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	7bda      	ldrb	r2, [r3, #15]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	739a      	strb	r2, [r3, #14]
	loRa->txData = rdss->buff;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685a      	ldr	r2, [r3, #4]
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	loRa->txSize = rdss->buffSize;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	7a1a      	ldrb	r2, [r3, #8]
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

	changeMode(loRa, MASTER_SENDER); //ya deberia  estar en modo sender
 8002026:	2102      	movs	r1, #2
 8002028:	6838      	ldr	r0, [r7, #0]
 800202a:	f7fe fec6 	bl	8000dba <changeMode>
	transmit(loRa); // TODO: se puede mejorar usando enviando la trama a transmitir
 800202e:	6838      	ldr	r0, [r7, #0]
 8002030:	f7ff f819 	bl	8001066 <transmit>
	if (loRa->status == TX_DONE)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800203a:	2b03      	cmp	r3, #3
 800203c:	d104      	bne.n	8002048 <transmitRdssQuery+0x48>
		HAL_GPIO_WritePin(LORA_TX_OK_GPIO_Port, LORA_TX_OK_Pin, GPIO_PIN_SET);
 800203e:	2201      	movs	r2, #1
 8002040:	2108      	movs	r1, #8
 8002042:	480b      	ldr	r0, [pc, #44]	; (8002070 <transmitRdssQuery+0x70>)
 8002044:	f001 fed7 	bl	8003df6 <HAL_GPIO_WritePin>
	uint32_t timeStart = HAL_GetTick();
 8002048:	f001 f91e 	bl	8003288 <HAL_GetTick>
 800204c:	60f8      	str	r0, [r7, #12]
	//changeMode(loRa, MASTER_RECEIVER);
	HAL_GPIO_WritePin(LORA_TX_OK_GPIO_Port, LORA_TX_OK_Pin, GPIO_PIN_RESET);
 800204e:	2200      	movs	r2, #0
 8002050:	2108      	movs	r1, #8
 8002052:	4807      	ldr	r0, [pc, #28]	; (8002070 <transmitRdssQuery+0x70>)
 8002054:	f001 fecf 	bl	8003df6 <HAL_GPIO_WritePin>
	loRa->lastChangeMode = HAL_GetTick() - timeStart;
 8002058:	f001 f916 	bl	8003288 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	1ad2      	subs	r2, r2, r3
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002066:	bf00      	nop
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40010c00 	.word	0x40010c00

08002074 <processServerCmd>:

void processServerCmd(UART1_t *u1, RDSS_t *rdss, SX1278_t *loRa,
		Server_t *server) {
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
 8002080:	603b      	str	r3, [r7, #0]
	if (rdss->cmd == QUERY_MASTER_STATUS) {
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2b13      	cmp	r3, #19
 8002088:	d110      	bne.n	80020ac <processServerCmd+0x38>
		for (uint8_t i = 0; i < 15; i++)
 800208a:	2300      	movs	r3, #0
 800208c:	75fb      	strb	r3, [r7, #23]
 800208e:	e009      	b.n	80020a4 <processServerCmd+0x30>
			writeTxReg(rdss->queryBuffer[i]);
 8002090:	7dfb      	ldrb	r3, [r7, #23]
 8002092:	68ba      	ldr	r2, [r7, #8]
 8002094:	4413      	add	r3, r2
 8002096:	7cdb      	ldrb	r3, [r3, #19]
 8002098:	4618      	mov	r0, r3
 800209a:	f001 f84b 	bl	8003134 <writeTxReg>
		for (uint8_t i = 0; i < 15; i++)
 800209e:	7dfb      	ldrb	r3, [r7, #23]
 80020a0:	3301      	adds	r3, #1
 80020a2:	75fb      	strb	r3, [r7, #23]
 80020a4:	7dfb      	ldrb	r3, [r7, #23]
 80020a6:	2b0e      	cmp	r3, #14
 80020a8:	d9f2      	bls.n	8002090 <processServerCmd+0x1c>
		for (uint8_t i = 0; i < u1->txSize; i++)
			writeTxReg(u1->txData[i]);
		u1->txSize = 0;
		free(u1->txData);
	}
}
 80020aa:	e033      	b.n	8002114 <processServerCmd+0xa0>
		u1->txData = malloc(sizeof(uint8_t) * 25);
 80020ac:	2019      	movs	r0, #25
 80020ae:	f005 fbe7 	bl	8007880 <malloc>
 80020b2:	4603      	mov	r3, r0
 80020b4:	461a      	mov	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
		u1->txSize = executeServerCmd(u1->txData, rdss, loRa, server);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f8d3 012c 	ldr.w	r0, [r3, #300]	; 0x12c
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	68b9      	ldr	r1, [r7, #8]
 80020c8:	f7ff fcfa 	bl	8001ac0 <executeServerCmd>
 80020cc:	4603      	mov	r3, r0
 80020ce:	461a      	mov	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		for (uint8_t i = 0; i < u1->txSize; i++)
 80020d6:	2300      	movs	r3, #0
 80020d8:	75bb      	strb	r3, [r7, #22]
 80020da:	e00b      	b.n	80020f4 <processServerCmd+0x80>
			writeTxReg(u1->txData[i]);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 80020e2:	7dbb      	ldrb	r3, [r7, #22]
 80020e4:	4413      	add	r3, r2
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f001 f823 	bl	8003134 <writeTxReg>
		for (uint8_t i = 0; i < u1->txSize; i++)
 80020ee:	7dbb      	ldrb	r3, [r7, #22]
 80020f0:	3301      	adds	r3, #1
 80020f2:	75bb      	strb	r3, [r7, #22]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80020fa:	7dba      	ldrb	r2, [r7, #22]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d3ed      	bcc.n	80020dc <processServerCmd+0x68>
		u1->txSize = 0;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		free(u1->txData);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800210e:	4618      	mov	r0, r3
 8002110:	f005 fbbe 	bl	8007890 <free>
}
 8002114:	bf00      	nop
 8002116:	3718      	adds	r7, #24
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <processUart1Rx>:

void processUart1Rx(UART1_t *u1, RDSS_t *rdss, Server_t *server, SX1278_t *loRa) {
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
 8002128:	603b      	str	r3, [r7, #0]
	if (u1->isReceivedDataReady == false)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8002130:	f083 0301 	eor.w	r3, r3, #1
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d13e      	bne.n	80021b8 <processUart1Rx+0x9c>
		return;
	u1->isReceivedDataReady = false;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	//HAL_Delay(1);
	if (validate(u1->rxData, u1->rxSize) != DATA_OK) {
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800214a:	4619      	mov	r1, r3
 800214c:	4610      	mov	r0, r2
 800214e:	f000 fc99 	bl	8002a84 <validate>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00b      	beq.n	8002170 <processUart1Rx+0x54>
		memset(u1->rxData, 0, sizeof(u1->rxData));
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800215e:	2100      	movs	r1, #0
 8002160:	4618      	mov	r0, r3
 8002162:	f005 fc49 	bl	80079f8 <memset>
		u1->rxSize = 0;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
		return;
 800216e:	e024      	b.n	80021ba <processUart1Rx+0x9e>
	}
	updateRdss(rdss, u1->rxData, u1->rxSize);
 8002170:	68f9      	ldr	r1, [r7, #12]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8002178:	461a      	mov	r2, r3
 800217a:	68b8      	ldr	r0, [r7, #8]
 800217c:	f000 fd6c 	bl	8002c58 <updateRdss>
	if (rdss->idReceived == rdss->id) {
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	7bda      	ldrb	r2, [r3, #15]
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	7c1b      	ldrb	r3, [r3, #16]
 8002188:	429a      	cmp	r2, r3
 800218a:	d106      	bne.n	800219a <processUart1Rx+0x7e>
		processServerCmd(u1, rdss, loRa, server);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	68b9      	ldr	r1, [r7, #8]
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f7ff ff6e 	bl	8002074 <processServerCmd>
 8002198:	e007      	b.n	80021aa <processUart1Rx+0x8e>
	} else if (rdss->cmd != 0) {
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <processUart1Rx+0x8e>
		transmitRdssQuery(rdss, loRa);
 80021a2:	6839      	ldr	r1, [r7, #0]
 80021a4:	68b8      	ldr	r0, [r7, #8]
 80021a6:	f7ff ff2b 	bl	8002000 <transmitRdssQuery>
	}

	clearRx(u1);
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f7ff ff14 	bl	8001fd8 <clearRx>
	rdssReinit(rdss);
 80021b0:	68b8      	ldr	r0, [r7, #8]
 80021b2:	f000 fba6 	bl	8002902 <rdssReinit>
 80021b6:	e000      	b.n	80021ba <processUart1Rx+0x9e>
		return;
 80021b8:	bf00      	nop
}
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <masterProcessRdss>:
		return 1;
	default:
		return 0;
	}
}
void masterProcessRdss(RDSS_t *rdss) {
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
	uint8_t error[] = { 0xff, 0xff, 0xff, 0xff };
 80021c8:	f04f 33ff 	mov.w	r3, #4294967295
 80021cc:	60bb      	str	r3, [r7, #8]
	switch (rdss->cmd) {
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b34      	cmp	r3, #52	; 0x34
 80021d4:	f300 80d2 	bgt.w	800237c <masterProcessRdss+0x1bc>
 80021d8:	2b00      	cmp	r3, #0
 80021da:	da5f      	bge.n	800229c <masterProcessRdss+0xdc>
 80021dc:	e0fc      	b.n	80023d8 <masterProcessRdss+0x218>
 80021de:	3b90      	subs	r3, #144	; 0x90
 80021e0:	2b2b      	cmp	r3, #43	; 0x2b
 80021e2:	f200 80f9 	bhi.w	80023d8 <masterProcessRdss+0x218>
 80021e6:	a201      	add	r2, pc, #4	; (adr r2, 80021ec <masterProcessRdss+0x2c>)
 80021e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ec:	08002389 	.word	0x08002389
 80021f0:	080023d9 	.word	0x080023d9
 80021f4:	080023d9 	.word	0x080023d9
 80021f8:	080023d9 	.word	0x080023d9
 80021fc:	080023d9 	.word	0x080023d9
 8002200:	080023d9 	.word	0x080023d9
 8002204:	080023d9 	.word	0x080023d9
 8002208:	080023d9 	.word	0x080023d9
 800220c:	080023d9 	.word	0x080023d9
 8002210:	080023d9 	.word	0x080023d9
 8002214:	080023d9 	.word	0x080023d9
 8002218:	080023d9 	.word	0x080023d9
 800221c:	080023d9 	.word	0x080023d9
 8002220:	080023d9 	.word	0x080023d9
 8002224:	080023d9 	.word	0x080023d9
 8002228:	080023d9 	.word	0x080023d9
 800222c:	080023d9 	.word	0x080023d9
 8002230:	080023d9 	.word	0x080023d9
 8002234:	080023d9 	.word	0x080023d9
 8002238:	080023d9 	.word	0x080023d9
 800223c:	080023d9 	.word	0x080023d9
 8002240:	080023d9 	.word	0x080023d9
 8002244:	080023d9 	.word	0x080023d9
 8002248:	080023d9 	.word	0x080023d9
 800224c:	080023d9 	.word	0x080023d9
 8002250:	080023d9 	.word	0x080023d9
 8002254:	080023d9 	.word	0x080023d9
 8002258:	080023d9 	.word	0x080023d9
 800225c:	080023d9 	.word	0x080023d9
 8002260:	080023d9 	.word	0x080023d9
 8002264:	080023d9 	.word	0x080023d9
 8002268:	080023d9 	.word	0x080023d9
 800226c:	08002389 	.word	0x08002389
 8002270:	08002389 	.word	0x08002389
 8002274:	08002389 	.word	0x08002389
 8002278:	08002389 	.word	0x08002389
 800227c:	08002389 	.word	0x08002389
 8002280:	08002389 	.word	0x08002389
 8002284:	080023b1 	.word	0x080023b1
 8002288:	08002389 	.word	0x08002389
 800228c:	08002389 	.word	0x08002389
 8002290:	08002389 	.word	0x08002389
 8002294:	08002389 	.word	0x08002389
 8002298:	08002389 	.word	0x08002389
 800229c:	2b34      	cmp	r3, #52	; 0x34
 800229e:	f200 809b 	bhi.w	80023d8 <masterProcessRdss+0x218>
 80022a2:	a201      	add	r2, pc, #4	; (adr r2, 80022a8 <masterProcessRdss+0xe8>)
 80022a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a8:	08002389 	.word	0x08002389
 80022ac:	080023d9 	.word	0x080023d9
 80022b0:	080023d9 	.word	0x080023d9
 80022b4:	080023d9 	.word	0x080023d9
 80022b8:	080023d9 	.word	0x080023d9
 80022bc:	080023d9 	.word	0x080023d9
 80022c0:	080023d9 	.word	0x080023d9
 80022c4:	080023d9 	.word	0x080023d9
 80022c8:	080023d9 	.word	0x080023d9
 80022cc:	080023d9 	.word	0x080023d9
 80022d0:	080023d9 	.word	0x080023d9
 80022d4:	080023d9 	.word	0x080023d9
 80022d8:	080023d9 	.word	0x080023d9
 80022dc:	080023d9 	.word	0x080023d9
 80022e0:	080023d9 	.word	0x080023d9
 80022e4:	080023d9 	.word	0x080023d9
 80022e8:	08002389 	.word	0x08002389
 80022ec:	08002389 	.word	0x08002389
 80022f0:	08002389 	.word	0x08002389
 80022f4:	08002389 	.word	0x08002389
 80022f8:	08002389 	.word	0x08002389
 80022fc:	080023d9 	.word	0x080023d9
 8002300:	080023d9 	.word	0x080023d9
 8002304:	080023d9 	.word	0x080023d9
 8002308:	080023d9 	.word	0x080023d9
 800230c:	080023d9 	.word	0x080023d9
 8002310:	080023d9 	.word	0x080023d9
 8002314:	080023d9 	.word	0x080023d9
 8002318:	080023d9 	.word	0x080023d9
 800231c:	080023d9 	.word	0x080023d9
 8002320:	080023d9 	.word	0x080023d9
 8002324:	080023d9 	.word	0x080023d9
 8002328:	08002389 	.word	0x08002389
 800232c:	08002389 	.word	0x08002389
 8002330:	08002389 	.word	0x08002389
 8002334:	08002389 	.word	0x08002389
 8002338:	08002389 	.word	0x08002389
 800233c:	08002389 	.word	0x08002389
 8002340:	080023d9 	.word	0x080023d9
 8002344:	080023d9 	.word	0x080023d9
 8002348:	080023d9 	.word	0x080023d9
 800234c:	080023d9 	.word	0x080023d9
 8002350:	080023d9 	.word	0x080023d9
 8002354:	080023d9 	.word	0x080023d9
 8002358:	080023d9 	.word	0x080023d9
 800235c:	080023d9 	.word	0x080023d9
 8002360:	080023d9 	.word	0x080023d9
 8002364:	080023d9 	.word	0x080023d9
 8002368:	080023d9 	.word	0x080023d9
 800236c:	08002389 	.word	0x08002389
 8002370:	08002389 	.word	0x08002389
 8002374:	08002389 	.word	0x08002389
 8002378:	08002389 	.word	0x08002389
 800237c:	2bbb      	cmp	r3, #187	; 0xbb
 800237e:	dc2b      	bgt.n	80023d8 <masterProcessRdss+0x218>
 8002380:	2b90      	cmp	r3, #144	; 0x90
 8002382:	f6bf af2c 	bge.w	80021de <masterProcessRdss+0x1e>
 8002386:	e027      	b.n	80023d8 <masterProcessRdss+0x218>
	case SET_PARAMETER_FREQOUT:
	case SET_PARAMETERS:
	case SET_PARAMETER_FREQBASE:
	case QUERY_PARAMETER_PdBm:
	case QUERY_UART1:
		for (uint8_t i = 0; i < rdss->buffSize; i++)
 8002388:	2300      	movs	r3, #0
 800238a:	73fb      	strb	r3, [r7, #15]
 800238c:	e00a      	b.n	80023a4 <masterProcessRdss+0x1e4>
			writeTxReg(rdss->buff[i]);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685a      	ldr	r2, [r3, #4]
 8002392:	7bfb      	ldrb	r3, [r7, #15]
 8002394:	4413      	add	r3, r2
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	4618      	mov	r0, r3
 800239a:	f000 fecb 	bl	8003134 <writeTxReg>
		for (uint8_t i = 0; i < rdss->buffSize; i++)
 800239e:	7bfb      	ldrb	r3, [r7, #15]
 80023a0:	3301      	adds	r3, #1
 80023a2:	73fb      	strb	r3, [r7, #15]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	7a1b      	ldrb	r3, [r3, #8]
 80023a8:	7bfa      	ldrb	r2, [r7, #15]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d3ef      	bcc.n	800238e <masterProcessRdss+0x1ce>
		break;
 80023ae:	e025      	b.n	80023fc <masterProcessRdss+0x23c>
	case SET_OUT:
		for (uint8_t i = 0; i < rdss->buffSize; i++)
 80023b0:	2300      	movs	r3, #0
 80023b2:	73bb      	strb	r3, [r7, #14]
 80023b4:	e00a      	b.n	80023cc <masterProcessRdss+0x20c>
			writeTxReg(rdss->buff[i]);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	7bbb      	ldrb	r3, [r7, #14]
 80023bc:	4413      	add	r3, r2
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f000 feb7 	bl	8003134 <writeTxReg>
		for (uint8_t i = 0; i < rdss->buffSize; i++)
 80023c6:	7bbb      	ldrb	r3, [r7, #14]
 80023c8:	3301      	adds	r3, #1
 80023ca:	73bb      	strb	r3, [r7, #14]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	7a1b      	ldrb	r3, [r3, #8]
 80023d0:	7bba      	ldrb	r2, [r7, #14]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d3ef      	bcc.n	80023b6 <masterProcessRdss+0x1f6>
		break;
 80023d6:	e011      	b.n	80023fc <masterProcessRdss+0x23c>
	default:
		for (uint8_t i = 0; i < sizeof(error); i++)
 80023d8:	2300      	movs	r3, #0
 80023da:	737b      	strb	r3, [r7, #13]
 80023dc:	e00a      	b.n	80023f4 <masterProcessRdss+0x234>
			writeTxReg(error[i]);
 80023de:	7b7b      	ldrb	r3, [r7, #13]
 80023e0:	3310      	adds	r3, #16
 80023e2:	443b      	add	r3, r7
 80023e4:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f000 fea3 	bl	8003134 <writeTxReg>
		for (uint8_t i = 0; i < sizeof(error); i++)
 80023ee:	7b7b      	ldrb	r3, [r7, #13]
 80023f0:	3301      	adds	r3, #1
 80023f2:	737b      	strb	r3, [r7, #13]
 80023f4:	7b7b      	ldrb	r3, [r7, #13]
 80023f6:	2b03      	cmp	r3, #3
 80023f8:	d9f1      	bls.n	80023de <masterProcessRdss+0x21e>
		break;
 80023fa:	bf00      	nop
	}
}
 80023fc:	bf00      	nop
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <masterProcessLoRaRx>:

void masterProcessLoRaRx(SX1278_t *loRa, RDSS_t *rdss, Vlad_t *vlad) {
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]

	if (HAL_GPIO_ReadPin(LORA_BUSSY_GPIO_Port,
 8002410:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002414:	482b      	ldr	r0, [pc, #172]	; (80024c4 <masterProcessLoRaRx+0xc0>)
 8002416:	f001 fcd7 	bl	8003dc8 <HAL_GPIO_ReadPin>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d04a      	beq.n	80024b6 <masterProcessLoRaRx+0xb2>
	LORA_BUSSY_Pin) == GPIO_PIN_RESET)
		return; // if (crcErrorActivation(loRa) != 1)

	getRxFifoData(loRa);
 8002420:	68f8      	ldr	r0, [r7, #12]
 8002422:	f7fe fd9d 	bl	8000f60 <getRxFifoData>
	clearIrqFlagsReg(loRa); // Retrieve data from the receive FIFO
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f7fe fc4d 	bl	8000cc6 <clearIrqFlagsReg>
	if (loRa->rxData < 0)
		return;

	if (validate(loRa->rxData, loRa->rxSize) != DATA_OK)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f103 022f 	add.w	r2, r3, #47	; 0x2f
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f893 315b 	ldrb.w	r3, [r3, #347]	; 0x15b
 8002438:	4619      	mov	r1, r3
 800243a:	4610      	mov	r0, r2
 800243c:	f000 fb22 	bl	8002a84 <validate>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d139      	bne.n	80024ba <masterProcessLoRaRx+0xb6>
		return;


	updateRdss(rdss, loRa->rxData, loRa->rxSize);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f103 012f 	add.w	r1, r3, #47	; 0x2f
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f893 315b 	ldrb.w	r3, [r3, #347]	; 0x15b
 8002452:	461a      	mov	r2, r3
 8002454:	68b8      	ldr	r0, [r7, #8]
 8002456:	f000 fbff 	bl	8002c58 <updateRdss>

	if (rdss->idReceived != rdss->idQuery) {
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	7bda      	ldrb	r2, [r3, #15]
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	7b9b      	ldrb	r3, [r3, #14]
 8002462:	429a      	cmp	r2, r3
 8002464:	d003      	beq.n	800246e <masterProcessLoRaRx+0x6a>
		rdss->status = WRONG_MODULE_ID;
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	2205      	movs	r2, #5
 800246a:	745a      	strb	r2, [r3, #17]
		return;
 800246c:	e026      	b.n	80024bc <masterProcessLoRaRx+0xb8>
	}
	HAL_GPIO_WritePin(LORA_RX_OK_GPIO_Port, LORA_RX_OK_Pin, GPIO_PIN_SET);
 800246e:	2201      	movs	r2, #1
 8002470:	2110      	movs	r1, #16
 8002472:	4814      	ldr	r0, [pc, #80]	; (80024c4 <masterProcessLoRaRx+0xc0>)
 8002474:	f001 fcbf 	bl	8003df6 <HAL_GPIO_WritePin>
	masterProcessRdss(rdss);
 8002478:	68b8      	ldr	r0, [r7, #8]
 800247a:	f7ff fea1 	bl	80021c0 <masterProcessRdss>
	rdssReinit(rdss);
 800247e:	68b8      	ldr	r0, [r7, #8]
 8002480:	f000 fa3f 	bl	8002902 <rdssReinit>
	loRa->rxSize = 0;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
	setLoRaLowFreqModeReg(loRa, SLEEP);
 800248c:	2100      	movs	r1, #0
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f7fe fbfd 	bl	8000c8e <setLoRaLowFreqModeReg>
	uint8_t addr = 0;
 8002494:	2300      	movs	r3, #0
 8002496:	75fb      	strb	r3, [r7, #23]
	writeRegister(loRa->spi, LR_RegFifoAddrPtr, &addr, 1);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 800249e:	f107 0217 	add.w	r2, r7, #23
 80024a2:	2301      	movs	r3, #1
 80024a4:	210d      	movs	r1, #13
 80024a6:	f7fe faa1 	bl	80009ec <writeRegister>
	HAL_GPIO_WritePin(LORA_RX_OK_GPIO_Port, LORA_RX_OK_Pin, GPIO_PIN_RESET);
 80024aa:	2200      	movs	r2, #0
 80024ac:	2110      	movs	r1, #16
 80024ae:	4805      	ldr	r0, [pc, #20]	; (80024c4 <masterProcessLoRaRx+0xc0>)
 80024b0:	f001 fca1 	bl	8003df6 <HAL_GPIO_WritePin>
 80024b4:	e002      	b.n	80024bc <masterProcessLoRaRx+0xb8>
		return; // if (crcErrorActivation(loRa) != 1)
 80024b6:	bf00      	nop
 80024b8:	e000      	b.n	80024bc <masterProcessLoRaRx+0xb8>
		return;
 80024ba:	bf00      	nop
}
 80024bc:	3718      	adds	r7, #24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40010c00 	.word	0x40010c00

080024c8 <enableKeepAliveLed>:

uint32_t enableKeepAliveLed(uint32_t keepAliveStartTicks) {
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
	if (HAL_GetTick() - keepAliveStartTicks > 1000) {
 80024d0:	f000 feda 	bl	8003288 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024de:	d908      	bls.n	80024f2 <enableKeepAliveLed+0x2a>
		keepAliveStartTicks = HAL_GetTick();
 80024e0:	f000 fed2 	bl	8003288 <HAL_GetTick>
 80024e4:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(KEEP_ALIVE_GPIO_Port, KEEP_ALIVE_Pin, GPIO_PIN_SET);
 80024e6:	2201      	movs	r2, #1
 80024e8:	2120      	movs	r1, #32
 80024ea:	480a      	ldr	r0, [pc, #40]	; (8002514 <enableKeepAliveLed+0x4c>)
 80024ec:	f001 fc83 	bl	8003df6 <HAL_GPIO_WritePin>
 80024f0:	e00b      	b.n	800250a <enableKeepAliveLed+0x42>
	} else if (HAL_GetTick() - keepAliveStartTicks > 50)
 80024f2:	f000 fec9 	bl	8003288 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b32      	cmp	r3, #50	; 0x32
 80024fe:	d904      	bls.n	800250a <enableKeepAliveLed+0x42>
		HAL_GPIO_WritePin(KEEP_ALIVE_GPIO_Port, KEEP_ALIVE_Pin, GPIO_PIN_RESET);
 8002500:	2200      	movs	r2, #0
 8002502:	2120      	movs	r1, #32
 8002504:	4803      	ldr	r0, [pc, #12]	; (8002514 <enableKeepAliveLed+0x4c>)
 8002506:	f001 fc76 	bl	8003df6 <HAL_GPIO_WritePin>

	return keepAliveStartTicks;
 800250a:	687b      	ldr	r3, [r7, #4]
}
 800250c:	4618      	mov	r0, r3
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40010c00 	.word	0x40010c00

08002518 <configureADC>:

void configureADC() {
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
	// Enable ADC clock
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 800251c:	4b10      	ldr	r3, [pc, #64]	; (8002560 <configureADC+0x48>)
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	4a0f      	ldr	r2, [pc, #60]	; (8002560 <configureADC+0x48>)
 8002522:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002526:	6193      	str	r3, [r2, #24]

	// Enable GPIOA clock
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8002528:	4b0d      	ldr	r3, [pc, #52]	; (8002560 <configureADC+0x48>)
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	4a0c      	ldr	r2, [pc, #48]	; (8002560 <configureADC+0x48>)
 800252e:	f043 0304 	orr.w	r3, r3, #4
 8002532:	6193      	str	r3, [r2, #24]

	// Enable SWSTART
	ADC1->CR2 |= ADC_CR2_EXTTRIG | ADC_CR2_EXTSEL; // Set external trigger and trigger source
 8002534:	4b0b      	ldr	r3, [pc, #44]	; (8002564 <configureADC+0x4c>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	4a0a      	ldr	r2, [pc, #40]	; (8002564 <configureADC+0x4c>)
 800253a:	f443 13f0 	orr.w	r3, r3, #1966080	; 0x1e0000
 800253e:	6093      	str	r3, [r2, #8]

	// Enable ADC temperature sensor and Vrefint channels
	ADC1->CR2 |= ADC_CR2_TSVREFE;
 8002540:	4b08      	ldr	r3, [pc, #32]	; (8002564 <configureADC+0x4c>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	4a07      	ldr	r2, [pc, #28]	; (8002564 <configureADC+0x4c>)
 8002546:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800254a:	6093      	str	r3, [r2, #8]
	// Enable ADC1
	ADC1->CR2 |= ADC_CR2_ADON;
 800254c:	4b05      	ldr	r3, [pc, #20]	; (8002564 <configureADC+0x4c>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	4a04      	ldr	r2, [pc, #16]	; (8002564 <configureADC+0x4c>)
 8002552:	f043 0301 	orr.w	r3, r3, #1
 8002556:	6093      	str	r3, [r2, #8]
	// Enable ADC interrupt
//	NVIC_EnableIRQ(ADC1_IRQn);
}
 8002558:	bf00      	nop
 800255a:	46bd      	mov	sp, r7
 800255c:	bc80      	pop	{r7}
 800255e:	4770      	bx	lr
 8002560:	40021000 	.word	0x40021000
 8002564:	40012400 	.word	0x40012400

08002568 <calibrateADC>:

void calibrateADC() {
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
	// Start ADC calibration
	ADC1->CR2 |= ADC_CR2_CAL;
 800256c:	4b08      	ldr	r3, [pc, #32]	; (8002590 <calibrateADC+0x28>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	4a07      	ldr	r2, [pc, #28]	; (8002590 <calibrateADC+0x28>)
 8002572:	f043 0304 	orr.w	r3, r3, #4
 8002576:	6093      	str	r3, [r2, #8]

	// Wait for calibration to complete
	while (ADC1->CR2 & ADC_CR2_CAL) {
 8002578:	bf00      	nop
 800257a:	4b05      	ldr	r3, [pc, #20]	; (8002590 <calibrateADC+0x28>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 0304 	and.w	r3, r3, #4
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1f9      	bne.n	800257a <calibrateADC+0x12>
	}
}
 8002586:	bf00      	nop
 8002588:	bf00      	nop
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr
 8002590:	40012400 	.word	0x40012400

08002594 <configureGPIO>:

void configureGPIO() {
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8002598:	4b0a      	ldr	r3, [pc, #40]	; (80025c4 <configureGPIO+0x30>)
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	4a09      	ldr	r2, [pc, #36]	; (80025c4 <configureGPIO+0x30>)
 800259e:	f043 0304 	orr.w	r3, r3, #4
 80025a2:	6193      	str	r3, [r2, #24]

	// Configure PA0 and PA11 as analog input mode
	GPIOA->CRL &= ~(GPIO_CRL_CNF0 | GPIO_CRL_MODE0);
 80025a4:	4b08      	ldr	r3, [pc, #32]	; (80025c8 <configureGPIO+0x34>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a07      	ldr	r2, [pc, #28]	; (80025c8 <configureGPIO+0x34>)
 80025aa:	f023 030f 	bic.w	r3, r3, #15
 80025ae:	6013      	str	r3, [r2, #0]
	GPIOA->CRH &= ~(GPIO_CRH_CNF11 | GPIO_CRH_MODE11);
 80025b0:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <configureGPIO+0x34>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	4a04      	ldr	r2, [pc, #16]	; (80025c8 <configureGPIO+0x34>)
 80025b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80025ba:	6053      	str	r3, [r2, #4]
}
 80025bc:	bf00      	nop
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc80      	pop	{r7}
 80025c2:	4770      	bx	lr
 80025c4:	40021000 	.word	0x40021000
 80025c8:	40010800 	.word	0x40010800

080025cc <startADCConversion>:

void startADCConversion(uint8_t channel) {
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	4603      	mov	r3, r0
 80025d4:	71fb      	strb	r3, [r7, #7]
	// Clear previous channel selection
	ADC1->SQR3 &= ~ADC_SQR3_SQ1_Msk;
 80025d6:	4b0e      	ldr	r3, [pc, #56]	; (8002610 <startADCConversion+0x44>)
 80025d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025da:	4a0d      	ldr	r2, [pc, #52]	; (8002610 <startADCConversion+0x44>)
 80025dc:	f023 031f 	bic.w	r3, r3, #31
 80025e0:	6353      	str	r3, [r2, #52]	; 0x34

	// Set new channel selection
	ADC1->SQR3 |= (channel << ADC_SQR3_SQ1_Pos);
 80025e2:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <startADCConversion+0x44>)
 80025e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025e6:	79fb      	ldrb	r3, [r7, #7]
 80025e8:	4909      	ldr	r1, [pc, #36]	; (8002610 <startADCConversion+0x44>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	634b      	str	r3, [r1, #52]	; 0x34

	// Enable ADC1
	ADC1->CR2 |= ADC_CR2_ADON;
 80025ee:	4b08      	ldr	r3, [pc, #32]	; (8002610 <startADCConversion+0x44>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	4a07      	ldr	r2, [pc, #28]	; (8002610 <startADCConversion+0x44>)
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	6093      	str	r3, [r2, #8]

	// Start ADC conversion
	ADC1->CR2 |= ADC_CR2_SWSTART;
 80025fa:	4b05      	ldr	r3, [pc, #20]	; (8002610 <startADCConversion+0x44>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	4a04      	ldr	r2, [pc, #16]	; (8002610 <startADCConversion+0x44>)
 8002600:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002604:	6093      	str	r3, [r2, #8]
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr
 8002610:	40012400 	.word	0x40012400

08002614 <readADCChannel>:

uint16_t readADCChannel(uint8_t channel) {
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	71fb      	strb	r3, [r7, #7]
	// Start ADC conversion for the specified channel
	startADCConversion(channel);
 800261e:	79fb      	ldrb	r3, [r7, #7]
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff ffd3 	bl	80025cc <startADCConversion>

	// Wait for conversion to complete
	while ((ADC1->SR & ADC_SR_EOC) == 0) {
 8002626:	bf00      	nop
 8002628:	4b06      	ldr	r3, [pc, #24]	; (8002644 <readADCChannel+0x30>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d0f9      	beq.n	8002628 <readADCChannel+0x14>
	}

	// Read the ADC value
	uint16_t adcValue = ADC1->DR;
 8002634:	4b03      	ldr	r3, [pc, #12]	; (8002644 <readADCChannel+0x30>)
 8002636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002638:	81fb      	strh	r3, [r7, #14]

	return adcValue;
 800263a:	89fb      	ldrh	r3, [r7, #14]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40012400 	.word	0x40012400

08002648 <updateMasterStatus>:

void updateMasterStatus(RDSS_t *rdss, volatile uint16_t *adcValues,
		uint32_t timeout) {
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
	if (HAL_GetTick() - rdss->lastUpdateTicks > timeout) {
 8002654:	f000 fe18 	bl	8003288 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	429a      	cmp	r2, r3
 8002664:	f080 8093 	bcs.w	800278e <updateMasterStatus+0x146>
		uint8_t index = 0;
 8002668:	2300      	movs	r3, #0
 800266a:	75fb      	strb	r3, [r7, #23]
		const uint8_t querySize = 5;
 800266c:	2305      	movs	r3, #5
 800266e:	75bb      	strb	r3, [r7, #22]
		memset(rdss->queryBuffer, 0, 14);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	3313      	adds	r3, #19
 8002674:	220e      	movs	r2, #14
 8002676:	2100      	movs	r1, #0
 8002678:	4618      	mov	r0, r3
 800267a:	f005 f9bd 	bl	80079f8 <memset>
		rdss->queryBuffer[index++] = RDSS_START_MARK;
 800267e:	7dfb      	ldrb	r3, [r7, #23]
 8002680:	1c5a      	adds	r2, r3, #1
 8002682:	75fa      	strb	r2, [r7, #23]
 8002684:	461a      	mov	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	4413      	add	r3, r2
 800268a:	227e      	movs	r2, #126	; 0x7e
 800268c:	74da      	strb	r2, [r3, #19]
		rdss->queryBuffer[index++] = SERVER;
 800268e:	7dfb      	ldrb	r3, [r7, #23]
 8002690:	1c5a      	adds	r2, r3, #1
 8002692:	75fa      	strb	r2, [r7, #23]
 8002694:	461a      	mov	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	4413      	add	r3, r2
 800269a:	2200      	movs	r2, #0
 800269c:	74da      	strb	r2, [r3, #19]
		rdss->queryBuffer[index++] = rdss->id;
 800269e:	7dfb      	ldrb	r3, [r7, #23]
 80026a0:	1c5a      	adds	r2, r3, #1
 80026a2:	75fa      	strb	r2, [r7, #23]
 80026a4:	4619      	mov	r1, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	7c1a      	ldrb	r2, [r3, #16]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	440b      	add	r3, r1
 80026ae:	74da      	strb	r2, [r3, #19]
		rdss->queryBuffer[index++] = QUERY_MASTER_STATUS;
 80026b0:	7dfb      	ldrb	r3, [r7, #23]
 80026b2:	1c5a      	adds	r2, r3, #1
 80026b4:	75fa      	strb	r2, [r7, #23]
 80026b6:	461a      	mov	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	4413      	add	r3, r2
 80026bc:	2213      	movs	r2, #19
 80026be:	74da      	strb	r2, [r3, #19]
		rdss->queryBuffer[index++] = 0x00;
 80026c0:	7dfb      	ldrb	r3, [r7, #23]
 80026c2:	1c5a      	adds	r2, r3, #1
 80026c4:	75fa      	strb	r2, [r7, #23]
 80026c6:	461a      	mov	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	4413      	add	r3, r2
 80026cc:	2200      	movs	r2, #0
 80026ce:	74da      	strb	r2, [r3, #19]
		rdss->queryBuffer[index++] = querySize;
 80026d0:	7dfb      	ldrb	r3, [r7, #23]
 80026d2:	1c5a      	adds	r2, r3, #1
 80026d4:	75fa      	strb	r2, [r7, #23]
 80026d6:	461a      	mov	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4413      	add	r3, r2
 80026dc:	7dba      	ldrb	r2, [r7, #22]
 80026de:	74da      	strb	r2, [r3, #19]
		rdss->queryBuffer[index++] = adcValues[0];
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	881b      	ldrh	r3, [r3, #0]
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	7dfb      	ldrb	r3, [r7, #23]
 80026e8:	1c59      	adds	r1, r3, #1
 80026ea:	75f9      	strb	r1, [r7, #23]
 80026ec:	4619      	mov	r1, r3
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	440b      	add	r3, r1
 80026f4:	74da      	strb	r2, [r3, #19]
		rdss->queryBuffer[index++] = adcValues[0] >> 8;
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	881b      	ldrh	r3, [r3, #0]
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	0a1b      	lsrs	r3, r3, #8
 80026fe:	b29a      	uxth	r2, r3
 8002700:	7dfb      	ldrb	r3, [r7, #23]
 8002702:	1c59      	adds	r1, r3, #1
 8002704:	75f9      	strb	r1, [r7, #23]
 8002706:	4619      	mov	r1, r3
 8002708:	b2d2      	uxtb	r2, r2
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	440b      	add	r3, r1
 800270e:	74da      	strb	r2, [r3, #19]
		rdss->queryBuffer[index++] = adcValues[1];
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	3302      	adds	r3, #2
 8002714:	881b      	ldrh	r3, [r3, #0]
 8002716:	b29a      	uxth	r2, r3
 8002718:	7dfb      	ldrb	r3, [r7, #23]
 800271a:	1c59      	adds	r1, r3, #1
 800271c:	75f9      	strb	r1, [r7, #23]
 800271e:	4619      	mov	r1, r3
 8002720:	b2d2      	uxtb	r2, r2
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	440b      	add	r3, r1
 8002726:	74da      	strb	r2, [r3, #19]
		rdss->queryBuffer[index++] = adcValues[1] >> 8;
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	3302      	adds	r3, #2
 800272c:	881b      	ldrh	r3, [r3, #0]
 800272e:	b29b      	uxth	r3, r3
 8002730:	0a1b      	lsrs	r3, r3, #8
 8002732:	b29a      	uxth	r2, r3
 8002734:	7dfb      	ldrb	r3, [r7, #23]
 8002736:	1c59      	adds	r1, r3, #1
 8002738:	75f9      	strb	r1, [r7, #23]
 800273a:	4619      	mov	r1, r3
 800273c:	b2d2      	uxtb	r2, r2
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	440b      	add	r3, r1
 8002742:	74da      	strb	r2, [r3, #19]
		rdss->queryBuffer[index++] = adcValues[2];
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	3304      	adds	r3, #4
 8002748:	881b      	ldrh	r3, [r3, #0]
 800274a:	b29a      	uxth	r2, r3
 800274c:	7dfb      	ldrb	r3, [r7, #23]
 800274e:	1c59      	adds	r1, r3, #1
 8002750:	75f9      	strb	r1, [r7, #23]
 8002752:	4619      	mov	r1, r3
 8002754:	b2d2      	uxtb	r2, r2
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	440b      	add	r3, r1
 800275a:	74da      	strb	r2, [r3, #19]
		index += setCrc(rdss->queryBuffer, index);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	3313      	adds	r3, #19
 8002760:	7dfa      	ldrb	r2, [r7, #23]
 8002762:	4611      	mov	r1, r2
 8002764:	4618      	mov	r0, r3
 8002766:	f000 f9bc 	bl	8002ae2 <setCrc>
 800276a:	4603      	mov	r3, r0
 800276c:	461a      	mov	r2, r3
 800276e:	7dfb      	ldrb	r3, [r7, #23]
 8002770:	4413      	add	r3, r2
 8002772:	75fb      	strb	r3, [r7, #23]
		rdss->queryBuffer[index++] = RDSS_END_MARK;
 8002774:	7dfb      	ldrb	r3, [r7, #23]
 8002776:	1c5a      	adds	r2, r3, #1
 8002778:	75fa      	strb	r2, [r7, #23]
 800277a:	461a      	mov	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	4413      	add	r3, r2
 8002780:	227f      	movs	r2, #127	; 0x7f
 8002782:	74da      	strb	r2, [r3, #19]
		rdss->lastUpdateTicks = HAL_GetTick();
 8002784:	f000 fd80 	bl	8003288 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 800278e:	bf00      	nop
 8002790:	3718      	adds	r7, #24
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002796:	b480      	push	{r7}
 8002798:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800279a:	b672      	cpsid	i
}
 800279c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800279e:	e7fe      	b.n	800279e <Error_Handler+0x8>

080027a0 <vladInit>:
	uhf->PdBm = 0;
	uhf->function = funcion;
	uhf->id = id;
}

Vlad_t* vladInit(Function_t function) {
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	71fb      	strb	r3, [r7, #7]
	Vlad_t *vlad;
	vlad = malloc(sizeof(Vlad_t));
 80027aa:	2038      	movs	r0, #56	; 0x38
 80027ac:	f005 f868 	bl	8007880 <malloc>
 80027b0:	4603      	mov	r3, r0
 80027b2:	60fb      	str	r3, [r7, #12]
	vlad->agc152m = 0;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2200      	movs	r2, #0
 80027b8:	801a      	strh	r2, [r3, #0]
	vlad->ref152m = 0;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	805a      	strh	r2, [r3, #2]
	vlad->level152m = 0;  // downlink 150 mhz
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	809a      	strh	r2, [r3, #4]
	vlad->agc172m = 0;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	80da      	strh	r2, [r3, #6]
	vlad->level172m = 0; //uplink 170 mhz
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	811a      	strh	r2, [r3, #8]
	vlad->tone_level = 0;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	815a      	strh	r2, [r3, #10]
	vlad->v_5v = 0;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	819a      	strh	r2, [r3, #12]
	vlad->vin = 0;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	81da      	strh	r2, [r3, #14]
	vlad->current = 0;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	821a      	strh	r2, [r3, #16]
	vlad->v_5v_real = 0;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f04f 0200 	mov.w	r2, #0
 80027f0:	619a      	str	r2, [r3, #24]
	vlad->inputVoltageReal = 0;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f04f 0200 	mov.w	r2, #0
 80027f8:	61da      	str	r2, [r3, #28]
	vlad->currentReal = 0;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2200      	movs	r2, #0
 80027fe:	841a      	strh	r2, [r3, #32]
	vlad->ucTemperature = 0;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	vlad->baseCurrentReal = 0;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	849a      	strh	r2, [r3, #36]	; 0x24
	vlad->attenuation = 0;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	vlad->v_5v_real = 0;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	619a      	str	r2, [r3, #24]
	vlad->inputVoltageReal = 0;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f04f 0200 	mov.w	r2, #0
 8002824:	61da      	str	r2, [r3, #28]
	vlad->currentReal = 0;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	841a      	strh	r2, [r3, #32]
	vlad->agc152m_real = 0;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	749a      	strb	r2, [r3, #18]
	vlad->agc172m_real = 0;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	74da      	strb	r2, [r3, #19]
	vlad->level152m_real = 0;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	751a      	strb	r2, [r3, #20]
	vlad->level172m_real = 0;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	755a      	strb	r2, [r3, #21]
	vlad->isRemoteAttenuation = false;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	vlad->is_attenuation_updated = false;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	vlad->state = 0;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	vlad->calc_en = false;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	vlad->function = function;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	79fa      	ldrb	r2, [r7, #7]
 8002868:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	vlad->id = 0;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	vlad->lastUpdateTicks = HAL_GetTick();
 8002874:	f000 fd08 	bl	8003288 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	631a      	str	r2, [r3, #48]	; 0x30

//	HAL_readPage(CAT24C02_PAGE0_START_ADDR, &(vlad->function), 3, 1);
//	HAL_readPage(CAT24C02_PAGE0_START_ADDR, &(vlad->id), 4, 1);
	return vlad;
 800287e:	68fb      	ldr	r3, [r7, #12]
}
 8002880:	4618      	mov	r0, r3
 8002882:	3710      	adds	r7, #16
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <serverInit>:

Server_t* serverInit(Function_t function) {
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	4603      	mov	r3, r0
 8002890:	71fb      	strb	r3, [r7, #7]
	Server_t *server;
	server = malloc(sizeof(Server_t));
 8002892:	201c      	movs	r0, #28
 8002894:	f004 fff4 	bl	8007880 <malloc>
 8002898:	4603      	mov	r3, r0
 800289a:	60fb      	str	r3, [r7, #12]

	if (server != NULL) {
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d012      	beq.n	80028c8 <serverInit+0x40>
        server->inputVoltage = 0;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	801a      	strh	r2, [r3, #0]
        server->counsumptionCurrentReal = 0;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f04f 0200 	mov.w	r2, #0
 80028ae:	609a      	str	r2, [r3, #8]
        server->lm75Temperature = 0;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	821a      	strh	r2, [r3, #16]
        server->id = 0;  // assuming id can be zero initialized
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	751a      	strb	r2, [r3, #20]
        server->function = function;  // Use the function parameter passed in
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	79fa      	ldrb	r2, [r7, #7]
 80028c0:	755a      	strb	r2, [r3, #21]
        server->lastUpdateTicks = 0;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	619a      	str	r2, [r3, #24]
	}
	return server;
 80028c8:	68fb      	ldr	r3, [r7, #12]
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <rdssInit>:
 *  Created on: Sep 28, 2022
 *      Author: sigmadev
 */
#include <rs485.h>

RDSS_t* rdssInit(uint8_t id) {
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b084      	sub	sp, #16
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	4603      	mov	r3, r0
 80028da:	71fb      	strb	r3, [r7, #7]
	RDSS_t *r;
	r = malloc(sizeof(RDSS_t));
 80028dc:	2038      	movs	r0, #56	; 0x38
 80028de:	f004 ffcf 	bl	8007880 <malloc>
 80028e2:	4603      	mov	r3, r0
 80028e4:	60fb      	str	r3, [r7, #12]
	r->status = WAITING;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2208      	movs	r2, #8
 80028ea:	745a      	strb	r2, [r3, #17]
	r->cmd = NONE;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	701a      	strb	r2, [r3, #0]
	r->id = id;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	79fa      	ldrb	r2, [r7, #7]
 80028f6:	741a      	strb	r2, [r3, #16]

	/* PB9 DE485 as output  */
//	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE9_0);
//	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE9_1);
	return r;
 80028f8:	68fb      	ldr	r3, [r7, #12]
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <rdssReinit>:

void rdssReinit(RDSS_t *rdss) {
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
    rdss->cmd = NONE;           // Reset the command field
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	701a      	strb	r2, [r3, #0]
    rdss->crcReceived = 0;      // Reset the received CRC value
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	819a      	strh	r2, [r3, #12]
    rdss->crcCalculated = 0;    // Reset the calculated CRC value
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	815a      	strh	r2, [r3, #10]
//    rdss->idQuery = 0;          // Reset the query ID
    rdss->status = WAITING;     // Set the status to waiting
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2208      	movs	r2, #8
 8002920:	745a      	strb	r2, [r3, #17]
    rdss->idReceived = 0;       // Reset the received ID
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	73da      	strb	r2, [r3, #15]
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	bc80      	pop	{r7}
 8002930:	4770      	bx	lr

08002932 <checkModuleValidity>:
	if (crc_cal == crc_save)
		return DATA_OK;
	return CRC_ERROR;
}

RDSS_status_t checkModuleValidity(uint8_t *frame, uint8_t lenght) {
 8002932:	b480      	push	{r7}
 8002934:	b085      	sub	sp, #20
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
 800293a:	460b      	mov	r3, r1
 800293c:	70fb      	strb	r3, [r7, #3]
	if (frame[1] >= SERVER || frame[1] <= SNIFFER) {
		for (int i = 3; i < lenght; i++)
 800293e:	2303      	movs	r3, #3
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	e00a      	b.n	800295a <checkModuleValidity+0x28>
			if (frame[i] == RDSS_END_MARK)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	4413      	add	r3, r2
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b7f      	cmp	r3, #127	; 0x7f
 800294e:	d101      	bne.n	8002954 <checkModuleValidity+0x22>
				return VALID_MODULE;
 8002950:	2309      	movs	r3, #9
 8002952:	e007      	b.n	8002964 <checkModuleValidity+0x32>
		for (int i = 3; i < lenght; i++)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	3301      	adds	r3, #1
 8002958:	60fb      	str	r3, [r7, #12]
 800295a:	78fb      	ldrb	r3, [r7, #3]
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	429a      	cmp	r2, r3
 8002960:	dbf0      	blt.n	8002944 <checkModuleValidity+0x12>
	} else
		return WRONG_MODULE_FUNCTION;
	return WRONG_MODULE_FUNCTION;
 8002962:	2304      	movs	r3, #4
}
 8002964:	4618      	mov	r0, r3
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr

0800296e <checkFrameValidity>:

RDSS_status_t checkFrameValidity(uint8_t *frame, uint8_t lenght) {
 800296e:	b480      	push	{r7}
 8002970:	b083      	sub	sp, #12
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
 8002976:	460b      	mov	r3, r1
 8002978:	70fb      	strb	r3, [r7, #3]

	if (lenght > (MINIMUN_FRAME_LEN)) {
 800297a:	78fb      	ldrb	r3, [r7, #3]
 800297c:	2b06      	cmp	r3, #6
 800297e:	d910      	bls.n	80029a2 <checkFrameValidity+0x34>
		if (frame[0] == RDSS_START_MARK) {
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	2b7e      	cmp	r3, #126	; 0x7e
 8002986:	d10a      	bne.n	800299e <checkFrameValidity+0x30>
			if (frame[lenght - 1] == RDSS_END_MARK)
 8002988:	78fb      	ldrb	r3, [r7, #3]
 800298a:	3b01      	subs	r3, #1
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	4413      	add	r3, r2
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	2b7f      	cmp	r3, #127	; 0x7f
 8002994:	d101      	bne.n	800299a <checkFrameValidity+0x2c>
				return VALID_FRAME;
 8002996:	2302      	movs	r3, #2
 8002998:	e004      	b.n	80029a4 <checkFrameValidity+0x36>
			else
				return START_READING;
 800299a:	2301      	movs	r3, #1
 800299c:	e002      	b.n	80029a4 <checkFrameValidity+0x36>
		} else
			return NOT_VALID_FRAME;
 800299e:	2303      	movs	r3, #3
 80029a0:	e000      	b.n	80029a4 <checkFrameValidity+0x36>
	} else

		return WAITING;
 80029a2:	2308      	movs	r3, #8
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr

080029ae <checkCRCValidity>:

RDSS_status_t checkCRCValidity(uint8_t *frame, uint8_t len) {
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b084      	sub	sp, #16
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
 80029b6:	460b      	mov	r3, r1
 80029b8:	70fb      	strb	r3, [r7, #3]
    uint16_t calculatedCrc;
    uint16_t savedCrc;
    savedCrc = ((uint16_t) frame[len - CRC_HIGH_BYTE_OFFSET] << 8);
 80029ba:	78fb      	ldrb	r3, [r7, #3]
 80029bc:	3b02      	subs	r3, #2
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	4413      	add	r3, r2
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	021b      	lsls	r3, r3, #8
 80029c8:	81fb      	strh	r3, [r7, #14]
    savedCrc |= (uint16_t) frame[len - CRC_LOW_BYTE_OFFSET];
 80029ca:	78fb      	ldrb	r3, [r7, #3]
 80029cc:	3b03      	subs	r3, #3
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	4413      	add	r3, r2
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	89fb      	ldrh	r3, [r7, #14]
 80029d8:	4313      	orrs	r3, r2
 80029da:	81fb      	strh	r3, [r7, #14]
    calculatedCrc = crc_get(&frame[1], len - FRAME_HEADER_SIZE);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	1c5a      	adds	r2, r3, #1
 80029e0:	78fb      	ldrb	r3, [r7, #3]
 80029e2:	3b04      	subs	r3, #4
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	4619      	mov	r1, r3
 80029e8:	4610      	mov	r0, r2
 80029ea:	f000 f80d 	bl	8002a08 <crc_get>
 80029ee:	4603      	mov	r3, r0
 80029f0:	81bb      	strh	r3, [r7, #12]
    return ((calculatedCrc == savedCrc) ? DATA_OK : CRC_ERROR);
 80029f2:	89ba      	ldrh	r2, [r7, #12]
 80029f4:	89fb      	ldrh	r3, [r7, #14]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d101      	bne.n	80029fe <checkCRCValidity+0x50>
 80029fa:	2300      	movs	r3, #0
 80029fc:	e000      	b.n	8002a00 <checkCRCValidity+0x52>
 80029fe:	2306      	movs	r3, #6
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <crc_get>:
uint16_t crc_get(uint8_t *buffer, uint8_t buff_len) {
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	460b      	mov	r3, r1
 8002a12:	70fb      	strb	r3, [r7, #3]
	uint8_t byte_idx;
	uint8_t bit_idx;
	uint16_t generator = 0x1021; // 16-bit divisor
 8002a14:	f241 0321 	movw	r3, #4129	; 0x1021
 8002a18:	817b      	strh	r3, [r7, #10]
	uint16_t crc = 0;            // 16-bit CRC value
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	81bb      	strh	r3, [r7, #12]

	for (byte_idx = 0; byte_idx < buff_len; byte_idx++) {
 8002a1e:	2300      	movs	r3, #0
 8002a20:	73fb      	strb	r3, [r7, #15]
 8002a22:	e025      	b.n	8002a70 <crc_get+0x68>
		crc ^= ((uint16_t) (buffer[byte_idx] << 8)); // Move byte into MSB of 16-bit CRC
 8002a24:	7bfb      	ldrb	r3, [r7, #15]
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	4413      	add	r3, r2
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	021b      	lsls	r3, r3, #8
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	89bb      	ldrh	r3, [r7, #12]
 8002a34:	4053      	eors	r3, r2
 8002a36:	81bb      	strh	r3, [r7, #12]

		for (bit_idx = 0; bit_idx < 8; bit_idx++) {
 8002a38:	2300      	movs	r3, #0
 8002a3a:	73bb      	strb	r3, [r7, #14]
 8002a3c:	e012      	b.n	8002a64 <crc_get+0x5c>
			if ((crc & 0x8000) != 0) { // Test for MSB = bit 15
 8002a3e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	da08      	bge.n	8002a58 <crc_get+0x50>
				crc = ((uint16_t) ((crc << 1) ^ generator));
 8002a46:	89bb      	ldrh	r3, [r7, #12]
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	b21a      	sxth	r2, r3
 8002a4c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002a50:	4053      	eors	r3, r2
 8002a52:	b21b      	sxth	r3, r3
 8002a54:	81bb      	strh	r3, [r7, #12]
 8002a56:	e002      	b.n	8002a5e <crc_get+0x56>
			} else {
				crc <<= 1;
 8002a58:	89bb      	ldrh	r3, [r7, #12]
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	81bb      	strh	r3, [r7, #12]
		for (bit_idx = 0; bit_idx < 8; bit_idx++) {
 8002a5e:	7bbb      	ldrb	r3, [r7, #14]
 8002a60:	3301      	adds	r3, #1
 8002a62:	73bb      	strb	r3, [r7, #14]
 8002a64:	7bbb      	ldrb	r3, [r7, #14]
 8002a66:	2b07      	cmp	r3, #7
 8002a68:	d9e9      	bls.n	8002a3e <crc_get+0x36>
	for (byte_idx = 0; byte_idx < buff_len; byte_idx++) {
 8002a6a:	7bfb      	ldrb	r3, [r7, #15]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	73fb      	strb	r3, [r7, #15]
 8002a70:	7bfa      	ldrb	r2, [r7, #15]
 8002a72:	78fb      	ldrb	r3, [r7, #3]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d3d5      	bcc.n	8002a24 <crc_get+0x1c>
			}
		}
	}

	return crc;
 8002a78:	89bb      	ldrh	r3, [r7, #12]
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3714      	adds	r7, #20
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bc80      	pop	{r7}
 8002a82:	4770      	bx	lr

08002a84 <validate>:

RDSS_status_t validate(uint8_t *buffer, uint8_t length) {
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	70fb      	strb	r3, [r7, #3]
	RDSS_status_t frameStatus = checkFrameValidity(buffer, length);
 8002a90:	78fb      	ldrb	r3, [r7, #3]
 8002a92:	4619      	mov	r1, r3
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f7ff ff6a 	bl	800296e <checkFrameValidity>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	73fb      	strb	r3, [r7, #15]
	if (frameStatus != VALID_FRAME)
 8002a9e:	7bfb      	ldrb	r3, [r7, #15]
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d001      	beq.n	8002aa8 <validate+0x24>
		return (frameStatus);
 8002aa4:	7bfb      	ldrb	r3, [r7, #15]
 8002aa6:	e018      	b.n	8002ada <validate+0x56>
	RDSS_status_t moduleStatus = checkModuleValidity(buffer, length);
 8002aa8:	78fb      	ldrb	r3, [r7, #3]
 8002aaa:	4619      	mov	r1, r3
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f7ff ff40 	bl	8002932 <checkModuleValidity>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	73bb      	strb	r3, [r7, #14]
	if (moduleStatus != VALID_MODULE)
 8002ab6:	7bbb      	ldrb	r3, [r7, #14]
 8002ab8:	2b09      	cmp	r3, #9
 8002aba:	d001      	beq.n	8002ac0 <validate+0x3c>
		return (moduleStatus);
 8002abc:	7bbb      	ldrb	r3, [r7, #14]
 8002abe:	e00c      	b.n	8002ada <validate+0x56>
	RDSS_status_t crcStatus = checkCRCValidity(buffer, length);
 8002ac0:	78fb      	ldrb	r3, [r7, #3]
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f7ff ff72 	bl	80029ae <checkCRCValidity>
 8002aca:	4603      	mov	r3, r0
 8002acc:	737b      	strb	r3, [r7, #13]
	if (crcStatus != DATA_OK)
 8002ace:	7b7b      	ldrb	r3, [r7, #13]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <validate+0x54>
		return (crcStatus);
 8002ad4:	7b7b      	ldrb	r3, [r7, #13]
 8002ad6:	e000      	b.n	8002ada <validate+0x56>
	return (DATA_OK);
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <setCrc>:
	buff[15] = downlinkInputPower;
	buff[16] = downlinkAgc;
	buff[17] = uplinkOuputPower;
}

uint8_t setCrc(uint8_t *buff, uint8_t size) {
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b084      	sub	sp, #16
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
 8002aea:	460b      	mov	r3, r1
 8002aec:	70fb      	strb	r3, [r7, #3]
	uint8_t crc_frame[2];
	uint16_t crc;
	crc = crc_get(buff + 1, size - 1);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	1c5a      	adds	r2, r3, #1
 8002af2:	78fb      	ldrb	r3, [r7, #3]
 8002af4:	3b01      	subs	r3, #1
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	4619      	mov	r1, r3
 8002afa:	4610      	mov	r0, r2
 8002afc:	f7ff ff84 	bl	8002a08 <crc_get>
 8002b00:	4603      	mov	r3, r0
 8002b02:	817b      	strh	r3, [r7, #10]
 8002b04:	897b      	ldrh	r3, [r7, #10]
	memcpy(crc_frame, &crc, 2);
 8002b06:	81bb      	strh	r3, [r7, #12]
	buff[size++] = crc_frame[0];
 8002b08:	78fb      	ldrb	r3, [r7, #3]
 8002b0a:	1c5a      	adds	r2, r3, #1
 8002b0c:	70fa      	strb	r2, [r7, #3]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4413      	add	r3, r2
 8002b14:	7b3a      	ldrb	r2, [r7, #12]
 8002b16:	701a      	strb	r2, [r3, #0]
	buff[size++] = crc_frame[1];
 8002b18:	78fb      	ldrb	r3, [r7, #3]
 8002b1a:	1c5a      	adds	r2, r3, #1
 8002b1c:	70fa      	strb	r2, [r7, #3]
 8002b1e:	461a      	mov	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4413      	add	r3, r2
 8002b24:	7b7a      	ldrb	r2, [r7, #13]
 8002b26:	701a      	strb	r2, [r3, #0]
	return 2;
 8002b28:	2302      	movs	r3, #2
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <setRdssStartData>:

uint8_t setRdssStartData(RDSS_t *rdss, uint8_t *buffer, Function_t function) {
 8002b32:	b480      	push	{r7}
 8002b34:	b087      	sub	sp, #28
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	60f8      	str	r0, [r7, #12]
 8002b3a:	60b9      	str	r1, [r7, #8]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 8002b40:	2300      	movs	r3, #0
 8002b42:	75fb      	strb	r3, [r7, #23]
	if (rdss->cmd == 0)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <setRdssStartData+0x1e>
		return i;
 8002b4c:	7dfb      	ldrb	r3, [r7, #23]
 8002b4e:	e033      	b.n	8002bb8 <setRdssStartData+0x86>
	if (rdss->id == 0 && function != SERVER)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	7c1b      	ldrb	r3, [r3, #16]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d104      	bne.n	8002b62 <setRdssStartData+0x30>
 8002b58:	79fb      	ldrb	r3, [r7, #7]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <setRdssStartData+0x30>
		return i;
 8002b5e:	7dfb      	ldrb	r3, [r7, #23]
 8002b60:	e02a      	b.n	8002bb8 <setRdssStartData+0x86>
	buffer[i++] = RDSS_START_MARK;
 8002b62:	7dfb      	ldrb	r3, [r7, #23]
 8002b64:	1c5a      	adds	r2, r3, #1
 8002b66:	75fa      	strb	r2, [r7, #23]
 8002b68:	461a      	mov	r2, r3
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	227e      	movs	r2, #126	; 0x7e
 8002b70:	701a      	strb	r2, [r3, #0]
	buffer[i++] = function;
 8002b72:	7dfb      	ldrb	r3, [r7, #23]
 8002b74:	1c5a      	adds	r2, r3, #1
 8002b76:	75fa      	strb	r2, [r7, #23]
 8002b78:	461a      	mov	r2, r3
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	79fa      	ldrb	r2, [r7, #7]
 8002b80:	701a      	strb	r2, [r3, #0]
	buffer[i++] = rdss->id;
 8002b82:	7dfb      	ldrb	r3, [r7, #23]
 8002b84:	1c5a      	adds	r2, r3, #1
 8002b86:	75fa      	strb	r2, [r7, #23]
 8002b88:	461a      	mov	r2, r3
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	7c12      	ldrb	r2, [r2, #16]
 8002b92:	701a      	strb	r2, [r3, #0]
	buffer[i++] = rdss->cmd;
 8002b94:	7dfb      	ldrb	r3, [r7, #23]
 8002b96:	1c5a      	adds	r2, r3, #1
 8002b98:	75fa      	strb	r2, [r7, #23]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	7812      	ldrb	r2, [r2, #0]
 8002ba4:	701a      	strb	r2, [r3, #0]
	buffer[i++] = 0x00;
 8002ba6:	7dfb      	ldrb	r3, [r7, #23]
 8002ba8:	1c5a      	adds	r2, r3, #1
 8002baa:	75fa      	strb	r2, [r7, #23]
 8002bac:	461a      	mov	r2, r3
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	701a      	strb	r2, [r3, #0]
	return i;
 8002bb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	371c      	adds	r7, #28
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bc80      	pop	{r7}
 8002bc0:	4770      	bx	lr
	...

08002bc4 <freqDecode>:

int freqDecode(uint8_t *buffer) {
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
	union floatConverter freq;
	freq.i = 0;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	60fb      	str	r3, [r7, #12]
	freq.i |= (buffer[0]);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	7812      	ldrb	r2, [r2, #0]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	60fb      	str	r3, [r7, #12]
	freq.i |= (buffer[1] << 8);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	3201      	adds	r2, #1
 8002be0:	7812      	ldrb	r2, [r2, #0]
 8002be2:	0212      	lsls	r2, r2, #8
 8002be4:	4313      	orrs	r3, r2
 8002be6:	60fb      	str	r3, [r7, #12]
	freq.i |= (buffer[2] << 16);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	3202      	adds	r2, #2
 8002bee:	7812      	ldrb	r2, [r2, #0]
 8002bf0:	0412      	lsls	r2, r2, #16
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	60fb      	str	r3, [r7, #12]
	freq.i |= (buffer[3] << 24);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	3203      	adds	r2, #3
 8002bfc:	7812      	ldrb	r2, [r2, #0]
 8002bfe:	0612      	lsls	r2, r2, #24
 8002c00:	4313      	orrs	r3, r2
 8002c02:	60fb      	str	r3, [r7, #12]
	freq.f = freq.f * 1000000.0f;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	4907      	ldr	r1, [pc, #28]	; (8002c24 <freqDecode+0x60>)
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7fd fbad 	bl	8000368 <__aeabi_fmul>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	60fb      	str	r3, [r7, #12]

	return (int) freq.f;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7fd fcf7 	bl	8000608 <__aeabi_f2iz>
 8002c1a:	4603      	mov	r3, r0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3710      	adds	r7, #16
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	49742400 	.word	0x49742400

08002c28 <freqEncode>:

void freqEncode(uint8_t *buffer, uint32_t freqIn) {
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
	union floatConverter freqOut;
	freqOut.f = freqIn / 1000000.0f;
 8002c32:	6838      	ldr	r0, [r7, #0]
 8002c34:	f7fd fb40 	bl	80002b8 <__aeabi_ui2f>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	4906      	ldr	r1, [pc, #24]	; (8002c54 <freqEncode+0x2c>)
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7fd fc47 	bl	80004d0 <__aeabi_fdiv>
 8002c42:	4603      	mov	r3, r0
 8002c44:	60fb      	str	r3, [r7, #12]
 8002c46:	68fa      	ldr	r2, [r7, #12]
	memcpy(buffer, &freqOut.i, sizeof(freqOut.i));
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	601a      	str	r2, [r3, #0]
}
 8002c4c:	bf00      	nop
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	49742400 	.word	0x49742400

08002c58 <updateRdss>:

void updateRdss(RDSS_t *rdss, uint8_t *buffer, uint8_t bufferSize) {
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	4613      	mov	r3, r2
 8002c64:	71fb      	strb	r3, [r7, #7]
	if (buffer == NULL)
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d012      	beq.n	8002c92 <updateRdss+0x3a>
		return;
	if (bufferSize <= 0)
 8002c6c:	79fb      	ldrb	r3, [r7, #7]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d011      	beq.n	8002c96 <updateRdss+0x3e>
		return;
	rdss->cmd = buffer[CMD_INDEX]; // Update the command from the received data
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	3303      	adds	r3, #3
 8002c76:	781a      	ldrb	r2, [r3, #0]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	701a      	strb	r2, [r3, #0]
	rdss->idReceived = buffer[MODULE_ID_INDEX]; // Update the received ID
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	789a      	ldrb	r2, [r3, #2]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	73da      	strb	r2, [r3, #15]
	rdss->buffSize = bufferSize;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	79fa      	ldrb	r2, [r7, #7]
 8002c88:	721a      	strb	r2, [r3, #8]
	rdss->buff = buffer;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	68ba      	ldr	r2, [r7, #8]
 8002c8e:	605a      	str	r2, [r3, #4]
 8002c90:	e002      	b.n	8002c98 <updateRdss+0x40>
		return;
 8002c92:	bf00      	nop
 8002c94:	e000      	b.n	8002c98 <updateRdss+0x40>
		return;
 8002c96:	bf00      	nop
}
 8002c98:	3714      	adds	r7, #20
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bc80      	pop	{r7}
 8002c9e:	4770      	bx	lr

08002ca0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002ca6:	4b15      	ldr	r3, [pc, #84]	; (8002cfc <HAL_MspInit+0x5c>)
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	4a14      	ldr	r2, [pc, #80]	; (8002cfc <HAL_MspInit+0x5c>)
 8002cac:	f043 0301 	orr.w	r3, r3, #1
 8002cb0:	6193      	str	r3, [r2, #24]
 8002cb2:	4b12      	ldr	r3, [pc, #72]	; (8002cfc <HAL_MspInit+0x5c>)
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	60bb      	str	r3, [r7, #8]
 8002cbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cbe:	4b0f      	ldr	r3, [pc, #60]	; (8002cfc <HAL_MspInit+0x5c>)
 8002cc0:	69db      	ldr	r3, [r3, #28]
 8002cc2:	4a0e      	ldr	r2, [pc, #56]	; (8002cfc <HAL_MspInit+0x5c>)
 8002cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cc8:	61d3      	str	r3, [r2, #28]
 8002cca:	4b0c      	ldr	r3, [pc, #48]	; (8002cfc <HAL_MspInit+0x5c>)
 8002ccc:	69db      	ldr	r3, [r3, #28]
 8002cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd2:	607b      	str	r3, [r7, #4]
 8002cd4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002cd6:	4b0a      	ldr	r3, [pc, #40]	; (8002d00 <HAL_MspInit+0x60>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	4a04      	ldr	r2, [pc, #16]	; (8002d00 <HAL_MspInit+0x60>)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cf2:	bf00      	nop
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	40010000 	.word	0x40010000

08002d04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b088      	sub	sp, #32
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d0c:	f107 0310 	add.w	r3, r7, #16
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	605a      	str	r2, [r3, #4]
 8002d16:	609a      	str	r2, [r3, #8]
 8002d18:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a14      	ldr	r2, [pc, #80]	; (8002d70 <HAL_ADC_MspInit+0x6c>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d121      	bne.n	8002d68 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d24:	4b13      	ldr	r3, [pc, #76]	; (8002d74 <HAL_ADC_MspInit+0x70>)
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	4a12      	ldr	r2, [pc, #72]	; (8002d74 <HAL_ADC_MspInit+0x70>)
 8002d2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d2e:	6193      	str	r3, [r2, #24]
 8002d30:	4b10      	ldr	r3, [pc, #64]	; (8002d74 <HAL_ADC_MspInit+0x70>)
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d38:	60fb      	str	r3, [r7, #12]
 8002d3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d3c:	4b0d      	ldr	r3, [pc, #52]	; (8002d74 <HAL_ADC_MspInit+0x70>)
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	4a0c      	ldr	r2, [pc, #48]	; (8002d74 <HAL_ADC_MspInit+0x70>)
 8002d42:	f043 0304 	orr.w	r3, r3, #4
 8002d46:	6193      	str	r3, [r2, #24]
 8002d48:	4b0a      	ldr	r3, [pc, #40]	; (8002d74 <HAL_ADC_MspInit+0x70>)
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	f003 0304 	and.w	r3, r3, #4
 8002d50:	60bb      	str	r3, [r7, #8]
 8002d52:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002d54:	2303      	movs	r3, #3
 8002d56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d5c:	f107 0310 	add.w	r3, r7, #16
 8002d60:	4619      	mov	r1, r3
 8002d62:	4805      	ldr	r0, [pc, #20]	; (8002d78 <HAL_ADC_MspInit+0x74>)
 8002d64:	f000 feac 	bl	8003ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002d68:	bf00      	nop
 8002d6a:	3720      	adds	r7, #32
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40012400 	.word	0x40012400
 8002d74:	40021000 	.word	0x40021000
 8002d78:	40010800 	.word	0x40010800

08002d7c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a09      	ldr	r2, [pc, #36]	; (8002db0 <HAL_CRC_MspInit+0x34>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d10b      	bne.n	8002da6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002d8e:	4b09      	ldr	r3, [pc, #36]	; (8002db4 <HAL_CRC_MspInit+0x38>)
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	4a08      	ldr	r2, [pc, #32]	; (8002db4 <HAL_CRC_MspInit+0x38>)
 8002d94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d98:	6153      	str	r3, [r2, #20]
 8002d9a:	4b06      	ldr	r3, [pc, #24]	; (8002db4 <HAL_CRC_MspInit+0x38>)
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da2:	60fb      	str	r3, [r7, #12]
 8002da4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002da6:	bf00      	nop
 8002da8:	3714      	adds	r7, #20
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bc80      	pop	{r7}
 8002dae:	4770      	bx	lr
 8002db0:	40023000 	.word	0x40023000
 8002db4:	40021000 	.word	0x40021000

08002db8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b088      	sub	sp, #32
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc0:	f107 0310 	add.w	r3, r7, #16
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	605a      	str	r2, [r3, #4]
 8002dca:	609a      	str	r2, [r3, #8]
 8002dcc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a15      	ldr	r2, [pc, #84]	; (8002e28 <HAL_I2C_MspInit+0x70>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d123      	bne.n	8002e20 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dd8:	4b14      	ldr	r3, [pc, #80]	; (8002e2c <HAL_I2C_MspInit+0x74>)
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	4a13      	ldr	r2, [pc, #76]	; (8002e2c <HAL_I2C_MspInit+0x74>)
 8002dde:	f043 0308 	orr.w	r3, r3, #8
 8002de2:	6193      	str	r3, [r2, #24]
 8002de4:	4b11      	ldr	r3, [pc, #68]	; (8002e2c <HAL_I2C_MspInit+0x74>)
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	f003 0308 	and.w	r3, r3, #8
 8002dec:	60fb      	str	r3, [r7, #12]
 8002dee:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002df0:	23c0      	movs	r3, #192	; 0xc0
 8002df2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002df4:	2312      	movs	r3, #18
 8002df6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dfc:	f107 0310 	add.w	r3, r7, #16
 8002e00:	4619      	mov	r1, r3
 8002e02:	480b      	ldr	r0, [pc, #44]	; (8002e30 <HAL_I2C_MspInit+0x78>)
 8002e04:	f000 fe5c 	bl	8003ac0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e08:	4b08      	ldr	r3, [pc, #32]	; (8002e2c <HAL_I2C_MspInit+0x74>)
 8002e0a:	69db      	ldr	r3, [r3, #28]
 8002e0c:	4a07      	ldr	r2, [pc, #28]	; (8002e2c <HAL_I2C_MspInit+0x74>)
 8002e0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e12:	61d3      	str	r3, [r2, #28]
 8002e14:	4b05      	ldr	r3, [pc, #20]	; (8002e2c <HAL_I2C_MspInit+0x74>)
 8002e16:	69db      	ldr	r3, [r3, #28]
 8002e18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e1c:	60bb      	str	r3, [r7, #8]
 8002e1e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002e20:	bf00      	nop
 8002e22:	3720      	adds	r7, #32
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	40005400 	.word	0x40005400
 8002e2c:	40021000 	.word	0x40021000
 8002e30:	40010c00 	.word	0x40010c00

08002e34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b088      	sub	sp, #32
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e3c:	f107 0310 	add.w	r3, r7, #16
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	605a      	str	r2, [r3, #4]
 8002e46:	609a      	str	r2, [r3, #8]
 8002e48:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a1b      	ldr	r2, [pc, #108]	; (8002ebc <HAL_SPI_MspInit+0x88>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d12f      	bne.n	8002eb4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e54:	4b1a      	ldr	r3, [pc, #104]	; (8002ec0 <HAL_SPI_MspInit+0x8c>)
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	4a19      	ldr	r2, [pc, #100]	; (8002ec0 <HAL_SPI_MspInit+0x8c>)
 8002e5a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e5e:	6193      	str	r3, [r2, #24]
 8002e60:	4b17      	ldr	r3, [pc, #92]	; (8002ec0 <HAL_SPI_MspInit+0x8c>)
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e68:	60fb      	str	r3, [r7, #12]
 8002e6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e6c:	4b14      	ldr	r3, [pc, #80]	; (8002ec0 <HAL_SPI_MspInit+0x8c>)
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	4a13      	ldr	r2, [pc, #76]	; (8002ec0 <HAL_SPI_MspInit+0x8c>)
 8002e72:	f043 0304 	orr.w	r3, r3, #4
 8002e76:	6193      	str	r3, [r2, #24]
 8002e78:	4b11      	ldr	r3, [pc, #68]	; (8002ec0 <HAL_SPI_MspInit+0x8c>)
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	60bb      	str	r3, [r7, #8]
 8002e82:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002e84:	23a0      	movs	r3, #160	; 0xa0
 8002e86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e88:	2302      	movs	r3, #2
 8002e8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e90:	f107 0310 	add.w	r3, r7, #16
 8002e94:	4619      	mov	r1, r3
 8002e96:	480b      	ldr	r0, [pc, #44]	; (8002ec4 <HAL_SPI_MspInit+0x90>)
 8002e98:	f000 fe12 	bl	8003ac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002e9c:	2340      	movs	r3, #64	; 0x40
 8002e9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ea8:	f107 0310 	add.w	r3, r7, #16
 8002eac:	4619      	mov	r1, r3
 8002eae:	4805      	ldr	r0, [pc, #20]	; (8002ec4 <HAL_SPI_MspInit+0x90>)
 8002eb0:	f000 fe06 	bl	8003ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002eb4:	bf00      	nop
 8002eb6:	3720      	adds	r7, #32
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	40013000 	.word	0x40013000
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	40010800 	.word	0x40010800

08002ec8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b08c      	sub	sp, #48	; 0x30
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed0:	f107 0320 	add.w	r3, r7, #32
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	605a      	str	r2, [r3, #4]
 8002eda:	609a      	str	r2, [r3, #8]
 8002edc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a57      	ldr	r2, [pc, #348]	; (8003040 <HAL_UART_MspInit+0x178>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d13a      	bne.n	8002f5e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ee8:	4b56      	ldr	r3, [pc, #344]	; (8003044 <HAL_UART_MspInit+0x17c>)
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	4a55      	ldr	r2, [pc, #340]	; (8003044 <HAL_UART_MspInit+0x17c>)
 8002eee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ef2:	6193      	str	r3, [r2, #24]
 8002ef4:	4b53      	ldr	r3, [pc, #332]	; (8003044 <HAL_UART_MspInit+0x17c>)
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002efc:	61fb      	str	r3, [r7, #28]
 8002efe:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f00:	4b50      	ldr	r3, [pc, #320]	; (8003044 <HAL_UART_MspInit+0x17c>)
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	4a4f      	ldr	r2, [pc, #316]	; (8003044 <HAL_UART_MspInit+0x17c>)
 8002f06:	f043 0304 	orr.w	r3, r3, #4
 8002f0a:	6193      	str	r3, [r2, #24]
 8002f0c:	4b4d      	ldr	r3, [pc, #308]	; (8003044 <HAL_UART_MspInit+0x17c>)
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	f003 0304 	and.w	r3, r3, #4
 8002f14:	61bb      	str	r3, [r7, #24]
 8002f16:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USB_TX_Pin;
 8002f18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f1e:	2302      	movs	r3, #2
 8002f20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f22:	2303      	movs	r3, #3
 8002f24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(USB_TX_GPIO_Port, &GPIO_InitStruct);
 8002f26:	f107 0320 	add.w	r3, r7, #32
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	4846      	ldr	r0, [pc, #280]	; (8003048 <HAL_UART_MspInit+0x180>)
 8002f2e:	f000 fdc7 	bl	8003ac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_RX_Pin;
 8002f32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(USB_RX_GPIO_Port, &GPIO_InitStruct);
 8002f40:	f107 0320 	add.w	r3, r7, #32
 8002f44:	4619      	mov	r1, r3
 8002f46:	4840      	ldr	r0, [pc, #256]	; (8003048 <HAL_UART_MspInit+0x180>)
 8002f48:	f000 fdba 	bl	8003ac0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	2100      	movs	r1, #0
 8002f50:	2025      	movs	r0, #37	; 0x25
 8002f52:	f000 fcb0 	bl	80038b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002f56:	2025      	movs	r0, #37	; 0x25
 8002f58:	f000 fcc9 	bl	80038ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002f5c:	e06c      	b.n	8003038 <HAL_UART_MspInit+0x170>
  else if(huart->Instance==USART2)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a3a      	ldr	r2, [pc, #232]	; (800304c <HAL_UART_MspInit+0x184>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d130      	bne.n	8002fca <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f68:	4b36      	ldr	r3, [pc, #216]	; (8003044 <HAL_UART_MspInit+0x17c>)
 8002f6a:	69db      	ldr	r3, [r3, #28]
 8002f6c:	4a35      	ldr	r2, [pc, #212]	; (8003044 <HAL_UART_MspInit+0x17c>)
 8002f6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f72:	61d3      	str	r3, [r2, #28]
 8002f74:	4b33      	ldr	r3, [pc, #204]	; (8003044 <HAL_UART_MspInit+0x17c>)
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7c:	617b      	str	r3, [r7, #20]
 8002f7e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f80:	4b30      	ldr	r3, [pc, #192]	; (8003044 <HAL_UART_MspInit+0x17c>)
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	4a2f      	ldr	r2, [pc, #188]	; (8003044 <HAL_UART_MspInit+0x17c>)
 8002f86:	f043 0304 	orr.w	r3, r3, #4
 8002f8a:	6193      	str	r3, [r2, #24]
 8002f8c:	4b2d      	ldr	r3, [pc, #180]	; (8003044 <HAL_UART_MspInit+0x17c>)
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	f003 0304 	and.w	r3, r3, #4
 8002f94:	613b      	str	r3, [r7, #16]
 8002f96:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f98:	2304      	movs	r3, #4
 8002f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fa4:	f107 0320 	add.w	r3, r7, #32
 8002fa8:	4619      	mov	r1, r3
 8002faa:	4827      	ldr	r0, [pc, #156]	; (8003048 <HAL_UART_MspInit+0x180>)
 8002fac:	f000 fd88 	bl	8003ac0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002fb0:	2308      	movs	r3, #8
 8002fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fbc:	f107 0320 	add.w	r3, r7, #32
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	4821      	ldr	r0, [pc, #132]	; (8003048 <HAL_UART_MspInit+0x180>)
 8002fc4:	f000 fd7c 	bl	8003ac0 <HAL_GPIO_Init>
}
 8002fc8:	e036      	b.n	8003038 <HAL_UART_MspInit+0x170>
  else if(huart->Instance==USART3)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a20      	ldr	r2, [pc, #128]	; (8003050 <HAL_UART_MspInit+0x188>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d131      	bne.n	8003038 <HAL_UART_MspInit+0x170>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002fd4:	4b1b      	ldr	r3, [pc, #108]	; (8003044 <HAL_UART_MspInit+0x17c>)
 8002fd6:	69db      	ldr	r3, [r3, #28]
 8002fd8:	4a1a      	ldr	r2, [pc, #104]	; (8003044 <HAL_UART_MspInit+0x17c>)
 8002fda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fde:	61d3      	str	r3, [r2, #28]
 8002fe0:	4b18      	ldr	r3, [pc, #96]	; (8003044 <HAL_UART_MspInit+0x17c>)
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fe8:	60fb      	str	r3, [r7, #12]
 8002fea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fec:	4b15      	ldr	r3, [pc, #84]	; (8003044 <HAL_UART_MspInit+0x17c>)
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	4a14      	ldr	r2, [pc, #80]	; (8003044 <HAL_UART_MspInit+0x17c>)
 8002ff2:	f043 0308 	orr.w	r3, r3, #8
 8002ff6:	6193      	str	r3, [r2, #24]
 8002ff8:	4b12      	ldr	r3, [pc, #72]	; (8003044 <HAL_UART_MspInit+0x17c>)
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	f003 0308 	and.w	r3, r3, #8
 8003000:	60bb      	str	r3, [r7, #8]
 8003002:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RS485_TX_Pin;
 8003004:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800300a:	2302      	movs	r3, #2
 800300c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800300e:	2303      	movs	r3, #3
 8003010:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RS485_TX_GPIO_Port, &GPIO_InitStruct);
 8003012:	f107 0320 	add.w	r3, r7, #32
 8003016:	4619      	mov	r1, r3
 8003018:	480e      	ldr	r0, [pc, #56]	; (8003054 <HAL_UART_MspInit+0x18c>)
 800301a:	f000 fd51 	bl	8003ac0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RS485_RX_Pin;
 800301e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003024:	2300      	movs	r3, #0
 8003026:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003028:	2300      	movs	r3, #0
 800302a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(RS485_RX_GPIO_Port, &GPIO_InitStruct);
 800302c:	f107 0320 	add.w	r3, r7, #32
 8003030:	4619      	mov	r1, r3
 8003032:	4808      	ldr	r0, [pc, #32]	; (8003054 <HAL_UART_MspInit+0x18c>)
 8003034:	f000 fd44 	bl	8003ac0 <HAL_GPIO_Init>
}
 8003038:	bf00      	nop
 800303a:	3730      	adds	r7, #48	; 0x30
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40013800 	.word	0x40013800
 8003044:	40021000 	.word	0x40021000
 8003048:	40010800 	.word	0x40010800
 800304c:	40004400 	.word	0x40004400
 8003050:	40004800 	.word	0x40004800
 8003054:	40010c00 	.word	0x40010c00

08003058 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800305c:	e7fe      	b.n	800305c <NMI_Handler+0x4>

0800305e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800305e:	b480      	push	{r7}
 8003060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003062:	e7fe      	b.n	8003062 <HardFault_Handler+0x4>

08003064 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003068:	e7fe      	b.n	8003068 <MemManage_Handler+0x4>

0800306a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800306a:	b480      	push	{r7}
 800306c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800306e:	e7fe      	b.n	800306e <BusFault_Handler+0x4>

08003070 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003074:	e7fe      	b.n	8003074 <UsageFault_Handler+0x4>

08003076 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003076:	b480      	push	{r7}
 8003078:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800307a:	bf00      	nop
 800307c:	46bd      	mov	sp, r7
 800307e:	bc80      	pop	{r7}
 8003080:	4770      	bx	lr

08003082 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003082:	b480      	push	{r7}
 8003084:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003086:	bf00      	nop
 8003088:	46bd      	mov	sp, r7
 800308a:	bc80      	pop	{r7}
 800308c:	4770      	bx	lr

0800308e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800308e:	b480      	push	{r7}
 8003090:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003092:	bf00      	nop
 8003094:	46bd      	mov	sp, r7
 8003096:	bc80      	pop	{r7}
 8003098:	4770      	bx	lr

0800309a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800309e:	f000 f8e1 	bl	8003264 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030a2:	bf00      	nop
 80030a4:	bd80      	pop	{r7, pc}
	...

080030a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80030ac:	4802      	ldr	r0, [pc, #8]	; (80030b8 <USART1_IRQHandler+0x10>)
 80030ae:	f003 fed5 	bl	8006e5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80030b2:	bf00      	nop
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	20000170 	.word	0x20000170

080030bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030c4:	4a14      	ldr	r2, [pc, #80]	; (8003118 <_sbrk+0x5c>)
 80030c6:	4b15      	ldr	r3, [pc, #84]	; (800311c <_sbrk+0x60>)
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030d0:	4b13      	ldr	r3, [pc, #76]	; (8003120 <_sbrk+0x64>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d102      	bne.n	80030de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030d8:	4b11      	ldr	r3, [pc, #68]	; (8003120 <_sbrk+0x64>)
 80030da:	4a12      	ldr	r2, [pc, #72]	; (8003124 <_sbrk+0x68>)
 80030dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030de:	4b10      	ldr	r3, [pc, #64]	; (8003120 <_sbrk+0x64>)
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4413      	add	r3, r2
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d207      	bcs.n	80030fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030ec:	f004 fc9c 	bl	8007a28 <__errno>
 80030f0:	4603      	mov	r3, r0
 80030f2:	220c      	movs	r2, #12
 80030f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030f6:	f04f 33ff 	mov.w	r3, #4294967295
 80030fa:	e009      	b.n	8003110 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030fc:	4b08      	ldr	r3, [pc, #32]	; (8003120 <_sbrk+0x64>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003102:	4b07      	ldr	r3, [pc, #28]	; (8003120 <_sbrk+0x64>)
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4413      	add	r3, r2
 800310a:	4a05      	ldr	r2, [pc, #20]	; (8003120 <_sbrk+0x64>)
 800310c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800310e:	68fb      	ldr	r3, [r7, #12]
}
 8003110:	4618      	mov	r0, r3
 8003112:	3718      	adds	r7, #24
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	20005000 	.word	0x20005000
 800311c:	00000400 	.word	0x00000400
 8003120:	200003b8 	.word	0x200003b8
 8003124:	20000508 	.word	0x20000508

08003128 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800312c:	bf00      	nop
 800312e:	46bd      	mov	sp, r7
 8003130:	bc80      	pop	{r7}
 8003132:	4770      	bx	lr

08003134 <writeTxReg>:
	SET_BIT(USART1->CR1, USART_CR1_RXNEIE);
	NVIC_EnableIRQ(USART1_IRQn);
	SET_BIT(USART1->CR1, USART_CR1_UE);
}

void writeTxReg(char ch) {
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	4603      	mov	r3, r0
 800313c:	71fb      	strb	r3, [r7, #7]
	SET_BIT(GPIOB->ODR, GPIO_ODR_ODR8);
 800313e:	4b11      	ldr	r3, [pc, #68]	; (8003184 <writeTxReg+0x50>)
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	4a10      	ldr	r2, [pc, #64]	; (8003184 <writeTxReg+0x50>)
 8003144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003148:	60d3      	str	r3, [r2, #12]

	while (!READ_BIT(USART1->SR, USART_SR_TXE))
 800314a:	bf00      	nop
 800314c:	4b0e      	ldr	r3, [pc, #56]	; (8003188 <writeTxReg+0x54>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003154:	2b00      	cmp	r3, #0
 8003156:	d0f9      	beq.n	800314c <writeTxReg+0x18>
		;
	USART1->DR = (uint8_t) (ch & 0xFFU);
 8003158:	4a0b      	ldr	r2, [pc, #44]	; (8003188 <writeTxReg+0x54>)
 800315a:	79fb      	ldrb	r3, [r7, #7]
 800315c:	6053      	str	r3, [r2, #4]

	while (!READ_BIT(USART1->SR, USART_SR_TC))
 800315e:	bf00      	nop
 8003160:	4b09      	ldr	r3, [pc, #36]	; (8003188 <writeTxReg+0x54>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0f9      	beq.n	8003160 <writeTxReg+0x2c>
		;

	CLEAR_BIT(GPIOB->ODR, GPIO_ODR_ODR8);
 800316c:	4b05      	ldr	r3, [pc, #20]	; (8003184 <writeTxReg+0x50>)
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	4a04      	ldr	r2, [pc, #16]	; (8003184 <writeTxReg+0x50>)
 8003172:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003176:	60d3      	str	r3, [r2, #12]
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	bc80      	pop	{r7}
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	40010c00 	.word	0x40010c00
 8003188:	40013800 	.word	0x40013800

0800318c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:


	/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 800318c:	480c      	ldr	r0, [pc, #48]	; (80031c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800318e:	490d      	ldr	r1, [pc, #52]	; (80031c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003190:	4a0d      	ldr	r2, [pc, #52]	; (80031c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003192:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003194:	e002      	b.n	800319c <LoopCopyDataInit>

08003196 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003196:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003198:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800319a:	3304      	adds	r3, #4

0800319c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800319c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800319e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031a0:	d3f9      	bcc.n	8003196 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031a2:	4a0a      	ldr	r2, [pc, #40]	; (80031cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80031a4:	4c0a      	ldr	r4, [pc, #40]	; (80031d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80031a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031a8:	e001      	b.n	80031ae <LoopFillZerobss>

080031aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031ac:	3204      	adds	r2, #4

080031ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031b0:	d3fb      	bcc.n	80031aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80031b2:	f7ff ffb9 	bl	8003128 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031b6:	f004 fc3d 	bl	8007a34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80031ba:	f7fe f977 	bl	80014ac <main>
  bx lr
 80031be:	4770      	bx	lr
	/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 80031c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031c4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80031c8:	08007b64 	.word	0x08007b64
  ldr r2, =_sbss
 80031cc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80031d0:	20000508 	.word	0x20000508

080031d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80031d4:	e7fe      	b.n	80031d4 <ADC1_2_IRQHandler>
	...

080031d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031dc:	4b08      	ldr	r3, [pc, #32]	; (8003200 <HAL_Init+0x28>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a07      	ldr	r2, [pc, #28]	; (8003200 <HAL_Init+0x28>)
 80031e2:	f043 0310 	orr.w	r3, r3, #16
 80031e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031e8:	2003      	movs	r0, #3
 80031ea:	f000 fb59 	bl	80038a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031ee:	200f      	movs	r0, #15
 80031f0:	f000 f808 	bl	8003204 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031f4:	f7ff fd54 	bl	8002ca0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	40022000 	.word	0x40022000

08003204 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800320c:	4b12      	ldr	r3, [pc, #72]	; (8003258 <HAL_InitTick+0x54>)
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	4b12      	ldr	r3, [pc, #72]	; (800325c <HAL_InitTick+0x58>)
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	4619      	mov	r1, r3
 8003216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800321a:	fbb3 f3f1 	udiv	r3, r3, r1
 800321e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003222:	4618      	mov	r0, r3
 8003224:	f000 fb71 	bl	800390a <HAL_SYSTICK_Config>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e00e      	b.n	8003250 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2b0f      	cmp	r3, #15
 8003236:	d80a      	bhi.n	800324e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003238:	2200      	movs	r2, #0
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	f04f 30ff 	mov.w	r0, #4294967295
 8003240:	f000 fb39 	bl	80038b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003244:	4a06      	ldr	r2, [pc, #24]	; (8003260 <HAL_InitTick+0x5c>)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800324a:	2300      	movs	r3, #0
 800324c:	e000      	b.n	8003250 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
}
 8003250:	4618      	mov	r0, r3
 8003252:	3708      	adds	r7, #8
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	20000000 	.word	0x20000000
 800325c:	20000008 	.word	0x20000008
 8003260:	20000004 	.word	0x20000004

08003264 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003268:	4b05      	ldr	r3, [pc, #20]	; (8003280 <HAL_IncTick+0x1c>)
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	461a      	mov	r2, r3
 800326e:	4b05      	ldr	r3, [pc, #20]	; (8003284 <HAL_IncTick+0x20>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4413      	add	r3, r2
 8003274:	4a03      	ldr	r2, [pc, #12]	; (8003284 <HAL_IncTick+0x20>)
 8003276:	6013      	str	r3, [r2, #0]
}
 8003278:	bf00      	nop
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr
 8003280:	20000008 	.word	0x20000008
 8003284:	200003bc 	.word	0x200003bc

08003288 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
  return uwTick;
 800328c:	4b02      	ldr	r3, [pc, #8]	; (8003298 <HAL_GetTick+0x10>)
 800328e:	681b      	ldr	r3, [r3, #0]
}
 8003290:	4618      	mov	r0, r3
 8003292:	46bd      	mov	sp, r7
 8003294:	bc80      	pop	{r7}
 8003296:	4770      	bx	lr
 8003298:	200003bc 	.word	0x200003bc

0800329c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032a4:	f7ff fff0 	bl	8003288 <HAL_GetTick>
 80032a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b4:	d005      	beq.n	80032c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032b6:	4b0a      	ldr	r3, [pc, #40]	; (80032e0 <HAL_Delay+0x44>)
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	461a      	mov	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	4413      	add	r3, r2
 80032c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80032c2:	bf00      	nop
 80032c4:	f7ff ffe0 	bl	8003288 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d8f7      	bhi.n	80032c4 <HAL_Delay+0x28>
  {
  }
}
 80032d4:	bf00      	nop
 80032d6:	bf00      	nop
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	20000008 	.word	0x20000008

080032e4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032ec:	2300      	movs	r3, #0
 80032ee:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80032f0:	2300      	movs	r3, #0
 80032f2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80032f4:	2300      	movs	r3, #0
 80032f6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80032f8:	2300      	movs	r3, #0
 80032fa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e0be      	b.n	8003484 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003310:	2b00      	cmp	r3, #0
 8003312:	d109      	bne.n	8003328 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f7ff fcee 	bl	8002d04 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 f9ab 	bl	8003684 <ADC_ConversionStop_Disable>
 800332e:	4603      	mov	r3, r0
 8003330:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003336:	f003 0310 	and.w	r3, r3, #16
 800333a:	2b00      	cmp	r3, #0
 800333c:	f040 8099 	bne.w	8003472 <HAL_ADC_Init+0x18e>
 8003340:	7dfb      	ldrb	r3, [r7, #23]
 8003342:	2b00      	cmp	r3, #0
 8003344:	f040 8095 	bne.w	8003472 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003350:	f023 0302 	bic.w	r3, r3, #2
 8003354:	f043 0202 	orr.w	r2, r3, #2
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003364:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	7b1b      	ldrb	r3, [r3, #12]
 800336a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800336c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	4313      	orrs	r3, r2
 8003372:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800337c:	d003      	beq.n	8003386 <HAL_ADC_Init+0xa2>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d102      	bne.n	800338c <HAL_ADC_Init+0xa8>
 8003386:	f44f 7380 	mov.w	r3, #256	; 0x100
 800338a:	e000      	b.n	800338e <HAL_ADC_Init+0xaa>
 800338c:	2300      	movs	r3, #0
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	4313      	orrs	r3, r2
 8003392:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	7d1b      	ldrb	r3, [r3, #20]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d119      	bne.n	80033d0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	7b1b      	ldrb	r3, [r3, #12]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d109      	bne.n	80033b8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	3b01      	subs	r3, #1
 80033aa:	035a      	lsls	r2, r3, #13
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80033b4:	613b      	str	r3, [r7, #16]
 80033b6:	e00b      	b.n	80033d0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033bc:	f043 0220 	orr.w	r2, r3, #32
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c8:	f043 0201 	orr.w	r2, r3, #1
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689a      	ldr	r2, [r3, #8]
 80033ea:	4b28      	ldr	r3, [pc, #160]	; (800348c <HAL_ADC_Init+0x1a8>)
 80033ec:	4013      	ands	r3, r2
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	6812      	ldr	r2, [r2, #0]
 80033f2:	68b9      	ldr	r1, [r7, #8]
 80033f4:	430b      	orrs	r3, r1
 80033f6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003400:	d003      	beq.n	800340a <HAL_ADC_Init+0x126>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d104      	bne.n	8003414 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	3b01      	subs	r3, #1
 8003410:	051b      	lsls	r3, r3, #20
 8003412:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	430a      	orrs	r2, r1
 8003426:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689a      	ldr	r2, [r3, #8]
 800342e:	4b18      	ldr	r3, [pc, #96]	; (8003490 <HAL_ADC_Init+0x1ac>)
 8003430:	4013      	ands	r3, r2
 8003432:	68ba      	ldr	r2, [r7, #8]
 8003434:	429a      	cmp	r2, r3
 8003436:	d10b      	bne.n	8003450 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003442:	f023 0303 	bic.w	r3, r3, #3
 8003446:	f043 0201 	orr.w	r2, r3, #1
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800344e:	e018      	b.n	8003482 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003454:	f023 0312 	bic.w	r3, r3, #18
 8003458:	f043 0210 	orr.w	r2, r3, #16
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003464:	f043 0201 	orr.w	r2, r3, #1
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003470:	e007      	b.n	8003482 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003476:	f043 0210 	orr.w	r2, r3, #16
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003482:	7dfb      	ldrb	r3, [r7, #23]
}
 8003484:	4618      	mov	r0, r3
 8003486:	3718      	adds	r7, #24
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	ffe1f7fd 	.word	0xffe1f7fd
 8003490:	ff1f0efe 	.word	0xff1f0efe

08003494 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800349e:	2300      	movs	r3, #0
 80034a0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80034a2:	2300      	movs	r3, #0
 80034a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d101      	bne.n	80034b4 <HAL_ADC_ConfigChannel+0x20>
 80034b0:	2302      	movs	r3, #2
 80034b2:	e0dc      	b.n	800366e <HAL_ADC_ConfigChannel+0x1da>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	2b06      	cmp	r3, #6
 80034c2:	d81c      	bhi.n	80034fe <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	685a      	ldr	r2, [r3, #4]
 80034ce:	4613      	mov	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	4413      	add	r3, r2
 80034d4:	3b05      	subs	r3, #5
 80034d6:	221f      	movs	r2, #31
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	43db      	mvns	r3, r3
 80034de:	4019      	ands	r1, r3
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	6818      	ldr	r0, [r3, #0]
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	4613      	mov	r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	4413      	add	r3, r2
 80034ee:	3b05      	subs	r3, #5
 80034f0:	fa00 f203 	lsl.w	r2, r0, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	635a      	str	r2, [r3, #52]	; 0x34
 80034fc:	e03c      	b.n	8003578 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	2b0c      	cmp	r3, #12
 8003504:	d81c      	bhi.n	8003540 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	4613      	mov	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4413      	add	r3, r2
 8003516:	3b23      	subs	r3, #35	; 0x23
 8003518:	221f      	movs	r2, #31
 800351a:	fa02 f303 	lsl.w	r3, r2, r3
 800351e:	43db      	mvns	r3, r3
 8003520:	4019      	ands	r1, r3
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	6818      	ldr	r0, [r3, #0]
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	4613      	mov	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	4413      	add	r3, r2
 8003530:	3b23      	subs	r3, #35	; 0x23
 8003532:	fa00 f203 	lsl.w	r2, r0, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	631a      	str	r2, [r3, #48]	; 0x30
 800353e:	e01b      	b.n	8003578 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	4613      	mov	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	4413      	add	r3, r2
 8003550:	3b41      	subs	r3, #65	; 0x41
 8003552:	221f      	movs	r2, #31
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	43db      	mvns	r3, r3
 800355a:	4019      	ands	r1, r3
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	6818      	ldr	r0, [r3, #0]
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	4613      	mov	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4413      	add	r3, r2
 800356a:	3b41      	subs	r3, #65	; 0x41
 800356c:	fa00 f203 	lsl.w	r2, r0, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	430a      	orrs	r2, r1
 8003576:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2b09      	cmp	r3, #9
 800357e:	d91c      	bls.n	80035ba <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68d9      	ldr	r1, [r3, #12]
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	4613      	mov	r3, r2
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	4413      	add	r3, r2
 8003590:	3b1e      	subs	r3, #30
 8003592:	2207      	movs	r2, #7
 8003594:	fa02 f303 	lsl.w	r3, r2, r3
 8003598:	43db      	mvns	r3, r3
 800359a:	4019      	ands	r1, r3
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	6898      	ldr	r0, [r3, #8]
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	4613      	mov	r3, r2
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	4413      	add	r3, r2
 80035aa:	3b1e      	subs	r3, #30
 80035ac:	fa00 f203 	lsl.w	r2, r0, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	60da      	str	r2, [r3, #12]
 80035b8:	e019      	b.n	80035ee <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6919      	ldr	r1, [r3, #16]
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	4613      	mov	r3, r2
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	4413      	add	r3, r2
 80035ca:	2207      	movs	r2, #7
 80035cc:	fa02 f303 	lsl.w	r3, r2, r3
 80035d0:	43db      	mvns	r3, r3
 80035d2:	4019      	ands	r1, r3
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	6898      	ldr	r0, [r3, #8]
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	4613      	mov	r3, r2
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	4413      	add	r3, r2
 80035e2:	fa00 f203 	lsl.w	r2, r0, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2b10      	cmp	r3, #16
 80035f4:	d003      	beq.n	80035fe <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80035fa:	2b11      	cmp	r3, #17
 80035fc:	d132      	bne.n	8003664 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a1d      	ldr	r2, [pc, #116]	; (8003678 <HAL_ADC_ConfigChannel+0x1e4>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d125      	bne.n	8003654 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d126      	bne.n	8003664 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003624:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2b10      	cmp	r3, #16
 800362c:	d11a      	bne.n	8003664 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800362e:	4b13      	ldr	r3, [pc, #76]	; (800367c <HAL_ADC_ConfigChannel+0x1e8>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a13      	ldr	r2, [pc, #76]	; (8003680 <HAL_ADC_ConfigChannel+0x1ec>)
 8003634:	fba2 2303 	umull	r2, r3, r2, r3
 8003638:	0c9a      	lsrs	r2, r3, #18
 800363a:	4613      	mov	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	4413      	add	r3, r2
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003644:	e002      	b.n	800364c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	3b01      	subs	r3, #1
 800364a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1f9      	bne.n	8003646 <HAL_ADC_ConfigChannel+0x1b2>
 8003652:	e007      	b.n	8003664 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003658:	f043 0220 	orr.w	r2, r3, #32
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800366c:	7bfb      	ldrb	r3, [r7, #15]
}
 800366e:	4618      	mov	r0, r3
 8003670:	3714      	adds	r7, #20
 8003672:	46bd      	mov	sp, r7
 8003674:	bc80      	pop	{r7}
 8003676:	4770      	bx	lr
 8003678:	40012400 	.word	0x40012400
 800367c:	20000000 	.word	0x20000000
 8003680:	431bde83 	.word	0x431bde83

08003684 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800368c:	2300      	movs	r3, #0
 800368e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b01      	cmp	r3, #1
 800369c:	d12e      	bne.n	80036fc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 0201 	bic.w	r2, r2, #1
 80036ac:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80036ae:	f7ff fdeb 	bl	8003288 <HAL_GetTick>
 80036b2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80036b4:	e01b      	b.n	80036ee <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80036b6:	f7ff fde7 	bl	8003288 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d914      	bls.n	80036ee <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d10d      	bne.n	80036ee <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d6:	f043 0210 	orr.w	r2, r3, #16
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e2:	f043 0201 	orr.w	r2, r3, #1
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e007      	b.n	80036fe <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d0dc      	beq.n	80036b6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
	...

08003708 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f003 0307 	and.w	r3, r3, #7
 8003716:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003718:	4b0c      	ldr	r3, [pc, #48]	; (800374c <__NVIC_SetPriorityGrouping+0x44>)
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003724:	4013      	ands	r3, r2
 8003726:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003730:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003738:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800373a:	4a04      	ldr	r2, [pc, #16]	; (800374c <__NVIC_SetPriorityGrouping+0x44>)
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	60d3      	str	r3, [r2, #12]
}
 8003740:	bf00      	nop
 8003742:	3714      	adds	r7, #20
 8003744:	46bd      	mov	sp, r7
 8003746:	bc80      	pop	{r7}
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	e000ed00 	.word	0xe000ed00

08003750 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003754:	4b04      	ldr	r3, [pc, #16]	; (8003768 <__NVIC_GetPriorityGrouping+0x18>)
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	0a1b      	lsrs	r3, r3, #8
 800375a:	f003 0307 	and.w	r3, r3, #7
}
 800375e:	4618      	mov	r0, r3
 8003760:	46bd      	mov	sp, r7
 8003762:	bc80      	pop	{r7}
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	e000ed00 	.word	0xe000ed00

0800376c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	4603      	mov	r3, r0
 8003774:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800377a:	2b00      	cmp	r3, #0
 800377c:	db0b      	blt.n	8003796 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800377e:	79fb      	ldrb	r3, [r7, #7]
 8003780:	f003 021f 	and.w	r2, r3, #31
 8003784:	4906      	ldr	r1, [pc, #24]	; (80037a0 <__NVIC_EnableIRQ+0x34>)
 8003786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800378a:	095b      	lsrs	r3, r3, #5
 800378c:	2001      	movs	r0, #1
 800378e:	fa00 f202 	lsl.w	r2, r0, r2
 8003792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003796:	bf00      	nop
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	bc80      	pop	{r7}
 800379e:	4770      	bx	lr
 80037a0:	e000e100 	.word	0xe000e100

080037a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	4603      	mov	r3, r0
 80037ac:	6039      	str	r1, [r7, #0]
 80037ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	db0a      	blt.n	80037ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	b2da      	uxtb	r2, r3
 80037bc:	490c      	ldr	r1, [pc, #48]	; (80037f0 <__NVIC_SetPriority+0x4c>)
 80037be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c2:	0112      	lsls	r2, r2, #4
 80037c4:	b2d2      	uxtb	r2, r2
 80037c6:	440b      	add	r3, r1
 80037c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037cc:	e00a      	b.n	80037e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	b2da      	uxtb	r2, r3
 80037d2:	4908      	ldr	r1, [pc, #32]	; (80037f4 <__NVIC_SetPriority+0x50>)
 80037d4:	79fb      	ldrb	r3, [r7, #7]
 80037d6:	f003 030f 	and.w	r3, r3, #15
 80037da:	3b04      	subs	r3, #4
 80037dc:	0112      	lsls	r2, r2, #4
 80037de:	b2d2      	uxtb	r2, r2
 80037e0:	440b      	add	r3, r1
 80037e2:	761a      	strb	r2, [r3, #24]
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bc80      	pop	{r7}
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	e000e100 	.word	0xe000e100
 80037f4:	e000ed00 	.word	0xe000ed00

080037f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b089      	sub	sp, #36	; 0x24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	f1c3 0307 	rsb	r3, r3, #7
 8003812:	2b04      	cmp	r3, #4
 8003814:	bf28      	it	cs
 8003816:	2304      	movcs	r3, #4
 8003818:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	3304      	adds	r3, #4
 800381e:	2b06      	cmp	r3, #6
 8003820:	d902      	bls.n	8003828 <NVIC_EncodePriority+0x30>
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	3b03      	subs	r3, #3
 8003826:	e000      	b.n	800382a <NVIC_EncodePriority+0x32>
 8003828:	2300      	movs	r3, #0
 800382a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800382c:	f04f 32ff 	mov.w	r2, #4294967295
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	fa02 f303 	lsl.w	r3, r2, r3
 8003836:	43da      	mvns	r2, r3
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	401a      	ands	r2, r3
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003840:	f04f 31ff 	mov.w	r1, #4294967295
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	fa01 f303 	lsl.w	r3, r1, r3
 800384a:	43d9      	mvns	r1, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003850:	4313      	orrs	r3, r2
         );
}
 8003852:	4618      	mov	r0, r3
 8003854:	3724      	adds	r7, #36	; 0x24
 8003856:	46bd      	mov	sp, r7
 8003858:	bc80      	pop	{r7}
 800385a:	4770      	bx	lr

0800385c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	3b01      	subs	r3, #1
 8003868:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800386c:	d301      	bcc.n	8003872 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800386e:	2301      	movs	r3, #1
 8003870:	e00f      	b.n	8003892 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003872:	4a0a      	ldr	r2, [pc, #40]	; (800389c <SysTick_Config+0x40>)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	3b01      	subs	r3, #1
 8003878:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800387a:	210f      	movs	r1, #15
 800387c:	f04f 30ff 	mov.w	r0, #4294967295
 8003880:	f7ff ff90 	bl	80037a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003884:	4b05      	ldr	r3, [pc, #20]	; (800389c <SysTick_Config+0x40>)
 8003886:	2200      	movs	r2, #0
 8003888:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800388a:	4b04      	ldr	r3, [pc, #16]	; (800389c <SysTick_Config+0x40>)
 800388c:	2207      	movs	r2, #7
 800388e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	e000e010 	.word	0xe000e010

080038a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f7ff ff2d 	bl	8003708 <__NVIC_SetPriorityGrouping>
}
 80038ae:	bf00      	nop
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b086      	sub	sp, #24
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	4603      	mov	r3, r0
 80038be:	60b9      	str	r1, [r7, #8]
 80038c0:	607a      	str	r2, [r7, #4]
 80038c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038c4:	2300      	movs	r3, #0
 80038c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038c8:	f7ff ff42 	bl	8003750 <__NVIC_GetPriorityGrouping>
 80038cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	68b9      	ldr	r1, [r7, #8]
 80038d2:	6978      	ldr	r0, [r7, #20]
 80038d4:	f7ff ff90 	bl	80037f8 <NVIC_EncodePriority>
 80038d8:	4602      	mov	r2, r0
 80038da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038de:	4611      	mov	r1, r2
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7ff ff5f 	bl	80037a4 <__NVIC_SetPriority>
}
 80038e6:	bf00      	nop
 80038e8:	3718      	adds	r7, #24
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b082      	sub	sp, #8
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	4603      	mov	r3, r0
 80038f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7ff ff35 	bl	800376c <__NVIC_EnableIRQ>
}
 8003902:	bf00      	nop
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b082      	sub	sp, #8
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7ff ffa2 	bl	800385c <SysTick_Config>
 8003918:	4603      	mov	r3, r0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b082      	sub	sp, #8
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d101      	bne.n	8003934 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e00e      	b.n	8003952 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	795b      	ldrb	r3, [r3, #5]
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d105      	bne.n	800394a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f7ff fa19 	bl	8002d7c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2201      	movs	r2, #1
 800394e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800395a:	b480      	push	{r7}
 800395c:	b085      	sub	sp, #20
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003962:	2300      	movs	r3, #0
 8003964:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b02      	cmp	r3, #2
 8003970:	d008      	beq.n	8003984 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2204      	movs	r2, #4
 8003976:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e020      	b.n	80039c6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f022 020e 	bic.w	r2, r2, #14
 8003992:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 0201 	bic.w	r2, r2, #1
 80039a2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ac:	2101      	movs	r1, #1
 80039ae:	fa01 f202 	lsl.w	r2, r1, r2
 80039b2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80039c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3714      	adds	r7, #20
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bc80      	pop	{r7}
 80039ce:	4770      	bx	lr

080039d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039d8:	2300      	movs	r3, #0
 80039da:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d005      	beq.n	80039f4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2204      	movs	r2, #4
 80039ec:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	73fb      	strb	r3, [r7, #15]
 80039f2:	e051      	b.n	8003a98 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 020e 	bic.w	r2, r2, #14
 8003a02:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f022 0201 	bic.w	r2, r2, #1
 8003a12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a22      	ldr	r2, [pc, #136]	; (8003aa4 <HAL_DMA_Abort_IT+0xd4>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d029      	beq.n	8003a72 <HAL_DMA_Abort_IT+0xa2>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a21      	ldr	r2, [pc, #132]	; (8003aa8 <HAL_DMA_Abort_IT+0xd8>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d022      	beq.n	8003a6e <HAL_DMA_Abort_IT+0x9e>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a1f      	ldr	r2, [pc, #124]	; (8003aac <HAL_DMA_Abort_IT+0xdc>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d01a      	beq.n	8003a68 <HAL_DMA_Abort_IT+0x98>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a1e      	ldr	r2, [pc, #120]	; (8003ab0 <HAL_DMA_Abort_IT+0xe0>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d012      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x92>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a1c      	ldr	r2, [pc, #112]	; (8003ab4 <HAL_DMA_Abort_IT+0xe4>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d00a      	beq.n	8003a5c <HAL_DMA_Abort_IT+0x8c>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a1b      	ldr	r2, [pc, #108]	; (8003ab8 <HAL_DMA_Abort_IT+0xe8>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d102      	bne.n	8003a56 <HAL_DMA_Abort_IT+0x86>
 8003a50:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003a54:	e00e      	b.n	8003a74 <HAL_DMA_Abort_IT+0xa4>
 8003a56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a5a:	e00b      	b.n	8003a74 <HAL_DMA_Abort_IT+0xa4>
 8003a5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a60:	e008      	b.n	8003a74 <HAL_DMA_Abort_IT+0xa4>
 8003a62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a66:	e005      	b.n	8003a74 <HAL_DMA_Abort_IT+0xa4>
 8003a68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a6c:	e002      	b.n	8003a74 <HAL_DMA_Abort_IT+0xa4>
 8003a6e:	2310      	movs	r3, #16
 8003a70:	e000      	b.n	8003a74 <HAL_DMA_Abort_IT+0xa4>
 8003a72:	2301      	movs	r3, #1
 8003a74:	4a11      	ldr	r2, [pc, #68]	; (8003abc <HAL_DMA_Abort_IT+0xec>)
 8003a76:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d003      	beq.n	8003a98 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	4798      	blx	r3
    } 
  }
  return status;
 8003a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	40020008 	.word	0x40020008
 8003aa8:	4002001c 	.word	0x4002001c
 8003aac:	40020030 	.word	0x40020030
 8003ab0:	40020044 	.word	0x40020044
 8003ab4:	40020058 	.word	0x40020058
 8003ab8:	4002006c 	.word	0x4002006c
 8003abc:	40020000 	.word	0x40020000

08003ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b08b      	sub	sp, #44	; 0x2c
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003aca:	2300      	movs	r3, #0
 8003acc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ad2:	e169      	b.n	8003da8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	69fa      	ldr	r2, [r7, #28]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	f040 8158 	bne.w	8003da2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	4a9a      	ldr	r2, [pc, #616]	; (8003d60 <HAL_GPIO_Init+0x2a0>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d05e      	beq.n	8003bba <HAL_GPIO_Init+0xfa>
 8003afc:	4a98      	ldr	r2, [pc, #608]	; (8003d60 <HAL_GPIO_Init+0x2a0>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d875      	bhi.n	8003bee <HAL_GPIO_Init+0x12e>
 8003b02:	4a98      	ldr	r2, [pc, #608]	; (8003d64 <HAL_GPIO_Init+0x2a4>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d058      	beq.n	8003bba <HAL_GPIO_Init+0xfa>
 8003b08:	4a96      	ldr	r2, [pc, #600]	; (8003d64 <HAL_GPIO_Init+0x2a4>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d86f      	bhi.n	8003bee <HAL_GPIO_Init+0x12e>
 8003b0e:	4a96      	ldr	r2, [pc, #600]	; (8003d68 <HAL_GPIO_Init+0x2a8>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d052      	beq.n	8003bba <HAL_GPIO_Init+0xfa>
 8003b14:	4a94      	ldr	r2, [pc, #592]	; (8003d68 <HAL_GPIO_Init+0x2a8>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d869      	bhi.n	8003bee <HAL_GPIO_Init+0x12e>
 8003b1a:	4a94      	ldr	r2, [pc, #592]	; (8003d6c <HAL_GPIO_Init+0x2ac>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d04c      	beq.n	8003bba <HAL_GPIO_Init+0xfa>
 8003b20:	4a92      	ldr	r2, [pc, #584]	; (8003d6c <HAL_GPIO_Init+0x2ac>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d863      	bhi.n	8003bee <HAL_GPIO_Init+0x12e>
 8003b26:	4a92      	ldr	r2, [pc, #584]	; (8003d70 <HAL_GPIO_Init+0x2b0>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d046      	beq.n	8003bba <HAL_GPIO_Init+0xfa>
 8003b2c:	4a90      	ldr	r2, [pc, #576]	; (8003d70 <HAL_GPIO_Init+0x2b0>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d85d      	bhi.n	8003bee <HAL_GPIO_Init+0x12e>
 8003b32:	2b12      	cmp	r3, #18
 8003b34:	d82a      	bhi.n	8003b8c <HAL_GPIO_Init+0xcc>
 8003b36:	2b12      	cmp	r3, #18
 8003b38:	d859      	bhi.n	8003bee <HAL_GPIO_Init+0x12e>
 8003b3a:	a201      	add	r2, pc, #4	; (adr r2, 8003b40 <HAL_GPIO_Init+0x80>)
 8003b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b40:	08003bbb 	.word	0x08003bbb
 8003b44:	08003b95 	.word	0x08003b95
 8003b48:	08003ba7 	.word	0x08003ba7
 8003b4c:	08003be9 	.word	0x08003be9
 8003b50:	08003bef 	.word	0x08003bef
 8003b54:	08003bef 	.word	0x08003bef
 8003b58:	08003bef 	.word	0x08003bef
 8003b5c:	08003bef 	.word	0x08003bef
 8003b60:	08003bef 	.word	0x08003bef
 8003b64:	08003bef 	.word	0x08003bef
 8003b68:	08003bef 	.word	0x08003bef
 8003b6c:	08003bef 	.word	0x08003bef
 8003b70:	08003bef 	.word	0x08003bef
 8003b74:	08003bef 	.word	0x08003bef
 8003b78:	08003bef 	.word	0x08003bef
 8003b7c:	08003bef 	.word	0x08003bef
 8003b80:	08003bef 	.word	0x08003bef
 8003b84:	08003b9d 	.word	0x08003b9d
 8003b88:	08003bb1 	.word	0x08003bb1
 8003b8c:	4a79      	ldr	r2, [pc, #484]	; (8003d74 <HAL_GPIO_Init+0x2b4>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d013      	beq.n	8003bba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003b92:	e02c      	b.n	8003bee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	623b      	str	r3, [r7, #32]
          break;
 8003b9a:	e029      	b.n	8003bf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	3304      	adds	r3, #4
 8003ba2:	623b      	str	r3, [r7, #32]
          break;
 8003ba4:	e024      	b.n	8003bf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	3308      	adds	r3, #8
 8003bac:	623b      	str	r3, [r7, #32]
          break;
 8003bae:	e01f      	b.n	8003bf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	330c      	adds	r3, #12
 8003bb6:	623b      	str	r3, [r7, #32]
          break;
 8003bb8:	e01a      	b.n	8003bf0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d102      	bne.n	8003bc8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003bc2:	2304      	movs	r3, #4
 8003bc4:	623b      	str	r3, [r7, #32]
          break;
 8003bc6:	e013      	b.n	8003bf0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d105      	bne.n	8003bdc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003bd0:	2308      	movs	r3, #8
 8003bd2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	69fa      	ldr	r2, [r7, #28]
 8003bd8:	611a      	str	r2, [r3, #16]
          break;
 8003bda:	e009      	b.n	8003bf0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003bdc:	2308      	movs	r3, #8
 8003bde:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	69fa      	ldr	r2, [r7, #28]
 8003be4:	615a      	str	r2, [r3, #20]
          break;
 8003be6:	e003      	b.n	8003bf0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003be8:	2300      	movs	r3, #0
 8003bea:	623b      	str	r3, [r7, #32]
          break;
 8003bec:	e000      	b.n	8003bf0 <HAL_GPIO_Init+0x130>
          break;
 8003bee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	2bff      	cmp	r3, #255	; 0xff
 8003bf4:	d801      	bhi.n	8003bfa <HAL_GPIO_Init+0x13a>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	e001      	b.n	8003bfe <HAL_GPIO_Init+0x13e>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	3304      	adds	r3, #4
 8003bfe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	2bff      	cmp	r3, #255	; 0xff
 8003c04:	d802      	bhi.n	8003c0c <HAL_GPIO_Init+0x14c>
 8003c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	e002      	b.n	8003c12 <HAL_GPIO_Init+0x152>
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0e:	3b08      	subs	r3, #8
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	210f      	movs	r1, #15
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c20:	43db      	mvns	r3, r3
 8003c22:	401a      	ands	r2, r3
 8003c24:	6a39      	ldr	r1, [r7, #32]
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	fa01 f303 	lsl.w	r3, r1, r3
 8003c2c:	431a      	orrs	r2, r3
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	f000 80b1 	beq.w	8003da2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003c40:	4b4d      	ldr	r3, [pc, #308]	; (8003d78 <HAL_GPIO_Init+0x2b8>)
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	4a4c      	ldr	r2, [pc, #304]	; (8003d78 <HAL_GPIO_Init+0x2b8>)
 8003c46:	f043 0301 	orr.w	r3, r3, #1
 8003c4a:	6193      	str	r3, [r2, #24]
 8003c4c:	4b4a      	ldr	r3, [pc, #296]	; (8003d78 <HAL_GPIO_Init+0x2b8>)
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	f003 0301 	and.w	r3, r3, #1
 8003c54:	60bb      	str	r3, [r7, #8]
 8003c56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003c58:	4a48      	ldr	r2, [pc, #288]	; (8003d7c <HAL_GPIO_Init+0x2bc>)
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5c:	089b      	lsrs	r3, r3, #2
 8003c5e:	3302      	adds	r3, #2
 8003c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c68:	f003 0303 	and.w	r3, r3, #3
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	220f      	movs	r2, #15
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	43db      	mvns	r3, r3
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a40      	ldr	r2, [pc, #256]	; (8003d80 <HAL_GPIO_Init+0x2c0>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d013      	beq.n	8003cac <HAL_GPIO_Init+0x1ec>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a3f      	ldr	r2, [pc, #252]	; (8003d84 <HAL_GPIO_Init+0x2c4>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d00d      	beq.n	8003ca8 <HAL_GPIO_Init+0x1e8>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a3e      	ldr	r2, [pc, #248]	; (8003d88 <HAL_GPIO_Init+0x2c8>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d007      	beq.n	8003ca4 <HAL_GPIO_Init+0x1e4>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a3d      	ldr	r2, [pc, #244]	; (8003d8c <HAL_GPIO_Init+0x2cc>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d101      	bne.n	8003ca0 <HAL_GPIO_Init+0x1e0>
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e006      	b.n	8003cae <HAL_GPIO_Init+0x1ee>
 8003ca0:	2304      	movs	r3, #4
 8003ca2:	e004      	b.n	8003cae <HAL_GPIO_Init+0x1ee>
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	e002      	b.n	8003cae <HAL_GPIO_Init+0x1ee>
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e000      	b.n	8003cae <HAL_GPIO_Init+0x1ee>
 8003cac:	2300      	movs	r3, #0
 8003cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb0:	f002 0203 	and.w	r2, r2, #3
 8003cb4:	0092      	lsls	r2, r2, #2
 8003cb6:	4093      	lsls	r3, r2
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003cbe:	492f      	ldr	r1, [pc, #188]	; (8003d7c <HAL_GPIO_Init+0x2bc>)
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc2:	089b      	lsrs	r3, r3, #2
 8003cc4:	3302      	adds	r3, #2
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d006      	beq.n	8003ce6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003cd8:	4b2d      	ldr	r3, [pc, #180]	; (8003d90 <HAL_GPIO_Init+0x2d0>)
 8003cda:	689a      	ldr	r2, [r3, #8]
 8003cdc:	492c      	ldr	r1, [pc, #176]	; (8003d90 <HAL_GPIO_Init+0x2d0>)
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	608b      	str	r3, [r1, #8]
 8003ce4:	e006      	b.n	8003cf4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003ce6:	4b2a      	ldr	r3, [pc, #168]	; (8003d90 <HAL_GPIO_Init+0x2d0>)
 8003ce8:	689a      	ldr	r2, [r3, #8]
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	43db      	mvns	r3, r3
 8003cee:	4928      	ldr	r1, [pc, #160]	; (8003d90 <HAL_GPIO_Init+0x2d0>)
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d006      	beq.n	8003d0e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003d00:	4b23      	ldr	r3, [pc, #140]	; (8003d90 <HAL_GPIO_Init+0x2d0>)
 8003d02:	68da      	ldr	r2, [r3, #12]
 8003d04:	4922      	ldr	r1, [pc, #136]	; (8003d90 <HAL_GPIO_Init+0x2d0>)
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	60cb      	str	r3, [r1, #12]
 8003d0c:	e006      	b.n	8003d1c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003d0e:	4b20      	ldr	r3, [pc, #128]	; (8003d90 <HAL_GPIO_Init+0x2d0>)
 8003d10:	68da      	ldr	r2, [r3, #12]
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	43db      	mvns	r3, r3
 8003d16:	491e      	ldr	r1, [pc, #120]	; (8003d90 <HAL_GPIO_Init+0x2d0>)
 8003d18:	4013      	ands	r3, r2
 8003d1a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d006      	beq.n	8003d36 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003d28:	4b19      	ldr	r3, [pc, #100]	; (8003d90 <HAL_GPIO_Init+0x2d0>)
 8003d2a:	685a      	ldr	r2, [r3, #4]
 8003d2c:	4918      	ldr	r1, [pc, #96]	; (8003d90 <HAL_GPIO_Init+0x2d0>)
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	604b      	str	r3, [r1, #4]
 8003d34:	e006      	b.n	8003d44 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003d36:	4b16      	ldr	r3, [pc, #88]	; (8003d90 <HAL_GPIO_Init+0x2d0>)
 8003d38:	685a      	ldr	r2, [r3, #4]
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	43db      	mvns	r3, r3
 8003d3e:	4914      	ldr	r1, [pc, #80]	; (8003d90 <HAL_GPIO_Init+0x2d0>)
 8003d40:	4013      	ands	r3, r2
 8003d42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d021      	beq.n	8003d94 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003d50:	4b0f      	ldr	r3, [pc, #60]	; (8003d90 <HAL_GPIO_Init+0x2d0>)
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	490e      	ldr	r1, [pc, #56]	; (8003d90 <HAL_GPIO_Init+0x2d0>)
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	600b      	str	r3, [r1, #0]
 8003d5c:	e021      	b.n	8003da2 <HAL_GPIO_Init+0x2e2>
 8003d5e:	bf00      	nop
 8003d60:	10320000 	.word	0x10320000
 8003d64:	10310000 	.word	0x10310000
 8003d68:	10220000 	.word	0x10220000
 8003d6c:	10210000 	.word	0x10210000
 8003d70:	10120000 	.word	0x10120000
 8003d74:	10110000 	.word	0x10110000
 8003d78:	40021000 	.word	0x40021000
 8003d7c:	40010000 	.word	0x40010000
 8003d80:	40010800 	.word	0x40010800
 8003d84:	40010c00 	.word	0x40010c00
 8003d88:	40011000 	.word	0x40011000
 8003d8c:	40011400 	.word	0x40011400
 8003d90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003d94:	4b0b      	ldr	r3, [pc, #44]	; (8003dc4 <HAL_GPIO_Init+0x304>)
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	43db      	mvns	r3, r3
 8003d9c:	4909      	ldr	r1, [pc, #36]	; (8003dc4 <HAL_GPIO_Init+0x304>)
 8003d9e:	4013      	ands	r3, r2
 8003da0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da4:	3301      	adds	r3, #1
 8003da6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dae:	fa22 f303 	lsr.w	r3, r2, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	f47f ae8e 	bne.w	8003ad4 <HAL_GPIO_Init+0x14>
  }
}
 8003db8:	bf00      	nop
 8003dba:	bf00      	nop
 8003dbc:	372c      	adds	r7, #44	; 0x2c
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bc80      	pop	{r7}
 8003dc2:	4770      	bx	lr
 8003dc4:	40010400 	.word	0x40010400

08003dc8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689a      	ldr	r2, [r3, #8]
 8003dd8:	887b      	ldrh	r3, [r7, #2]
 8003dda:	4013      	ands	r3, r2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d002      	beq.n	8003de6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003de0:	2301      	movs	r3, #1
 8003de2:	73fb      	strb	r3, [r7, #15]
 8003de4:	e001      	b.n	8003dea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003de6:	2300      	movs	r3, #0
 8003de8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3714      	adds	r7, #20
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bc80      	pop	{r7}
 8003df4:	4770      	bx	lr

08003df6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003df6:	b480      	push	{r7}
 8003df8:	b083      	sub	sp, #12
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
 8003dfe:	460b      	mov	r3, r1
 8003e00:	807b      	strh	r3, [r7, #2]
 8003e02:	4613      	mov	r3, r2
 8003e04:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e06:	787b      	ldrb	r3, [r7, #1]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d003      	beq.n	8003e14 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e0c:	887a      	ldrh	r2, [r7, #2]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003e12:	e003      	b.n	8003e1c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003e14:	887b      	ldrh	r3, [r7, #2]
 8003e16:	041a      	lsls	r2, r3, #16
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	611a      	str	r2, [r3, #16]
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bc80      	pop	{r7}
 8003e24:	4770      	bx	lr
	...

08003e28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e12b      	b.n	8004092 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d106      	bne.n	8003e54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7fe ffb2 	bl	8002db8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2224      	movs	r2, #36	; 0x24
 8003e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 0201 	bic.w	r2, r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e8c:	f002 f8ec 	bl	8006068 <HAL_RCC_GetPCLK1Freq>
 8003e90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	4a81      	ldr	r2, [pc, #516]	; (800409c <HAL_I2C_Init+0x274>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d807      	bhi.n	8003eac <HAL_I2C_Init+0x84>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	4a80      	ldr	r2, [pc, #512]	; (80040a0 <HAL_I2C_Init+0x278>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	bf94      	ite	ls
 8003ea4:	2301      	movls	r3, #1
 8003ea6:	2300      	movhi	r3, #0
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	e006      	b.n	8003eba <HAL_I2C_Init+0x92>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	4a7d      	ldr	r2, [pc, #500]	; (80040a4 <HAL_I2C_Init+0x27c>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	bf94      	ite	ls
 8003eb4:	2301      	movls	r3, #1
 8003eb6:	2300      	movhi	r3, #0
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d001      	beq.n	8003ec2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e0e7      	b.n	8004092 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	4a78      	ldr	r2, [pc, #480]	; (80040a8 <HAL_I2C_Init+0x280>)
 8003ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eca:	0c9b      	lsrs	r3, r3, #18
 8003ecc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68ba      	ldr	r2, [r7, #8]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	6a1b      	ldr	r3, [r3, #32]
 8003ee8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	4a6a      	ldr	r2, [pc, #424]	; (800409c <HAL_I2C_Init+0x274>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d802      	bhi.n	8003efc <HAL_I2C_Init+0xd4>
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	e009      	b.n	8003f10 <HAL_I2C_Init+0xe8>
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f02:	fb02 f303 	mul.w	r3, r2, r3
 8003f06:	4a69      	ldr	r2, [pc, #420]	; (80040ac <HAL_I2C_Init+0x284>)
 8003f08:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0c:	099b      	lsrs	r3, r3, #6
 8003f0e:	3301      	adds	r3, #1
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	6812      	ldr	r2, [r2, #0]
 8003f14:	430b      	orrs	r3, r1
 8003f16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	69db      	ldr	r3, [r3, #28]
 8003f1e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003f22:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	495c      	ldr	r1, [pc, #368]	; (800409c <HAL_I2C_Init+0x274>)
 8003f2c:	428b      	cmp	r3, r1
 8003f2e:	d819      	bhi.n	8003f64 <HAL_I2C_Init+0x13c>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	1e59      	subs	r1, r3, #1
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f3e:	1c59      	adds	r1, r3, #1
 8003f40:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003f44:	400b      	ands	r3, r1
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00a      	beq.n	8003f60 <HAL_I2C_Init+0x138>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	1e59      	subs	r1, r3, #1
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	005b      	lsls	r3, r3, #1
 8003f54:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f58:	3301      	adds	r3, #1
 8003f5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f5e:	e051      	b.n	8004004 <HAL_I2C_Init+0x1dc>
 8003f60:	2304      	movs	r3, #4
 8003f62:	e04f      	b.n	8004004 <HAL_I2C_Init+0x1dc>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d111      	bne.n	8003f90 <HAL_I2C_Init+0x168>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	1e58      	subs	r0, r3, #1
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6859      	ldr	r1, [r3, #4]
 8003f74:	460b      	mov	r3, r1
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	440b      	add	r3, r1
 8003f7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f7e:	3301      	adds	r3, #1
 8003f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	bf0c      	ite	eq
 8003f88:	2301      	moveq	r3, #1
 8003f8a:	2300      	movne	r3, #0
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	e012      	b.n	8003fb6 <HAL_I2C_Init+0x18e>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	1e58      	subs	r0, r3, #1
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6859      	ldr	r1, [r3, #4]
 8003f98:	460b      	mov	r3, r1
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	440b      	add	r3, r1
 8003f9e:	0099      	lsls	r1, r3, #2
 8003fa0:	440b      	add	r3, r1
 8003fa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	bf0c      	ite	eq
 8003fb0:	2301      	moveq	r3, #1
 8003fb2:	2300      	movne	r3, #0
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <HAL_I2C_Init+0x196>
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e022      	b.n	8004004 <HAL_I2C_Init+0x1dc>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10e      	bne.n	8003fe4 <HAL_I2C_Init+0x1bc>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	1e58      	subs	r0, r3, #1
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6859      	ldr	r1, [r3, #4]
 8003fce:	460b      	mov	r3, r1
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	440b      	add	r3, r1
 8003fd4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fd8:	3301      	adds	r3, #1
 8003fda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fe2:	e00f      	b.n	8004004 <HAL_I2C_Init+0x1dc>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	1e58      	subs	r0, r3, #1
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6859      	ldr	r1, [r3, #4]
 8003fec:	460b      	mov	r3, r1
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	440b      	add	r3, r1
 8003ff2:	0099      	lsls	r1, r3, #2
 8003ff4:	440b      	add	r3, r1
 8003ff6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004000:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004004:	6879      	ldr	r1, [r7, #4]
 8004006:	6809      	ldr	r1, [r1, #0]
 8004008:	4313      	orrs	r3, r2
 800400a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	69da      	ldr	r2, [r3, #28]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	431a      	orrs	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	430a      	orrs	r2, r1
 8004026:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004032:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	6911      	ldr	r1, [r2, #16]
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	68d2      	ldr	r2, [r2, #12]
 800403e:	4311      	orrs	r1, r2
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6812      	ldr	r2, [r2, #0]
 8004044:	430b      	orrs	r3, r1
 8004046:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	695a      	ldr	r2, [r3, #20]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	431a      	orrs	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	430a      	orrs	r2, r1
 8004062:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f042 0201 	orr.w	r2, r2, #1
 8004072:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2220      	movs	r2, #32
 800407e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	000186a0 	.word	0x000186a0
 80040a0:	001e847f 	.word	0x001e847f
 80040a4:	003d08ff 	.word	0x003d08ff
 80040a8:	431bde83 	.word	0x431bde83
 80040ac:	10624dd3 	.word	0x10624dd3

080040b0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b088      	sub	sp, #32
 80040b4:	af02      	add	r7, sp, #8
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	607a      	str	r2, [r7, #4]
 80040ba:	461a      	mov	r2, r3
 80040bc:	460b      	mov	r3, r1
 80040be:	817b      	strh	r3, [r7, #10]
 80040c0:	4613      	mov	r3, r2
 80040c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040c4:	f7ff f8e0 	bl	8003288 <HAL_GetTick>
 80040c8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b20      	cmp	r3, #32
 80040d4:	f040 80e0 	bne.w	8004298 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	9300      	str	r3, [sp, #0]
 80040dc:	2319      	movs	r3, #25
 80040de:	2201      	movs	r2, #1
 80040e0:	4970      	ldr	r1, [pc, #448]	; (80042a4 <HAL_I2C_Master_Transmit+0x1f4>)
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f001 f97e 	bl	80053e4 <I2C_WaitOnFlagUntilTimeout>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d001      	beq.n	80040f2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80040ee:	2302      	movs	r3, #2
 80040f0:	e0d3      	b.n	800429a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d101      	bne.n	8004100 <HAL_I2C_Master_Transmit+0x50>
 80040fc:	2302      	movs	r3, #2
 80040fe:	e0cc      	b.n	800429a <HAL_I2C_Master_Transmit+0x1ea>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b01      	cmp	r3, #1
 8004114:	d007      	beq.n	8004126 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f042 0201 	orr.w	r2, r2, #1
 8004124:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004134:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2221      	movs	r2, #33	; 0x21
 800413a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2210      	movs	r2, #16
 8004142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	893a      	ldrh	r2, [r7, #8]
 8004156:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415c:	b29a      	uxth	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	4a50      	ldr	r2, [pc, #320]	; (80042a8 <HAL_I2C_Master_Transmit+0x1f8>)
 8004166:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004168:	8979      	ldrh	r1, [r7, #10]
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	6a3a      	ldr	r2, [r7, #32]
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f000 fe6a 	bl	8004e48 <I2C_MasterRequestWrite>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d001      	beq.n	800417e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e08d      	b.n	800429a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800417e:	2300      	movs	r3, #0
 8004180:	613b      	str	r3, [r7, #16]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	613b      	str	r3, [r7, #16]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	613b      	str	r3, [r7, #16]
 8004192:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004194:	e066      	b.n	8004264 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	6a39      	ldr	r1, [r7, #32]
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f001 fa3c 	bl	8005618 <I2C_WaitOnTXEFlagUntilTimeout>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00d      	beq.n	80041c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041aa:	2b04      	cmp	r3, #4
 80041ac:	d107      	bne.n	80041be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e06b      	b.n	800429a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c6:	781a      	ldrb	r2, [r3, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	1c5a      	adds	r2, r3, #1
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041dc:	b29b      	uxth	r3, r3
 80041de:	3b01      	subs	r3, #1
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ea:	3b01      	subs	r3, #1
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	f003 0304 	and.w	r3, r3, #4
 80041fc:	2b04      	cmp	r3, #4
 80041fe:	d11b      	bne.n	8004238 <HAL_I2C_Master_Transmit+0x188>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004204:	2b00      	cmp	r3, #0
 8004206:	d017      	beq.n	8004238 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420c:	781a      	ldrb	r2, [r3, #0]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004218:	1c5a      	adds	r2, r3, #1
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004222:	b29b      	uxth	r3, r3
 8004224:	3b01      	subs	r3, #1
 8004226:	b29a      	uxth	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004230:	3b01      	subs	r3, #1
 8004232:	b29a      	uxth	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	6a39      	ldr	r1, [r7, #32]
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f001 fa33 	bl	80056a8 <I2C_WaitOnBTFFlagUntilTimeout>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00d      	beq.n	8004264 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424c:	2b04      	cmp	r3, #4
 800424e:	d107      	bne.n	8004260 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800425e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e01a      	b.n	800429a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004268:	2b00      	cmp	r3, #0
 800426a:	d194      	bne.n	8004196 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800427a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2220      	movs	r2, #32
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004294:	2300      	movs	r3, #0
 8004296:	e000      	b.n	800429a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004298:	2302      	movs	r3, #2
  }
}
 800429a:	4618      	mov	r0, r3
 800429c:	3718      	adds	r7, #24
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	00100002 	.word	0x00100002
 80042a8:	ffff0000 	.word	0xffff0000

080042ac <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b08c      	sub	sp, #48	; 0x30
 80042b0:	af02      	add	r7, sp, #8
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	607a      	str	r2, [r7, #4]
 80042b6:	461a      	mov	r2, r3
 80042b8:	460b      	mov	r3, r1
 80042ba:	817b      	strh	r3, [r7, #10]
 80042bc:	4613      	mov	r3, r2
 80042be:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80042c0:	2300      	movs	r3, #0
 80042c2:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042c4:	f7fe ffe0 	bl	8003288 <HAL_GetTick>
 80042c8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b20      	cmp	r3, #32
 80042d4:	f040 824b 	bne.w	800476e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042da:	9300      	str	r3, [sp, #0]
 80042dc:	2319      	movs	r3, #25
 80042de:	2201      	movs	r2, #1
 80042e0:	497f      	ldr	r1, [pc, #508]	; (80044e0 <HAL_I2C_Master_Receive+0x234>)
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f001 f87e 	bl	80053e4 <I2C_WaitOnFlagUntilTimeout>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d001      	beq.n	80042f2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80042ee:	2302      	movs	r3, #2
 80042f0:	e23e      	b.n	8004770 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d101      	bne.n	8004300 <HAL_I2C_Master_Receive+0x54>
 80042fc:	2302      	movs	r3, #2
 80042fe:	e237      	b.n	8004770 <HAL_I2C_Master_Receive+0x4c4>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0301 	and.w	r3, r3, #1
 8004312:	2b01      	cmp	r3, #1
 8004314:	d007      	beq.n	8004326 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f042 0201 	orr.w	r2, r2, #1
 8004324:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004334:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2222      	movs	r2, #34	; 0x22
 800433a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2210      	movs	r2, #16
 8004342:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	893a      	ldrh	r2, [r7, #8]
 8004356:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800435c:	b29a      	uxth	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	4a5f      	ldr	r2, [pc, #380]	; (80044e4 <HAL_I2C_Master_Receive+0x238>)
 8004366:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004368:	8979      	ldrh	r1, [r7, #10]
 800436a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f000 fdec 	bl	8004f4c <I2C_MasterRequestRead>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e1f8      	b.n	8004770 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004382:	2b00      	cmp	r3, #0
 8004384:	d113      	bne.n	80043ae <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004386:	2300      	movs	r3, #0
 8004388:	61fb      	str	r3, [r7, #28]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	61fb      	str	r3, [r7, #28]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	61fb      	str	r3, [r7, #28]
 800439a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	e1cc      	b.n	8004748 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d11e      	bne.n	80043f4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043c4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80043c6:	b672      	cpsid	i
}
 80043c8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ca:	2300      	movs	r3, #0
 80043cc:	61bb      	str	r3, [r7, #24]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	695b      	ldr	r3, [r3, #20]
 80043d4:	61bb      	str	r3, [r7, #24]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	61bb      	str	r3, [r7, #24]
 80043de:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80043f0:	b662      	cpsie	i
}
 80043f2:	e035      	b.n	8004460 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d11e      	bne.n	800443a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800440a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800440c:	b672      	cpsid	i
}
 800440e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004410:	2300      	movs	r3, #0
 8004412:	617b      	str	r3, [r7, #20]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	617b      	str	r3, [r7, #20]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	617b      	str	r3, [r7, #20]
 8004424:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004434:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004436:	b662      	cpsie	i
}
 8004438:	e012      	b.n	8004460 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004448:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800444a:	2300      	movs	r3, #0
 800444c:	613b      	str	r3, [r7, #16]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	695b      	ldr	r3, [r3, #20]
 8004454:	613b      	str	r3, [r7, #16]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	613b      	str	r3, [r7, #16]
 800445e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004460:	e172      	b.n	8004748 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004466:	2b03      	cmp	r3, #3
 8004468:	f200 811f 	bhi.w	80046aa <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004470:	2b01      	cmp	r3, #1
 8004472:	d123      	bne.n	80044bc <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004476:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f001 f95d 	bl	8005738 <I2C_WaitOnRXNEFlagUntilTimeout>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d001      	beq.n	8004488 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e173      	b.n	8004770 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	691a      	ldr	r2, [r3, #16]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004492:	b2d2      	uxtb	r2, r2
 8004494:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449a:	1c5a      	adds	r2, r3, #1
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044a4:	3b01      	subs	r3, #1
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	3b01      	subs	r3, #1
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044ba:	e145      	b.n	8004748 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d152      	bne.n	800456a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ca:	2200      	movs	r2, #0
 80044cc:	4906      	ldr	r1, [pc, #24]	; (80044e8 <HAL_I2C_Master_Receive+0x23c>)
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f000 ff88 	bl	80053e4 <I2C_WaitOnFlagUntilTimeout>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d008      	beq.n	80044ec <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e148      	b.n	8004770 <HAL_I2C_Master_Receive+0x4c4>
 80044de:	bf00      	nop
 80044e0:	00100002 	.word	0x00100002
 80044e4:	ffff0000 	.word	0xffff0000
 80044e8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80044ec:	b672      	cpsid	i
}
 80044ee:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	691a      	ldr	r2, [r3, #16]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450a:	b2d2      	uxtb	r2, r2
 800450c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004512:	1c5a      	adds	r2, r3, #1
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800451c:	3b01      	subs	r3, #1
 800451e:	b29a      	uxth	r2, r3
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004528:	b29b      	uxth	r3, r3
 800452a:	3b01      	subs	r3, #1
 800452c:	b29a      	uxth	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004532:	b662      	cpsie	i
}
 8004534:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	691a      	ldr	r2, [r3, #16]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004540:	b2d2      	uxtb	r2, r2
 8004542:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004548:	1c5a      	adds	r2, r3, #1
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004552:	3b01      	subs	r3, #1
 8004554:	b29a      	uxth	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800455e:	b29b      	uxth	r3, r3
 8004560:	3b01      	subs	r3, #1
 8004562:	b29a      	uxth	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004568:	e0ee      	b.n	8004748 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800456a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456c:	9300      	str	r3, [sp, #0]
 800456e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004570:	2200      	movs	r2, #0
 8004572:	4981      	ldr	r1, [pc, #516]	; (8004778 <HAL_I2C_Master_Receive+0x4cc>)
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f000 ff35 	bl	80053e4 <I2C_WaitOnFlagUntilTimeout>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d001      	beq.n	8004584 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e0f5      	b.n	8004770 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004592:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004594:	b672      	cpsid	i
}
 8004596:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	691a      	ldr	r2, [r3, #16]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a2:	b2d2      	uxtb	r2, r2
 80045a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045aa:	1c5a      	adds	r2, r3, #1
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b4:	3b01      	subs	r3, #1
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	3b01      	subs	r3, #1
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80045ca:	4b6c      	ldr	r3, [pc, #432]	; (800477c <HAL_I2C_Master_Receive+0x4d0>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	08db      	lsrs	r3, r3, #3
 80045d0:	4a6b      	ldr	r2, [pc, #428]	; (8004780 <HAL_I2C_Master_Receive+0x4d4>)
 80045d2:	fba2 2303 	umull	r2, r3, r2, r3
 80045d6:	0a1a      	lsrs	r2, r3, #8
 80045d8:	4613      	mov	r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4413      	add	r3, r2
 80045de:	00da      	lsls	r2, r3, #3
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80045e4:	6a3b      	ldr	r3, [r7, #32]
 80045e6:	3b01      	subs	r3, #1
 80045e8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80045ea:	6a3b      	ldr	r3, [r7, #32]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d118      	bne.n	8004622 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2220      	movs	r2, #32
 80045fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460a:	f043 0220 	orr.w	r2, r3, #32
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004612:	b662      	cpsie	i
}
 8004614:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e0a6      	b.n	8004770 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	f003 0304 	and.w	r3, r3, #4
 800462c:	2b04      	cmp	r3, #4
 800462e:	d1d9      	bne.n	80045e4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800463e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	691a      	ldr	r2, [r3, #16]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464a:	b2d2      	uxtb	r2, r2
 800464c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004652:	1c5a      	adds	r2, r3, #1
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800465c:	3b01      	subs	r3, #1
 800465e:	b29a      	uxth	r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004668:	b29b      	uxth	r3, r3
 800466a:	3b01      	subs	r3, #1
 800466c:	b29a      	uxth	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004672:	b662      	cpsie	i
}
 8004674:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	691a      	ldr	r2, [r3, #16]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004680:	b2d2      	uxtb	r2, r2
 8004682:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004688:	1c5a      	adds	r2, r3, #1
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004692:	3b01      	subs	r3, #1
 8004694:	b29a      	uxth	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800469e:	b29b      	uxth	r3, r3
 80046a0:	3b01      	subs	r3, #1
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046a8:	e04e      	b.n	8004748 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f001 f842 	bl	8005738 <I2C_WaitOnRXNEFlagUntilTimeout>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d001      	beq.n	80046be <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e058      	b.n	8004770 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	691a      	ldr	r2, [r3, #16]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c8:	b2d2      	uxtb	r2, r2
 80046ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d0:	1c5a      	adds	r2, r3, #1
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046da:	3b01      	subs	r3, #1
 80046dc:	b29a      	uxth	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	3b01      	subs	r3, #1
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	f003 0304 	and.w	r3, r3, #4
 80046fa:	2b04      	cmp	r3, #4
 80046fc:	d124      	bne.n	8004748 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004702:	2b03      	cmp	r3, #3
 8004704:	d107      	bne.n	8004716 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004714:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	691a      	ldr	r2, [r3, #16]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004720:	b2d2      	uxtb	r2, r2
 8004722:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004728:	1c5a      	adds	r2, r3, #1
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004732:	3b01      	subs	r3, #1
 8004734:	b29a      	uxth	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800473e:	b29b      	uxth	r3, r3
 8004740:	3b01      	subs	r3, #1
 8004742:	b29a      	uxth	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800474c:	2b00      	cmp	r3, #0
 800474e:	f47f ae88 	bne.w	8004462 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2220      	movs	r2, #32
 8004756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800476a:	2300      	movs	r3, #0
 800476c:	e000      	b.n	8004770 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800476e:	2302      	movs	r3, #2
  }
}
 8004770:	4618      	mov	r0, r3
 8004772:	3728      	adds	r7, #40	; 0x28
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	00010004 	.word	0x00010004
 800477c:	20000000 	.word	0x20000000
 8004780:	14f8b589 	.word	0x14f8b589

08004784 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b088      	sub	sp, #32
 8004788:	af02      	add	r7, sp, #8
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	4608      	mov	r0, r1
 800478e:	4611      	mov	r1, r2
 8004790:	461a      	mov	r2, r3
 8004792:	4603      	mov	r3, r0
 8004794:	817b      	strh	r3, [r7, #10]
 8004796:	460b      	mov	r3, r1
 8004798:	813b      	strh	r3, [r7, #8]
 800479a:	4613      	mov	r3, r2
 800479c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800479e:	f7fe fd73 	bl	8003288 <HAL_GetTick>
 80047a2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b20      	cmp	r3, #32
 80047ae:	f040 80d9 	bne.w	8004964 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	9300      	str	r3, [sp, #0]
 80047b6:	2319      	movs	r3, #25
 80047b8:	2201      	movs	r2, #1
 80047ba:	496d      	ldr	r1, [pc, #436]	; (8004970 <HAL_I2C_Mem_Write+0x1ec>)
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	f000 fe11 	bl	80053e4 <I2C_WaitOnFlagUntilTimeout>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d001      	beq.n	80047cc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80047c8:	2302      	movs	r3, #2
 80047ca:	e0cc      	b.n	8004966 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d101      	bne.n	80047da <HAL_I2C_Mem_Write+0x56>
 80047d6:	2302      	movs	r3, #2
 80047d8:	e0c5      	b.n	8004966 <HAL_I2C_Mem_Write+0x1e2>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0301 	and.w	r3, r3, #1
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d007      	beq.n	8004800 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f042 0201 	orr.w	r2, r2, #1
 80047fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800480e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2221      	movs	r2, #33	; 0x21
 8004814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2240      	movs	r2, #64	; 0x40
 800481c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6a3a      	ldr	r2, [r7, #32]
 800482a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004830:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004836:	b29a      	uxth	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	4a4d      	ldr	r2, [pc, #308]	; (8004974 <HAL_I2C_Mem_Write+0x1f0>)
 8004840:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004842:	88f8      	ldrh	r0, [r7, #6]
 8004844:	893a      	ldrh	r2, [r7, #8]
 8004846:	8979      	ldrh	r1, [r7, #10]
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	9301      	str	r3, [sp, #4]
 800484c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484e:	9300      	str	r3, [sp, #0]
 8004850:	4603      	mov	r3, r0
 8004852:	68f8      	ldr	r0, [r7, #12]
 8004854:	f000 fc48 	bl	80050e8 <I2C_RequestMemoryWrite>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d052      	beq.n	8004904 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e081      	b.n	8004966 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f000 fed6 	bl	8005618 <I2C_WaitOnTXEFlagUntilTimeout>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00d      	beq.n	800488e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	2b04      	cmp	r3, #4
 8004878:	d107      	bne.n	800488a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004888:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e06b      	b.n	8004966 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004892:	781a      	ldrb	r2, [r3, #0]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489e:	1c5a      	adds	r2, r3, #1
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048a8:	3b01      	subs	r3, #1
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	3b01      	subs	r3, #1
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	f003 0304 	and.w	r3, r3, #4
 80048c8:	2b04      	cmp	r3, #4
 80048ca:	d11b      	bne.n	8004904 <HAL_I2C_Mem_Write+0x180>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d017      	beq.n	8004904 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d8:	781a      	ldrb	r2, [r3, #0]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e4:	1c5a      	adds	r2, r3, #1
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ee:	3b01      	subs	r3, #1
 80048f0:	b29a      	uxth	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	3b01      	subs	r3, #1
 80048fe:	b29a      	uxth	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1aa      	bne.n	8004862 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800490c:	697a      	ldr	r2, [r7, #20]
 800490e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	f000 fec9 	bl	80056a8 <I2C_WaitOnBTFFlagUntilTimeout>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00d      	beq.n	8004938 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004920:	2b04      	cmp	r3, #4
 8004922:	d107      	bne.n	8004934 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004932:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e016      	b.n	8004966 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004946:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2220      	movs	r2, #32
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004960:	2300      	movs	r3, #0
 8004962:	e000      	b.n	8004966 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004964:	2302      	movs	r3, #2
  }
}
 8004966:	4618      	mov	r0, r3
 8004968:	3718      	adds	r7, #24
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	00100002 	.word	0x00100002
 8004974:	ffff0000 	.word	0xffff0000

08004978 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b08c      	sub	sp, #48	; 0x30
 800497c:	af02      	add	r7, sp, #8
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	4608      	mov	r0, r1
 8004982:	4611      	mov	r1, r2
 8004984:	461a      	mov	r2, r3
 8004986:	4603      	mov	r3, r0
 8004988:	817b      	strh	r3, [r7, #10]
 800498a:	460b      	mov	r3, r1
 800498c:	813b      	strh	r3, [r7, #8]
 800498e:	4613      	mov	r3, r2
 8004990:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004992:	2300      	movs	r3, #0
 8004994:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004996:	f7fe fc77 	bl	8003288 <HAL_GetTick>
 800499a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	2b20      	cmp	r3, #32
 80049a6:	f040 8244 	bne.w	8004e32 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ac:	9300      	str	r3, [sp, #0]
 80049ae:	2319      	movs	r3, #25
 80049b0:	2201      	movs	r2, #1
 80049b2:	4982      	ldr	r1, [pc, #520]	; (8004bbc <HAL_I2C_Mem_Read+0x244>)
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f000 fd15 	bl	80053e4 <I2C_WaitOnFlagUntilTimeout>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d001      	beq.n	80049c4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80049c0:	2302      	movs	r3, #2
 80049c2:	e237      	b.n	8004e34 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d101      	bne.n	80049d2 <HAL_I2C_Mem_Read+0x5a>
 80049ce:	2302      	movs	r3, #2
 80049d0:	e230      	b.n	8004e34 <HAL_I2C_Mem_Read+0x4bc>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2201      	movs	r2, #1
 80049d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0301 	and.w	r3, r3, #1
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d007      	beq.n	80049f8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f042 0201 	orr.w	r2, r2, #1
 80049f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2222      	movs	r2, #34	; 0x22
 8004a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2240      	movs	r2, #64	; 0x40
 8004a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004a28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	4a62      	ldr	r2, [pc, #392]	; (8004bc0 <HAL_I2C_Mem_Read+0x248>)
 8004a38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a3a:	88f8      	ldrh	r0, [r7, #6]
 8004a3c:	893a      	ldrh	r2, [r7, #8]
 8004a3e:	8979      	ldrh	r1, [r7, #10]
 8004a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a42:	9301      	str	r3, [sp, #4]
 8004a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a46:	9300      	str	r3, [sp, #0]
 8004a48:	4603      	mov	r3, r0
 8004a4a:	68f8      	ldr	r0, [r7, #12]
 8004a4c:	f000 fbe2 	bl	8005214 <I2C_RequestMemoryRead>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e1ec      	b.n	8004e34 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d113      	bne.n	8004a8a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a62:	2300      	movs	r3, #0
 8004a64:	61fb      	str	r3, [r7, #28]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	61fb      	str	r3, [r7, #28]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	61fb      	str	r3, [r7, #28]
 8004a76:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a86:	601a      	str	r2, [r3, #0]
 8004a88:	e1c0      	b.n	8004e0c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d11e      	bne.n	8004ad0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aa0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004aa2:	b672      	cpsid	i
}
 8004aa4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	61bb      	str	r3, [r7, #24]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	695b      	ldr	r3, [r3, #20]
 8004ab0:	61bb      	str	r3, [r7, #24]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	699b      	ldr	r3, [r3, #24]
 8004ab8:	61bb      	str	r3, [r7, #24]
 8004aba:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004acc:	b662      	cpsie	i
}
 8004ace:	e035      	b.n	8004b3c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d11e      	bne.n	8004b16 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ae6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004ae8:	b672      	cpsid	i
}
 8004aea:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aec:	2300      	movs	r3, #0
 8004aee:	617b      	str	r3, [r7, #20]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	617b      	str	r3, [r7, #20]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	617b      	str	r3, [r7, #20]
 8004b00:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b10:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004b12:	b662      	cpsie	i
}
 8004b14:	e012      	b.n	8004b3c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b24:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b26:	2300      	movs	r3, #0
 8004b28:	613b      	str	r3, [r7, #16]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	695b      	ldr	r3, [r3, #20]
 8004b30:	613b      	str	r3, [r7, #16]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	613b      	str	r3, [r7, #16]
 8004b3a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004b3c:	e166      	b.n	8004e0c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b42:	2b03      	cmp	r3, #3
 8004b44:	f200 811f 	bhi.w	8004d86 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d123      	bne.n	8004b98 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b54:	68f8      	ldr	r0, [r7, #12]
 8004b56:	f000 fdef 	bl	8005738 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d001      	beq.n	8004b64 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e167      	b.n	8004e34 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	691a      	ldr	r2, [r3, #16]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6e:	b2d2      	uxtb	r2, r2
 8004b70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b76:	1c5a      	adds	r2, r3, #1
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b80:	3b01      	subs	r3, #1
 8004b82:	b29a      	uxth	r2, r3
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	b29a      	uxth	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b96:	e139      	b.n	8004e0c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d152      	bne.n	8004c46 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba2:	9300      	str	r3, [sp, #0]
 8004ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	4906      	ldr	r1, [pc, #24]	; (8004bc4 <HAL_I2C_Mem_Read+0x24c>)
 8004baa:	68f8      	ldr	r0, [r7, #12]
 8004bac:	f000 fc1a 	bl	80053e4 <I2C_WaitOnFlagUntilTimeout>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d008      	beq.n	8004bc8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e13c      	b.n	8004e34 <HAL_I2C_Mem_Read+0x4bc>
 8004bba:	bf00      	nop
 8004bbc:	00100002 	.word	0x00100002
 8004bc0:	ffff0000 	.word	0xffff0000
 8004bc4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004bc8:	b672      	cpsid	i
}
 8004bca:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	691a      	ldr	r2, [r3, #16]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be6:	b2d2      	uxtb	r2, r2
 8004be8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bee:	1c5a      	adds	r2, r3, #1
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	b29a      	uxth	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	3b01      	subs	r3, #1
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004c0e:	b662      	cpsie	i
}
 8004c10:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	691a      	ldr	r2, [r3, #16]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1c:	b2d2      	uxtb	r2, r2
 8004c1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c24:	1c5a      	adds	r2, r3, #1
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	b29a      	uxth	r2, r3
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	3b01      	subs	r3, #1
 8004c3e:	b29a      	uxth	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c44:	e0e2      	b.n	8004e0c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c48:	9300      	str	r3, [sp, #0]
 8004c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	497b      	ldr	r1, [pc, #492]	; (8004e3c <HAL_I2C_Mem_Read+0x4c4>)
 8004c50:	68f8      	ldr	r0, [r7, #12]
 8004c52:	f000 fbc7 	bl	80053e4 <I2C_WaitOnFlagUntilTimeout>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d001      	beq.n	8004c60 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e0e9      	b.n	8004e34 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c6e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004c70:	b672      	cpsid	i
}
 8004c72:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	691a      	ldr	r2, [r3, #16]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7e:	b2d2      	uxtb	r2, r2
 8004c80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c86:	1c5a      	adds	r2, r3, #1
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c90:	3b01      	subs	r3, #1
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004ca6:	4b66      	ldr	r3, [pc, #408]	; (8004e40 <HAL_I2C_Mem_Read+0x4c8>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	08db      	lsrs	r3, r3, #3
 8004cac:	4a65      	ldr	r2, [pc, #404]	; (8004e44 <HAL_I2C_Mem_Read+0x4cc>)
 8004cae:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb2:	0a1a      	lsrs	r2, r3, #8
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	4413      	add	r3, r2
 8004cba:	00da      	lsls	r2, r3, #3
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004cc0:	6a3b      	ldr	r3, [r7, #32]
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004cc6:	6a3b      	ldr	r3, [r7, #32]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d118      	bne.n	8004cfe <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2220      	movs	r2, #32
 8004cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce6:	f043 0220 	orr.w	r2, r3, #32
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004cee:	b662      	cpsie	i
}
 8004cf0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e09a      	b.n	8004e34 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	695b      	ldr	r3, [r3, #20]
 8004d04:	f003 0304 	and.w	r3, r3, #4
 8004d08:	2b04      	cmp	r3, #4
 8004d0a:	d1d9      	bne.n	8004cc0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	691a      	ldr	r2, [r3, #16]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d26:	b2d2      	uxtb	r2, r2
 8004d28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2e:	1c5a      	adds	r2, r3, #1
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	3b01      	subs	r3, #1
 8004d48:	b29a      	uxth	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004d4e:	b662      	cpsie	i
}
 8004d50:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	691a      	ldr	r2, [r3, #16]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5c:	b2d2      	uxtb	r2, r2
 8004d5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d64:	1c5a      	adds	r2, r3, #1
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d84:	e042      	b.n	8004e0c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d88:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d8a:	68f8      	ldr	r0, [r7, #12]
 8004d8c:	f000 fcd4 	bl	8005738 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d001      	beq.n	8004d9a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e04c      	b.n	8004e34 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	691a      	ldr	r2, [r3, #16]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da4:	b2d2      	uxtb	r2, r2
 8004da6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dac:	1c5a      	adds	r2, r3, #1
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db6:	3b01      	subs	r3, #1
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	f003 0304 	and.w	r3, r3, #4
 8004dd6:	2b04      	cmp	r3, #4
 8004dd8:	d118      	bne.n	8004e0c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	691a      	ldr	r2, [r3, #16]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de4:	b2d2      	uxtb	r2, r2
 8004de6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dec:	1c5a      	adds	r2, r3, #1
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df6:	3b01      	subs	r3, #1
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	3b01      	subs	r3, #1
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	f47f ae94 	bne.w	8004b3e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2220      	movs	r2, #32
 8004e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	e000      	b.n	8004e34 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8004e32:	2302      	movs	r3, #2
  }
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3728      	adds	r7, #40	; 0x28
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	00010004 	.word	0x00010004
 8004e40:	20000000 	.word	0x20000000
 8004e44:	14f8b589 	.word	0x14f8b589

08004e48 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b088      	sub	sp, #32
 8004e4c:	af02      	add	r7, sp, #8
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	607a      	str	r2, [r7, #4]
 8004e52:	603b      	str	r3, [r7, #0]
 8004e54:	460b      	mov	r3, r1
 8004e56:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	2b08      	cmp	r3, #8
 8004e62:	d006      	beq.n	8004e72 <I2C_MasterRequestWrite+0x2a>
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d003      	beq.n	8004e72 <I2C_MasterRequestWrite+0x2a>
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e70:	d108      	bne.n	8004e84 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e80:	601a      	str	r2, [r3, #0]
 8004e82:	e00b      	b.n	8004e9c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e88:	2b12      	cmp	r3, #18
 8004e8a:	d107      	bne.n	8004e9c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	9300      	str	r3, [sp, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f000 fa9b 	bl	80053e4 <I2C_WaitOnFlagUntilTimeout>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00d      	beq.n	8004ed0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ebe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ec2:	d103      	bne.n	8004ecc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004eca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e035      	b.n	8004f3c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ed8:	d108      	bne.n	8004eec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004eda:	897b      	ldrh	r3, [r7, #10]
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	461a      	mov	r2, r3
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ee8:	611a      	str	r2, [r3, #16]
 8004eea:	e01b      	b.n	8004f24 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004eec:	897b      	ldrh	r3, [r7, #10]
 8004eee:	11db      	asrs	r3, r3, #7
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	f003 0306 	and.w	r3, r3, #6
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	f063 030f 	orn	r3, r3, #15
 8004efc:	b2da      	uxtb	r2, r3
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	490e      	ldr	r1, [pc, #56]	; (8004f44 <I2C_MasterRequestWrite+0xfc>)
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	f000 fae4 	bl	80054d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d001      	beq.n	8004f1a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e010      	b.n	8004f3c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004f1a:	897b      	ldrh	r3, [r7, #10]
 8004f1c:	b2da      	uxtb	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	4907      	ldr	r1, [pc, #28]	; (8004f48 <I2C_MasterRequestWrite+0x100>)
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f000 fad4 	bl	80054d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d001      	beq.n	8004f3a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e000      	b.n	8004f3c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3718      	adds	r7, #24
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	00010008 	.word	0x00010008
 8004f48:	00010002 	.word	0x00010002

08004f4c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b088      	sub	sp, #32
 8004f50:	af02      	add	r7, sp, #8
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	607a      	str	r2, [r7, #4]
 8004f56:	603b      	str	r3, [r7, #0]
 8004f58:	460b      	mov	r3, r1
 8004f5a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f60:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f70:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	2b08      	cmp	r3, #8
 8004f76:	d006      	beq.n	8004f86 <I2C_MasterRequestRead+0x3a>
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d003      	beq.n	8004f86 <I2C_MasterRequestRead+0x3a>
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f84:	d108      	bne.n	8004f98 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f94:	601a      	str	r2, [r3, #0]
 8004f96:	e00b      	b.n	8004fb0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9c:	2b11      	cmp	r3, #17
 8004f9e:	d107      	bne.n	8004fb0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	9300      	str	r3, [sp, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f000 fa11 	bl	80053e4 <I2C_WaitOnFlagUntilTimeout>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00d      	beq.n	8004fe4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fd6:	d103      	bne.n	8004fe0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fde:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e079      	b.n	80050d8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fec:	d108      	bne.n	8005000 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004fee:	897b      	ldrh	r3, [r7, #10]
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	f043 0301 	orr.w	r3, r3, #1
 8004ff6:	b2da      	uxtb	r2, r3
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	611a      	str	r2, [r3, #16]
 8004ffe:	e05f      	b.n	80050c0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005000:	897b      	ldrh	r3, [r7, #10]
 8005002:	11db      	asrs	r3, r3, #7
 8005004:	b2db      	uxtb	r3, r3
 8005006:	f003 0306 	and.w	r3, r3, #6
 800500a:	b2db      	uxtb	r3, r3
 800500c:	f063 030f 	orn	r3, r3, #15
 8005010:	b2da      	uxtb	r2, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	4930      	ldr	r1, [pc, #192]	; (80050e0 <I2C_MasterRequestRead+0x194>)
 800501e:	68f8      	ldr	r0, [r7, #12]
 8005020:	f000 fa5a 	bl	80054d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d001      	beq.n	800502e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e054      	b.n	80050d8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800502e:	897b      	ldrh	r3, [r7, #10]
 8005030:	b2da      	uxtb	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	4929      	ldr	r1, [pc, #164]	; (80050e4 <I2C_MasterRequestRead+0x198>)
 800503e:	68f8      	ldr	r0, [r7, #12]
 8005040:	f000 fa4a 	bl	80054d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d001      	beq.n	800504e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e044      	b.n	80050d8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800504e:	2300      	movs	r3, #0
 8005050:	613b      	str	r3, [r7, #16]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	695b      	ldr	r3, [r3, #20]
 8005058:	613b      	str	r3, [r7, #16]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	613b      	str	r3, [r7, #16]
 8005062:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005072:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	9300      	str	r3, [sp, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f000 f9af 	bl	80053e4 <I2C_WaitOnFlagUntilTimeout>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00d      	beq.n	80050a8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005096:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800509a:	d103      	bne.n	80050a4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050a2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e017      	b.n	80050d8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80050a8:	897b      	ldrh	r3, [r7, #10]
 80050aa:	11db      	asrs	r3, r3, #7
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	f003 0306 	and.w	r3, r3, #6
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	f063 030e 	orn	r3, r3, #14
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	4907      	ldr	r1, [pc, #28]	; (80050e4 <I2C_MasterRequestRead+0x198>)
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f000 fa06 	bl	80054d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e000      	b.n	80050d8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3718      	adds	r7, #24
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	00010008 	.word	0x00010008
 80050e4:	00010002 	.word	0x00010002

080050e8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b088      	sub	sp, #32
 80050ec:	af02      	add	r7, sp, #8
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	4608      	mov	r0, r1
 80050f2:	4611      	mov	r1, r2
 80050f4:	461a      	mov	r2, r3
 80050f6:	4603      	mov	r3, r0
 80050f8:	817b      	strh	r3, [r7, #10]
 80050fa:	460b      	mov	r3, r1
 80050fc:	813b      	strh	r3, [r7, #8]
 80050fe:	4613      	mov	r3, r2
 8005100:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005110:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005114:	9300      	str	r3, [sp, #0]
 8005116:	6a3b      	ldr	r3, [r7, #32]
 8005118:	2200      	movs	r2, #0
 800511a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	f000 f960 	bl	80053e4 <I2C_WaitOnFlagUntilTimeout>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00d      	beq.n	8005146 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005134:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005138:	d103      	bne.n	8005142 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005140:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e05f      	b.n	8005206 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005146:	897b      	ldrh	r3, [r7, #10]
 8005148:	b2db      	uxtb	r3, r3
 800514a:	461a      	mov	r2, r3
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005154:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005158:	6a3a      	ldr	r2, [r7, #32]
 800515a:	492d      	ldr	r1, [pc, #180]	; (8005210 <I2C_RequestMemoryWrite+0x128>)
 800515c:	68f8      	ldr	r0, [r7, #12]
 800515e:	f000 f9bb 	bl	80054d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d001      	beq.n	800516c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e04c      	b.n	8005206 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800516c:	2300      	movs	r3, #0
 800516e:	617b      	str	r3, [r7, #20]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	617b      	str	r3, [r7, #20]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	617b      	str	r3, [r7, #20]
 8005180:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005184:	6a39      	ldr	r1, [r7, #32]
 8005186:	68f8      	ldr	r0, [r7, #12]
 8005188:	f000 fa46 	bl	8005618 <I2C_WaitOnTXEFlagUntilTimeout>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00d      	beq.n	80051ae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005196:	2b04      	cmp	r3, #4
 8005198:	d107      	bne.n	80051aa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e02b      	b.n	8005206 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80051ae:	88fb      	ldrh	r3, [r7, #6]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d105      	bne.n	80051c0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051b4:	893b      	ldrh	r3, [r7, #8]
 80051b6:	b2da      	uxtb	r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	611a      	str	r2, [r3, #16]
 80051be:	e021      	b.n	8005204 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80051c0:	893b      	ldrh	r3, [r7, #8]
 80051c2:	0a1b      	lsrs	r3, r3, #8
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	b2da      	uxtb	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051d0:	6a39      	ldr	r1, [r7, #32]
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f000 fa20 	bl	8005618 <I2C_WaitOnTXEFlagUntilTimeout>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00d      	beq.n	80051fa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e2:	2b04      	cmp	r3, #4
 80051e4:	d107      	bne.n	80051f6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e005      	b.n	8005206 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051fa:	893b      	ldrh	r3, [r7, #8]
 80051fc:	b2da      	uxtb	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3718      	adds	r7, #24
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	00010002 	.word	0x00010002

08005214 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b088      	sub	sp, #32
 8005218:	af02      	add	r7, sp, #8
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	4608      	mov	r0, r1
 800521e:	4611      	mov	r1, r2
 8005220:	461a      	mov	r2, r3
 8005222:	4603      	mov	r3, r0
 8005224:	817b      	strh	r3, [r7, #10]
 8005226:	460b      	mov	r3, r1
 8005228:	813b      	strh	r3, [r7, #8]
 800522a:	4613      	mov	r3, r2
 800522c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800523c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800524c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800524e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005250:	9300      	str	r3, [sp, #0]
 8005252:	6a3b      	ldr	r3, [r7, #32]
 8005254:	2200      	movs	r2, #0
 8005256:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f000 f8c2 	bl	80053e4 <I2C_WaitOnFlagUntilTimeout>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00d      	beq.n	8005282 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005270:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005274:	d103      	bne.n	800527e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f44f 7200 	mov.w	r2, #512	; 0x200
 800527c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e0aa      	b.n	80053d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005282:	897b      	ldrh	r3, [r7, #10]
 8005284:	b2db      	uxtb	r3, r3
 8005286:	461a      	mov	r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005290:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005294:	6a3a      	ldr	r2, [r7, #32]
 8005296:	4952      	ldr	r1, [pc, #328]	; (80053e0 <I2C_RequestMemoryRead+0x1cc>)
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f000 f91d 	bl	80054d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d001      	beq.n	80052a8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e097      	b.n	80053d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052a8:	2300      	movs	r3, #0
 80052aa:	617b      	str	r3, [r7, #20]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	695b      	ldr	r3, [r3, #20]
 80052b2:	617b      	str	r3, [r7, #20]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	617b      	str	r3, [r7, #20]
 80052bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052c0:	6a39      	ldr	r1, [r7, #32]
 80052c2:	68f8      	ldr	r0, [r7, #12]
 80052c4:	f000 f9a8 	bl	8005618 <I2C_WaitOnTXEFlagUntilTimeout>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00d      	beq.n	80052ea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d2:	2b04      	cmp	r3, #4
 80052d4:	d107      	bne.n	80052e6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e076      	b.n	80053d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80052ea:	88fb      	ldrh	r3, [r7, #6]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d105      	bne.n	80052fc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052f0:	893b      	ldrh	r3, [r7, #8]
 80052f2:	b2da      	uxtb	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	611a      	str	r2, [r3, #16]
 80052fa:	e021      	b.n	8005340 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80052fc:	893b      	ldrh	r3, [r7, #8]
 80052fe:	0a1b      	lsrs	r3, r3, #8
 8005300:	b29b      	uxth	r3, r3
 8005302:	b2da      	uxtb	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800530a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800530c:	6a39      	ldr	r1, [r7, #32]
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f000 f982 	bl	8005618 <I2C_WaitOnTXEFlagUntilTimeout>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00d      	beq.n	8005336 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531e:	2b04      	cmp	r3, #4
 8005320:	d107      	bne.n	8005332 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005330:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e050      	b.n	80053d8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005336:	893b      	ldrh	r3, [r7, #8]
 8005338:	b2da      	uxtb	r2, r3
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005342:	6a39      	ldr	r1, [r7, #32]
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	f000 f967 	bl	8005618 <I2C_WaitOnTXEFlagUntilTimeout>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00d      	beq.n	800536c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005354:	2b04      	cmp	r3, #4
 8005356:	d107      	bne.n	8005368 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005366:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e035      	b.n	80053d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800537a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800537c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537e:	9300      	str	r3, [sp, #0]
 8005380:	6a3b      	ldr	r3, [r7, #32]
 8005382:	2200      	movs	r2, #0
 8005384:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f000 f82b 	bl	80053e4 <I2C_WaitOnFlagUntilTimeout>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00d      	beq.n	80053b0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800539e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053a2:	d103      	bne.n	80053ac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e013      	b.n	80053d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80053b0:	897b      	ldrh	r3, [r7, #10]
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	f043 0301 	orr.w	r3, r3, #1
 80053b8:	b2da      	uxtb	r2, r3
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c2:	6a3a      	ldr	r2, [r7, #32]
 80053c4:	4906      	ldr	r1, [pc, #24]	; (80053e0 <I2C_RequestMemoryRead+0x1cc>)
 80053c6:	68f8      	ldr	r0, [r7, #12]
 80053c8:	f000 f886 	bl	80054d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d001      	beq.n	80053d6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e000      	b.n	80053d8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3718      	adds	r7, #24
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	00010002 	.word	0x00010002

080053e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	603b      	str	r3, [r7, #0]
 80053f0:	4613      	mov	r3, r2
 80053f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053f4:	e048      	b.n	8005488 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053fc:	d044      	beq.n	8005488 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053fe:	f7fd ff43 	bl	8003288 <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	683a      	ldr	r2, [r7, #0]
 800540a:	429a      	cmp	r2, r3
 800540c:	d302      	bcc.n	8005414 <I2C_WaitOnFlagUntilTimeout+0x30>
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d139      	bne.n	8005488 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	0c1b      	lsrs	r3, r3, #16
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b01      	cmp	r3, #1
 800541c:	d10d      	bne.n	800543a <I2C_WaitOnFlagUntilTimeout+0x56>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	695b      	ldr	r3, [r3, #20]
 8005424:	43da      	mvns	r2, r3
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	4013      	ands	r3, r2
 800542a:	b29b      	uxth	r3, r3
 800542c:	2b00      	cmp	r3, #0
 800542e:	bf0c      	ite	eq
 8005430:	2301      	moveq	r3, #1
 8005432:	2300      	movne	r3, #0
 8005434:	b2db      	uxtb	r3, r3
 8005436:	461a      	mov	r2, r3
 8005438:	e00c      	b.n	8005454 <I2C_WaitOnFlagUntilTimeout+0x70>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	43da      	mvns	r2, r3
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	4013      	ands	r3, r2
 8005446:	b29b      	uxth	r3, r3
 8005448:	2b00      	cmp	r3, #0
 800544a:	bf0c      	ite	eq
 800544c:	2301      	moveq	r3, #1
 800544e:	2300      	movne	r3, #0
 8005450:	b2db      	uxtb	r3, r3
 8005452:	461a      	mov	r2, r3
 8005454:	79fb      	ldrb	r3, [r7, #7]
 8005456:	429a      	cmp	r2, r3
 8005458:	d116      	bne.n	8005488 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2220      	movs	r2, #32
 8005464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005474:	f043 0220 	orr.w	r2, r3, #32
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e023      	b.n	80054d0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	0c1b      	lsrs	r3, r3, #16
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b01      	cmp	r3, #1
 8005490:	d10d      	bne.n	80054ae <I2C_WaitOnFlagUntilTimeout+0xca>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	695b      	ldr	r3, [r3, #20]
 8005498:	43da      	mvns	r2, r3
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	4013      	ands	r3, r2
 800549e:	b29b      	uxth	r3, r3
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	bf0c      	ite	eq
 80054a4:	2301      	moveq	r3, #1
 80054a6:	2300      	movne	r3, #0
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	461a      	mov	r2, r3
 80054ac:	e00c      	b.n	80054c8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	43da      	mvns	r2, r3
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	4013      	ands	r3, r2
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	2b00      	cmp	r3, #0
 80054be:	bf0c      	ite	eq
 80054c0:	2301      	moveq	r3, #1
 80054c2:	2300      	movne	r3, #0
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	461a      	mov	r2, r3
 80054c8:	79fb      	ldrb	r3, [r7, #7]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d093      	beq.n	80053f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3710      	adds	r7, #16
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]
 80054e4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054e6:	e071      	b.n	80055cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054f6:	d123      	bne.n	8005540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005506:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005510:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2200      	movs	r2, #0
 8005516:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2220      	movs	r2, #32
 800551c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552c:	f043 0204 	orr.w	r2, r3, #4
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e067      	b.n	8005610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005546:	d041      	beq.n	80055cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005548:	f7fd fe9e 	bl	8003288 <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	429a      	cmp	r2, r3
 8005556:	d302      	bcc.n	800555e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d136      	bne.n	80055cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	0c1b      	lsrs	r3, r3, #16
 8005562:	b2db      	uxtb	r3, r3
 8005564:	2b01      	cmp	r3, #1
 8005566:	d10c      	bne.n	8005582 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	43da      	mvns	r2, r3
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	4013      	ands	r3, r2
 8005574:	b29b      	uxth	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	bf14      	ite	ne
 800557a:	2301      	movne	r3, #1
 800557c:	2300      	moveq	r3, #0
 800557e:	b2db      	uxtb	r3, r3
 8005580:	e00b      	b.n	800559a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	43da      	mvns	r2, r3
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	4013      	ands	r3, r2
 800558e:	b29b      	uxth	r3, r3
 8005590:	2b00      	cmp	r3, #0
 8005592:	bf14      	ite	ne
 8005594:	2301      	movne	r3, #1
 8005596:	2300      	moveq	r3, #0
 8005598:	b2db      	uxtb	r3, r3
 800559a:	2b00      	cmp	r3, #0
 800559c:	d016      	beq.n	80055cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2220      	movs	r2, #32
 80055a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b8:	f043 0220 	orr.w	r2, r3, #32
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e021      	b.n	8005610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	0c1b      	lsrs	r3, r3, #16
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d10c      	bne.n	80055f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	695b      	ldr	r3, [r3, #20]
 80055dc:	43da      	mvns	r2, r3
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	4013      	ands	r3, r2
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	bf14      	ite	ne
 80055e8:	2301      	movne	r3, #1
 80055ea:	2300      	moveq	r3, #0
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	e00b      	b.n	8005608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	43da      	mvns	r2, r3
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	4013      	ands	r3, r2
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	bf14      	ite	ne
 8005602:	2301      	movne	r3, #1
 8005604:	2300      	moveq	r3, #0
 8005606:	b2db      	uxtb	r3, r3
 8005608:	2b00      	cmp	r3, #0
 800560a:	f47f af6d 	bne.w	80054e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3710      	adds	r7, #16
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005624:	e034      	b.n	8005690 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005626:	68f8      	ldr	r0, [r7, #12]
 8005628:	f000 f8e3 	bl	80057f2 <I2C_IsAcknowledgeFailed>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d001      	beq.n	8005636 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e034      	b.n	80056a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800563c:	d028      	beq.n	8005690 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800563e:	f7fd fe23 	bl	8003288 <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	68ba      	ldr	r2, [r7, #8]
 800564a:	429a      	cmp	r2, r3
 800564c:	d302      	bcc.n	8005654 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d11d      	bne.n	8005690 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	695b      	ldr	r3, [r3, #20]
 800565a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800565e:	2b80      	cmp	r3, #128	; 0x80
 8005660:	d016      	beq.n	8005690 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2220      	movs	r2, #32
 800566c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567c:	f043 0220 	orr.w	r2, r3, #32
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e007      	b.n	80056a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800569a:	2b80      	cmp	r3, #128	; 0x80
 800569c:	d1c3      	bne.n	8005626 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800569e:	2300      	movs	r3, #0
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3710      	adds	r7, #16
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056b4:	e034      	b.n	8005720 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	f000 f89b 	bl	80057f2 <I2C_IsAcknowledgeFailed>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d001      	beq.n	80056c6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e034      	b.n	8005730 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056cc:	d028      	beq.n	8005720 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ce:	f7fd fddb 	bl	8003288 <HAL_GetTick>
 80056d2:	4602      	mov	r2, r0
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	68ba      	ldr	r2, [r7, #8]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d302      	bcc.n	80056e4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d11d      	bne.n	8005720 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	f003 0304 	and.w	r3, r3, #4
 80056ee:	2b04      	cmp	r3, #4
 80056f0:	d016      	beq.n	8005720 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2200      	movs	r2, #0
 80056f6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2220      	movs	r2, #32
 80056fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570c:	f043 0220 	orr.w	r2, r3, #32
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2200      	movs	r2, #0
 8005718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e007      	b.n	8005730 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	f003 0304 	and.w	r3, r3, #4
 800572a:	2b04      	cmp	r3, #4
 800572c:	d1c3      	bne.n	80056b6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005744:	e049      	b.n	80057da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	695b      	ldr	r3, [r3, #20]
 800574c:	f003 0310 	and.w	r3, r3, #16
 8005750:	2b10      	cmp	r3, #16
 8005752:	d119      	bne.n	8005788 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f06f 0210 	mvn.w	r2, #16
 800575c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2220      	movs	r2, #32
 8005768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e030      	b.n	80057ea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005788:	f7fd fd7e 	bl	8003288 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	429a      	cmp	r2, r3
 8005796:	d302      	bcc.n	800579e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d11d      	bne.n	80057da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	695b      	ldr	r3, [r3, #20]
 80057a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a8:	2b40      	cmp	r3, #64	; 0x40
 80057aa:	d016      	beq.n	80057da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2220      	movs	r2, #32
 80057b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c6:	f043 0220 	orr.w	r2, r3, #32
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e007      	b.n	80057ea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	695b      	ldr	r3, [r3, #20]
 80057e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e4:	2b40      	cmp	r3, #64	; 0x40
 80057e6:	d1ae      	bne.n	8005746 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3710      	adds	r7, #16
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80057f2:	b480      	push	{r7}
 80057f4:	b083      	sub	sp, #12
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	695b      	ldr	r3, [r3, #20]
 8005800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005808:	d11b      	bne.n	8005842 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005812:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2220      	movs	r2, #32
 800581e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582e:	f043 0204 	orr.w	r2, r3, #4
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e000      	b.n	8005844 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	bc80      	pop	{r7}
 800584c:	4770      	bx	lr

0800584e <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800584e:	b580      	push	{r7, lr}
 8005850:	b084      	sub	sp, #16
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d101      	bne.n	8005860 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e034      	b.n	80058ca <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8005868:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f245 5255 	movw	r2, #21845	; 0x5555
 8005872:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	6852      	ldr	r2, [r2, #4]
 800587c:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	6892      	ldr	r2, [r2, #8]
 8005886:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8005888:	f7fd fcfe 	bl	8003288 <HAL_GetTick>
 800588c:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800588e:	e00f      	b.n	80058b0 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8005890:	f7fd fcfa 	bl	8003288 <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	2b27      	cmp	r3, #39	; 0x27
 800589c:	d908      	bls.n	80058b0 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	f003 0303 	and.w	r3, r3, #3
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d001      	beq.n	80058b0 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	e00c      	b.n	80058ca <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	f003 0303 	and.w	r3, r3, #3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1e8      	bne.n	8005890 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80058c6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
	...

080058d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b086      	sub	sp, #24
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d101      	bne.n	80058e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e272      	b.n	8005dcc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0301 	and.w	r3, r3, #1
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	f000 8087 	beq.w	8005a02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80058f4:	4b92      	ldr	r3, [pc, #584]	; (8005b40 <HAL_RCC_OscConfig+0x26c>)
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f003 030c 	and.w	r3, r3, #12
 80058fc:	2b04      	cmp	r3, #4
 80058fe:	d00c      	beq.n	800591a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005900:	4b8f      	ldr	r3, [pc, #572]	; (8005b40 <HAL_RCC_OscConfig+0x26c>)
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	f003 030c 	and.w	r3, r3, #12
 8005908:	2b08      	cmp	r3, #8
 800590a:	d112      	bne.n	8005932 <HAL_RCC_OscConfig+0x5e>
 800590c:	4b8c      	ldr	r3, [pc, #560]	; (8005b40 <HAL_RCC_OscConfig+0x26c>)
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005918:	d10b      	bne.n	8005932 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800591a:	4b89      	ldr	r3, [pc, #548]	; (8005b40 <HAL_RCC_OscConfig+0x26c>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d06c      	beq.n	8005a00 <HAL_RCC_OscConfig+0x12c>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d168      	bne.n	8005a00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e24c      	b.n	8005dcc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800593a:	d106      	bne.n	800594a <HAL_RCC_OscConfig+0x76>
 800593c:	4b80      	ldr	r3, [pc, #512]	; (8005b40 <HAL_RCC_OscConfig+0x26c>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a7f      	ldr	r2, [pc, #508]	; (8005b40 <HAL_RCC_OscConfig+0x26c>)
 8005942:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005946:	6013      	str	r3, [r2, #0]
 8005948:	e02e      	b.n	80059a8 <HAL_RCC_OscConfig+0xd4>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d10c      	bne.n	800596c <HAL_RCC_OscConfig+0x98>
 8005952:	4b7b      	ldr	r3, [pc, #492]	; (8005b40 <HAL_RCC_OscConfig+0x26c>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a7a      	ldr	r2, [pc, #488]	; (8005b40 <HAL_RCC_OscConfig+0x26c>)
 8005958:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800595c:	6013      	str	r3, [r2, #0]
 800595e:	4b78      	ldr	r3, [pc, #480]	; (8005b40 <HAL_RCC_OscConfig+0x26c>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a77      	ldr	r2, [pc, #476]	; (8005b40 <HAL_RCC_OscConfig+0x26c>)
 8005964:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005968:	6013      	str	r3, [r2, #0]
 800596a:	e01d      	b.n	80059a8 <HAL_RCC_OscConfig+0xd4>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005974:	d10c      	bne.n	8005990 <HAL_RCC_OscConfig+0xbc>
 8005976:	4b72      	ldr	r3, [pc, #456]	; (8005b40 <HAL_RCC_OscConfig+0x26c>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a71      	ldr	r2, [pc, #452]	; (8005b40 <HAL_RCC_OscConfig+0x26c>)
 800597c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005980:	6013      	str	r3, [r2, #0]
 8005982:	4b6f      	ldr	r3, [pc, #444]	; (8005b40 <HAL_RCC_OscConfig+0x26c>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a6e      	ldr	r2, [pc, #440]	; (8005b40 <HAL_RCC_OscConfig+0x26c>)
 8005988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800598c:	6013      	str	r3, [r2, #0]
 800598e:	e00b      	b.n	80059a8 <HAL_RCC_OscConfig+0xd4>
 8005990:	4b6b      	ldr	r3, [pc, #428]	; (8005b40 <HAL_RCC_OscConfig+0x26c>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a6a      	ldr	r2, [pc, #424]	; (8005b40 <HAL_RCC_OscConfig+0x26c>)
 8005996:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800599a:	6013      	str	r3, [r2, #0]
 800599c:	4b68      	ldr	r3, [pc, #416]	; (8005b40 <HAL_RCC_OscConfig+0x26c>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a67      	ldr	r2, [pc, #412]	; (8005b40 <HAL_RCC_OscConfig+0x26c>)
 80059a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d013      	beq.n	80059d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059b0:	f7fd fc6a 	bl	8003288 <HAL_GetTick>
 80059b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059b6:	e008      	b.n	80059ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059b8:	f7fd fc66 	bl	8003288 <HAL_GetTick>
 80059bc:	4602      	mov	r2, r0
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	2b64      	cmp	r3, #100	; 0x64
 80059c4:	d901      	bls.n	80059ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	e200      	b.n	8005dcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ca:	4b5d      	ldr	r3, [pc, #372]	; (8005b40 <HAL_RCC_OscConfig+0x26c>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d0f0      	beq.n	80059b8 <HAL_RCC_OscConfig+0xe4>
 80059d6:	e014      	b.n	8005a02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059d8:	f7fd fc56 	bl	8003288 <HAL_GetTick>
 80059dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059de:	e008      	b.n	80059f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059e0:	f7fd fc52 	bl	8003288 <HAL_GetTick>
 80059e4:	4602      	mov	r2, r0
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	2b64      	cmp	r3, #100	; 0x64
 80059ec:	d901      	bls.n	80059f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e1ec      	b.n	8005dcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059f2:	4b53      	ldr	r3, [pc, #332]	; (8005b40 <HAL_RCC_OscConfig+0x26c>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1f0      	bne.n	80059e0 <HAL_RCC_OscConfig+0x10c>
 80059fe:	e000      	b.n	8005a02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0302 	and.w	r3, r3, #2
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d063      	beq.n	8005ad6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a0e:	4b4c      	ldr	r3, [pc, #304]	; (8005b40 <HAL_RCC_OscConfig+0x26c>)
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	f003 030c 	and.w	r3, r3, #12
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00b      	beq.n	8005a32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005a1a:	4b49      	ldr	r3, [pc, #292]	; (8005b40 <HAL_RCC_OscConfig+0x26c>)
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	f003 030c 	and.w	r3, r3, #12
 8005a22:	2b08      	cmp	r3, #8
 8005a24:	d11c      	bne.n	8005a60 <HAL_RCC_OscConfig+0x18c>
 8005a26:	4b46      	ldr	r3, [pc, #280]	; (8005b40 <HAL_RCC_OscConfig+0x26c>)
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d116      	bne.n	8005a60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a32:	4b43      	ldr	r3, [pc, #268]	; (8005b40 <HAL_RCC_OscConfig+0x26c>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0302 	and.w	r3, r3, #2
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d005      	beq.n	8005a4a <HAL_RCC_OscConfig+0x176>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d001      	beq.n	8005a4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e1c0      	b.n	8005dcc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a4a:	4b3d      	ldr	r3, [pc, #244]	; (8005b40 <HAL_RCC_OscConfig+0x26c>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	695b      	ldr	r3, [r3, #20]
 8005a56:	00db      	lsls	r3, r3, #3
 8005a58:	4939      	ldr	r1, [pc, #228]	; (8005b40 <HAL_RCC_OscConfig+0x26c>)
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a5e:	e03a      	b.n	8005ad6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d020      	beq.n	8005aaa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a68:	4b36      	ldr	r3, [pc, #216]	; (8005b44 <HAL_RCC_OscConfig+0x270>)
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a6e:	f7fd fc0b 	bl	8003288 <HAL_GetTick>
 8005a72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a74:	e008      	b.n	8005a88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a76:	f7fd fc07 	bl	8003288 <HAL_GetTick>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d901      	bls.n	8005a88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e1a1      	b.n	8005dcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a88:	4b2d      	ldr	r3, [pc, #180]	; (8005b40 <HAL_RCC_OscConfig+0x26c>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0302 	and.w	r3, r3, #2
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d0f0      	beq.n	8005a76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a94:	4b2a      	ldr	r3, [pc, #168]	; (8005b40 <HAL_RCC_OscConfig+0x26c>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	695b      	ldr	r3, [r3, #20]
 8005aa0:	00db      	lsls	r3, r3, #3
 8005aa2:	4927      	ldr	r1, [pc, #156]	; (8005b40 <HAL_RCC_OscConfig+0x26c>)
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	600b      	str	r3, [r1, #0]
 8005aa8:	e015      	b.n	8005ad6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005aaa:	4b26      	ldr	r3, [pc, #152]	; (8005b44 <HAL_RCC_OscConfig+0x270>)
 8005aac:	2200      	movs	r2, #0
 8005aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ab0:	f7fd fbea 	bl	8003288 <HAL_GetTick>
 8005ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ab6:	e008      	b.n	8005aca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ab8:	f7fd fbe6 	bl	8003288 <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d901      	bls.n	8005aca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e180      	b.n	8005dcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005aca:	4b1d      	ldr	r3, [pc, #116]	; (8005b40 <HAL_RCC_OscConfig+0x26c>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0302 	and.w	r3, r3, #2
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d1f0      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0308 	and.w	r3, r3, #8
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d03a      	beq.n	8005b58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	699b      	ldr	r3, [r3, #24]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d019      	beq.n	8005b1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005aea:	4b17      	ldr	r3, [pc, #92]	; (8005b48 <HAL_RCC_OscConfig+0x274>)
 8005aec:	2201      	movs	r2, #1
 8005aee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005af0:	f7fd fbca 	bl	8003288 <HAL_GetTick>
 8005af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005af6:	e008      	b.n	8005b0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005af8:	f7fd fbc6 	bl	8003288 <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	d901      	bls.n	8005b0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e160      	b.n	8005dcc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b0a:	4b0d      	ldr	r3, [pc, #52]	; (8005b40 <HAL_RCC_OscConfig+0x26c>)
 8005b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0e:	f003 0302 	and.w	r3, r3, #2
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d0f0      	beq.n	8005af8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005b16:	2001      	movs	r0, #1
 8005b18:	f000 face 	bl	80060b8 <RCC_Delay>
 8005b1c:	e01c      	b.n	8005b58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b1e:	4b0a      	ldr	r3, [pc, #40]	; (8005b48 <HAL_RCC_OscConfig+0x274>)
 8005b20:	2200      	movs	r2, #0
 8005b22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b24:	f7fd fbb0 	bl	8003288 <HAL_GetTick>
 8005b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b2a:	e00f      	b.n	8005b4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b2c:	f7fd fbac 	bl	8003288 <HAL_GetTick>
 8005b30:	4602      	mov	r2, r0
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	2b02      	cmp	r3, #2
 8005b38:	d908      	bls.n	8005b4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e146      	b.n	8005dcc <HAL_RCC_OscConfig+0x4f8>
 8005b3e:	bf00      	nop
 8005b40:	40021000 	.word	0x40021000
 8005b44:	42420000 	.word	0x42420000
 8005b48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b4c:	4b92      	ldr	r3, [pc, #584]	; (8005d98 <HAL_RCC_OscConfig+0x4c4>)
 8005b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b50:	f003 0302 	and.w	r3, r3, #2
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d1e9      	bne.n	8005b2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0304 	and.w	r3, r3, #4
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	f000 80a6 	beq.w	8005cb2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b66:	2300      	movs	r3, #0
 8005b68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b6a:	4b8b      	ldr	r3, [pc, #556]	; (8005d98 <HAL_RCC_OscConfig+0x4c4>)
 8005b6c:	69db      	ldr	r3, [r3, #28]
 8005b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d10d      	bne.n	8005b92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b76:	4b88      	ldr	r3, [pc, #544]	; (8005d98 <HAL_RCC_OscConfig+0x4c4>)
 8005b78:	69db      	ldr	r3, [r3, #28]
 8005b7a:	4a87      	ldr	r2, [pc, #540]	; (8005d98 <HAL_RCC_OscConfig+0x4c4>)
 8005b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b80:	61d3      	str	r3, [r2, #28]
 8005b82:	4b85      	ldr	r3, [pc, #532]	; (8005d98 <HAL_RCC_OscConfig+0x4c4>)
 8005b84:	69db      	ldr	r3, [r3, #28]
 8005b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b8a:	60bb      	str	r3, [r7, #8]
 8005b8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b92:	4b82      	ldr	r3, [pc, #520]	; (8005d9c <HAL_RCC_OscConfig+0x4c8>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d118      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b9e:	4b7f      	ldr	r3, [pc, #508]	; (8005d9c <HAL_RCC_OscConfig+0x4c8>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a7e      	ldr	r2, [pc, #504]	; (8005d9c <HAL_RCC_OscConfig+0x4c8>)
 8005ba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ba8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005baa:	f7fd fb6d 	bl	8003288 <HAL_GetTick>
 8005bae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bb0:	e008      	b.n	8005bc4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bb2:	f7fd fb69 	bl	8003288 <HAL_GetTick>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	2b64      	cmp	r3, #100	; 0x64
 8005bbe:	d901      	bls.n	8005bc4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e103      	b.n	8005dcc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bc4:	4b75      	ldr	r3, [pc, #468]	; (8005d9c <HAL_RCC_OscConfig+0x4c8>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d0f0      	beq.n	8005bb2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d106      	bne.n	8005be6 <HAL_RCC_OscConfig+0x312>
 8005bd8:	4b6f      	ldr	r3, [pc, #444]	; (8005d98 <HAL_RCC_OscConfig+0x4c4>)
 8005bda:	6a1b      	ldr	r3, [r3, #32]
 8005bdc:	4a6e      	ldr	r2, [pc, #440]	; (8005d98 <HAL_RCC_OscConfig+0x4c4>)
 8005bde:	f043 0301 	orr.w	r3, r3, #1
 8005be2:	6213      	str	r3, [r2, #32]
 8005be4:	e02d      	b.n	8005c42 <HAL_RCC_OscConfig+0x36e>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10c      	bne.n	8005c08 <HAL_RCC_OscConfig+0x334>
 8005bee:	4b6a      	ldr	r3, [pc, #424]	; (8005d98 <HAL_RCC_OscConfig+0x4c4>)
 8005bf0:	6a1b      	ldr	r3, [r3, #32]
 8005bf2:	4a69      	ldr	r2, [pc, #420]	; (8005d98 <HAL_RCC_OscConfig+0x4c4>)
 8005bf4:	f023 0301 	bic.w	r3, r3, #1
 8005bf8:	6213      	str	r3, [r2, #32]
 8005bfa:	4b67      	ldr	r3, [pc, #412]	; (8005d98 <HAL_RCC_OscConfig+0x4c4>)
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	4a66      	ldr	r2, [pc, #408]	; (8005d98 <HAL_RCC_OscConfig+0x4c4>)
 8005c00:	f023 0304 	bic.w	r3, r3, #4
 8005c04:	6213      	str	r3, [r2, #32]
 8005c06:	e01c      	b.n	8005c42 <HAL_RCC_OscConfig+0x36e>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	2b05      	cmp	r3, #5
 8005c0e:	d10c      	bne.n	8005c2a <HAL_RCC_OscConfig+0x356>
 8005c10:	4b61      	ldr	r3, [pc, #388]	; (8005d98 <HAL_RCC_OscConfig+0x4c4>)
 8005c12:	6a1b      	ldr	r3, [r3, #32]
 8005c14:	4a60      	ldr	r2, [pc, #384]	; (8005d98 <HAL_RCC_OscConfig+0x4c4>)
 8005c16:	f043 0304 	orr.w	r3, r3, #4
 8005c1a:	6213      	str	r3, [r2, #32]
 8005c1c:	4b5e      	ldr	r3, [pc, #376]	; (8005d98 <HAL_RCC_OscConfig+0x4c4>)
 8005c1e:	6a1b      	ldr	r3, [r3, #32]
 8005c20:	4a5d      	ldr	r2, [pc, #372]	; (8005d98 <HAL_RCC_OscConfig+0x4c4>)
 8005c22:	f043 0301 	orr.w	r3, r3, #1
 8005c26:	6213      	str	r3, [r2, #32]
 8005c28:	e00b      	b.n	8005c42 <HAL_RCC_OscConfig+0x36e>
 8005c2a:	4b5b      	ldr	r3, [pc, #364]	; (8005d98 <HAL_RCC_OscConfig+0x4c4>)
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	4a5a      	ldr	r2, [pc, #360]	; (8005d98 <HAL_RCC_OscConfig+0x4c4>)
 8005c30:	f023 0301 	bic.w	r3, r3, #1
 8005c34:	6213      	str	r3, [r2, #32]
 8005c36:	4b58      	ldr	r3, [pc, #352]	; (8005d98 <HAL_RCC_OscConfig+0x4c4>)
 8005c38:	6a1b      	ldr	r3, [r3, #32]
 8005c3a:	4a57      	ldr	r2, [pc, #348]	; (8005d98 <HAL_RCC_OscConfig+0x4c4>)
 8005c3c:	f023 0304 	bic.w	r3, r3, #4
 8005c40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d015      	beq.n	8005c76 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c4a:	f7fd fb1d 	bl	8003288 <HAL_GetTick>
 8005c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c50:	e00a      	b.n	8005c68 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c52:	f7fd fb19 	bl	8003288 <HAL_GetTick>
 8005c56:	4602      	mov	r2, r0
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d901      	bls.n	8005c68 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005c64:	2303      	movs	r3, #3
 8005c66:	e0b1      	b.n	8005dcc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c68:	4b4b      	ldr	r3, [pc, #300]	; (8005d98 <HAL_RCC_OscConfig+0x4c4>)
 8005c6a:	6a1b      	ldr	r3, [r3, #32]
 8005c6c:	f003 0302 	and.w	r3, r3, #2
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d0ee      	beq.n	8005c52 <HAL_RCC_OscConfig+0x37e>
 8005c74:	e014      	b.n	8005ca0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c76:	f7fd fb07 	bl	8003288 <HAL_GetTick>
 8005c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c7c:	e00a      	b.n	8005c94 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c7e:	f7fd fb03 	bl	8003288 <HAL_GetTick>
 8005c82:	4602      	mov	r2, r0
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	1ad3      	subs	r3, r2, r3
 8005c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d901      	bls.n	8005c94 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e09b      	b.n	8005dcc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c94:	4b40      	ldr	r3, [pc, #256]	; (8005d98 <HAL_RCC_OscConfig+0x4c4>)
 8005c96:	6a1b      	ldr	r3, [r3, #32]
 8005c98:	f003 0302 	and.w	r3, r3, #2
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d1ee      	bne.n	8005c7e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005ca0:	7dfb      	ldrb	r3, [r7, #23]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d105      	bne.n	8005cb2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ca6:	4b3c      	ldr	r3, [pc, #240]	; (8005d98 <HAL_RCC_OscConfig+0x4c4>)
 8005ca8:	69db      	ldr	r3, [r3, #28]
 8005caa:	4a3b      	ldr	r2, [pc, #236]	; (8005d98 <HAL_RCC_OscConfig+0x4c4>)
 8005cac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cb0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	69db      	ldr	r3, [r3, #28]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	f000 8087 	beq.w	8005dca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005cbc:	4b36      	ldr	r3, [pc, #216]	; (8005d98 <HAL_RCC_OscConfig+0x4c4>)
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	f003 030c 	and.w	r3, r3, #12
 8005cc4:	2b08      	cmp	r3, #8
 8005cc6:	d061      	beq.n	8005d8c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	69db      	ldr	r3, [r3, #28]
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d146      	bne.n	8005d5e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cd0:	4b33      	ldr	r3, [pc, #204]	; (8005da0 <HAL_RCC_OscConfig+0x4cc>)
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cd6:	f7fd fad7 	bl	8003288 <HAL_GetTick>
 8005cda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005cdc:	e008      	b.n	8005cf0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cde:	f7fd fad3 	bl	8003288 <HAL_GetTick>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	1ad3      	subs	r3, r2, r3
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	d901      	bls.n	8005cf0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005cec:	2303      	movs	r3, #3
 8005cee:	e06d      	b.n	8005dcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005cf0:	4b29      	ldr	r3, [pc, #164]	; (8005d98 <HAL_RCC_OscConfig+0x4c4>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1f0      	bne.n	8005cde <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a1b      	ldr	r3, [r3, #32]
 8005d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d04:	d108      	bne.n	8005d18 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005d06:	4b24      	ldr	r3, [pc, #144]	; (8005d98 <HAL_RCC_OscConfig+0x4c4>)
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	4921      	ldr	r1, [pc, #132]	; (8005d98 <HAL_RCC_OscConfig+0x4c4>)
 8005d14:	4313      	orrs	r3, r2
 8005d16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d18:	4b1f      	ldr	r3, [pc, #124]	; (8005d98 <HAL_RCC_OscConfig+0x4c4>)
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a19      	ldr	r1, [r3, #32]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d28:	430b      	orrs	r3, r1
 8005d2a:	491b      	ldr	r1, [pc, #108]	; (8005d98 <HAL_RCC_OscConfig+0x4c4>)
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d30:	4b1b      	ldr	r3, [pc, #108]	; (8005da0 <HAL_RCC_OscConfig+0x4cc>)
 8005d32:	2201      	movs	r2, #1
 8005d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d36:	f7fd faa7 	bl	8003288 <HAL_GetTick>
 8005d3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005d3c:	e008      	b.n	8005d50 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d3e:	f7fd faa3 	bl	8003288 <HAL_GetTick>
 8005d42:	4602      	mov	r2, r0
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	d901      	bls.n	8005d50 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e03d      	b.n	8005dcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005d50:	4b11      	ldr	r3, [pc, #68]	; (8005d98 <HAL_RCC_OscConfig+0x4c4>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d0f0      	beq.n	8005d3e <HAL_RCC_OscConfig+0x46a>
 8005d5c:	e035      	b.n	8005dca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d5e:	4b10      	ldr	r3, [pc, #64]	; (8005da0 <HAL_RCC_OscConfig+0x4cc>)
 8005d60:	2200      	movs	r2, #0
 8005d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d64:	f7fd fa90 	bl	8003288 <HAL_GetTick>
 8005d68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d6a:	e008      	b.n	8005d7e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d6c:	f7fd fa8c 	bl	8003288 <HAL_GetTick>
 8005d70:	4602      	mov	r2, r0
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d901      	bls.n	8005d7e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005d7a:	2303      	movs	r3, #3
 8005d7c:	e026      	b.n	8005dcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d7e:	4b06      	ldr	r3, [pc, #24]	; (8005d98 <HAL_RCC_OscConfig+0x4c4>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1f0      	bne.n	8005d6c <HAL_RCC_OscConfig+0x498>
 8005d8a:	e01e      	b.n	8005dca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	69db      	ldr	r3, [r3, #28]
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d107      	bne.n	8005da4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e019      	b.n	8005dcc <HAL_RCC_OscConfig+0x4f8>
 8005d98:	40021000 	.word	0x40021000
 8005d9c:	40007000 	.word	0x40007000
 8005da0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005da4:	4b0b      	ldr	r3, [pc, #44]	; (8005dd4 <HAL_RCC_OscConfig+0x500>)
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a1b      	ldr	r3, [r3, #32]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d106      	bne.n	8005dc6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d001      	beq.n	8005dca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e000      	b.n	8005dcc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3718      	adds	r7, #24
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	40021000 	.word	0x40021000

08005dd8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d101      	bne.n	8005dec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e0d0      	b.n	8005f8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005dec:	4b6a      	ldr	r3, [pc, #424]	; (8005f98 <HAL_RCC_ClockConfig+0x1c0>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 0307 	and.w	r3, r3, #7
 8005df4:	683a      	ldr	r2, [r7, #0]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d910      	bls.n	8005e1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dfa:	4b67      	ldr	r3, [pc, #412]	; (8005f98 <HAL_RCC_ClockConfig+0x1c0>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f023 0207 	bic.w	r2, r3, #7
 8005e02:	4965      	ldr	r1, [pc, #404]	; (8005f98 <HAL_RCC_ClockConfig+0x1c0>)
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e0a:	4b63      	ldr	r3, [pc, #396]	; (8005f98 <HAL_RCC_ClockConfig+0x1c0>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 0307 	and.w	r3, r3, #7
 8005e12:	683a      	ldr	r2, [r7, #0]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d001      	beq.n	8005e1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e0b8      	b.n	8005f8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0302 	and.w	r3, r3, #2
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d020      	beq.n	8005e6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 0304 	and.w	r3, r3, #4
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d005      	beq.n	8005e40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e34:	4b59      	ldr	r3, [pc, #356]	; (8005f9c <HAL_RCC_ClockConfig+0x1c4>)
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	4a58      	ldr	r2, [pc, #352]	; (8005f9c <HAL_RCC_ClockConfig+0x1c4>)
 8005e3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005e3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0308 	and.w	r3, r3, #8
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d005      	beq.n	8005e58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e4c:	4b53      	ldr	r3, [pc, #332]	; (8005f9c <HAL_RCC_ClockConfig+0x1c4>)
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	4a52      	ldr	r2, [pc, #328]	; (8005f9c <HAL_RCC_ClockConfig+0x1c4>)
 8005e52:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005e56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e58:	4b50      	ldr	r3, [pc, #320]	; (8005f9c <HAL_RCC_ClockConfig+0x1c4>)
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	494d      	ldr	r1, [pc, #308]	; (8005f9c <HAL_RCC_ClockConfig+0x1c4>)
 8005e66:	4313      	orrs	r3, r2
 8005e68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d040      	beq.n	8005ef8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d107      	bne.n	8005e8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e7e:	4b47      	ldr	r3, [pc, #284]	; (8005f9c <HAL_RCC_ClockConfig+0x1c4>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d115      	bne.n	8005eb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e07f      	b.n	8005f8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d107      	bne.n	8005ea6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e96:	4b41      	ldr	r3, [pc, #260]	; (8005f9c <HAL_RCC_ClockConfig+0x1c4>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d109      	bne.n	8005eb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e073      	b.n	8005f8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ea6:	4b3d      	ldr	r3, [pc, #244]	; (8005f9c <HAL_RCC_ClockConfig+0x1c4>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 0302 	and.w	r3, r3, #2
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d101      	bne.n	8005eb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e06b      	b.n	8005f8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005eb6:	4b39      	ldr	r3, [pc, #228]	; (8005f9c <HAL_RCC_ClockConfig+0x1c4>)
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	f023 0203 	bic.w	r2, r3, #3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	4936      	ldr	r1, [pc, #216]	; (8005f9c <HAL_RCC_ClockConfig+0x1c4>)
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ec8:	f7fd f9de 	bl	8003288 <HAL_GetTick>
 8005ecc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ece:	e00a      	b.n	8005ee6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ed0:	f7fd f9da 	bl	8003288 <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d901      	bls.n	8005ee6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	e053      	b.n	8005f8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ee6:	4b2d      	ldr	r3, [pc, #180]	; (8005f9c <HAL_RCC_ClockConfig+0x1c4>)
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f003 020c 	and.w	r2, r3, #12
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d1eb      	bne.n	8005ed0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ef8:	4b27      	ldr	r3, [pc, #156]	; (8005f98 <HAL_RCC_ClockConfig+0x1c0>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0307 	and.w	r3, r3, #7
 8005f00:	683a      	ldr	r2, [r7, #0]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d210      	bcs.n	8005f28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f06:	4b24      	ldr	r3, [pc, #144]	; (8005f98 <HAL_RCC_ClockConfig+0x1c0>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f023 0207 	bic.w	r2, r3, #7
 8005f0e:	4922      	ldr	r1, [pc, #136]	; (8005f98 <HAL_RCC_ClockConfig+0x1c0>)
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f16:	4b20      	ldr	r3, [pc, #128]	; (8005f98 <HAL_RCC_ClockConfig+0x1c0>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0307 	and.w	r3, r3, #7
 8005f1e:	683a      	ldr	r2, [r7, #0]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d001      	beq.n	8005f28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e032      	b.n	8005f8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 0304 	and.w	r3, r3, #4
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d008      	beq.n	8005f46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f34:	4b19      	ldr	r3, [pc, #100]	; (8005f9c <HAL_RCC_ClockConfig+0x1c4>)
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	4916      	ldr	r1, [pc, #88]	; (8005f9c <HAL_RCC_ClockConfig+0x1c4>)
 8005f42:	4313      	orrs	r3, r2
 8005f44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0308 	and.w	r3, r3, #8
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d009      	beq.n	8005f66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005f52:	4b12      	ldr	r3, [pc, #72]	; (8005f9c <HAL_RCC_ClockConfig+0x1c4>)
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	00db      	lsls	r3, r3, #3
 8005f60:	490e      	ldr	r1, [pc, #56]	; (8005f9c <HAL_RCC_ClockConfig+0x1c4>)
 8005f62:	4313      	orrs	r3, r2
 8005f64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005f66:	f000 f821 	bl	8005fac <HAL_RCC_GetSysClockFreq>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	4b0b      	ldr	r3, [pc, #44]	; (8005f9c <HAL_RCC_ClockConfig+0x1c4>)
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	091b      	lsrs	r3, r3, #4
 8005f72:	f003 030f 	and.w	r3, r3, #15
 8005f76:	490a      	ldr	r1, [pc, #40]	; (8005fa0 <HAL_RCC_ClockConfig+0x1c8>)
 8005f78:	5ccb      	ldrb	r3, [r1, r3]
 8005f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f7e:	4a09      	ldr	r2, [pc, #36]	; (8005fa4 <HAL_RCC_ClockConfig+0x1cc>)
 8005f80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005f82:	4b09      	ldr	r3, [pc, #36]	; (8005fa8 <HAL_RCC_ClockConfig+0x1d0>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4618      	mov	r0, r3
 8005f88:	f7fd f93c 	bl	8003204 <HAL_InitTick>

  return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3710      	adds	r7, #16
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	40022000 	.word	0x40022000
 8005f9c:	40021000 	.word	0x40021000
 8005fa0:	08007b28 	.word	0x08007b28
 8005fa4:	20000000 	.word	0x20000000
 8005fa8:	20000004 	.word	0x20000004

08005fac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b087      	sub	sp, #28
 8005fb0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	60fb      	str	r3, [r7, #12]
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	60bb      	str	r3, [r7, #8]
 8005fba:	2300      	movs	r3, #0
 8005fbc:	617b      	str	r3, [r7, #20]
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005fc6:	4b1e      	ldr	r3, [pc, #120]	; (8006040 <HAL_RCC_GetSysClockFreq+0x94>)
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f003 030c 	and.w	r3, r3, #12
 8005fd2:	2b04      	cmp	r3, #4
 8005fd4:	d002      	beq.n	8005fdc <HAL_RCC_GetSysClockFreq+0x30>
 8005fd6:	2b08      	cmp	r3, #8
 8005fd8:	d003      	beq.n	8005fe2 <HAL_RCC_GetSysClockFreq+0x36>
 8005fda:	e027      	b.n	800602c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005fdc:	4b19      	ldr	r3, [pc, #100]	; (8006044 <HAL_RCC_GetSysClockFreq+0x98>)
 8005fde:	613b      	str	r3, [r7, #16]
      break;
 8005fe0:	e027      	b.n	8006032 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	0c9b      	lsrs	r3, r3, #18
 8005fe6:	f003 030f 	and.w	r3, r3, #15
 8005fea:	4a17      	ldr	r2, [pc, #92]	; (8006048 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005fec:	5cd3      	ldrb	r3, [r2, r3]
 8005fee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d010      	beq.n	800601c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005ffa:	4b11      	ldr	r3, [pc, #68]	; (8006040 <HAL_RCC_GetSysClockFreq+0x94>)
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	0c5b      	lsrs	r3, r3, #17
 8006000:	f003 0301 	and.w	r3, r3, #1
 8006004:	4a11      	ldr	r2, [pc, #68]	; (800604c <HAL_RCC_GetSysClockFreq+0xa0>)
 8006006:	5cd3      	ldrb	r3, [r2, r3]
 8006008:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a0d      	ldr	r2, [pc, #52]	; (8006044 <HAL_RCC_GetSysClockFreq+0x98>)
 800600e:	fb03 f202 	mul.w	r2, r3, r2
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	fbb2 f3f3 	udiv	r3, r2, r3
 8006018:	617b      	str	r3, [r7, #20]
 800601a:	e004      	b.n	8006026 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a0c      	ldr	r2, [pc, #48]	; (8006050 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006020:	fb02 f303 	mul.w	r3, r2, r3
 8006024:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	613b      	str	r3, [r7, #16]
      break;
 800602a:	e002      	b.n	8006032 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800602c:	4b05      	ldr	r3, [pc, #20]	; (8006044 <HAL_RCC_GetSysClockFreq+0x98>)
 800602e:	613b      	str	r3, [r7, #16]
      break;
 8006030:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006032:	693b      	ldr	r3, [r7, #16]
}
 8006034:	4618      	mov	r0, r3
 8006036:	371c      	adds	r7, #28
 8006038:	46bd      	mov	sp, r7
 800603a:	bc80      	pop	{r7}
 800603c:	4770      	bx	lr
 800603e:	bf00      	nop
 8006040:	40021000 	.word	0x40021000
 8006044:	007a1200 	.word	0x007a1200
 8006048:	08007b40 	.word	0x08007b40
 800604c:	08007b50 	.word	0x08007b50
 8006050:	003d0900 	.word	0x003d0900

08006054 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006054:	b480      	push	{r7}
 8006056:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006058:	4b02      	ldr	r3, [pc, #8]	; (8006064 <HAL_RCC_GetHCLKFreq+0x10>)
 800605a:	681b      	ldr	r3, [r3, #0]
}
 800605c:	4618      	mov	r0, r3
 800605e:	46bd      	mov	sp, r7
 8006060:	bc80      	pop	{r7}
 8006062:	4770      	bx	lr
 8006064:	20000000 	.word	0x20000000

08006068 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800606c:	f7ff fff2 	bl	8006054 <HAL_RCC_GetHCLKFreq>
 8006070:	4602      	mov	r2, r0
 8006072:	4b05      	ldr	r3, [pc, #20]	; (8006088 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	0a1b      	lsrs	r3, r3, #8
 8006078:	f003 0307 	and.w	r3, r3, #7
 800607c:	4903      	ldr	r1, [pc, #12]	; (800608c <HAL_RCC_GetPCLK1Freq+0x24>)
 800607e:	5ccb      	ldrb	r3, [r1, r3]
 8006080:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006084:	4618      	mov	r0, r3
 8006086:	bd80      	pop	{r7, pc}
 8006088:	40021000 	.word	0x40021000
 800608c:	08007b38 	.word	0x08007b38

08006090 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006094:	f7ff ffde 	bl	8006054 <HAL_RCC_GetHCLKFreq>
 8006098:	4602      	mov	r2, r0
 800609a:	4b05      	ldr	r3, [pc, #20]	; (80060b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	0adb      	lsrs	r3, r3, #11
 80060a0:	f003 0307 	and.w	r3, r3, #7
 80060a4:	4903      	ldr	r1, [pc, #12]	; (80060b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80060a6:	5ccb      	ldrb	r3, [r1, r3]
 80060a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	40021000 	.word	0x40021000
 80060b4:	08007b38 	.word	0x08007b38

080060b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b085      	sub	sp, #20
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80060c0:	4b0a      	ldr	r3, [pc, #40]	; (80060ec <RCC_Delay+0x34>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a0a      	ldr	r2, [pc, #40]	; (80060f0 <RCC_Delay+0x38>)
 80060c6:	fba2 2303 	umull	r2, r3, r2, r3
 80060ca:	0a5b      	lsrs	r3, r3, #9
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	fb02 f303 	mul.w	r3, r2, r3
 80060d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80060d4:	bf00      	nop
  }
  while (Delay --);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	1e5a      	subs	r2, r3, #1
 80060da:	60fa      	str	r2, [r7, #12]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d1f9      	bne.n	80060d4 <RCC_Delay+0x1c>
}
 80060e0:	bf00      	nop
 80060e2:	bf00      	nop
 80060e4:	3714      	adds	r7, #20
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bc80      	pop	{r7}
 80060ea:	4770      	bx	lr
 80060ec:	20000000 	.word	0x20000000
 80060f0:	10624dd3 	.word	0x10624dd3

080060f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b086      	sub	sp, #24
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80060fc:	2300      	movs	r3, #0
 80060fe:	613b      	str	r3, [r7, #16]
 8006100:	2300      	movs	r3, #0
 8006102:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0301 	and.w	r3, r3, #1
 800610c:	2b00      	cmp	r3, #0
 800610e:	d07d      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006110:	2300      	movs	r3, #0
 8006112:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006114:	4b4f      	ldr	r3, [pc, #316]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006116:	69db      	ldr	r3, [r3, #28]
 8006118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800611c:	2b00      	cmp	r3, #0
 800611e:	d10d      	bne.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006120:	4b4c      	ldr	r3, [pc, #304]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006122:	69db      	ldr	r3, [r3, #28]
 8006124:	4a4b      	ldr	r2, [pc, #300]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006126:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800612a:	61d3      	str	r3, [r2, #28]
 800612c:	4b49      	ldr	r3, [pc, #292]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800612e:	69db      	ldr	r3, [r3, #28]
 8006130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006134:	60bb      	str	r3, [r7, #8]
 8006136:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006138:	2301      	movs	r3, #1
 800613a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800613c:	4b46      	ldr	r3, [pc, #280]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006144:	2b00      	cmp	r3, #0
 8006146:	d118      	bne.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006148:	4b43      	ldr	r3, [pc, #268]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a42      	ldr	r2, [pc, #264]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800614e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006152:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006154:	f7fd f898 	bl	8003288 <HAL_GetTick>
 8006158:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800615a:	e008      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800615c:	f7fd f894 	bl	8003288 <HAL_GetTick>
 8006160:	4602      	mov	r2, r0
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	2b64      	cmp	r3, #100	; 0x64
 8006168:	d901      	bls.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800616a:	2303      	movs	r3, #3
 800616c:	e06d      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800616e:	4b3a      	ldr	r3, [pc, #232]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006176:	2b00      	cmp	r3, #0
 8006178:	d0f0      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800617a:	4b36      	ldr	r3, [pc, #216]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800617c:	6a1b      	ldr	r3, [r3, #32]
 800617e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006182:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d02e      	beq.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	429a      	cmp	r2, r3
 8006196:	d027      	beq.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006198:	4b2e      	ldr	r3, [pc, #184]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800619a:	6a1b      	ldr	r3, [r3, #32]
 800619c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061a0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80061a2:	4b2e      	ldr	r3, [pc, #184]	; (800625c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80061a4:	2201      	movs	r2, #1
 80061a6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80061a8:	4b2c      	ldr	r3, [pc, #176]	; (800625c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80061aa:	2200      	movs	r2, #0
 80061ac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80061ae:	4a29      	ldr	r2, [pc, #164]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f003 0301 	and.w	r3, r3, #1
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d014      	beq.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061be:	f7fd f863 	bl	8003288 <HAL_GetTick>
 80061c2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061c4:	e00a      	b.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061c6:	f7fd f85f 	bl	8003288 <HAL_GetTick>
 80061ca:	4602      	mov	r2, r0
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	1ad3      	subs	r3, r2, r3
 80061d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d901      	bls.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80061d8:	2303      	movs	r3, #3
 80061da:	e036      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061dc:	4b1d      	ldr	r3, [pc, #116]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061de:	6a1b      	ldr	r3, [r3, #32]
 80061e0:	f003 0302 	and.w	r3, r3, #2
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d0ee      	beq.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061e8:	4b1a      	ldr	r3, [pc, #104]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061ea:	6a1b      	ldr	r3, [r3, #32]
 80061ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	4917      	ldr	r1, [pc, #92]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061f6:	4313      	orrs	r3, r2
 80061f8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80061fa:	7dfb      	ldrb	r3, [r7, #23]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d105      	bne.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006200:	4b14      	ldr	r3, [pc, #80]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006202:	69db      	ldr	r3, [r3, #28]
 8006204:	4a13      	ldr	r2, [pc, #76]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006206:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800620a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0302 	and.w	r3, r3, #2
 8006214:	2b00      	cmp	r3, #0
 8006216:	d008      	beq.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006218:	4b0e      	ldr	r3, [pc, #56]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	490b      	ldr	r1, [pc, #44]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006226:	4313      	orrs	r3, r2
 8006228:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 0310 	and.w	r3, r3, #16
 8006232:	2b00      	cmp	r3, #0
 8006234:	d008      	beq.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006236:	4b07      	ldr	r3, [pc, #28]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	4904      	ldr	r1, [pc, #16]	; (8006254 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006244:	4313      	orrs	r3, r2
 8006246:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3718      	adds	r7, #24
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	40021000 	.word	0x40021000
 8006258:	40007000 	.word	0x40007000
 800625c:	42420440 	.word	0x42420440

08006260 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d101      	bne.n	8006272 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e076      	b.n	8006360 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006276:	2b00      	cmp	r3, #0
 8006278:	d108      	bne.n	800628c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006282:	d009      	beq.n	8006298 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	61da      	str	r2, [r3, #28]
 800628a:	e005      	b.n	8006298 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d106      	bne.n	80062b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f7fc fdbe 	bl	8002e34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2202      	movs	r2, #2
 80062bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80062e0:	431a      	orrs	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062ea:	431a      	orrs	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	f003 0302 	and.w	r3, r3, #2
 80062f4:	431a      	orrs	r2, r3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	695b      	ldr	r3, [r3, #20]
 80062fa:	f003 0301 	and.w	r3, r3, #1
 80062fe:	431a      	orrs	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	699b      	ldr	r3, [r3, #24]
 8006304:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006308:	431a      	orrs	r2, r3
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	69db      	ldr	r3, [r3, #28]
 800630e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006312:	431a      	orrs	r2, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6a1b      	ldr	r3, [r3, #32]
 8006318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800631c:	ea42 0103 	orr.w	r1, r2, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006324:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	430a      	orrs	r2, r1
 800632e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	699b      	ldr	r3, [r3, #24]
 8006334:	0c1a      	lsrs	r2, r3, #16
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f002 0204 	and.w	r2, r2, #4
 800633e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	69da      	ldr	r2, [r3, #28]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800634e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2201      	movs	r2, #1
 800635a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800635e:	2300      	movs	r3, #0
}
 8006360:	4618      	mov	r0, r3
 8006362:	3708      	adds	r7, #8
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b088      	sub	sp, #32
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	603b      	str	r3, [r7, #0]
 8006374:	4613      	mov	r3, r2
 8006376:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006378:	2300      	movs	r3, #0
 800637a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006382:	2b01      	cmp	r3, #1
 8006384:	d101      	bne.n	800638a <HAL_SPI_Transmit+0x22>
 8006386:	2302      	movs	r3, #2
 8006388:	e12d      	b.n	80065e6 <HAL_SPI_Transmit+0x27e>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2201      	movs	r2, #1
 800638e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006392:	f7fc ff79 	bl	8003288 <HAL_GetTick>
 8006396:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006398:	88fb      	ldrh	r3, [r7, #6]
 800639a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d002      	beq.n	80063ae <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80063a8:	2302      	movs	r3, #2
 80063aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063ac:	e116      	b.n	80065dc <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d002      	beq.n	80063ba <HAL_SPI_Transmit+0x52>
 80063b4:	88fb      	ldrh	r3, [r7, #6]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d102      	bne.n	80063c0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063be:	e10d      	b.n	80065dc <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2203      	movs	r2, #3
 80063c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	68ba      	ldr	r2, [r7, #8]
 80063d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	88fa      	ldrh	r2, [r7, #6]
 80063d8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	88fa      	ldrh	r2, [r7, #6]
 80063de:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2200      	movs	r2, #0
 80063f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2200      	movs	r2, #0
 80063fc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006406:	d10f      	bne.n	8006428 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006416:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006426:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006432:	2b40      	cmp	r3, #64	; 0x40
 8006434:	d007      	beq.n	8006446 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006444:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800644e:	d14f      	bne.n	80064f0 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d002      	beq.n	800645e <HAL_SPI_Transmit+0xf6>
 8006458:	8afb      	ldrh	r3, [r7, #22]
 800645a:	2b01      	cmp	r3, #1
 800645c:	d142      	bne.n	80064e4 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006462:	881a      	ldrh	r2, [r3, #0]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800646e:	1c9a      	adds	r2, r3, #2
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006478:	b29b      	uxth	r3, r3
 800647a:	3b01      	subs	r3, #1
 800647c:	b29a      	uxth	r2, r3
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006482:	e02f      	b.n	80064e4 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	f003 0302 	and.w	r3, r3, #2
 800648e:	2b02      	cmp	r3, #2
 8006490:	d112      	bne.n	80064b8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006496:	881a      	ldrh	r2, [r3, #0]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a2:	1c9a      	adds	r2, r3, #2
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	3b01      	subs	r3, #1
 80064b0:	b29a      	uxth	r2, r3
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	86da      	strh	r2, [r3, #54]	; 0x36
 80064b6:	e015      	b.n	80064e4 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064b8:	f7fc fee6 	bl	8003288 <HAL_GetTick>
 80064bc:	4602      	mov	r2, r0
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	683a      	ldr	r2, [r7, #0]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d803      	bhi.n	80064d0 <HAL_SPI_Transmit+0x168>
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ce:	d102      	bne.n	80064d6 <HAL_SPI_Transmit+0x16e>
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d106      	bne.n	80064e4 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80064d6:	2303      	movs	r3, #3
 80064d8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2201      	movs	r2, #1
 80064de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80064e2:	e07b      	b.n	80065dc <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1ca      	bne.n	8006484 <HAL_SPI_Transmit+0x11c>
 80064ee:	e050      	b.n	8006592 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d002      	beq.n	80064fe <HAL_SPI_Transmit+0x196>
 80064f8:	8afb      	ldrh	r3, [r7, #22]
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d144      	bne.n	8006588 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	330c      	adds	r3, #12
 8006508:	7812      	ldrb	r2, [r2, #0]
 800650a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006510:	1c5a      	adds	r2, r3, #1
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800651a:	b29b      	uxth	r3, r3
 800651c:	3b01      	subs	r3, #1
 800651e:	b29a      	uxth	r2, r3
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006524:	e030      	b.n	8006588 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	f003 0302 	and.w	r3, r3, #2
 8006530:	2b02      	cmp	r3, #2
 8006532:	d113      	bne.n	800655c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	330c      	adds	r3, #12
 800653e:	7812      	ldrb	r2, [r2, #0]
 8006540:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006546:	1c5a      	adds	r2, r3, #1
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006550:	b29b      	uxth	r3, r3
 8006552:	3b01      	subs	r3, #1
 8006554:	b29a      	uxth	r2, r3
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	86da      	strh	r2, [r3, #54]	; 0x36
 800655a:	e015      	b.n	8006588 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800655c:	f7fc fe94 	bl	8003288 <HAL_GetTick>
 8006560:	4602      	mov	r2, r0
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	683a      	ldr	r2, [r7, #0]
 8006568:	429a      	cmp	r2, r3
 800656a:	d803      	bhi.n	8006574 <HAL_SPI_Transmit+0x20c>
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006572:	d102      	bne.n	800657a <HAL_SPI_Transmit+0x212>
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d106      	bne.n	8006588 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800657a:	2303      	movs	r3, #3
 800657c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2201      	movs	r2, #1
 8006582:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006586:	e029      	b.n	80065dc <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800658c:	b29b      	uxth	r3, r3
 800658e:	2b00      	cmp	r3, #0
 8006590:	d1c9      	bne.n	8006526 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006592:	69ba      	ldr	r2, [r7, #24]
 8006594:	6839      	ldr	r1, [r7, #0]
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f000 fbcc 	bl	8006d34 <SPI_EndRxTxTransaction>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d002      	beq.n	80065a8 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2220      	movs	r2, #32
 80065a6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d10a      	bne.n	80065c6 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065b0:	2300      	movs	r3, #0
 80065b2:	613b      	str	r3, [r7, #16]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	613b      	str	r3, [r7, #16]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	613b      	str	r3, [r7, #16]
 80065c4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d002      	beq.n	80065d4 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	77fb      	strb	r3, [r7, #31]
 80065d2:	e003      	b.n	80065dc <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80065e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3720      	adds	r7, #32
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}

080065ee <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065ee:	b580      	push	{r7, lr}
 80065f0:	b088      	sub	sp, #32
 80065f2:	af02      	add	r7, sp, #8
 80065f4:	60f8      	str	r0, [r7, #12]
 80065f6:	60b9      	str	r1, [r7, #8]
 80065f8:	603b      	str	r3, [r7, #0]
 80065fa:	4613      	mov	r3, r2
 80065fc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80065fe:	2300      	movs	r3, #0
 8006600:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006608:	b2db      	uxtb	r3, r3
 800660a:	2b01      	cmp	r3, #1
 800660c:	d002      	beq.n	8006614 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800660e:	2302      	movs	r3, #2
 8006610:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006612:	e0fb      	b.n	800680c <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800661c:	d112      	bne.n	8006644 <HAL_SPI_Receive+0x56>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d10e      	bne.n	8006644 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2204      	movs	r2, #4
 800662a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800662e:	88fa      	ldrh	r2, [r7, #6]
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	9300      	str	r3, [sp, #0]
 8006634:	4613      	mov	r3, r2
 8006636:	68ba      	ldr	r2, [r7, #8]
 8006638:	68b9      	ldr	r1, [r7, #8]
 800663a:	68f8      	ldr	r0, [r7, #12]
 800663c:	f000 f8ef 	bl	800681e <HAL_SPI_TransmitReceive>
 8006640:	4603      	mov	r3, r0
 8006642:	e0e8      	b.n	8006816 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800664a:	2b01      	cmp	r3, #1
 800664c:	d101      	bne.n	8006652 <HAL_SPI_Receive+0x64>
 800664e:	2302      	movs	r3, #2
 8006650:	e0e1      	b.n	8006816 <HAL_SPI_Receive+0x228>
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2201      	movs	r2, #1
 8006656:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800665a:	f7fc fe15 	bl	8003288 <HAL_GetTick>
 800665e:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d002      	beq.n	800666c <HAL_SPI_Receive+0x7e>
 8006666:	88fb      	ldrh	r3, [r7, #6]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d102      	bne.n	8006672 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006670:	e0cc      	b.n	800680c <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2204      	movs	r2, #4
 8006676:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	68ba      	ldr	r2, [r7, #8]
 8006684:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	88fa      	ldrh	r2, [r7, #6]
 800668a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	88fa      	ldrh	r2, [r7, #6]
 8006690:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2200      	movs	r2, #0
 8006696:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2200      	movs	r2, #0
 800669c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2200      	movs	r2, #0
 80066a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066b8:	d10f      	bne.n	80066da <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80066d8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e4:	2b40      	cmp	r3, #64	; 0x40
 80066e6:	d007      	beq.n	80066f8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066f6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d16a      	bne.n	80067d6 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006700:	e032      	b.n	8006768 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	f003 0301 	and.w	r3, r3, #1
 800670c:	2b01      	cmp	r3, #1
 800670e:	d115      	bne.n	800673c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f103 020c 	add.w	r2, r3, #12
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800671c:	7812      	ldrb	r2, [r2, #0]
 800671e:	b2d2      	uxtb	r2, r2
 8006720:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006726:	1c5a      	adds	r2, r3, #1
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006730:	b29b      	uxth	r3, r3
 8006732:	3b01      	subs	r3, #1
 8006734:	b29a      	uxth	r2, r3
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	87da      	strh	r2, [r3, #62]	; 0x3e
 800673a:	e015      	b.n	8006768 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800673c:	f7fc fda4 	bl	8003288 <HAL_GetTick>
 8006740:	4602      	mov	r2, r0
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	683a      	ldr	r2, [r7, #0]
 8006748:	429a      	cmp	r2, r3
 800674a:	d803      	bhi.n	8006754 <HAL_SPI_Receive+0x166>
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006752:	d102      	bne.n	800675a <HAL_SPI_Receive+0x16c>
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d106      	bne.n	8006768 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2201      	movs	r2, #1
 8006762:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006766:	e051      	b.n	800680c <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800676c:	b29b      	uxth	r3, r3
 800676e:	2b00      	cmp	r3, #0
 8006770:	d1c7      	bne.n	8006702 <HAL_SPI_Receive+0x114>
 8006772:	e035      	b.n	80067e0 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	f003 0301 	and.w	r3, r3, #1
 800677e:	2b01      	cmp	r3, #1
 8006780:	d113      	bne.n	80067aa <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68da      	ldr	r2, [r3, #12]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800678c:	b292      	uxth	r2, r2
 800678e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006794:	1c9a      	adds	r2, r3, #2
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800679e:	b29b      	uxth	r3, r3
 80067a0:	3b01      	subs	r3, #1
 80067a2:	b29a      	uxth	r2, r3
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80067a8:	e015      	b.n	80067d6 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067aa:	f7fc fd6d 	bl	8003288 <HAL_GetTick>
 80067ae:	4602      	mov	r2, r0
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	683a      	ldr	r2, [r7, #0]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d803      	bhi.n	80067c2 <HAL_SPI_Receive+0x1d4>
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067c0:	d102      	bne.n	80067c8 <HAL_SPI_Receive+0x1da>
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d106      	bne.n	80067d6 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80067c8:	2303      	movs	r3, #3
 80067ca:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80067d4:	e01a      	b.n	800680c <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067da:	b29b      	uxth	r3, r3
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d1c9      	bne.n	8006774 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	6839      	ldr	r1, [r7, #0]
 80067e4:	68f8      	ldr	r0, [r7, #12]
 80067e6:	f000 fa53 	bl	8006c90 <SPI_EndRxTransaction>
 80067ea:	4603      	mov	r3, r0
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d002      	beq.n	80067f6 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2220      	movs	r2, #32
 80067f4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d002      	beq.n	8006804 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	75fb      	strb	r3, [r7, #23]
 8006802:	e003      	b.n	800680c <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2200      	movs	r2, #0
 8006810:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006814:	7dfb      	ldrb	r3, [r7, #23]
}
 8006816:	4618      	mov	r0, r3
 8006818:	3718      	adds	r7, #24
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}

0800681e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800681e:	b580      	push	{r7, lr}
 8006820:	b08c      	sub	sp, #48	; 0x30
 8006822:	af00      	add	r7, sp, #0
 8006824:	60f8      	str	r0, [r7, #12]
 8006826:	60b9      	str	r1, [r7, #8]
 8006828:	607a      	str	r2, [r7, #4]
 800682a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800682c:	2301      	movs	r3, #1
 800682e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006830:	2300      	movs	r3, #0
 8006832:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800683c:	2b01      	cmp	r3, #1
 800683e:	d101      	bne.n	8006844 <HAL_SPI_TransmitReceive+0x26>
 8006840:	2302      	movs	r3, #2
 8006842:	e198      	b.n	8006b76 <HAL_SPI_TransmitReceive+0x358>
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800684c:	f7fc fd1c 	bl	8003288 <HAL_GetTick>
 8006850:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006858:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006862:	887b      	ldrh	r3, [r7, #2]
 8006864:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006866:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800686a:	2b01      	cmp	r3, #1
 800686c:	d00f      	beq.n	800688e <HAL_SPI_TransmitReceive+0x70>
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006874:	d107      	bne.n	8006886 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d103      	bne.n	8006886 <HAL_SPI_TransmitReceive+0x68>
 800687e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006882:	2b04      	cmp	r3, #4
 8006884:	d003      	beq.n	800688e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006886:	2302      	movs	r3, #2
 8006888:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800688c:	e16d      	b.n	8006b6a <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d005      	beq.n	80068a0 <HAL_SPI_TransmitReceive+0x82>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d002      	beq.n	80068a0 <HAL_SPI_TransmitReceive+0x82>
 800689a:	887b      	ldrh	r3, [r7, #2]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d103      	bne.n	80068a8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80068a6:	e160      	b.n	8006b6a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	2b04      	cmp	r3, #4
 80068b2:	d003      	beq.n	80068bc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2205      	movs	r2, #5
 80068b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	887a      	ldrh	r2, [r7, #2]
 80068cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	887a      	ldrh	r2, [r7, #2]
 80068d2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	68ba      	ldr	r2, [r7, #8]
 80068d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	887a      	ldrh	r2, [r7, #2]
 80068de:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	887a      	ldrh	r2, [r7, #2]
 80068e4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2200      	movs	r2, #0
 80068ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068fc:	2b40      	cmp	r3, #64	; 0x40
 80068fe:	d007      	beq.n	8006910 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800690e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006918:	d17c      	bne.n	8006a14 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d002      	beq.n	8006928 <HAL_SPI_TransmitReceive+0x10a>
 8006922:	8b7b      	ldrh	r3, [r7, #26]
 8006924:	2b01      	cmp	r3, #1
 8006926:	d16a      	bne.n	80069fe <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800692c:	881a      	ldrh	r2, [r3, #0]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006938:	1c9a      	adds	r2, r3, #2
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006942:	b29b      	uxth	r3, r3
 8006944:	3b01      	subs	r3, #1
 8006946:	b29a      	uxth	r2, r3
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800694c:	e057      	b.n	80069fe <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	f003 0302 	and.w	r3, r3, #2
 8006958:	2b02      	cmp	r3, #2
 800695a:	d11b      	bne.n	8006994 <HAL_SPI_TransmitReceive+0x176>
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006960:	b29b      	uxth	r3, r3
 8006962:	2b00      	cmp	r3, #0
 8006964:	d016      	beq.n	8006994 <HAL_SPI_TransmitReceive+0x176>
 8006966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006968:	2b01      	cmp	r3, #1
 800696a:	d113      	bne.n	8006994 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006970:	881a      	ldrh	r2, [r3, #0]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800697c:	1c9a      	adds	r2, r3, #2
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006986:	b29b      	uxth	r3, r3
 8006988:	3b01      	subs	r3, #1
 800698a:	b29a      	uxth	r2, r3
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006990:	2300      	movs	r3, #0
 8006992:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	f003 0301 	and.w	r3, r3, #1
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d119      	bne.n	80069d6 <HAL_SPI_TransmitReceive+0x1b8>
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d014      	beq.n	80069d6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68da      	ldr	r2, [r3, #12]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b6:	b292      	uxth	r2, r2
 80069b8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069be:	1c9a      	adds	r2, r3, #2
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	3b01      	subs	r3, #1
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80069d2:	2301      	movs	r3, #1
 80069d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80069d6:	f7fc fc57 	bl	8003288 <HAL_GetTick>
 80069da:	4602      	mov	r2, r0
 80069dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069de:	1ad3      	subs	r3, r2, r3
 80069e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d80b      	bhi.n	80069fe <HAL_SPI_TransmitReceive+0x1e0>
 80069e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ec:	d007      	beq.n	80069fe <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80069fc:	e0b5      	b.n	8006b6a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d1a2      	bne.n	800694e <HAL_SPI_TransmitReceive+0x130>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d19d      	bne.n	800694e <HAL_SPI_TransmitReceive+0x130>
 8006a12:	e080      	b.n	8006b16 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d002      	beq.n	8006a22 <HAL_SPI_TransmitReceive+0x204>
 8006a1c:	8b7b      	ldrh	r3, [r7, #26]
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d16f      	bne.n	8006b02 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	330c      	adds	r3, #12
 8006a2c:	7812      	ldrb	r2, [r2, #0]
 8006a2e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a34:	1c5a      	adds	r2, r3, #1
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	3b01      	subs	r3, #1
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a48:	e05b      	b.n	8006b02 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	f003 0302 	and.w	r3, r3, #2
 8006a54:	2b02      	cmp	r3, #2
 8006a56:	d11c      	bne.n	8006a92 <HAL_SPI_TransmitReceive+0x274>
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d017      	beq.n	8006a92 <HAL_SPI_TransmitReceive+0x274>
 8006a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d114      	bne.n	8006a92 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	330c      	adds	r3, #12
 8006a72:	7812      	ldrb	r2, [r2, #0]
 8006a74:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a7a:	1c5a      	adds	r2, r3, #1
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	3b01      	subs	r3, #1
 8006a88:	b29a      	uxth	r2, r3
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	f003 0301 	and.w	r3, r3, #1
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d119      	bne.n	8006ad4 <HAL_SPI_TransmitReceive+0x2b6>
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d014      	beq.n	8006ad4 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	68da      	ldr	r2, [r3, #12]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab4:	b2d2      	uxtb	r2, r2
 8006ab6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006abc:	1c5a      	adds	r2, r3, #1
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	b29a      	uxth	r2, r3
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006ad4:	f7fc fbd8 	bl	8003288 <HAL_GetTick>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d803      	bhi.n	8006aec <HAL_SPI_TransmitReceive+0x2ce>
 8006ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aea:	d102      	bne.n	8006af2 <HAL_SPI_TransmitReceive+0x2d4>
 8006aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d107      	bne.n	8006b02 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8006af2:	2303      	movs	r3, #3
 8006af4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8006b00:	e033      	b.n	8006b6a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d19e      	bne.n	8006a4a <HAL_SPI_TransmitReceive+0x22c>
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d199      	bne.n	8006a4a <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b1a:	68f8      	ldr	r0, [r7, #12]
 8006b1c:	f000 f90a 	bl	8006d34 <SPI_EndRxTxTransaction>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d006      	beq.n	8006b34 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2220      	movs	r2, #32
 8006b30:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006b32:	e01a      	b.n	8006b6a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d10a      	bne.n	8006b52 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	617b      	str	r3, [r7, #20]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	617b      	str	r3, [r7, #20]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	617b      	str	r3, [r7, #20]
 8006b50:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d003      	beq.n	8006b62 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b60:	e003      	b.n	8006b6a <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2201      	movs	r2, #1
 8006b66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006b72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3730      	adds	r7, #48	; 0x30
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
	...

08006b80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b088      	sub	sp, #32
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	603b      	str	r3, [r7, #0]
 8006b8c:	4613      	mov	r3, r2
 8006b8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006b90:	f7fc fb7a 	bl	8003288 <HAL_GetTick>
 8006b94:	4602      	mov	r2, r0
 8006b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b98:	1a9b      	subs	r3, r3, r2
 8006b9a:	683a      	ldr	r2, [r7, #0]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006ba0:	f7fc fb72 	bl	8003288 <HAL_GetTick>
 8006ba4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006ba6:	4b39      	ldr	r3, [pc, #228]	; (8006c8c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	015b      	lsls	r3, r3, #5
 8006bac:	0d1b      	lsrs	r3, r3, #20
 8006bae:	69fa      	ldr	r2, [r7, #28]
 8006bb0:	fb02 f303 	mul.w	r3, r2, r3
 8006bb4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006bb6:	e054      	b.n	8006c62 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bbe:	d050      	beq.n	8006c62 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006bc0:	f7fc fb62 	bl	8003288 <HAL_GetTick>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	69fa      	ldr	r2, [r7, #28]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d902      	bls.n	8006bd6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006bd0:	69fb      	ldr	r3, [r7, #28]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d13d      	bne.n	8006c52 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	685a      	ldr	r2, [r3, #4]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006be4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bee:	d111      	bne.n	8006c14 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bf8:	d004      	beq.n	8006c04 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c02:	d107      	bne.n	8006c14 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c1c:	d10f      	bne.n	8006c3e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c2c:	601a      	str	r2, [r3, #0]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2201      	movs	r2, #1
 8006c42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006c4e:	2303      	movs	r3, #3
 8006c50:	e017      	b.n	8006c82 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d101      	bne.n	8006c5c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	3b01      	subs	r3, #1
 8006c60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	689a      	ldr	r2, [r3, #8]
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	68ba      	ldr	r2, [r7, #8]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	bf0c      	ite	eq
 8006c72:	2301      	moveq	r3, #1
 8006c74:	2300      	movne	r3, #0
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	461a      	mov	r2, r3
 8006c7a:	79fb      	ldrb	r3, [r7, #7]
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d19b      	bne.n	8006bb8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3720      	adds	r7, #32
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	bf00      	nop
 8006c8c:	20000000 	.word	0x20000000

08006c90 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b086      	sub	sp, #24
 8006c94:	af02      	add	r7, sp, #8
 8006c96:	60f8      	str	r0, [r7, #12]
 8006c98:	60b9      	str	r1, [r7, #8]
 8006c9a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ca4:	d111      	bne.n	8006cca <SPI_EndRxTransaction+0x3a>
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cae:	d004      	beq.n	8006cba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cb8:	d107      	bne.n	8006cca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cc8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cd2:	d117      	bne.n	8006d04 <SPI_EndRxTransaction+0x74>
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cdc:	d112      	bne.n	8006d04 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	9300      	str	r3, [sp, #0]
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	2101      	movs	r1, #1
 8006ce8:	68f8      	ldr	r0, [r7, #12]
 8006cea:	f7ff ff49 	bl	8006b80 <SPI_WaitFlagStateUntilTimeout>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d01a      	beq.n	8006d2a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cf8:	f043 0220 	orr.w	r2, r3, #32
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006d00:	2303      	movs	r3, #3
 8006d02:	e013      	b.n	8006d2c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	9300      	str	r3, [sp, #0]
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	2180      	movs	r1, #128	; 0x80
 8006d0e:	68f8      	ldr	r0, [r7, #12]
 8006d10:	f7ff ff36 	bl	8006b80 <SPI_WaitFlagStateUntilTimeout>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d007      	beq.n	8006d2a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d1e:	f043 0220 	orr.w	r2, r3, #32
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006d26:	2303      	movs	r3, #3
 8006d28:	e000      	b.n	8006d2c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3710      	adds	r7, #16
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b086      	sub	sp, #24
 8006d38:	af02      	add	r7, sp, #8
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	9300      	str	r3, [sp, #0]
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	2200      	movs	r2, #0
 8006d48:	2180      	movs	r1, #128	; 0x80
 8006d4a:	68f8      	ldr	r0, [r7, #12]
 8006d4c:	f7ff ff18 	bl	8006b80 <SPI_WaitFlagStateUntilTimeout>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d007      	beq.n	8006d66 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d5a:	f043 0220 	orr.w	r2, r3, #32
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006d62:	2303      	movs	r3, #3
 8006d64:	e000      	b.n	8006d68 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3710      	adds	r7, #16
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d101      	bne.n	8006d82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e042      	b.n	8006e08 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d106      	bne.n	8006d9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f7fc f896 	bl	8002ec8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2224      	movs	r2, #36	; 0x24
 8006da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	68da      	ldr	r2, [r3, #12]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006db2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 fcd5 	bl	8007764 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	691a      	ldr	r2, [r3, #16]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006dc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	695a      	ldr	r2, [r3, #20]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006dd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	68da      	ldr	r2, [r3, #12]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006de8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2220      	movs	r2, #32
 8006df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2220      	movs	r2, #32
 8006dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006e06:	2300      	movs	r3, #0
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3708      	adds	r7, #8
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	4613      	mov	r3, r2
 8006e1c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	2b20      	cmp	r3, #32
 8006e28:	d112      	bne.n	8006e50 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d002      	beq.n	8006e36 <HAL_UART_Receive_IT+0x26>
 8006e30:	88fb      	ldrh	r3, [r7, #6]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d101      	bne.n	8006e3a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	e00b      	b.n	8006e52 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006e40:	88fb      	ldrh	r3, [r7, #6]
 8006e42:	461a      	mov	r2, r3
 8006e44:	68b9      	ldr	r1, [r7, #8]
 8006e46:	68f8      	ldr	r0, [r7, #12]
 8006e48:	f000 fab7 	bl	80073ba <UART_Start_Receive_IT>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	e000      	b.n	8006e52 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006e50:	2302      	movs	r3, #2
  }
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3710      	adds	r7, #16
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
	...

08006e5c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b0ba      	sub	sp, #232	; 0xe8
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	695b      	ldr	r3, [r3, #20]
 8006e7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006e82:	2300      	movs	r3, #0
 8006e84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e92:	f003 030f 	and.w	r3, r3, #15
 8006e96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006e9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d10f      	bne.n	8006ec2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ea6:	f003 0320 	and.w	r3, r3, #32
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d009      	beq.n	8006ec2 <HAL_UART_IRQHandler+0x66>
 8006eae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006eb2:	f003 0320 	and.w	r3, r3, #32
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d003      	beq.n	8006ec2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 fb93 	bl	80075e6 <UART_Receive_IT>
      return;
 8006ec0:	e25b      	b.n	800737a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006ec2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	f000 80de 	beq.w	8007088 <HAL_UART_IRQHandler+0x22c>
 8006ecc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ed0:	f003 0301 	and.w	r3, r3, #1
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d106      	bne.n	8006ee6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006ed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006edc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	f000 80d1 	beq.w	8007088 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eea:	f003 0301 	and.w	r3, r3, #1
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d00b      	beq.n	8006f0a <HAL_UART_IRQHandler+0xae>
 8006ef2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d005      	beq.n	8006f0a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f02:	f043 0201 	orr.w	r2, r3, #1
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f0e:	f003 0304 	and.w	r3, r3, #4
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00b      	beq.n	8006f2e <HAL_UART_IRQHandler+0xd2>
 8006f16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f1a:	f003 0301 	and.w	r3, r3, #1
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d005      	beq.n	8006f2e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f26:	f043 0202 	orr.w	r2, r3, #2
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f32:	f003 0302 	and.w	r3, r3, #2
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00b      	beq.n	8006f52 <HAL_UART_IRQHandler+0xf6>
 8006f3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f3e:	f003 0301 	and.w	r3, r3, #1
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d005      	beq.n	8006f52 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f4a:	f043 0204 	orr.w	r2, r3, #4
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f56:	f003 0308 	and.w	r3, r3, #8
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d011      	beq.n	8006f82 <HAL_UART_IRQHandler+0x126>
 8006f5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f62:	f003 0320 	and.w	r3, r3, #32
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d105      	bne.n	8006f76 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006f6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f6e:	f003 0301 	and.w	r3, r3, #1
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d005      	beq.n	8006f82 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f7a:	f043 0208 	orr.w	r2, r3, #8
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	f000 81f2 	beq.w	8007370 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f90:	f003 0320 	and.w	r3, r3, #32
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d008      	beq.n	8006faa <HAL_UART_IRQHandler+0x14e>
 8006f98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f9c:	f003 0320 	and.w	r3, r3, #32
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d002      	beq.n	8006faa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 fb1e 	bl	80075e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	695b      	ldr	r3, [r3, #20]
 8006fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	bf14      	ite	ne
 8006fb8:	2301      	movne	r3, #1
 8006fba:	2300      	moveq	r3, #0
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fc6:	f003 0308 	and.w	r3, r3, #8
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d103      	bne.n	8006fd6 <HAL_UART_IRQHandler+0x17a>
 8006fce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d04f      	beq.n	8007076 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 fa28 	bl	800742c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	695b      	ldr	r3, [r3, #20]
 8006fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d041      	beq.n	800706e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	3314      	adds	r3, #20
 8006ff0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ff8:	e853 3f00 	ldrex	r3, [r3]
 8006ffc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007000:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007004:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007008:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	3314      	adds	r3, #20
 8007012:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007016:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800701a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800701e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007022:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007026:	e841 2300 	strex	r3, r2, [r1]
 800702a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800702e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d1d9      	bne.n	8006fea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800703a:	2b00      	cmp	r3, #0
 800703c:	d013      	beq.n	8007066 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007042:	4a7e      	ldr	r2, [pc, #504]	; (800723c <HAL_UART_IRQHandler+0x3e0>)
 8007044:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800704a:	4618      	mov	r0, r3
 800704c:	f7fc fcc0 	bl	80039d0 <HAL_DMA_Abort_IT>
 8007050:	4603      	mov	r3, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d016      	beq.n	8007084 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800705a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007060:	4610      	mov	r0, r2
 8007062:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007064:	e00e      	b.n	8007084 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 f993 	bl	8007392 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800706c:	e00a      	b.n	8007084 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 f98f 	bl	8007392 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007074:	e006      	b.n	8007084 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 f98b 	bl	8007392 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8007082:	e175      	b.n	8007370 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007084:	bf00      	nop
    return;
 8007086:	e173      	b.n	8007370 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800708c:	2b01      	cmp	r3, #1
 800708e:	f040 814f 	bne.w	8007330 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007096:	f003 0310 	and.w	r3, r3, #16
 800709a:	2b00      	cmp	r3, #0
 800709c:	f000 8148 	beq.w	8007330 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80070a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070a4:	f003 0310 	and.w	r3, r3, #16
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	f000 8141 	beq.w	8007330 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80070ae:	2300      	movs	r3, #0
 80070b0:	60bb      	str	r3, [r7, #8]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	60bb      	str	r3, [r7, #8]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	60bb      	str	r3, [r7, #8]
 80070c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	695b      	ldr	r3, [r3, #20]
 80070ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	f000 80b6 	beq.w	8007240 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80070e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	f000 8145 	beq.w	8007374 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80070ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80070f2:	429a      	cmp	r2, r3
 80070f4:	f080 813e 	bcs.w	8007374 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80070fe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007104:	699b      	ldr	r3, [r3, #24]
 8007106:	2b20      	cmp	r3, #32
 8007108:	f000 8088 	beq.w	800721c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	330c      	adds	r3, #12
 8007112:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007116:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800711a:	e853 3f00 	ldrex	r3, [r3]
 800711e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007122:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007126:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800712a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	330c      	adds	r3, #12
 8007134:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007138:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800713c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007140:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007144:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007148:	e841 2300 	strex	r3, r2, [r1]
 800714c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007150:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007154:	2b00      	cmp	r3, #0
 8007156:	d1d9      	bne.n	800710c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	3314      	adds	r3, #20
 800715e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007160:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007162:	e853 3f00 	ldrex	r3, [r3]
 8007166:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007168:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800716a:	f023 0301 	bic.w	r3, r3, #1
 800716e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	3314      	adds	r3, #20
 8007178:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800717c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007180:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007182:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007184:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007188:	e841 2300 	strex	r3, r2, [r1]
 800718c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800718e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007190:	2b00      	cmp	r3, #0
 8007192:	d1e1      	bne.n	8007158 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	3314      	adds	r3, #20
 800719a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800719e:	e853 3f00 	ldrex	r3, [r3]
 80071a2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80071a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	3314      	adds	r3, #20
 80071b4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80071b8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80071ba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071bc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80071be:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80071c0:	e841 2300 	strex	r3, r2, [r1]
 80071c4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80071c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d1e3      	bne.n	8007194 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2220      	movs	r2, #32
 80071d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	330c      	adds	r3, #12
 80071e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071e4:	e853 3f00 	ldrex	r3, [r3]
 80071e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80071ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071ec:	f023 0310 	bic.w	r3, r3, #16
 80071f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	330c      	adds	r3, #12
 80071fa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80071fe:	65ba      	str	r2, [r7, #88]	; 0x58
 8007200:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007202:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007204:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007206:	e841 2300 	strex	r3, r2, [r1]
 800720a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800720c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800720e:	2b00      	cmp	r3, #0
 8007210:	d1e3      	bne.n	80071da <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007216:	4618      	mov	r0, r3
 8007218:	f7fc fb9f 	bl	800395a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2202      	movs	r2, #2
 8007220:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800722a:	b29b      	uxth	r3, r3
 800722c:	1ad3      	subs	r3, r2, r3
 800722e:	b29b      	uxth	r3, r3
 8007230:	4619      	mov	r1, r3
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 f8b6 	bl	80073a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007238:	e09c      	b.n	8007374 <HAL_UART_IRQHandler+0x518>
 800723a:	bf00      	nop
 800723c:	080074f1 	.word	0x080074f1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007248:	b29b      	uxth	r3, r3
 800724a:	1ad3      	subs	r3, r2, r3
 800724c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007254:	b29b      	uxth	r3, r3
 8007256:	2b00      	cmp	r3, #0
 8007258:	f000 808e 	beq.w	8007378 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800725c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007260:	2b00      	cmp	r3, #0
 8007262:	f000 8089 	beq.w	8007378 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	330c      	adds	r3, #12
 800726c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800726e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007270:	e853 3f00 	ldrex	r3, [r3]
 8007274:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007278:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800727c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	330c      	adds	r3, #12
 8007286:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800728a:	647a      	str	r2, [r7, #68]	; 0x44
 800728c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007290:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007292:	e841 2300 	strex	r3, r2, [r1]
 8007296:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800729a:	2b00      	cmp	r3, #0
 800729c:	d1e3      	bne.n	8007266 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	3314      	adds	r3, #20
 80072a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a8:	e853 3f00 	ldrex	r3, [r3]
 80072ac:	623b      	str	r3, [r7, #32]
   return(result);
 80072ae:	6a3b      	ldr	r3, [r7, #32]
 80072b0:	f023 0301 	bic.w	r3, r3, #1
 80072b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	3314      	adds	r3, #20
 80072be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80072c2:	633a      	str	r2, [r7, #48]	; 0x30
 80072c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072ca:	e841 2300 	strex	r3, r2, [r1]
 80072ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80072d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d1e3      	bne.n	800729e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2220      	movs	r2, #32
 80072da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	330c      	adds	r3, #12
 80072ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	e853 3f00 	ldrex	r3, [r3]
 80072f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f023 0310 	bic.w	r3, r3, #16
 80072fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	330c      	adds	r3, #12
 8007304:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007308:	61fa      	str	r2, [r7, #28]
 800730a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800730c:	69b9      	ldr	r1, [r7, #24]
 800730e:	69fa      	ldr	r2, [r7, #28]
 8007310:	e841 2300 	strex	r3, r2, [r1]
 8007314:	617b      	str	r3, [r7, #20]
   return(result);
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d1e3      	bne.n	80072e4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2202      	movs	r2, #2
 8007320:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007322:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007326:	4619      	mov	r1, r3
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 f83b 	bl	80073a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800732e:	e023      	b.n	8007378 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007338:	2b00      	cmp	r3, #0
 800733a:	d009      	beq.n	8007350 <HAL_UART_IRQHandler+0x4f4>
 800733c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007344:	2b00      	cmp	r3, #0
 8007346:	d003      	beq.n	8007350 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 f8e5 	bl	8007518 <UART_Transmit_IT>
    return;
 800734e:	e014      	b.n	800737a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007358:	2b00      	cmp	r3, #0
 800735a:	d00e      	beq.n	800737a <HAL_UART_IRQHandler+0x51e>
 800735c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007364:	2b00      	cmp	r3, #0
 8007366:	d008      	beq.n	800737a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 f924 	bl	80075b6 <UART_EndTransmit_IT>
    return;
 800736e:	e004      	b.n	800737a <HAL_UART_IRQHandler+0x51e>
    return;
 8007370:	bf00      	nop
 8007372:	e002      	b.n	800737a <HAL_UART_IRQHandler+0x51e>
      return;
 8007374:	bf00      	nop
 8007376:	e000      	b.n	800737a <HAL_UART_IRQHandler+0x51e>
      return;
 8007378:	bf00      	nop
  }
}
 800737a:	37e8      	adds	r7, #232	; 0xe8
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007380:	b480      	push	{r7}
 8007382:	b083      	sub	sp, #12
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007388:	bf00      	nop
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	bc80      	pop	{r7}
 8007390:	4770      	bx	lr

08007392 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007392:	b480      	push	{r7}
 8007394:	b083      	sub	sp, #12
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800739a:	bf00      	nop
 800739c:	370c      	adds	r7, #12
 800739e:	46bd      	mov	sp, r7
 80073a0:	bc80      	pop	{r7}
 80073a2:	4770      	bx	lr

080073a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	460b      	mov	r3, r1
 80073ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80073b0:	bf00      	nop
 80073b2:	370c      	adds	r7, #12
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bc80      	pop	{r7}
 80073b8:	4770      	bx	lr

080073ba <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073ba:	b480      	push	{r7}
 80073bc:	b085      	sub	sp, #20
 80073be:	af00      	add	r7, sp, #0
 80073c0:	60f8      	str	r0, [r7, #12]
 80073c2:	60b9      	str	r1, [r7, #8]
 80073c4:	4613      	mov	r3, r2
 80073c6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	68ba      	ldr	r2, [r7, #8]
 80073cc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	88fa      	ldrh	r2, [r7, #6]
 80073d2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	88fa      	ldrh	r2, [r7, #6]
 80073d8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2200      	movs	r2, #0
 80073de:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2222      	movs	r2, #34	; 0x22
 80073e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	691b      	ldr	r3, [r3, #16]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d007      	beq.n	8007400 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	68da      	ldr	r2, [r3, #12]
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073fe:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	695a      	ldr	r2, [r3, #20]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f042 0201 	orr.w	r2, r2, #1
 800740e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	68da      	ldr	r2, [r3, #12]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f042 0220 	orr.w	r2, r2, #32
 800741e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	3714      	adds	r7, #20
 8007426:	46bd      	mov	sp, r7
 8007428:	bc80      	pop	{r7}
 800742a:	4770      	bx	lr

0800742c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800742c:	b480      	push	{r7}
 800742e:	b095      	sub	sp, #84	; 0x54
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	330c      	adds	r3, #12
 800743a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800743e:	e853 3f00 	ldrex	r3, [r3]
 8007442:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007446:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800744a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	330c      	adds	r3, #12
 8007452:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007454:	643a      	str	r2, [r7, #64]	; 0x40
 8007456:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007458:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800745a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800745c:	e841 2300 	strex	r3, r2, [r1]
 8007460:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007464:	2b00      	cmp	r3, #0
 8007466:	d1e5      	bne.n	8007434 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	3314      	adds	r3, #20
 800746e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007470:	6a3b      	ldr	r3, [r7, #32]
 8007472:	e853 3f00 	ldrex	r3, [r3]
 8007476:	61fb      	str	r3, [r7, #28]
   return(result);
 8007478:	69fb      	ldr	r3, [r7, #28]
 800747a:	f023 0301 	bic.w	r3, r3, #1
 800747e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	3314      	adds	r3, #20
 8007486:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007488:	62fa      	str	r2, [r7, #44]	; 0x2c
 800748a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800748e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007490:	e841 2300 	strex	r3, r2, [r1]
 8007494:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007498:	2b00      	cmp	r3, #0
 800749a:	d1e5      	bne.n	8007468 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d119      	bne.n	80074d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	330c      	adds	r3, #12
 80074aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	e853 3f00 	ldrex	r3, [r3]
 80074b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	f023 0310 	bic.w	r3, r3, #16
 80074ba:	647b      	str	r3, [r7, #68]	; 0x44
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	330c      	adds	r3, #12
 80074c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074c4:	61ba      	str	r2, [r7, #24]
 80074c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c8:	6979      	ldr	r1, [r7, #20]
 80074ca:	69ba      	ldr	r2, [r7, #24]
 80074cc:	e841 2300 	strex	r3, r2, [r1]
 80074d0:	613b      	str	r3, [r7, #16]
   return(result);
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d1e5      	bne.n	80074a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2220      	movs	r2, #32
 80074dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80074e6:	bf00      	nop
 80074e8:	3754      	adds	r7, #84	; 0x54
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bc80      	pop	{r7}
 80074ee:	4770      	bx	lr

080074f0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2200      	movs	r2, #0
 8007502:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2200      	movs	r2, #0
 8007508:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800750a:	68f8      	ldr	r0, [r7, #12]
 800750c:	f7ff ff41 	bl	8007392 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007510:	bf00      	nop
 8007512:	3710      	adds	r7, #16
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007518:	b480      	push	{r7}
 800751a:	b085      	sub	sp, #20
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007526:	b2db      	uxtb	r3, r3
 8007528:	2b21      	cmp	r3, #33	; 0x21
 800752a:	d13e      	bne.n	80075aa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007534:	d114      	bne.n	8007560 <UART_Transmit_IT+0x48>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d110      	bne.n	8007560 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6a1b      	ldr	r3, [r3, #32]
 8007542:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	881b      	ldrh	r3, [r3, #0]
 8007548:	461a      	mov	r2, r3
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007552:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6a1b      	ldr	r3, [r3, #32]
 8007558:	1c9a      	adds	r2, r3, #2
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	621a      	str	r2, [r3, #32]
 800755e:	e008      	b.n	8007572 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6a1b      	ldr	r3, [r3, #32]
 8007564:	1c59      	adds	r1, r3, #1
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	6211      	str	r1, [r2, #32]
 800756a:	781a      	ldrb	r2, [r3, #0]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007576:	b29b      	uxth	r3, r3
 8007578:	3b01      	subs	r3, #1
 800757a:	b29b      	uxth	r3, r3
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	4619      	mov	r1, r3
 8007580:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007582:	2b00      	cmp	r3, #0
 8007584:	d10f      	bne.n	80075a6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	68da      	ldr	r2, [r3, #12]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007594:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	68da      	ldr	r2, [r3, #12]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075a4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80075a6:	2300      	movs	r3, #0
 80075a8:	e000      	b.n	80075ac <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80075aa:	2302      	movs	r3, #2
  }
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3714      	adds	r7, #20
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bc80      	pop	{r7}
 80075b4:	4770      	bx	lr

080075b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b082      	sub	sp, #8
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	68da      	ldr	r2, [r3, #12]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2220      	movs	r2, #32
 80075d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f7ff fed2 	bl	8007380 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80075dc:	2300      	movs	r3, #0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3708      	adds	r7, #8
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}

080075e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80075e6:	b580      	push	{r7, lr}
 80075e8:	b08c      	sub	sp, #48	; 0x30
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	2b22      	cmp	r3, #34	; 0x22
 80075f8:	f040 80ae 	bne.w	8007758 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007604:	d117      	bne.n	8007636 <UART_Receive_IT+0x50>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	691b      	ldr	r3, [r3, #16]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d113      	bne.n	8007636 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800760e:	2300      	movs	r3, #0
 8007610:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007616:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	b29b      	uxth	r3, r3
 8007620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007624:	b29a      	uxth	r2, r3
 8007626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007628:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800762e:	1c9a      	adds	r2, r3, #2
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	629a      	str	r2, [r3, #40]	; 0x28
 8007634:	e026      	b.n	8007684 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800763a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800763c:	2300      	movs	r3, #0
 800763e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007648:	d007      	beq.n	800765a <UART_Receive_IT+0x74>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d10a      	bne.n	8007668 <UART_Receive_IT+0x82>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	691b      	ldr	r3, [r3, #16]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d106      	bne.n	8007668 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	b2da      	uxtb	r2, r3
 8007662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007664:	701a      	strb	r2, [r3, #0]
 8007666:	e008      	b.n	800767a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	b2db      	uxtb	r3, r3
 8007670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007674:	b2da      	uxtb	r2, r3
 8007676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007678:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800767e:	1c5a      	adds	r2, r3, #1
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007688:	b29b      	uxth	r3, r3
 800768a:	3b01      	subs	r3, #1
 800768c:	b29b      	uxth	r3, r3
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	4619      	mov	r1, r3
 8007692:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007694:	2b00      	cmp	r3, #0
 8007696:	d15d      	bne.n	8007754 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	68da      	ldr	r2, [r3, #12]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f022 0220 	bic.w	r2, r2, #32
 80076a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	68da      	ldr	r2, [r3, #12]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	695a      	ldr	r2, [r3, #20]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f022 0201 	bic.w	r2, r2, #1
 80076c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2220      	movs	r2, #32
 80076cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d135      	bne.n	800774a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	330c      	adds	r3, #12
 80076ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	e853 3f00 	ldrex	r3, [r3]
 80076f2:	613b      	str	r3, [r7, #16]
   return(result);
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	f023 0310 	bic.w	r3, r3, #16
 80076fa:	627b      	str	r3, [r7, #36]	; 0x24
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	330c      	adds	r3, #12
 8007702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007704:	623a      	str	r2, [r7, #32]
 8007706:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007708:	69f9      	ldr	r1, [r7, #28]
 800770a:	6a3a      	ldr	r2, [r7, #32]
 800770c:	e841 2300 	strex	r3, r2, [r1]
 8007710:	61bb      	str	r3, [r7, #24]
   return(result);
 8007712:	69bb      	ldr	r3, [r7, #24]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d1e5      	bne.n	80076e4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f003 0310 	and.w	r3, r3, #16
 8007722:	2b10      	cmp	r3, #16
 8007724:	d10a      	bne.n	800773c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007726:	2300      	movs	r3, #0
 8007728:	60fb      	str	r3, [r7, #12]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	60fb      	str	r3, [r7, #12]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	60fb      	str	r3, [r7, #12]
 800773a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007740:	4619      	mov	r1, r3
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f7ff fe2e 	bl	80073a4 <HAL_UARTEx_RxEventCallback>
 8007748:	e002      	b.n	8007750 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f7fa f98e 	bl	8001a6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007750:	2300      	movs	r3, #0
 8007752:	e002      	b.n	800775a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007754:	2300      	movs	r3, #0
 8007756:	e000      	b.n	800775a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007758:	2302      	movs	r3, #2
  }
}
 800775a:	4618      	mov	r0, r3
 800775c:	3730      	adds	r7, #48	; 0x30
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
	...

08007764 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	691b      	ldr	r3, [r3, #16]
 8007772:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	68da      	ldr	r2, [r3, #12]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	430a      	orrs	r2, r1
 8007780:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	689a      	ldr	r2, [r3, #8]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	691b      	ldr	r3, [r3, #16]
 800778a:	431a      	orrs	r2, r3
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	695b      	ldr	r3, [r3, #20]
 8007790:	4313      	orrs	r3, r2
 8007792:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	68db      	ldr	r3, [r3, #12]
 800779a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800779e:	f023 030c 	bic.w	r3, r3, #12
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	6812      	ldr	r2, [r2, #0]
 80077a6:	68b9      	ldr	r1, [r7, #8]
 80077a8:	430b      	orrs	r3, r1
 80077aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	695b      	ldr	r3, [r3, #20]
 80077b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	699a      	ldr	r2, [r3, #24]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	430a      	orrs	r2, r1
 80077c0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a2c      	ldr	r2, [pc, #176]	; (8007878 <UART_SetConfig+0x114>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d103      	bne.n	80077d4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80077cc:	f7fe fc60 	bl	8006090 <HAL_RCC_GetPCLK2Freq>
 80077d0:	60f8      	str	r0, [r7, #12]
 80077d2:	e002      	b.n	80077da <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80077d4:	f7fe fc48 	bl	8006068 <HAL_RCC_GetPCLK1Freq>
 80077d8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80077da:	68fa      	ldr	r2, [r7, #12]
 80077dc:	4613      	mov	r3, r2
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	4413      	add	r3, r2
 80077e2:	009a      	lsls	r2, r3, #2
 80077e4:	441a      	add	r2, r3
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80077f0:	4a22      	ldr	r2, [pc, #136]	; (800787c <UART_SetConfig+0x118>)
 80077f2:	fba2 2303 	umull	r2, r3, r2, r3
 80077f6:	095b      	lsrs	r3, r3, #5
 80077f8:	0119      	lsls	r1, r3, #4
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	4613      	mov	r3, r2
 80077fe:	009b      	lsls	r3, r3, #2
 8007800:	4413      	add	r3, r2
 8007802:	009a      	lsls	r2, r3, #2
 8007804:	441a      	add	r2, r3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007810:	4b1a      	ldr	r3, [pc, #104]	; (800787c <UART_SetConfig+0x118>)
 8007812:	fba3 0302 	umull	r0, r3, r3, r2
 8007816:	095b      	lsrs	r3, r3, #5
 8007818:	2064      	movs	r0, #100	; 0x64
 800781a:	fb00 f303 	mul.w	r3, r0, r3
 800781e:	1ad3      	subs	r3, r2, r3
 8007820:	011b      	lsls	r3, r3, #4
 8007822:	3332      	adds	r3, #50	; 0x32
 8007824:	4a15      	ldr	r2, [pc, #84]	; (800787c <UART_SetConfig+0x118>)
 8007826:	fba2 2303 	umull	r2, r3, r2, r3
 800782a:	095b      	lsrs	r3, r3, #5
 800782c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007830:	4419      	add	r1, r3
 8007832:	68fa      	ldr	r2, [r7, #12]
 8007834:	4613      	mov	r3, r2
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	4413      	add	r3, r2
 800783a:	009a      	lsls	r2, r3, #2
 800783c:	441a      	add	r2, r3
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	fbb2 f2f3 	udiv	r2, r2, r3
 8007848:	4b0c      	ldr	r3, [pc, #48]	; (800787c <UART_SetConfig+0x118>)
 800784a:	fba3 0302 	umull	r0, r3, r3, r2
 800784e:	095b      	lsrs	r3, r3, #5
 8007850:	2064      	movs	r0, #100	; 0x64
 8007852:	fb00 f303 	mul.w	r3, r0, r3
 8007856:	1ad3      	subs	r3, r2, r3
 8007858:	011b      	lsls	r3, r3, #4
 800785a:	3332      	adds	r3, #50	; 0x32
 800785c:	4a07      	ldr	r2, [pc, #28]	; (800787c <UART_SetConfig+0x118>)
 800785e:	fba2 2303 	umull	r2, r3, r2, r3
 8007862:	095b      	lsrs	r3, r3, #5
 8007864:	f003 020f 	and.w	r2, r3, #15
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	440a      	add	r2, r1
 800786e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007870:	bf00      	nop
 8007872:	3710      	adds	r7, #16
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}
 8007878:	40013800 	.word	0x40013800
 800787c:	51eb851f 	.word	0x51eb851f

08007880 <malloc>:
 8007880:	4b02      	ldr	r3, [pc, #8]	; (800788c <malloc+0xc>)
 8007882:	4601      	mov	r1, r0
 8007884:	6818      	ldr	r0, [r3, #0]
 8007886:	f000 b82b 	b.w	80078e0 <_malloc_r>
 800788a:	bf00      	nop
 800788c:	20000058 	.word	0x20000058

08007890 <free>:
 8007890:	4b02      	ldr	r3, [pc, #8]	; (800789c <free+0xc>)
 8007892:	4601      	mov	r1, r0
 8007894:	6818      	ldr	r0, [r3, #0]
 8007896:	f000 b8f3 	b.w	8007a80 <_free_r>
 800789a:	bf00      	nop
 800789c:	20000058 	.word	0x20000058

080078a0 <sbrk_aligned>:
 80078a0:	b570      	push	{r4, r5, r6, lr}
 80078a2:	4e0e      	ldr	r6, [pc, #56]	; (80078dc <sbrk_aligned+0x3c>)
 80078a4:	460c      	mov	r4, r1
 80078a6:	6831      	ldr	r1, [r6, #0]
 80078a8:	4605      	mov	r5, r0
 80078aa:	b911      	cbnz	r1, 80078b2 <sbrk_aligned+0x12>
 80078ac:	f000 f8ac 	bl	8007a08 <_sbrk_r>
 80078b0:	6030      	str	r0, [r6, #0]
 80078b2:	4621      	mov	r1, r4
 80078b4:	4628      	mov	r0, r5
 80078b6:	f000 f8a7 	bl	8007a08 <_sbrk_r>
 80078ba:	1c43      	adds	r3, r0, #1
 80078bc:	d00a      	beq.n	80078d4 <sbrk_aligned+0x34>
 80078be:	1cc4      	adds	r4, r0, #3
 80078c0:	f024 0403 	bic.w	r4, r4, #3
 80078c4:	42a0      	cmp	r0, r4
 80078c6:	d007      	beq.n	80078d8 <sbrk_aligned+0x38>
 80078c8:	1a21      	subs	r1, r4, r0
 80078ca:	4628      	mov	r0, r5
 80078cc:	f000 f89c 	bl	8007a08 <_sbrk_r>
 80078d0:	3001      	adds	r0, #1
 80078d2:	d101      	bne.n	80078d8 <sbrk_aligned+0x38>
 80078d4:	f04f 34ff 	mov.w	r4, #4294967295
 80078d8:	4620      	mov	r0, r4
 80078da:	bd70      	pop	{r4, r5, r6, pc}
 80078dc:	200003c4 	.word	0x200003c4

080078e0 <_malloc_r>:
 80078e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078e4:	1ccd      	adds	r5, r1, #3
 80078e6:	f025 0503 	bic.w	r5, r5, #3
 80078ea:	3508      	adds	r5, #8
 80078ec:	2d0c      	cmp	r5, #12
 80078ee:	bf38      	it	cc
 80078f0:	250c      	movcc	r5, #12
 80078f2:	2d00      	cmp	r5, #0
 80078f4:	4607      	mov	r7, r0
 80078f6:	db01      	blt.n	80078fc <_malloc_r+0x1c>
 80078f8:	42a9      	cmp	r1, r5
 80078fa:	d905      	bls.n	8007908 <_malloc_r+0x28>
 80078fc:	230c      	movs	r3, #12
 80078fe:	2600      	movs	r6, #0
 8007900:	603b      	str	r3, [r7, #0]
 8007902:	4630      	mov	r0, r6
 8007904:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007908:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80079dc <_malloc_r+0xfc>
 800790c:	f000 f868 	bl	80079e0 <__malloc_lock>
 8007910:	f8d8 3000 	ldr.w	r3, [r8]
 8007914:	461c      	mov	r4, r3
 8007916:	bb5c      	cbnz	r4, 8007970 <_malloc_r+0x90>
 8007918:	4629      	mov	r1, r5
 800791a:	4638      	mov	r0, r7
 800791c:	f7ff ffc0 	bl	80078a0 <sbrk_aligned>
 8007920:	1c43      	adds	r3, r0, #1
 8007922:	4604      	mov	r4, r0
 8007924:	d155      	bne.n	80079d2 <_malloc_r+0xf2>
 8007926:	f8d8 4000 	ldr.w	r4, [r8]
 800792a:	4626      	mov	r6, r4
 800792c:	2e00      	cmp	r6, #0
 800792e:	d145      	bne.n	80079bc <_malloc_r+0xdc>
 8007930:	2c00      	cmp	r4, #0
 8007932:	d048      	beq.n	80079c6 <_malloc_r+0xe6>
 8007934:	6823      	ldr	r3, [r4, #0]
 8007936:	4631      	mov	r1, r6
 8007938:	4638      	mov	r0, r7
 800793a:	eb04 0903 	add.w	r9, r4, r3
 800793e:	f000 f863 	bl	8007a08 <_sbrk_r>
 8007942:	4581      	cmp	r9, r0
 8007944:	d13f      	bne.n	80079c6 <_malloc_r+0xe6>
 8007946:	6821      	ldr	r1, [r4, #0]
 8007948:	4638      	mov	r0, r7
 800794a:	1a6d      	subs	r5, r5, r1
 800794c:	4629      	mov	r1, r5
 800794e:	f7ff ffa7 	bl	80078a0 <sbrk_aligned>
 8007952:	3001      	adds	r0, #1
 8007954:	d037      	beq.n	80079c6 <_malloc_r+0xe6>
 8007956:	6823      	ldr	r3, [r4, #0]
 8007958:	442b      	add	r3, r5
 800795a:	6023      	str	r3, [r4, #0]
 800795c:	f8d8 3000 	ldr.w	r3, [r8]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d038      	beq.n	80079d6 <_malloc_r+0xf6>
 8007964:	685a      	ldr	r2, [r3, #4]
 8007966:	42a2      	cmp	r2, r4
 8007968:	d12b      	bne.n	80079c2 <_malloc_r+0xe2>
 800796a:	2200      	movs	r2, #0
 800796c:	605a      	str	r2, [r3, #4]
 800796e:	e00f      	b.n	8007990 <_malloc_r+0xb0>
 8007970:	6822      	ldr	r2, [r4, #0]
 8007972:	1b52      	subs	r2, r2, r5
 8007974:	d41f      	bmi.n	80079b6 <_malloc_r+0xd6>
 8007976:	2a0b      	cmp	r2, #11
 8007978:	d917      	bls.n	80079aa <_malloc_r+0xca>
 800797a:	1961      	adds	r1, r4, r5
 800797c:	42a3      	cmp	r3, r4
 800797e:	6025      	str	r5, [r4, #0]
 8007980:	bf18      	it	ne
 8007982:	6059      	strne	r1, [r3, #4]
 8007984:	6863      	ldr	r3, [r4, #4]
 8007986:	bf08      	it	eq
 8007988:	f8c8 1000 	streq.w	r1, [r8]
 800798c:	5162      	str	r2, [r4, r5]
 800798e:	604b      	str	r3, [r1, #4]
 8007990:	4638      	mov	r0, r7
 8007992:	f104 060b 	add.w	r6, r4, #11
 8007996:	f000 f829 	bl	80079ec <__malloc_unlock>
 800799a:	f026 0607 	bic.w	r6, r6, #7
 800799e:	1d23      	adds	r3, r4, #4
 80079a0:	1af2      	subs	r2, r6, r3
 80079a2:	d0ae      	beq.n	8007902 <_malloc_r+0x22>
 80079a4:	1b9b      	subs	r3, r3, r6
 80079a6:	50a3      	str	r3, [r4, r2]
 80079a8:	e7ab      	b.n	8007902 <_malloc_r+0x22>
 80079aa:	42a3      	cmp	r3, r4
 80079ac:	6862      	ldr	r2, [r4, #4]
 80079ae:	d1dd      	bne.n	800796c <_malloc_r+0x8c>
 80079b0:	f8c8 2000 	str.w	r2, [r8]
 80079b4:	e7ec      	b.n	8007990 <_malloc_r+0xb0>
 80079b6:	4623      	mov	r3, r4
 80079b8:	6864      	ldr	r4, [r4, #4]
 80079ba:	e7ac      	b.n	8007916 <_malloc_r+0x36>
 80079bc:	4634      	mov	r4, r6
 80079be:	6876      	ldr	r6, [r6, #4]
 80079c0:	e7b4      	b.n	800792c <_malloc_r+0x4c>
 80079c2:	4613      	mov	r3, r2
 80079c4:	e7cc      	b.n	8007960 <_malloc_r+0x80>
 80079c6:	230c      	movs	r3, #12
 80079c8:	4638      	mov	r0, r7
 80079ca:	603b      	str	r3, [r7, #0]
 80079cc:	f000 f80e 	bl	80079ec <__malloc_unlock>
 80079d0:	e797      	b.n	8007902 <_malloc_r+0x22>
 80079d2:	6025      	str	r5, [r4, #0]
 80079d4:	e7dc      	b.n	8007990 <_malloc_r+0xb0>
 80079d6:	605b      	str	r3, [r3, #4]
 80079d8:	deff      	udf	#255	; 0xff
 80079da:	bf00      	nop
 80079dc:	200003c0 	.word	0x200003c0

080079e0 <__malloc_lock>:
 80079e0:	4801      	ldr	r0, [pc, #4]	; (80079e8 <__malloc_lock+0x8>)
 80079e2:	f000 b84b 	b.w	8007a7c <__retarget_lock_acquire_recursive>
 80079e6:	bf00      	nop
 80079e8:	20000504 	.word	0x20000504

080079ec <__malloc_unlock>:
 80079ec:	4801      	ldr	r0, [pc, #4]	; (80079f4 <__malloc_unlock+0x8>)
 80079ee:	f000 b846 	b.w	8007a7e <__retarget_lock_release_recursive>
 80079f2:	bf00      	nop
 80079f4:	20000504 	.word	0x20000504

080079f8 <memset>:
 80079f8:	4603      	mov	r3, r0
 80079fa:	4402      	add	r2, r0
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d100      	bne.n	8007a02 <memset+0xa>
 8007a00:	4770      	bx	lr
 8007a02:	f803 1b01 	strb.w	r1, [r3], #1
 8007a06:	e7f9      	b.n	80079fc <memset+0x4>

08007a08 <_sbrk_r>:
 8007a08:	b538      	push	{r3, r4, r5, lr}
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	4d05      	ldr	r5, [pc, #20]	; (8007a24 <_sbrk_r+0x1c>)
 8007a0e:	4604      	mov	r4, r0
 8007a10:	4608      	mov	r0, r1
 8007a12:	602b      	str	r3, [r5, #0]
 8007a14:	f7fb fb52 	bl	80030bc <_sbrk>
 8007a18:	1c43      	adds	r3, r0, #1
 8007a1a:	d102      	bne.n	8007a22 <_sbrk_r+0x1a>
 8007a1c:	682b      	ldr	r3, [r5, #0]
 8007a1e:	b103      	cbz	r3, 8007a22 <_sbrk_r+0x1a>
 8007a20:	6023      	str	r3, [r4, #0]
 8007a22:	bd38      	pop	{r3, r4, r5, pc}
 8007a24:	20000500 	.word	0x20000500

08007a28 <__errno>:
 8007a28:	4b01      	ldr	r3, [pc, #4]	; (8007a30 <__errno+0x8>)
 8007a2a:	6818      	ldr	r0, [r3, #0]
 8007a2c:	4770      	bx	lr
 8007a2e:	bf00      	nop
 8007a30:	20000058 	.word	0x20000058

08007a34 <__libc_init_array>:
 8007a34:	b570      	push	{r4, r5, r6, lr}
 8007a36:	2600      	movs	r6, #0
 8007a38:	4d0c      	ldr	r5, [pc, #48]	; (8007a6c <__libc_init_array+0x38>)
 8007a3a:	4c0d      	ldr	r4, [pc, #52]	; (8007a70 <__libc_init_array+0x3c>)
 8007a3c:	1b64      	subs	r4, r4, r5
 8007a3e:	10a4      	asrs	r4, r4, #2
 8007a40:	42a6      	cmp	r6, r4
 8007a42:	d109      	bne.n	8007a58 <__libc_init_array+0x24>
 8007a44:	f000 f864 	bl	8007b10 <_init>
 8007a48:	2600      	movs	r6, #0
 8007a4a:	4d0a      	ldr	r5, [pc, #40]	; (8007a74 <__libc_init_array+0x40>)
 8007a4c:	4c0a      	ldr	r4, [pc, #40]	; (8007a78 <__libc_init_array+0x44>)
 8007a4e:	1b64      	subs	r4, r4, r5
 8007a50:	10a4      	asrs	r4, r4, #2
 8007a52:	42a6      	cmp	r6, r4
 8007a54:	d105      	bne.n	8007a62 <__libc_init_array+0x2e>
 8007a56:	bd70      	pop	{r4, r5, r6, pc}
 8007a58:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a5c:	4798      	blx	r3
 8007a5e:	3601      	adds	r6, #1
 8007a60:	e7ee      	b.n	8007a40 <__libc_init_array+0xc>
 8007a62:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a66:	4798      	blx	r3
 8007a68:	3601      	adds	r6, #1
 8007a6a:	e7f2      	b.n	8007a52 <__libc_init_array+0x1e>
 8007a6c:	08007b5c 	.word	0x08007b5c
 8007a70:	08007b5c 	.word	0x08007b5c
 8007a74:	08007b5c 	.word	0x08007b5c
 8007a78:	08007b60 	.word	0x08007b60

08007a7c <__retarget_lock_acquire_recursive>:
 8007a7c:	4770      	bx	lr

08007a7e <__retarget_lock_release_recursive>:
 8007a7e:	4770      	bx	lr

08007a80 <_free_r>:
 8007a80:	b538      	push	{r3, r4, r5, lr}
 8007a82:	4605      	mov	r5, r0
 8007a84:	2900      	cmp	r1, #0
 8007a86:	d040      	beq.n	8007b0a <_free_r+0x8a>
 8007a88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a8c:	1f0c      	subs	r4, r1, #4
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	bfb8      	it	lt
 8007a92:	18e4      	addlt	r4, r4, r3
 8007a94:	f7ff ffa4 	bl	80079e0 <__malloc_lock>
 8007a98:	4a1c      	ldr	r2, [pc, #112]	; (8007b0c <_free_r+0x8c>)
 8007a9a:	6813      	ldr	r3, [r2, #0]
 8007a9c:	b933      	cbnz	r3, 8007aac <_free_r+0x2c>
 8007a9e:	6063      	str	r3, [r4, #4]
 8007aa0:	6014      	str	r4, [r2, #0]
 8007aa2:	4628      	mov	r0, r5
 8007aa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007aa8:	f7ff bfa0 	b.w	80079ec <__malloc_unlock>
 8007aac:	42a3      	cmp	r3, r4
 8007aae:	d908      	bls.n	8007ac2 <_free_r+0x42>
 8007ab0:	6820      	ldr	r0, [r4, #0]
 8007ab2:	1821      	adds	r1, r4, r0
 8007ab4:	428b      	cmp	r3, r1
 8007ab6:	bf01      	itttt	eq
 8007ab8:	6819      	ldreq	r1, [r3, #0]
 8007aba:	685b      	ldreq	r3, [r3, #4]
 8007abc:	1809      	addeq	r1, r1, r0
 8007abe:	6021      	streq	r1, [r4, #0]
 8007ac0:	e7ed      	b.n	8007a9e <_free_r+0x1e>
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	b10b      	cbz	r3, 8007acc <_free_r+0x4c>
 8007ac8:	42a3      	cmp	r3, r4
 8007aca:	d9fa      	bls.n	8007ac2 <_free_r+0x42>
 8007acc:	6811      	ldr	r1, [r2, #0]
 8007ace:	1850      	adds	r0, r2, r1
 8007ad0:	42a0      	cmp	r0, r4
 8007ad2:	d10b      	bne.n	8007aec <_free_r+0x6c>
 8007ad4:	6820      	ldr	r0, [r4, #0]
 8007ad6:	4401      	add	r1, r0
 8007ad8:	1850      	adds	r0, r2, r1
 8007ada:	4283      	cmp	r3, r0
 8007adc:	6011      	str	r1, [r2, #0]
 8007ade:	d1e0      	bne.n	8007aa2 <_free_r+0x22>
 8007ae0:	6818      	ldr	r0, [r3, #0]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	4408      	add	r0, r1
 8007ae6:	6010      	str	r0, [r2, #0]
 8007ae8:	6053      	str	r3, [r2, #4]
 8007aea:	e7da      	b.n	8007aa2 <_free_r+0x22>
 8007aec:	d902      	bls.n	8007af4 <_free_r+0x74>
 8007aee:	230c      	movs	r3, #12
 8007af0:	602b      	str	r3, [r5, #0]
 8007af2:	e7d6      	b.n	8007aa2 <_free_r+0x22>
 8007af4:	6820      	ldr	r0, [r4, #0]
 8007af6:	1821      	adds	r1, r4, r0
 8007af8:	428b      	cmp	r3, r1
 8007afa:	bf01      	itttt	eq
 8007afc:	6819      	ldreq	r1, [r3, #0]
 8007afe:	685b      	ldreq	r3, [r3, #4]
 8007b00:	1809      	addeq	r1, r1, r0
 8007b02:	6021      	streq	r1, [r4, #0]
 8007b04:	6063      	str	r3, [r4, #4]
 8007b06:	6054      	str	r4, [r2, #4]
 8007b08:	e7cb      	b.n	8007aa2 <_free_r+0x22>
 8007b0a:	bd38      	pop	{r3, r4, r5, pc}
 8007b0c:	200003c0 	.word	0x200003c0

08007b10 <_init>:
 8007b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b12:	bf00      	nop
 8007b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b16:	bc08      	pop	{r3}
 8007b18:	469e      	mov	lr, r3
 8007b1a:	4770      	bx	lr

08007b1c <_fini>:
 8007b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b1e:	bf00      	nop
 8007b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b22:	bc08      	pop	{r3}
 8007b24:	469e      	mov	lr, r3
 8007b26:	4770      	bx	lr
