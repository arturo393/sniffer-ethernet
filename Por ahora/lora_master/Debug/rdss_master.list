
rdss_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007400  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800750c  0800750c  0001750c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007538  08007538  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08007538  08007538  00017538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007540  08007540  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007540  08007540  00017540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007544  08007544  00017544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08007548  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000464  2000005c  080075a4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c0  080075a4  000204c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011ee3  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e9b  00000000  00000000  00031fab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f98  00000000  00000000  00034e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c19  00000000  00000000  00035de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019eb1  00000000  00000000  000369f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014f14  00000000  00000000  000508aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ee8e  00000000  00000000  000657be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000440c  00000000  00000000  000f464c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000f8a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080074f4 	.word	0x080074f4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080074f4 	.word	0x080074f4

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2iz>:
 8000608:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30f      	bcc.n	8000632 <__aeabi_f2iz+0x2a>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d90d      	bls.n	8000638 <__aeabi_f2iz+0x30>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000628:	fa23 f002 	lsr.w	r0, r3, r2
 800062c:	bf18      	it	ne
 800062e:	4240      	negne	r0, r0
 8000630:	4770      	bx	lr
 8000632:	f04f 0000 	mov.w	r0, #0
 8000636:	4770      	bx	lr
 8000638:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800063c:	d101      	bne.n	8000642 <__aeabi_f2iz+0x3a>
 800063e:	0242      	lsls	r2, r0, #9
 8000640:	d105      	bne.n	800064e <__aeabi_f2iz+0x46>
 8000642:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000646:	bf08      	it	eq
 8000648:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr

08000654 <__aeabi_f2uiz>:
 8000654:	0042      	lsls	r2, r0, #1
 8000656:	d20e      	bcs.n	8000676 <__aeabi_f2uiz+0x22>
 8000658:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800065c:	d30b      	bcc.n	8000676 <__aeabi_f2uiz+0x22>
 800065e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000662:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000666:	d409      	bmi.n	800067c <__aeabi_f2uiz+0x28>
 8000668:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800066c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000670:	fa23 f002 	lsr.w	r0, r3, r2
 8000674:	4770      	bx	lr
 8000676:	f04f 0000 	mov.w	r0, #0
 800067a:	4770      	bx	lr
 800067c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000680:	d101      	bne.n	8000686 <__aeabi_f2uiz+0x32>
 8000682:	0242      	lsls	r2, r0, #9
 8000684:	d102      	bne.n	800068c <__aeabi_f2uiz+0x38>
 8000686:	f04f 30ff 	mov.w	r0, #4294967295
 800068a:	4770      	bx	lr
 800068c:	f04f 0000 	mov.w	r0, #0
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <__aeabi_uldivmod>:
 8000694:	b953      	cbnz	r3, 80006ac <__aeabi_uldivmod+0x18>
 8000696:	b94a      	cbnz	r2, 80006ac <__aeabi_uldivmod+0x18>
 8000698:	2900      	cmp	r1, #0
 800069a:	bf08      	it	eq
 800069c:	2800      	cmpeq	r0, #0
 800069e:	bf1c      	itt	ne
 80006a0:	f04f 31ff 	movne.w	r1, #4294967295
 80006a4:	f04f 30ff 	movne.w	r0, #4294967295
 80006a8:	f000 b972 	b.w	8000990 <__aeabi_idiv0>
 80006ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80006b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006b4:	f000 f806 	bl	80006c4 <__udivmoddi4>
 80006b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006c0:	b004      	add	sp, #16
 80006c2:	4770      	bx	lr

080006c4 <__udivmoddi4>:
 80006c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006c8:	9e08      	ldr	r6, [sp, #32]
 80006ca:	460d      	mov	r5, r1
 80006cc:	4604      	mov	r4, r0
 80006ce:	468e      	mov	lr, r1
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d14c      	bne.n	800076e <__udivmoddi4+0xaa>
 80006d4:	428a      	cmp	r2, r1
 80006d6:	4694      	mov	ip, r2
 80006d8:	d967      	bls.n	80007aa <__udivmoddi4+0xe6>
 80006da:	fab2 f382 	clz	r3, r2
 80006de:	b153      	cbz	r3, 80006f6 <__udivmoddi4+0x32>
 80006e0:	fa02 fc03 	lsl.w	ip, r2, r3
 80006e4:	f1c3 0220 	rsb	r2, r3, #32
 80006e8:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ec:	fa20 f202 	lsr.w	r2, r0, r2
 80006f0:	ea42 0e0e 	orr.w	lr, r2, lr
 80006f4:	409c      	lsls	r4, r3
 80006f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006fa:	fbbe f1f7 	udiv	r1, lr, r7
 80006fe:	fa1f f58c 	uxth.w	r5, ip
 8000702:	fb07 ee11 	mls	lr, r7, r1, lr
 8000706:	fb01 f005 	mul.w	r0, r1, r5
 800070a:	0c22      	lsrs	r2, r4, #16
 800070c:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000710:	4290      	cmp	r0, r2
 8000712:	d90a      	bls.n	800072a <__udivmoddi4+0x66>
 8000714:	eb1c 0202 	adds.w	r2, ip, r2
 8000718:	f101 3eff 	add.w	lr, r1, #4294967295
 800071c:	f080 8119 	bcs.w	8000952 <__udivmoddi4+0x28e>
 8000720:	4290      	cmp	r0, r2
 8000722:	f240 8116 	bls.w	8000952 <__udivmoddi4+0x28e>
 8000726:	3902      	subs	r1, #2
 8000728:	4462      	add	r2, ip
 800072a:	1a12      	subs	r2, r2, r0
 800072c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000730:	fb07 2210 	mls	r2, r7, r0, r2
 8000734:	fb00 f505 	mul.w	r5, r0, r5
 8000738:	b2a4      	uxth	r4, r4
 800073a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800073e:	42a5      	cmp	r5, r4
 8000740:	d90a      	bls.n	8000758 <__udivmoddi4+0x94>
 8000742:	eb1c 0404 	adds.w	r4, ip, r4
 8000746:	f100 32ff 	add.w	r2, r0, #4294967295
 800074a:	f080 8104 	bcs.w	8000956 <__udivmoddi4+0x292>
 800074e:	42a5      	cmp	r5, r4
 8000750:	f240 8101 	bls.w	8000956 <__udivmoddi4+0x292>
 8000754:	4464      	add	r4, ip
 8000756:	3802      	subs	r0, #2
 8000758:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800075c:	2100      	movs	r1, #0
 800075e:	1b64      	subs	r4, r4, r5
 8000760:	b11e      	cbz	r6, 800076a <__udivmoddi4+0xa6>
 8000762:	40dc      	lsrs	r4, r3
 8000764:	2300      	movs	r3, #0
 8000766:	e9c6 4300 	strd	r4, r3, [r6]
 800076a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800076e:	428b      	cmp	r3, r1
 8000770:	d908      	bls.n	8000784 <__udivmoddi4+0xc0>
 8000772:	2e00      	cmp	r6, #0
 8000774:	f000 80ea 	beq.w	800094c <__udivmoddi4+0x288>
 8000778:	2100      	movs	r1, #0
 800077a:	e9c6 0500 	strd	r0, r5, [r6]
 800077e:	4608      	mov	r0, r1
 8000780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000784:	fab3 f183 	clz	r1, r3
 8000788:	2900      	cmp	r1, #0
 800078a:	d148      	bne.n	800081e <__udivmoddi4+0x15a>
 800078c:	42ab      	cmp	r3, r5
 800078e:	d302      	bcc.n	8000796 <__udivmoddi4+0xd2>
 8000790:	4282      	cmp	r2, r0
 8000792:	f200 80f8 	bhi.w	8000986 <__udivmoddi4+0x2c2>
 8000796:	1a84      	subs	r4, r0, r2
 8000798:	eb65 0203 	sbc.w	r2, r5, r3
 800079c:	2001      	movs	r0, #1
 800079e:	4696      	mov	lr, r2
 80007a0:	2e00      	cmp	r6, #0
 80007a2:	d0e2      	beq.n	800076a <__udivmoddi4+0xa6>
 80007a4:	e9c6 4e00 	strd	r4, lr, [r6]
 80007a8:	e7df      	b.n	800076a <__udivmoddi4+0xa6>
 80007aa:	b902      	cbnz	r2, 80007ae <__udivmoddi4+0xea>
 80007ac:	deff      	udf	#255	; 0xff
 80007ae:	fab2 f382 	clz	r3, r2
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	f040 808e 	bne.w	80008d4 <__udivmoddi4+0x210>
 80007b8:	1a88      	subs	r0, r1, r2
 80007ba:	2101      	movs	r1, #1
 80007bc:	0c17      	lsrs	r7, r2, #16
 80007be:	fa1f fe82 	uxth.w	lr, r2
 80007c2:	fbb0 f5f7 	udiv	r5, r0, r7
 80007c6:	fb07 0015 	mls	r0, r7, r5, r0
 80007ca:	0c22      	lsrs	r2, r4, #16
 80007cc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80007d0:	fb0e f005 	mul.w	r0, lr, r5
 80007d4:	4290      	cmp	r0, r2
 80007d6:	d908      	bls.n	80007ea <__udivmoddi4+0x126>
 80007d8:	eb1c 0202 	adds.w	r2, ip, r2
 80007dc:	f105 38ff 	add.w	r8, r5, #4294967295
 80007e0:	d202      	bcs.n	80007e8 <__udivmoddi4+0x124>
 80007e2:	4290      	cmp	r0, r2
 80007e4:	f200 80cc 	bhi.w	8000980 <__udivmoddi4+0x2bc>
 80007e8:	4645      	mov	r5, r8
 80007ea:	1a12      	subs	r2, r2, r0
 80007ec:	fbb2 f0f7 	udiv	r0, r2, r7
 80007f0:	fb07 2210 	mls	r2, r7, r0, r2
 80007f4:	fb0e fe00 	mul.w	lr, lr, r0
 80007f8:	b2a4      	uxth	r4, r4
 80007fa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80007fe:	45a6      	cmp	lr, r4
 8000800:	d908      	bls.n	8000814 <__udivmoddi4+0x150>
 8000802:	eb1c 0404 	adds.w	r4, ip, r4
 8000806:	f100 32ff 	add.w	r2, r0, #4294967295
 800080a:	d202      	bcs.n	8000812 <__udivmoddi4+0x14e>
 800080c:	45a6      	cmp	lr, r4
 800080e:	f200 80b4 	bhi.w	800097a <__udivmoddi4+0x2b6>
 8000812:	4610      	mov	r0, r2
 8000814:	eba4 040e 	sub.w	r4, r4, lr
 8000818:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800081c:	e7a0      	b.n	8000760 <__udivmoddi4+0x9c>
 800081e:	f1c1 0720 	rsb	r7, r1, #32
 8000822:	408b      	lsls	r3, r1
 8000824:	fa22 fc07 	lsr.w	ip, r2, r7
 8000828:	ea4c 0c03 	orr.w	ip, ip, r3
 800082c:	fa25 fa07 	lsr.w	sl, r5, r7
 8000830:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000834:	fbba f8f9 	udiv	r8, sl, r9
 8000838:	408d      	lsls	r5, r1
 800083a:	fa20 f307 	lsr.w	r3, r0, r7
 800083e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000842:	fa1f fe8c 	uxth.w	lr, ip
 8000846:	432b      	orrs	r3, r5
 8000848:	fa00 f501 	lsl.w	r5, r0, r1
 800084c:	fb08 f00e 	mul.w	r0, r8, lr
 8000850:	0c1c      	lsrs	r4, r3, #16
 8000852:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000856:	42a0      	cmp	r0, r4
 8000858:	fa02 f201 	lsl.w	r2, r2, r1
 800085c:	d90b      	bls.n	8000876 <__udivmoddi4+0x1b2>
 800085e:	eb1c 0404 	adds.w	r4, ip, r4
 8000862:	f108 3aff 	add.w	sl, r8, #4294967295
 8000866:	f080 8086 	bcs.w	8000976 <__udivmoddi4+0x2b2>
 800086a:	42a0      	cmp	r0, r4
 800086c:	f240 8083 	bls.w	8000976 <__udivmoddi4+0x2b2>
 8000870:	f1a8 0802 	sub.w	r8, r8, #2
 8000874:	4464      	add	r4, ip
 8000876:	1a24      	subs	r4, r4, r0
 8000878:	b298      	uxth	r0, r3
 800087a:	fbb4 f3f9 	udiv	r3, r4, r9
 800087e:	fb09 4413 	mls	r4, r9, r3, r4
 8000882:	fb03 fe0e 	mul.w	lr, r3, lr
 8000886:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 800088a:	45a6      	cmp	lr, r4
 800088c:	d908      	bls.n	80008a0 <__udivmoddi4+0x1dc>
 800088e:	eb1c 0404 	adds.w	r4, ip, r4
 8000892:	f103 30ff 	add.w	r0, r3, #4294967295
 8000896:	d26a      	bcs.n	800096e <__udivmoddi4+0x2aa>
 8000898:	45a6      	cmp	lr, r4
 800089a:	d968      	bls.n	800096e <__udivmoddi4+0x2aa>
 800089c:	3b02      	subs	r3, #2
 800089e:	4464      	add	r4, ip
 80008a0:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80008a4:	fba0 9302 	umull	r9, r3, r0, r2
 80008a8:	eba4 040e 	sub.w	r4, r4, lr
 80008ac:	429c      	cmp	r4, r3
 80008ae:	46c8      	mov	r8, r9
 80008b0:	469e      	mov	lr, r3
 80008b2:	d354      	bcc.n	800095e <__udivmoddi4+0x29a>
 80008b4:	d051      	beq.n	800095a <__udivmoddi4+0x296>
 80008b6:	2e00      	cmp	r6, #0
 80008b8:	d067      	beq.n	800098a <__udivmoddi4+0x2c6>
 80008ba:	ebb5 0308 	subs.w	r3, r5, r8
 80008be:	eb64 040e 	sbc.w	r4, r4, lr
 80008c2:	40cb      	lsrs	r3, r1
 80008c4:	fa04 f707 	lsl.w	r7, r4, r7
 80008c8:	431f      	orrs	r7, r3
 80008ca:	40cc      	lsrs	r4, r1
 80008cc:	e9c6 7400 	strd	r7, r4, [r6]
 80008d0:	2100      	movs	r1, #0
 80008d2:	e74a      	b.n	800076a <__udivmoddi4+0xa6>
 80008d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80008d8:	f1c3 0020 	rsb	r0, r3, #32
 80008dc:	40c1      	lsrs	r1, r0
 80008de:	409d      	lsls	r5, r3
 80008e0:	fa24 f000 	lsr.w	r0, r4, r0
 80008e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008e8:	4328      	orrs	r0, r5
 80008ea:	fbb1 f5f7 	udiv	r5, r1, r7
 80008ee:	fb07 1115 	mls	r1, r7, r5, r1
 80008f2:	fa1f fe8c 	uxth.w	lr, ip
 80008f6:	0c02      	lsrs	r2, r0, #16
 80008f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008fc:	fb05 f10e 	mul.w	r1, r5, lr
 8000900:	4291      	cmp	r1, r2
 8000902:	fa04 f403 	lsl.w	r4, r4, r3
 8000906:	d908      	bls.n	800091a <__udivmoddi4+0x256>
 8000908:	eb1c 0202 	adds.w	r2, ip, r2
 800090c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000910:	d22f      	bcs.n	8000972 <__udivmoddi4+0x2ae>
 8000912:	4291      	cmp	r1, r2
 8000914:	d92d      	bls.n	8000972 <__udivmoddi4+0x2ae>
 8000916:	3d02      	subs	r5, #2
 8000918:	4462      	add	r2, ip
 800091a:	1a52      	subs	r2, r2, r1
 800091c:	fbb2 f1f7 	udiv	r1, r2, r7
 8000920:	fb07 2211 	mls	r2, r7, r1, r2
 8000924:	b280      	uxth	r0, r0
 8000926:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800092a:	fb01 f20e 	mul.w	r2, r1, lr
 800092e:	4282      	cmp	r2, r0
 8000930:	d908      	bls.n	8000944 <__udivmoddi4+0x280>
 8000932:	eb1c 0000 	adds.w	r0, ip, r0
 8000936:	f101 38ff 	add.w	r8, r1, #4294967295
 800093a:	d216      	bcs.n	800096a <__udivmoddi4+0x2a6>
 800093c:	4282      	cmp	r2, r0
 800093e:	d914      	bls.n	800096a <__udivmoddi4+0x2a6>
 8000940:	3902      	subs	r1, #2
 8000942:	4460      	add	r0, ip
 8000944:	1a80      	subs	r0, r0, r2
 8000946:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800094a:	e73a      	b.n	80007c2 <__udivmoddi4+0xfe>
 800094c:	4631      	mov	r1, r6
 800094e:	4630      	mov	r0, r6
 8000950:	e70b      	b.n	800076a <__udivmoddi4+0xa6>
 8000952:	4671      	mov	r1, lr
 8000954:	e6e9      	b.n	800072a <__udivmoddi4+0x66>
 8000956:	4610      	mov	r0, r2
 8000958:	e6fe      	b.n	8000758 <__udivmoddi4+0x94>
 800095a:	454d      	cmp	r5, r9
 800095c:	d2ab      	bcs.n	80008b6 <__udivmoddi4+0x1f2>
 800095e:	ebb9 0802 	subs.w	r8, r9, r2
 8000962:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000966:	3801      	subs	r0, #1
 8000968:	e7a5      	b.n	80008b6 <__udivmoddi4+0x1f2>
 800096a:	4641      	mov	r1, r8
 800096c:	e7ea      	b.n	8000944 <__udivmoddi4+0x280>
 800096e:	4603      	mov	r3, r0
 8000970:	e796      	b.n	80008a0 <__udivmoddi4+0x1dc>
 8000972:	4645      	mov	r5, r8
 8000974:	e7d1      	b.n	800091a <__udivmoddi4+0x256>
 8000976:	46d0      	mov	r8, sl
 8000978:	e77d      	b.n	8000876 <__udivmoddi4+0x1b2>
 800097a:	4464      	add	r4, ip
 800097c:	3802      	subs	r0, #2
 800097e:	e749      	b.n	8000814 <__udivmoddi4+0x150>
 8000980:	3d02      	subs	r5, #2
 8000982:	4462      	add	r2, ip
 8000984:	e731      	b.n	80007ea <__udivmoddi4+0x126>
 8000986:	4608      	mov	r0, r1
 8000988:	e70a      	b.n	80007a0 <__udivmoddi4+0xdc>
 800098a:	4631      	mov	r1, r6
 800098c:	e6ed      	b.n	800076a <__udivmoddi4+0xa6>
 800098e:	bf00      	nop

08000990 <__aeabi_idiv0>:
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop

08000994 <readRegister>:
 * https://github.com/realspinner/SX1278_LoRa
 */

#include <SX1278.h>

uint8_t readRegister(SPI_HandleTypeDef *spi, uint8_t address) {
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	460b      	mov	r3, r1
 800099e:	70fb      	strb	r3, [r7, #3]
	uint8_t rec = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET);  // pull the pin low
 80009a4:	2200      	movs	r2, #0
 80009a6:	2101      	movs	r1, #1
 80009a8:	480f      	ldr	r0, [pc, #60]	; (80009e8 <readRegister+0x54>)
 80009aa:	f002 ff58 	bl	800385e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80009ae:	2001      	movs	r0, #1
 80009b0:	f002 fbd6 	bl	8003160 <HAL_Delay>
	HAL_SPI_Transmit(spi, &address, 1, 100);  // send address
 80009b4:	1cf9      	adds	r1, r7, #3
 80009b6:	2364      	movs	r3, #100	; 0x64
 80009b8:	2201      	movs	r2, #1
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f005 f9c6 	bl	8005d4c <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi, &rec, 1, 100);  // receive 6 bytes data
 80009c0:	f107 010f 	add.w	r1, r7, #15
 80009c4:	2364      	movs	r3, #100	; 0x64
 80009c6:	2201      	movs	r2, #1
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f005 fb02 	bl	8005fd2 <HAL_SPI_Receive>
	HAL_Delay(1);
 80009ce:	2001      	movs	r0, #1
 80009d0:	f002 fbc6 	bl	8003160 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);  // pull the pin high
 80009d4:	2201      	movs	r2, #1
 80009d6:	2101      	movs	r1, #1
 80009d8:	4803      	ldr	r0, [pc, #12]	; (80009e8 <readRegister+0x54>)
 80009da:	f002 ff40 	bl	800385e <HAL_GPIO_WritePin>
	return rec;
 80009de:	7bfb      	ldrb	r3, [r7, #15]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3710      	adds	r7, #16
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40010c00 	.word	0x40010c00

080009ec <writeRegister>:

void writeRegister(SPI_HandleTypeDef *spi, uint8_t address, uint8_t *cmd,
		uint8_t lenght) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b088      	sub	sp, #32
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	607a      	str	r2, [r7, #4]
 80009f6:	461a      	mov	r2, r3
 80009f8:	460b      	mov	r3, r1
 80009fa:	72fb      	strb	r3, [r7, #11]
 80009fc:	4613      	mov	r3, r2
 80009fe:	72bb      	strb	r3, [r7, #10]
	if (lenght > 4)
 8000a00:	7abb      	ldrb	r3, [r7, #10]
 8000a02:	2b04      	cmp	r3, #4
 8000a04:	d837      	bhi.n	8000a76 <writeRegister+0x8a>
		return;
	uint8_t tx_data[5] = { 0 };
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	753b      	strb	r3, [r7, #20]
	tx_data[0] = address | 0x80;
 8000a0e:	7afb      	ldrb	r3, [r7, #11]
 8000a10:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	743b      	strb	r3, [r7, #16]
	int j = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]
	for (int i = 1; i <= lenght; i++) {
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	61bb      	str	r3, [r7, #24]
 8000a20:	e00f      	b.n	8000a42 <writeRegister+0x56>
		tx_data[i] = cmd[j++];
 8000a22:	69fb      	ldr	r3, [r7, #28]
 8000a24:	1c5a      	adds	r2, r3, #1
 8000a26:	61fa      	str	r2, [r7, #28]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	7819      	ldrb	r1, [r3, #0]
 8000a30:	f107 0210 	add.w	r2, r7, #16
 8000a34:	69bb      	ldr	r3, [r7, #24]
 8000a36:	4413      	add	r3, r2
 8000a38:	460a      	mov	r2, r1
 8000a3a:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i <= lenght; i++) {
 8000a3c:	69bb      	ldr	r3, [r7, #24]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	61bb      	str	r3, [r7, #24]
 8000a42:	7abb      	ldrb	r3, [r7, #10]
 8000a44:	69ba      	ldr	r2, [r7, #24]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	ddeb      	ble.n	8000a22 <writeRegister+0x36>
	}
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET);  // pull the pin low
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	480c      	ldr	r0, [pc, #48]	; (8000a80 <writeRegister+0x94>)
 8000a50:	f002 ff05 	bl	800385e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi, tx_data, lenght + 1, 1000);
 8000a54:	7abb      	ldrb	r3, [r7, #10]
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	3301      	adds	r3, #1
 8000a5a:	b29a      	uxth	r2, r3
 8000a5c:	f107 0110 	add.w	r1, r7, #16
 8000a60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a64:	68f8      	ldr	r0, [r7, #12]
 8000a66:	f005 f971 	bl	8005d4c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);  // pull the pin high
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	4804      	ldr	r0, [pc, #16]	; (8000a80 <writeRegister+0x94>)
 8000a70:	f002 fef5 	bl	800385e <HAL_GPIO_WritePin>
 8000a74:	e000      	b.n	8000a78 <writeRegister+0x8c>
		return;
 8000a76:	bf00      	nop
//	HAL_Delay(10);
}
 8000a78:	3720      	adds	r7, #32
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40010c00 	.word	0x40010c00

08000a84 <setRFFrequencyReg>:
	rec = spi->Instance->DR; // read data
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);  // pull the pin high
	return rec;
}

void setRFFrequencyReg(SX1278_t *module) {
 8000a84:	b5b0      	push	{r4, r5, r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
	uint64_t freq = ((uint64_t) module->frequency << 19) / FXOSC;
 8000a8c:	6879      	ldr	r1, [r7, #4]
 8000a8e:	6809      	ldr	r1, [r1, #0]
 8000a90:	2000      	movs	r0, #0
 8000a92:	460a      	mov	r2, r1
 8000a94:	4603      	mov	r3, r0
 8000a96:	0b55      	lsrs	r5, r2, #13
 8000a98:	04d4      	lsls	r4, r2, #19
 8000a9a:	4a19      	ldr	r2, [pc, #100]	; (8000b00 <setRFFrequencyReg+0x7c>)
 8000a9c:	f04f 0300 	mov.w	r3, #0
 8000aa0:	4620      	mov	r0, r4
 8000aa2:	4629      	mov	r1, r5
 8000aa4:	f7ff fdf6 	bl	8000694 <__aeabi_uldivmod>
 8000aa8:	4602      	mov	r2, r0
 8000aaa:	460b      	mov	r3, r1
 8000aac:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 8000ab0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000ab4:	f04f 0200 	mov.w	r2, #0
 8000ab8:	f04f 0300 	mov.w	r3, #0
 8000abc:	0c02      	lsrs	r2, r0, #16
 8000abe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ac2:	0c0b      	lsrs	r3, r1, #16
 8000ac4:	b2d3      	uxtb	r3, r2
 8000ac6:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 8000ac8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000acc:	f04f 0200 	mov.w	r2, #0
 8000ad0:	f04f 0300 	mov.w	r3, #0
 8000ad4:	0a02      	lsrs	r2, r0, #8
 8000ad6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000ada:	0a0b      	lsrs	r3, r1, #8
 8000adc:	b2d3      	uxtb	r3, r2
 8000ade:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 8000ae0:	7c3b      	ldrb	r3, [r7, #16]
 8000ae2:	73bb      	strb	r3, [r7, #14]
	writeRegister(module->spi, LR_RegFrMsb, freq_reg, sizeof(freq_reg));
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000aea:	f107 020c 	add.w	r2, r7, #12
 8000aee:	2303      	movs	r3, #3
 8000af0:	2106      	movs	r1, #6
 8000af2:	f7ff ff7b 	bl	80009ec <writeRegister>

}
 8000af6:	bf00      	nop
 8000af8:	3718      	adds	r7, #24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bdb0      	pop	{r4, r5, r7, pc}
 8000afe:	bf00      	nop
 8000b00:	01e84800 	.word	0x01e84800

08000b04 <setOutputPower>:

void setOutputPower(SX1278_t *module) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
	writeRegister(module->spi, LR_RegPaConfig, &(module->power), 1);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	f103 020c 	add.w	r2, r3, #12
 8000b18:	2301      	movs	r3, #1
 8000b1a:	2109      	movs	r1, #9
 8000b1c:	f7ff ff66 	bl	80009ec <writeRegister>
}
 8000b20:	bf00      	nop
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <setOvercurrentProtect>:

void setLORAWAN(SX1278_t *module) {
	writeRegister(module->spi, RegSyncWord, &(module->syncWord), 1);
}

void setOvercurrentProtect(SX1278_t *module) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
	writeRegister(module->spi, LR_RegOcp, &(module->ocp), 1);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	f103 0212 	add.w	r2, r3, #18
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	210b      	movs	r1, #11
 8000b40:	f7ff ff54 	bl	80009ec <writeRegister>
}
 8000b44:	bf00      	nop
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <setPreambleParameters>:

void setLNAGain(SX1278_t *module) {
	writeRegister(module->spi, LR_RegLna, &(module->lnaGain), 1);
}

void setPreambleParameters(SX1278_t *module) {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]

	writeRegister(module->spi, LR_RegSymbTimeoutLsb, &(module->symbTimeoutLsb),
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	f103 0215 	add.w	r2, r3, #21
 8000b60:	2301      	movs	r3, #1
 8000b62:	211f      	movs	r1, #31
 8000b64:	f7ff ff42 	bl	80009ec <writeRegister>
			1);
	writeRegister(module->spi, LR_RegPreambleMsb, &(module->preambleLengthMsb),
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	f103 0217 	add.w	r2, r3, #23
 8000b74:	2301      	movs	r3, #1
 8000b76:	2120      	movs	r1, #32
 8000b78:	f7ff ff38 	bl	80009ec <writeRegister>
			1);
	writeRegister(module->spi, LR_RegPreambleLsb, &(module->preambleLengthLsb),
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	f103 0218 	add.w	r2, r3, #24
 8000b88:	2301      	movs	r3, #1
 8000b8a:	2121      	movs	r1, #33	; 0x21
 8000b8c:	f7ff ff2e 	bl	80009ec <writeRegister>
			1);
}
 8000b90:	bf00      	nop
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <setReModemConfig>:

void setReModemConfig(SX1278_t *module) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
	uint8_t cmd = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	73fb      	strb	r3, [r7, #15]
	cmd = module->bandwidth << 4;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	7b9b      	ldrb	r3, [r3, #14]
 8000ba8:	011b      	lsls	r3, r3, #4
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	73fb      	strb	r3, [r7, #15]
	cmd += module->codingRate << 1;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	7bdb      	ldrb	r3, [r3, #15]
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	7bfb      	ldrb	r3, [r7, #15]
 8000bb8:	4413      	add	r3, r2
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	73fb      	strb	r3, [r7, #15]
	cmd += module->headerMode;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	7f1a      	ldrb	r2, [r3, #28]
 8000bc2:	7bfb      	ldrb	r3, [r7, #15]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegModemConfig1, &cmd, 1); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000bd0:	f107 020f 	add.w	r2, r7, #15
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	211d      	movs	r1, #29
 8000bd8:	f7ff ff08 	bl	80009ec <writeRegister>

	cmd = module->spreadFactor << 4;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	7b5b      	ldrb	r3, [r3, #13]
 8000be0:	011b      	lsls	r3, r3, #4
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	73fb      	strb	r3, [r7, #15]
	cmd += module->LoRa_CRC_sum << 2;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	7c1b      	ldrb	r3, [r3, #16]
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	7bfb      	ldrb	r3, [r7, #15]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	73fb      	strb	r3, [r7, #15]
	cmd += module->symbTimeoutMsb;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	7d9a      	ldrb	r2, [r3, #22]
 8000bfa:	7bfb      	ldrb	r3, [r7, #15]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegModemConfig2, &cmd, 1);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000c08:	f107 020f 	add.w	r2, r7, #15
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	211e      	movs	r1, #30
 8000c10:	f7ff feec 	bl	80009ec <writeRegister>
	writeRegister(module->spi, LR_RegModemConfig3, &(module->AgcAutoOn), 1);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	f103 0214 	add.w	r2, r3, #20
 8000c20:	2301      	movs	r3, #1
 8000c22:	2126      	movs	r1, #38	; 0x26
 8000c24:	f7ff fee2 	bl	80009ec <writeRegister>
}
 8000c28:	bf00      	nop
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <setDetectionParametersReg>:

void setDetectionParametersReg(SX1278_t *module) {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = readRegister(module->spi, LR_RegDetectOptimize);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8000c3e:	2131      	movs	r1, #49	; 0x31
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff fea7 	bl	8000994 <readRegister>
 8000c46:	4603      	mov	r3, r0
 8000c48:	73fb      	strb	r3, [r7, #15]
	tmp &= 0xF8;
 8000c4a:	7bfb      	ldrb	r3, [r7, #15]
 8000c4c:	f023 0307 	bic.w	r3, r3, #7
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	73fb      	strb	r3, [r7, #15]
	tmp |= 0x05;
 8000c54:	7bfb      	ldrb	r3, [r7, #15]
 8000c56:	f043 0305 	orr.w	r3, r3, #5
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegDetectOptimize, &tmp, 1);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000c64:	f107 020f 	add.w	r2, r7, #15
 8000c68:	2301      	movs	r3, #1
 8000c6a:	2131      	movs	r1, #49	; 0x31
 8000c6c:	f7ff febe 	bl	80009ec <writeRegister>
	tmp = 0x0C;
 8000c70:	230c      	movs	r3, #12
 8000c72:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegDetectionThreshold, &tmp, 1);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000c7a:	f107 020f 	add.w	r2, r7, #15
 8000c7e:	2301      	movs	r3, #1
 8000c80:	2137      	movs	r1, #55	; 0x37
 8000c82:	f7ff feb3 	bl	80009ec <writeRegister>
}
 8000c86:	bf00      	nop
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <setLoRaLowFreqModeReg>:
void readOperatingMode(SX1278_t *module) {
	module->operatingMode = (0x07 & readRegister(module->spi,
	LR_RegOpMode));
}

void setLoRaLowFreqModeReg(SX1278_t *module, OPERATING_MODE_t mode) {
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b084      	sub	sp, #16
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
 8000c96:	460b      	mov	r3, r1
 8000c98:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd = LORA_MODE_ACTIVATION | LOW_FREQUENCY_MODE | mode;
 8000c9a:	78fb      	ldrb	r3, [r7, #3]
 8000c9c:	f063 0377 	orn	r3, r3, #119	; 0x77
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegOpMode, &cmd, 1);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000caa:	f107 020f 	add.w	r2, r7, #15
 8000cae:	2301      	movs	r3, #1
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	f7ff fe9b 	bl	80009ec <writeRegister>
	module->operatingMode = mode;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	78fa      	ldrb	r2, [r7, #3]
 8000cba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8000cbe:	bf00      	nop
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <clearIrqFlagsReg>:

void clearIrqFlagsReg(SX1278_t *module) {
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b084      	sub	sp, #16
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
	uint8_t cmd = 0xFF;
 8000cce:	23ff      	movs	r3, #255	; 0xff
 8000cd0:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegIrqFlags, &cmd, 1);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000cd8:	f107 020f 	add.w	r2, r7, #15
 8000cdc:	2301      	movs	r3, #1
 8000cde:	2112      	movs	r1, #18
 8000ce0:	f7ff fe84 	bl	80009ec <writeRegister>
}
 8000ce4:	bf00      	nop
 8000ce6:	3710      	adds	r7, #16
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <writeLoRaParametersReg>:

void writeLoRaParametersReg(SX1278_t *module) {
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
	setLoRaLowFreqModeReg(module, SLEEP);
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f7ff ffc9 	bl	8000c8e <setLoRaLowFreqModeReg>
	HAL_Delay(15);
 8000cfc:	200f      	movs	r0, #15
 8000cfe:	f002 fa2f 	bl	8003160 <HAL_Delay>
	setRFFrequencyReg(module);
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f7ff febe 	bl	8000a84 <setRFFrequencyReg>
	writeRegister(module->spi, RegSyncWord, &(module->syncWord), 1);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	f103 0211 	add.w	r2, r3, #17
 8000d14:	2301      	movs	r3, #1
 8000d16:	2139      	movs	r1, #57	; 0x39
 8000d18:	f7ff fe68 	bl	80009ec <writeRegister>
	setOutputPower(module);
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	f7ff fef1 	bl	8000b04 <setOutputPower>
	setOvercurrentProtect(module);
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f7ff ff00 	bl	8000b28 <setOvercurrentProtect>
	writeRegister(module->spi, LR_RegLna, &(module->lnaGain), 1);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f103 0213 	add.w	r2, r3, #19
 8000d34:	2301      	movs	r3, #1
 8000d36:	210c      	movs	r1, #12
 8000d38:	f7ff fe58 	bl	80009ec <writeRegister>
	if (module->spreadFactor == SF_6) {
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	7b5b      	ldrb	r3, [r3, #13]
 8000d40:	2b06      	cmp	r3, #6
 8000d42:	d109      	bne.n	8000d58 <writeLoRaParametersReg+0x6c>
		module->headerMode = IMPLICIT;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2201      	movs	r2, #1
 8000d48:	771a      	strb	r2, [r3, #28]
		module->symbTimeoutMsb = 0x03;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2203      	movs	r2, #3
 8000d4e:	759a      	strb	r2, [r3, #22]
		setDetectionParametersReg(module);
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f7ff ff6d 	bl	8000c30 <setDetectionParametersReg>
 8000d56:	e005      	b.n	8000d64 <writeLoRaParametersReg+0x78>
	} else {
		module->headerMode = EXPLICIT;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	771a      	strb	r2, [r3, #28]
		module->symbTimeoutMsb = 0x00;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2200      	movs	r2, #0
 8000d62:	759a      	strb	r2, [r3, #22]
	}

	setReModemConfig(module);
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f7ff ff17 	bl	8000b98 <setReModemConfig>
	setPreambleParameters(module);
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f7ff feee 	bl	8000b4c <setPreambleParameters>
	writeRegister(module->spi, LR_RegHopPeriod, &(module->fhssValue), 1);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f103 0219 	add.w	r2, r3, #25
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	2124      	movs	r1, #36	; 0x24
 8000d80:	f7ff fe34 	bl	80009ec <writeRegister>
	writeRegister(module->spi, LR_RegDioMapping1, &(module->dioConfig), 1);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f103 021a 	add.w	r2, r3, #26
 8000d90:	2301      	movs	r3, #1
 8000d92:	2140      	movs	r1, #64	; 0x40
 8000d94:	f7ff fe2a 	bl	80009ec <writeRegister>
	clearIrqFlagsReg(module);
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f7ff ff94 	bl	8000cc6 <clearIrqFlagsReg>
	writeRegister(module->spi, LR_RegIrqFlagsMask, &(module->flagsMode), 1);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f103 021b 	add.w	r2, r3, #27
 8000daa:	2301      	movs	r3, #1
 8000dac:	2111      	movs	r1, #17
 8000dae:	f7ff fe1d 	bl	80009ec <writeRegister>
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <changeMode>:

void changeMode(SX1278_t *module, Lora_Mode_t mode) {
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b084      	sub	sp, #16
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	70fb      	strb	r3, [r7, #3]
	uint32_t timeStart = HAL_GetTick();
 8000dc6:	f002 f9c1 	bl	800314c <HAL_GetTick>
 8000dca:	60f8      	str	r0, [r7, #12]
	if (mode == SLAVE_SENDER || mode == MASTER_SENDER) {
 8000dcc:	78fb      	ldrb	r3, [r7, #3]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d002      	beq.n	8000dd8 <changeMode+0x1e>
 8000dd2:	78fb      	ldrb	r3, [r7, #3]
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d11f      	bne.n	8000e18 <changeMode+0x5e>
		module->frequency =
				(mode == SLAVE_SENDER) ? module->upFreq : module->dlFreq;
 8000dd8:	78fb      	ldrb	r3, [r7, #3]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d102      	bne.n	8000de4 <changeMode+0x2a>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	e001      	b.n	8000de8 <changeMode+0x2e>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	685b      	ldr	r3, [r3, #4]
		module->frequency =
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	6013      	str	r3, [r2, #0]
		module->dioConfig = DIO0_TX_DONE | DIO1_RX_TIMEOUT
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2241      	movs	r2, #65	; 0x41
 8000df0:	769a      	strb	r2, [r3, #26]
				| DIO2_FHSS_CHANGE_CHANNEL | DIO3_VALID_HEADER;
		module->flagsMode = 0xff;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	22ff      	movs	r2, #255	; 0xff
 8000df6:	76da      	strb	r2, [r3, #27]
		CLEAR_BIT(module->flagsMode, TX_DONE_MASK);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	7edb      	ldrb	r3, [r3, #27]
 8000dfc:	f023 0308 	bic.w	r3, r3, #8
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	76da      	strb	r2, [r3, #27]
		module->mode = mode;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	78fa      	ldrb	r2, [r7, #3]
 8000e0a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		module->status = TX_MODE;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2201      	movs	r2, #1
 8000e12:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8000e16:	e024      	b.n	8000e62 <changeMode+0xa8>

	} else if (mode == SLAVE_RECEIVER || mode == MASTER_RECEIVER) {
 8000e18:	78fb      	ldrb	r3, [r7, #3]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d002      	beq.n	8000e24 <changeMode+0x6a>
 8000e1e:	78fb      	ldrb	r3, [r7, #3]
 8000e20:	2b03      	cmp	r3, #3
 8000e22:	d11e      	bne.n	8000e62 <changeMode+0xa8>
		module->frequency =
				(mode == SLAVE_RECEIVER) ? module->dlFreq : module->upFreq;
 8000e24:	78fb      	ldrb	r3, [r7, #3]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d102      	bne.n	8000e30 <changeMode+0x76>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	e001      	b.n	8000e34 <changeMode+0x7a>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	689b      	ldr	r3, [r3, #8]
		module->frequency =
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	6013      	str	r3, [r2, #0]

		module->dioConfig = DIO0_RX_DONE | DIO1_RX_TIMEOUT
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	769a      	strb	r2, [r3, #26]
				| DIO2_FHSS_CHANGE_CHANNEL | DIO3_VALID_HEADER;
		module->flagsMode = 0xff;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	22ff      	movs	r2, #255	; 0xff
 8000e42:	76da      	strb	r2, [r3, #27]
		module->flagsMode &= ~(RX_DONE_MASK) & ~(PAYLOAD_CRC_ERROR_MASK);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	7edb      	ldrb	r3, [r3, #27]
 8000e48:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	76da      	strb	r2, [r3, #27]
		module->mode = mode;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	78fa      	ldrb	r2, [r7, #3]
 8000e56:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		module->status = RX_MODE;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2202      	movs	r2, #2
 8000e5e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	}

	setLoRaLowFreqModeReg(module, STANDBY);
 8000e62:	2101      	movs	r1, #1
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f7ff ff12 	bl	8000c8e <setLoRaLowFreqModeReg>
	//HAL_Delay(1);
	setRFFrequencyReg(module);
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff fe0a 	bl	8000a84 <setRFFrequencyReg>
	writeRegister(module->spi, LR_RegDioMapping1, &(module->dioConfig), 1);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	f103 021a 	add.w	r2, r3, #26
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	2140      	movs	r1, #64	; 0x40
 8000e80:	f7ff fdb4 	bl	80009ec <writeRegister>
	clearIrqFlagsReg(module);
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f7ff ff1e 	bl	8000cc6 <clearIrqFlagsReg>
	writeRegister(module->spi, LR_RegIrqFlagsMask, &(module->flagsMode), 1);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f103 021b 	add.w	r2, r3, #27
 8000e96:	2301      	movs	r3, #1
 8000e98:	2111      	movs	r1, #17
 8000e9a:	f7ff fda7 	bl	80009ec <writeRegister>
}
 8000e9e:	bf00      	nop
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
	...

08000ea8 <sx1278Reset>:
	module->preambleLengthLsb = PREAMBLE_LENGTH_LSB;
	module->preambleLengthLsb = 12; // for L-TEL PROTOCOL
	module->fhssValue = HOPS_PERIOD; // for L-TEL PROTOCOL
}

void sx1278Reset() {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 8000eac:	2201      	movs	r2, #1
 8000eae:	2101      	movs	r1, #1
 8000eb0:	480a      	ldr	r0, [pc, #40]	; (8000edc <sx1278Reset+0x34>)
 8000eb2:	f002 fcd4 	bl	800385e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2101      	movs	r1, #1
 8000eba:	4808      	ldr	r0, [pc, #32]	; (8000edc <sx1278Reset+0x34>)
 8000ebc:	f002 fccf 	bl	800385e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	f002 f94d 	bl	8003160 <HAL_Delay>
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	2101      	movs	r1, #1
 8000eca:	4804      	ldr	r0, [pc, #16]	; (8000edc <sx1278Reset+0x34>)
 8000ecc:	f002 fcc7 	bl	800385e <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000ed0:	2064      	movs	r0, #100	; 0x64
 8000ed2:	f002 f945 	bl	8003160 <HAL_Delay>
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40010c00 	.word	0x40010c00

08000ee0 <waitForTxEnd>:

void waitForTxEnd(SX1278_t *loRa) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	int timeStart = HAL_GetTick();
 8000ee8:	f002 f930 	bl	800314c <HAL_GetTick>
 8000eec:	4603      	mov	r3, r0
 8000eee:	60fb      	str	r3, [r7, #12]


	while (1) {
		if (HAL_GPIO_ReadPin(LORA_BUSSY_GPIO_Port, LORA_BUSSY_Pin)) {
 8000ef0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ef4:	4819      	ldr	r0, [pc, #100]	; (8000f5c <waitForTxEnd+0x7c>)
 8000ef6:	f002 fc9b 	bl	8003830 <HAL_GPIO_ReadPin>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d015      	beq.n	8000f2c <waitForTxEnd+0x4c>

			readRegister(loRa->spi, LR_RegIrqFlags);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8000f06:	2112      	movs	r1, #18
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff fd43 	bl	8000994 <readRegister>
			clearIrqFlagsReg(loRa);
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff fed9 	bl	8000cc6 <clearIrqFlagsReg>
			loRa->status = TX_DONE;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2203      	movs	r2, #3
 8000f18:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			loRa->lastTxTime = HAL_GetTick() - timeStart;
 8000f1c:	f002 f916 	bl	800314c <HAL_GetTick>
 8000f20:	4602      	mov	r2, r0
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	1ad2      	subs	r2, r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	621a      	str	r2, [r3, #32]
			return;
 8000f2a:	e013      	b.n	8000f54 <waitForTxEnd+0x74>
		}
		if (HAL_GetTick() - timeStart > LORA_SEND_TIMEOUT) {
 8000f2c:	f002 f90e 	bl	800314c <HAL_GetTick>
 8000f30:	4602      	mov	r2, r0
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d906      	bls.n	8000f4c <waitForTxEnd+0x6c>
			sx1278Reset();
 8000f3e:	f7ff ffb3 	bl	8000ea8 <sx1278Reset>
			loRa->status = TX_TIMEOUT;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2205      	movs	r2, #5
 8000f46:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			return;
 8000f4a:	e003      	b.n	8000f54 <waitForTxEnd+0x74>
		}
		HAL_Delay(1);
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	f002 f907 	bl	8003160 <HAL_Delay>
		if (HAL_GPIO_ReadPin(LORA_BUSSY_GPIO_Port, LORA_BUSSY_Pin)) {
 8000f52:	e7cd      	b.n	8000ef0 <waitForTxEnd+0x10>
	}
}
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40010c00 	.word	0x40010c00

08000f60 <getRxFifoData>:
	flags = readRegister(module->spi, LR_RegIrqFlags);
	uint8_t errorActivation = READ_BIT(flags, PAYLOAD_CRC_ERROR_MASK);
	return errorActivation;
}

void getRxFifoData(SX1278_t *loRa) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	uint8_t timeout = 255;
 8000f68:	23ff      	movs	r3, #255	; 0xff
 8000f6a:	73fb      	strb	r3, [r7, #15]
	uint8_t addr = 0x00;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	73bb      	strb	r3, [r7, #14]
	loRa->rxSize = readRegister(loRa->spi, LR_RegRxNbBytes); //Number for received bytes
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8000f76:	2113      	movs	r1, #19
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff fd0b 	bl	8000994 <readRegister>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	461a      	mov	r2, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
	if (loRa->rxSize > 0) {
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f893 315b 	ldrb.w	r3, [r3, #347]	; 0x15b
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d021      	beq.n	8000fd6 <getRxFifoData+0x76>
		HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET); // pull the pin low
 8000f92:	2200      	movs	r2, #0
 8000f94:	2101      	movs	r1, #1
 8000f96:	4812      	ldr	r0, [pc, #72]	; (8000fe0 <getRxFifoData+0x80>)
 8000f98:	f002 fc61 	bl	800385e <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(loRa->spi, &addr, 1, timeout); // send address
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	f107 010e 	add.w	r1, r7, #14
 8000fa8:	2201      	movs	r2, #1
 8000faa:	f004 fecf 	bl	8005d4c <HAL_SPI_Transmit>
		HAL_SPI_Receive(loRa->spi, loRa->rxData, sizeof(loRa->rxData), timeout); // receive 6 bytes data
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f103 012f 	add.w	r1, r3, #47	; 0x2f
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
 8000fbc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000fc0:	f005 f807 	bl	8005fd2 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET); // pull the pin high
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <getRxFifoData+0x80>)
 8000fca:	f002 fc48 	bl	800385e <HAL_GPIO_WritePin>
		loRa->status = RX_DONE;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2204      	movs	r2, #4
 8000fd2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	}

}
 8000fd6:	bf00      	nop
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40010c00 	.word	0x40010c00

08000fe4 <setRxFifoAddr>:
	cmd = readRegister(loRa->spi, LR_RegPayloadLength);

	return cmd;
}

void setRxFifoAddr(SX1278_t *module) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	setLoRaLowFreqModeReg(module, SLEEP); //Change modem mode Must in Sleep mode
 8000fec:	2100      	movs	r1, #0
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff fe4d 	bl	8000c8e <setLoRaLowFreqModeReg>
	uint8_t cmd = module->rxSize;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f893 315b 	ldrb.w	r3, [r3, #347]	; 0x15b
 8000ffa:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegPayloadLength, &(cmd), 1); //RegPayloadLength 21byte
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8001002:	f107 020f 	add.w	r2, r7, #15
 8001006:	2301      	movs	r3, #1
 8001008:	2122      	movs	r1, #34	; 0x22
 800100a:	f7ff fcef 	bl	80009ec <writeRegister>
	uint8_t addr = 0x00;
 800100e:	2300      	movs	r3, #0
 8001010:	73bb      	strb	r3, [r7, #14]
	writeRegister(module->spi, LR_RegFifoAddrPtr, &addr, 1); //RegFifoAddrPtr
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8001018:	f107 020e 	add.w	r2, r7, #14
 800101c:	2301      	movs	r3, #1
 800101e:	210d      	movs	r1, #13
 8001020:	f7ff fce4 	bl	80009ec <writeRegister>
	module->rxSize = readRegister(module->spi, LR_RegPayloadLength);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 800102a:	2122      	movs	r1, #34	; 0x22
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fcb1 	bl	8000994 <readRegister>
 8001032:	4603      	mov	r3, r0
 8001034:	461a      	mov	r2, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
}
 800103c:	bf00      	nop
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <setTxFifoData>:

uint8_t setTxFifoData(SX1278_t *loRa) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	uint8_t cmd = loRa->txSize;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8001052:	72fb      	strb	r3, [r7, #11]
	uint8_t base_addr = 0x80;
 8001054:	2380      	movs	r3, #128	; 0x80
 8001056:	72bb      	strb	r3, [r7, #10]
	if (loRa->txSize > 0) {
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800105e:	2b00      	cmp	r3, #0
 8001060:	d02a      	beq.n	80010b8 <setTxFifoData+0x74>
		writeRegister(loRa->spi, LR_RegPayloadLength, &(cmd), 1);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8001068:	f107 020b 	add.w	r2, r7, #11
 800106c:	2301      	movs	r3, #1
 800106e:	2122      	movs	r1, #34	; 0x22
 8001070:	f7ff fcbc 	bl	80009ec <writeRegister>
		writeRegister(loRa->spi, LR_RegFifoAddrPtr, &base_addr, 1);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 800107a:	f107 020a 	add.w	r2, r7, #10
 800107e:	2301      	movs	r3, #1
 8001080:	210d      	movs	r1, #13
 8001082:	f7ff fcb3 	bl	80009ec <writeRegister>
		for (int i = 0; i < loRa->txSize; i++)
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	e00e      	b.n	80010aa <setTxFifoData+0x66>
			writeRegister(loRa->spi, 0x00, loRa->txData + i, 1);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	441a      	add	r2, r3
 800109c:	2301      	movs	r3, #1
 800109e:	2100      	movs	r1, #0
 80010a0:	f7ff fca4 	bl	80009ec <writeRegister>
		for (int i = 0; i < loRa->txSize; i++)
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	3301      	adds	r3, #1
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 80010b0:	461a      	mov	r2, r3
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	4293      	cmp	r3, r2
 80010b6:	dbe9      	blt.n	800108c <setTxFifoData+0x48>
	}
	return (loRa->txSize);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <transmit>:
	clearRxMemory(loRa);
	waitForRxDone(loRa);
	getRxFifoData(loRa);
}

void transmit(SX1278_t *loRa) {
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
	setTxFifoData(loRa);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff ffb8 	bl	8001044 <setTxFifoData>
	setLoRaLowFreqModeReg(loRa, TX);
 80010d4:	2103      	movs	r1, #3
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f7ff fdd9 	bl	8000c8e <setLoRaLowFreqModeReg>
	waitForTxEnd(loRa);
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff feff 	bl	8000ee0 <waitForTxEnd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <HAL_readLoRaSettings>:

	if (loRa->dlFreq < DOWNLINK_FREQ_MIN || loRa->dlFreq > DOWNLINK_FREQ_MAX)
		loRa->dlFreq = DOWNLINK_FREQ;
}

void HAL_readLoRaSettings(SX1278_t *loRa) {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]

	readPage(M24C64_PAGE0, &(loRa->spreadFactor), 0, 1);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f103 010d 	add.w	r1, r3, #13
 80010fa:	2301      	movs	r3, #1
 80010fc:	2200      	movs	r2, #0
 80010fe:	2000      	movs	r0, #0
 8001100:	f000 f8f0 	bl	80012e4 <readPage>
	readPage(M24C64_PAGE0, &(loRa->bandwidth), 1, 1);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f103 010e 	add.w	r1, r3, #14
 800110a:	2301      	movs	r3, #1
 800110c:	2201      	movs	r2, #1
 800110e:	2000      	movs	r0, #0
 8001110:	f000 f8e8 	bl	80012e4 <readPage>
	readPage(M24C64_PAGE0, &(loRa->codingRate), 2, 1);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f103 010f 	add.w	r1, r3, #15
 800111a:	2301      	movs	r3, #1
 800111c:	2202      	movs	r2, #2
 800111e:	2000      	movs	r0, #0
 8001120:	f000 f8e0 	bl	80012e4 <readPage>
	readPage(M24C64_PAGE1, (uint8_t*) &(loRa->dlFreq), 0, 4);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	1d19      	adds	r1, r3, #4
 8001128:	2304      	movs	r3, #4
 800112a:	2200      	movs	r2, #0
 800112c:	2001      	movs	r0, #1
 800112e:	f000 f8d9 	bl	80012e4 <readPage>
	readPage(M24C64_PAGE1, (uint8_t*) &(loRa->upFreq), 4, 4);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f103 0108 	add.w	r1, r3, #8
 8001138:	2304      	movs	r3, #4
 800113a:	2204      	movs	r2, #4
 800113c:	2001      	movs	r0, #1
 800113e:	f000 f8d1 	bl	80012e4 <readPage>
	if (loRa->spreadFactor < SF_6 || loRa->spreadFactor > SF_12)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	7b5b      	ldrb	r3, [r3, #13]
 8001146:	2b05      	cmp	r3, #5
 8001148:	d903      	bls.n	8001152 <HAL_readLoRaSettings+0x66>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	7b5b      	ldrb	r3, [r3, #13]
 800114e:	2b0c      	cmp	r3, #12
 8001150:	d902      	bls.n	8001158 <HAL_readLoRaSettings+0x6c>
		loRa->spreadFactor = SF_10;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	220a      	movs	r2, #10
 8001156:	735a      	strb	r2, [r3, #13]

	if (loRa->bandwidth < LORABW_7_8KHZ || loRa->bandwidth > LORABW_500KHZ)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	7b9b      	ldrb	r3, [r3, #14]
 800115c:	2b09      	cmp	r3, #9
 800115e:	d902      	bls.n	8001166 <HAL_readLoRaSettings+0x7a>
		loRa->bandwidth = LORABW_62_5KHZ;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2206      	movs	r2, #6
 8001164:	739a      	strb	r2, [r3, #14]

	if (loRa->codingRate < LORA_CR_4_5 || loRa->codingRate > LORA_CR_4_8)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	7bdb      	ldrb	r3, [r3, #15]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <HAL_readLoRaSettings+0x8a>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	7bdb      	ldrb	r3, [r3, #15]
 8001172:	2b04      	cmp	r3, #4
 8001174:	d902      	bls.n	800117c <HAL_readLoRaSettings+0x90>
		loRa->codingRate = LORA_CR_4_6;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2202      	movs	r2, #2
 800117a:	73da      	strb	r2, [r3, #15]

	if (loRa->upFreq < UPLINK_FREQ_MIN || loRa->upFreq > UPLINK_FREQ_MAX)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	4a0d      	ldr	r2, [pc, #52]	; (80011b8 <HAL_readLoRaSettings+0xcc>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d904      	bls.n	8001190 <HAL_readLoRaSettings+0xa4>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	4a0c      	ldr	r2, [pc, #48]	; (80011bc <HAL_readLoRaSettings+0xd0>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d902      	bls.n	8001196 <HAL_readLoRaSettings+0xaa>
		loRa->upFreq = UPLINK_FREQ;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4a0b      	ldr	r2, [pc, #44]	; (80011c0 <HAL_readLoRaSettings+0xd4>)
 8001194:	609a      	str	r2, [r3, #8]

	if (loRa->dlFreq < DOWNLINK_FREQ_MIN || loRa->dlFreq > DOWNLINK_FREQ_MAX)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	4a0a      	ldr	r2, [pc, #40]	; (80011c4 <HAL_readLoRaSettings+0xd8>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d904      	bls.n	80011aa <HAL_readLoRaSettings+0xbe>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	4a08      	ldr	r2, [pc, #32]	; (80011c8 <HAL_readLoRaSettings+0xdc>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d902      	bls.n	80011b0 <HAL_readLoRaSettings+0xc4>
		loRa->dlFreq = DOWNLINK_FREQ;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a07      	ldr	r2, [pc, #28]	; (80011cc <HAL_readLoRaSettings+0xe0>)
 80011ae:	605a      	str	r2, [r3, #4]
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	09c670ff 	.word	0x09c670ff
 80011bc:	0a5f0780 	.word	0x0a5f0780
 80011c0:	0a408300 	.word	0x0a408300
 80011c4:	08d24cff 	.word	0x08d24cff
 80011c8:	095ba140 	.word	0x095ba140
 80011cc:	093d1cc0 	.word	0x093d1cc0

080011d0 <loRaInit>:

SX1278_t* loRaInit(SPI_HandleTypeDef *hspi1, Lora_Mode_t loRaMode) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	460b      	mov	r3, r1
 80011da:	70fb      	strb	r3, [r7, #3]
	SX1278_t *loRa;
	loRa = malloc(sizeof(SX1278_t));
 80011dc:	f44f 70b4 	mov.w	r0, #360	; 0x168
 80011e0:	f006 f840 	bl	8007264 <malloc>
 80011e4:	4603      	mov	r3, r0
 80011e6:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 80011e8:	2201      	movs	r2, #1
 80011ea:	2101      	movs	r1, #1
 80011ec:	4828      	ldr	r0, [pc, #160]	; (8001290 <loRaInit+0xc0>)
 80011ee:	f002 fb36 	bl	800385e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_SET);
 80011f2:	2201      	movs	r2, #1
 80011f4:	2102      	movs	r1, #2
 80011f6:	4826      	ldr	r0, [pc, #152]	; (8001290 <loRaInit+0xc0>)
 80011f8:	f002 fb31 	bl	800385e <HAL_GPIO_WritePin>
	loRa->spi = hspi1;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
	loRa->operatingMode = readRegister(loRa->spi, LR_RegOpMode);
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 800120a:	2101      	movs	r1, #1
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff fbc1 	bl	8000994 <readRegister>
 8001212:	4603      	mov	r3, r0
 8001214:	461a      	mov	r2, r3
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	loRa->mode = -1;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	22ff      	movs	r2, #255	; 0xff
 8001220:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	loRa->power = SX1278_POWER_17DBM;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	22fc      	movs	r2, #252	; 0xfc
 8001228:	731a      	strb	r2, [r3, #12]
	loRa->LoRa_CRC_sum = CRC_ENABLE;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2201      	movs	r2, #1
 800122e:	741a      	strb	r2, [r3, #16]
	loRa->ocp = OVERCURRENTPROTECT;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	220b      	movs	r2, #11
 8001234:	749a      	strb	r2, [r3, #18]
	loRa->lnaGain = LNAGAIN;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	2223      	movs	r2, #35	; 0x23
 800123a:	74da      	strb	r2, [r3, #19]
	loRa->AgcAutoOn = 12; // for L-TEL PROTOCOL
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	220c      	movs	r2, #12
 8001240:	751a      	strb	r2, [r3, #20]
	loRa->syncWord = 0x12; // for L-TEL PROTOCOL
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2212      	movs	r2, #18
 8001246:	745a      	strb	r2, [r3, #17]
	loRa->symbTimeoutLsb = RX_TIMEOUT_LSB;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	2208      	movs	r2, #8
 800124c:	755a      	strb	r2, [r3, #21]
	loRa->preambleLengthMsb = PREAMBLE_LENGTH_MSB;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	2200      	movs	r2, #0
 8001252:	75da      	strb	r2, [r3, #23]
	loRa->preambleLengthLsb = PREAMBLE_LENGTH_LSB;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2208      	movs	r2, #8
 8001258:	761a      	strb	r2, [r3, #24]
	loRa->preambleLengthLsb = 12; // for L-TEL PROTOCOL
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	220c      	movs	r2, #12
 800125e:	761a      	strb	r2, [r3, #24]
	loRa->fhssValue = HOPS_PERIOD; // for L-TEL PROTOCOL
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2207      	movs	r2, #7
 8001264:	765a      	strb	r2, [r3, #25]
	loRa->rxSize = 0;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2200      	movs	r2, #0
 800126a:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
	HAL_readLoRaSettings(loRa);
 800126e:	68f8      	ldr	r0, [r7, #12]
 8001270:	f7ff ff3c 	bl	80010ec <HAL_readLoRaSettings>
	changeMode(loRa, loRaMode);
 8001274:	78fb      	ldrb	r3, [r7, #3]
 8001276:	4619      	mov	r1, r3
 8001278:	68f8      	ldr	r0, [r7, #12]
 800127a:	f7ff fd9e 	bl	8000dba <changeMode>
	writeLoRaParametersReg(loRa);
 800127e:	68f8      	ldr	r0, [r7, #12]
 8001280:	f7ff fd34 	bl	8000cec <writeLoRaParametersReg>
	return loRa;
 8001284:	68fb      	ldr	r3, [r7, #12]
}
 8001286:	4618      	mov	r0, r3
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40010c00 	.word	0x40010c00

08001294 <configureLoRaRx>:

void configureLoRaRx(SX1278_t *loRa, Lora_Mode_t mode) {
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	460b      	mov	r3, r1
 800129e:	70fb      	strb	r3, [r7, #3]
	if (loRa->mode != mode)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80012a6:	78fa      	ldrb	r2, [r7, #3]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d114      	bne.n	80012d6 <configureLoRaRx+0x42>
		return;
	if (loRa->operatingMode == RX_CONTINUOUS)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80012b2:	2b05      	cmp	r3, #5
 80012b4:	d011      	beq.n	80012da <configureLoRaRx+0x46>
		return;

	changeMode(loRa, mode);
 80012b6:	78fb      	ldrb	r3, [r7, #3]
 80012b8:	4619      	mov	r1, r3
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff fd7d 	bl	8000dba <changeMode>
	writeLoRaParametersReg(loRa);
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f7ff fd13 	bl	8000cec <writeLoRaParametersReg>
	setRxFifoAddr(loRa);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff fe8c 	bl	8000fe4 <setRxFifoAddr>
	setLoRaLowFreqModeReg(loRa, RX_CONTINUOUS);
 80012cc:	2105      	movs	r1, #5
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff fcdd 	bl	8000c8e <setLoRaLowFreqModeReg>
 80012d4:	e002      	b.n	80012dc <configureLoRaRx+0x48>
		return;
 80012d6:	bf00      	nop
 80012d8:	e000      	b.n	80012dc <configureLoRaRx+0x48>
		return;
 80012da:	bf00      	nop
}
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
	...

080012e4 <readPage>:
		i2c1MasterTransmit(CHIP_ADDR, buff, size + 1, 50);
	}
	HAL_Delay(6);
}

HAL_StatusTypeDef readPage(uint16_t page, uint8_t *data, uint16_t offset, uint16_t size) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08a      	sub	sp, #40	; 0x28
 80012e8:	af04      	add	r7, sp, #16
 80012ea:	60b9      	str	r1, [r7, #8]
 80012ec:	4611      	mov	r1, r2
 80012ee:	461a      	mov	r2, r3
 80012f0:	4603      	mov	r3, r0
 80012f2:	81fb      	strh	r3, [r7, #14]
 80012f4:	460b      	mov	r3, r1
 80012f6:	81bb      	strh	r3, [r7, #12]
 80012f8:	4613      	mov	r3, r2
 80012fa:	80fb      	strh	r3, [r7, #6]
    uint16_t MemAddress = (page << 8) | offset;
 80012fc:	89fb      	ldrh	r3, [r7, #14]
 80012fe:	021b      	lsls	r3, r3, #8
 8001300:	b21a      	sxth	r2, r3
 8001302:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001306:	4313      	orrs	r3, r2
 8001308:	b21b      	sxth	r3, r3
 800130a:	82fb      	strh	r3, [r7, #22]
    HAL_StatusTypeDef res;
    res = HAL_I2C_Mem_Read(&hi2c1, M24C64_CHIP_ADDR, MemAddress, I2C_MEMADD_SIZE_16BIT, data, size, 1000);
 800130c:	8afa      	ldrh	r2, [r7, #22]
 800130e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001312:	9302      	str	r3, [sp, #8]
 8001314:	88fb      	ldrh	r3, [r7, #6]
 8001316:	9301      	str	r3, [sp, #4]
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	2310      	movs	r3, #16
 800131e:	21a0      	movs	r1, #160	; 0xa0
 8001320:	4808      	ldr	r0, [pc, #32]	; (8001344 <readPage+0x60>)
 8001322:	f003 f85d 	bl	80043e0 <HAL_I2C_Mem_Read>
 8001326:	4603      	mov	r3, r0
 8001328:	757b      	strb	r3, [r7, #21]
    if (res != HAL_OK)
 800132a:	7d7b      	ldrb	r3, [r7, #21]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <readPage+0x50>
        return res;
 8001330:	7d7b      	ldrb	r3, [r7, #21]
 8001332:	e003      	b.n	800133c <readPage+0x58>

    HAL_Delay(5);
 8001334:	2005      	movs	r0, #5
 8001336:	f001 ff13 	bl	8003160 <HAL_Delay>
    return res;
 800133a:	7d7b      	ldrb	r3, [r7, #21]
}
 800133c:	4618      	mov	r0, r3
 800133e:	3718      	adds	r7, #24
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000080 	.word	0x20000080

08001348 <HAL_savePage>:


HAL_StatusTypeDef HAL_savePage(uint16_t page, uint8_t *data, uint16_t offset, uint16_t size) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b08e      	sub	sp, #56	; 0x38
 800134c:	af04      	add	r7, sp, #16
 800134e:	60b9      	str	r1, [r7, #8]
 8001350:	4611      	mov	r1, r2
 8001352:	461a      	mov	r2, r3
 8001354:	4603      	mov	r3, r0
 8001356:	81fb      	strh	r3, [r7, #14]
 8001358:	460b      	mov	r3, r1
 800135a:	81bb      	strh	r3, [r7, #12]
 800135c:	4613      	mov	r3, r2
 800135e:	80fb      	strh	r3, [r7, #6]
    uint8_t read[16]={0};
 8001360:	2300      	movs	r3, #0
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
    bool notEqual = false;
 8001370:	2300      	movs	r3, #0
 8001372:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    HAL_StatusTypeDef res;

    res = readPage(page, read, offset, size);
 8001376:	88fb      	ldrh	r3, [r7, #6]
 8001378:	89ba      	ldrh	r2, [r7, #12]
 800137a:	f107 0110 	add.w	r1, r7, #16
 800137e:	89f8      	ldrh	r0, [r7, #14]
 8001380:	f7ff ffb0 	bl	80012e4 <readPage>
 8001384:	4603      	mov	r3, r0
 8001386:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    for (uint16_t i = 0; i < size; i++)
 800138a:	2300      	movs	r3, #0
 800138c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800138e:	e011      	b.n	80013b4 <HAL_savePage+0x6c>
        if (data[i] != read[i]) {
 8001390:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	4413      	add	r3, r2
 8001396:	781a      	ldrb	r2, [r3, #0]
 8001398:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800139a:	3328      	adds	r3, #40	; 0x28
 800139c:	443b      	add	r3, r7
 800139e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d003      	beq.n	80013ae <HAL_savePage+0x66>
            notEqual = true;
 80013a6:	2301      	movs	r3, #1
 80013a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80013ac:	e006      	b.n	80013bc <HAL_savePage+0x74>
    for (uint16_t i = 0; i < size; i++)
 80013ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80013b0:	3301      	adds	r3, #1
 80013b2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80013b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80013b6:	88fb      	ldrh	r3, [r7, #6]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d3e9      	bcc.n	8001390 <HAL_savePage+0x48>
        }

    if (notEqual) {
 80013bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d016      	beq.n	80013f2 <HAL_savePage+0xaa>
        uint16_t memAddress = (page << 8) | offset;
 80013c4:	89fb      	ldrh	r3, [r7, #14]
 80013c6:	021b      	lsls	r3, r3, #8
 80013c8:	b21a      	sxth	r2, r3
 80013ca:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	b21b      	sxth	r3, r3
 80013d2:	847b      	strh	r3, [r7, #34]	; 0x22
        res = HAL_I2C_Mem_Write(&hi2c1, M24C64_CHIP_ADDR, memAddress, I2C_MEMADD_SIZE_16BIT, data, size, 50);
 80013d4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80013d6:	2332      	movs	r3, #50	; 0x32
 80013d8:	9302      	str	r3, [sp, #8]
 80013da:	88fb      	ldrh	r3, [r7, #6]
 80013dc:	9301      	str	r3, [sp, #4]
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	2310      	movs	r3, #16
 80013e4:	21a0      	movs	r1, #160	; 0xa0
 80013e6:	4807      	ldr	r0, [pc, #28]	; (8001404 <HAL_savePage+0xbc>)
 80013e8:	f002 ff00 	bl	80041ec <HAL_I2C_Mem_Write>
 80013ec:	4603      	mov	r3, r0
 80013ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    }
    HAL_Delay(6);
 80013f2:	2006      	movs	r0, #6
 80013f4:	f001 feb4 	bl	8003160 <HAL_Delay>

    return res;
 80013f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3728      	adds	r7, #40	; 0x28
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20000080 	.word	0x20000080

08001408 <ledInit>:
 *  Created on: Sep 26, 2022
 *      Author: sigmadev
 */
#include "led.h"

void ledInit(LED_t *led) {
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
	/*CURRENT NORMAL LED PA7 (A)*/
	SET_BIT(GPIOB->ODR, GPIO_ODR_ODR5);
 8001410:	4b15      	ldr	r3, [pc, #84]	; (8001468 <ledInit+0x60>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	4a14      	ldr	r2, [pc, #80]	; (8001468 <ledInit+0x60>)
 8001416:	f043 0320 	orr.w	r3, r3, #32
 800141a:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(GPIOB->ODR, GPIO_ODR_ODR5);
 800141c:	4b12      	ldr	r3, [pc, #72]	; (8001468 <ledInit+0x60>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	4a11      	ldr	r2, [pc, #68]	; (8001468 <ledInit+0x60>)
 8001422:	f023 0320 	bic.w	r3, r3, #32
 8001426:	60d3      	str	r3, [r2, #12]
	/*CURRENT NORMAL LED PB0 (B)*/
	SET_BIT(GPIOB->ODR, GPIO_ODR_ODR4);
 8001428:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <ledInit+0x60>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	4a0e      	ldr	r2, [pc, #56]	; (8001468 <ledInit+0x60>)
 800142e:	f043 0310 	orr.w	r3, r3, #16
 8001432:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(GPIOB->ODR, GPIO_ODR_ODR4);
 8001434:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <ledInit+0x60>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	4a0b      	ldr	r2, [pc, #44]	; (8001468 <ledInit+0x60>)
 800143a:	f023 0310 	bic.w	r3, r3, #16
 800143e:	60d3      	str	r3, [r2, #12]
	/*CURRENT NORMAL LED PB1 (SR)*/
	SET_BIT(GPIOB->ODR, GPIO_ODR_ODR3);
 8001440:	4b09      	ldr	r3, [pc, #36]	; (8001468 <ledInit+0x60>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	4a08      	ldr	r2, [pc, #32]	; (8001468 <ledInit+0x60>)
 8001446:	f043 0308 	orr.w	r3, r3, #8
 800144a:	60d3      	str	r3, [r2, #12]
	CLEAR_BIT(GPIOB->ODR, GPIO_ODR_ODR3);
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <ledInit+0x60>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	4a05      	ldr	r2, [pc, #20]	; (8001468 <ledInit+0x60>)
 8001452:	f023 0308 	bic.w	r3, r3, #8
 8001456:	60d3      	str	r3, [r2, #12]
	led_reset(led);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f000 f807 	bl	800146c <led_reset>
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40010c00 	.word	0x40010c00

0800146c <led_reset>:
		SYS_RP_LED_ON();
	} else if (HAL_GetTick() - l->kaCounter > LED_KA_ON_TIMEOUT)
		SYS_RP_LED_OFF();
}

void led_reset(LED_t *l) {
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	l->chCounter = 0;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	60da      	str	r2, [r3, #12]
	l->clCounter = 0;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	605a      	str	r2, [r3, #4]
	l->cnCounter = 0;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
	l->kaCounter = HAL_GetTick();
 8001486:	f001 fe61 	bl	800314c <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	601a      	str	r2, [r3, #0]
	l->sysrpCounter = 0;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	611a      	str	r2, [r3, #16]
	l->thCounter = 0;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	619a      	str	r2, [r3, #24]
	l->tokCounter = 0;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	615a      	str	r2, [r3, #20]
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <lm75_init>:
#include "lm75.h"

HAL_StatusTypeDef lm75_init(void ) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af02      	add	r7, sp, #8
	uint8_t cmd[2];
	cmd[0] = LM75_Conf;
 80014b2:	2301      	movs	r3, #1
 80014b4:	713b      	strb	r3, [r7, #4]
	cmd[1] = 0x0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef res;
	res = HAL_I2C_Master_Transmit(&hi2c1, LM75_ADDR<<1, cmd,2,50);
 80014ba:	1d3a      	adds	r2, r7, #4
 80014bc:	2332      	movs	r3, #50	; 0x32
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	2302      	movs	r3, #2
 80014c2:	219e      	movs	r1, #158	; 0x9e
 80014c4:	4804      	ldr	r0, [pc, #16]	; (80014d8 <lm75_init+0x2c>)
 80014c6:	f002 fb27 	bl	8003b18 <HAL_I2C_Master_Transmit>
 80014ca:	4603      	mov	r3, r0
 80014cc:	71fb      	strb	r3, [r7, #7]

	return res;
 80014ce:	79fb      	ldrb	r3, [r7, #7]

}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000080 	.word	0x20000080

080014dc <lm75_read>:

uint16_t lm75_read(void) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af02      	add	r7, sp, #8
	uint8_t cmd[2];
	float result = 0;
 80014e2:	f04f 0300 	mov.w	r3, #0
 80014e6:	607b      	str	r3, [r7, #4]
	cmd[0] = LM75_Temp;
 80014e8:	2300      	movs	r3, #0
 80014ea:	703b      	strb	r3, [r7, #0]
    HAL_StatusTypeDef res;
    res = HAL_I2C_Master_Transmit(&hi2c1, LM75_ADDR<<1, cmd,1,50);
 80014ec:	463a      	mov	r2, r7
 80014ee:	2332      	movs	r3, #50	; 0x32
 80014f0:	9300      	str	r3, [sp, #0]
 80014f2:	2301      	movs	r3, #1
 80014f4:	219e      	movs	r1, #158	; 0x9e
 80014f6:	4818      	ldr	r0, [pc, #96]	; (8001558 <lm75_read+0x7c>)
 80014f8:	f002 fb0e 	bl	8003b18 <HAL_I2C_Master_Transmit>
 80014fc:	4603      	mov	r3, r0
 80014fe:	70fb      	strb	r3, [r7, #3]
	if(res != HAL_OK)
 8001500:	78fb      	ldrb	r3, [r7, #3]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d005      	beq.n	8001512 <lm75_read+0x36>
		return result;
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff f8a4 	bl	8000654 <__aeabi_f2uiz>
 800150c:	4603      	mov	r3, r0
 800150e:	b29b      	uxth	r3, r3
 8001510:	e01d      	b.n	800154e <lm75_read+0x72>
    res = HAL_I2C_Master_Receive(&hi2c1, LM75_ADDR<<1 | 1, cmd,2,50);
 8001512:	463a      	mov	r2, r7
 8001514:	2332      	movs	r3, #50	; 0x32
 8001516:	9300      	str	r3, [sp, #0]
 8001518:	2302      	movs	r3, #2
 800151a:	219f      	movs	r1, #159	; 0x9f
 800151c:	480e      	ldr	r0, [pc, #56]	; (8001558 <lm75_read+0x7c>)
 800151e:	f002 fbf9 	bl	8003d14 <HAL_I2C_Master_Receive>
 8001522:	4603      	mov	r3, r0
 8001524:	70fb      	strb	r3, [r7, #3]
	result = (float) ((cmd[0] << 8) | cmd[1]) / 256.0f;
 8001526:	783b      	ldrb	r3, [r7, #0]
 8001528:	021b      	lsls	r3, r3, #8
 800152a:	787a      	ldrb	r2, [r7, #1]
 800152c:	4313      	orrs	r3, r2
 800152e:	4618      	mov	r0, r3
 8001530:	f7fe fec6 	bl	80002c0 <__aeabi_i2f>
 8001534:	4603      	mov	r3, r0
 8001536:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800153a:	4618      	mov	r0, r3
 800153c:	f7fe ffc8 	bl	80004d0 <__aeabi_fdiv>
 8001540:	4603      	mov	r3, r0
 8001542:	607b      	str	r3, [r7, #4]
	return result;
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff f885 	bl	8000654 <__aeabi_f2uiz>
 800154a:	4603      	mov	r3, r0
 800154c:	b29b      	uxth	r3, r3
}
 800154e:	4618      	mov	r0, r3
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000080 	.word	0x20000080

0800155c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800155c:	b590      	push	{r4, r7, lr}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	uart1_ptr = &u1;
 8001562:	4b50      	ldr	r3, [pc, #320]	; (80016a4 <main+0x148>)
 8001564:	4a50      	ldr	r2, [pc, #320]	; (80016a8 <main+0x14c>)
 8001566:	601a      	str	r2, [r3, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001568:	f001 fd98 	bl	800309c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800156c:	f000 f8b2 	bl	80016d4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001570:	f000 f9ee 	bl	8001950 <MX_GPIO_Init>
	MX_I2C1_Init();
 8001574:	f000 f90a 	bl	800178c <MX_I2C1_Init>
	MX_SPI1_Init();
 8001578:	f000 f936 	bl	80017e8 <MX_SPI1_Init>
	MX_USART1_UART_Init();
 800157c:	f000 f96a 	bl	8001854 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8001580:	f000 f992 	bl	80018a8 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8001584:	f000 f9ba 	bl	80018fc <MX_USART3_UART_Init>
	//MX_ADC1_Init();
	//MX_CRC_Init();
	//MX_IWDG_Init();
	/* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(KEEP_ALIVE_GPIO_Port, KEEP_ALIVE_Pin, GPIO_PIN_SET);
 8001588:	2201      	movs	r2, #1
 800158a:	2120      	movs	r1, #32
 800158c:	4847      	ldr	r0, [pc, #284]	; (80016ac <main+0x150>)
 800158e:	f002 f966 	bl	800385e <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8001592:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001596:	f001 fde3 	bl	8003160 <HAL_Delay>
	HAL_GPIO_WritePin(KEEP_ALIVE_GPIO_Port, LORA_TX_OK_Pin, GPIO_PIN_SET);
 800159a:	2201      	movs	r2, #1
 800159c:	2108      	movs	r1, #8
 800159e:	4843      	ldr	r0, [pc, #268]	; (80016ac <main+0x150>)
 80015a0:	f002 f95d 	bl	800385e <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80015a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015a8:	f001 fdda 	bl	8003160 <HAL_Delay>
	HAL_GPIO_WritePin(KEEP_ALIVE_GPIO_Port, LORA_RX_OK_Pin, GPIO_PIN_SET);
 80015ac:	2201      	movs	r2, #1
 80015ae:	2110      	movs	r1, #16
 80015b0:	483e      	ldr	r0, [pc, #248]	; (80016ac <main+0x150>)
 80015b2:	f002 f954 	bl	800385e <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80015b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015ba:	f001 fdd1 	bl	8003160 <HAL_Delay>
	vlad = vladInit(SERVER);
 80015be:	2000      	movs	r0, #0
 80015c0:	f001 f8aa 	bl	8002718 <vladInit>
 80015c4:	4603      	mov	r3, r0
 80015c6:	4a3a      	ldr	r2, [pc, #232]	; (80016b0 <main+0x154>)
 80015c8:	6013      	str	r3, [r2, #0]
	server = serverInit(SERVER);
 80015ca:	2000      	movs	r0, #0
 80015cc:	f001 f918 	bl	8002800 <serverInit>
 80015d0:	4603      	mov	r3, r0
 80015d2:	4a38      	ldr	r2, [pc, #224]	; (80016b4 <main+0x158>)
 80015d4:	6013      	str	r3, [r2, #0]
	ledInit(&led);
 80015d6:	4838      	ldr	r0, [pc, #224]	; (80016b8 <main+0x15c>)
 80015d8:	f7ff ff16 	bl	8001408 <ledInit>
	rdss = rdssInit(0);
 80015dc:	2000      	movs	r0, #0
 80015de:	f001 f934 	bl	800284a <rdssInit>
 80015e2:	4603      	mov	r3, r0
 80015e4:	4a35      	ldr	r2, [pc, #212]	; (80016bc <main+0x160>)
 80015e6:	6013      	str	r3, [r2, #0]
	loRa = loRaInit(&hspi1, MASTER_RECEIVER);
 80015e8:	2103      	movs	r1, #3
 80015ea:	4835      	ldr	r0, [pc, #212]	; (80016c0 <main+0x164>)
 80015ec:	f7ff fdf0 	bl	80011d0 <loRaInit>
 80015f0:	4603      	mov	r3, r0
 80015f2:	4a34      	ldr	r2, [pc, #208]	; (80016c4 <main+0x168>)
 80015f4:	6013      	str	r3, [r2, #0]
	lm75_init();
 80015f6:	f7ff ff59 	bl	80014ac <lm75_init>
	HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2100      	movs	r1, #0
 80015fe:	2025      	movs	r0, #37	; 0x25
 8001600:	f001 fea9 	bl	8003356 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001604:	2025      	movs	r0, #37	; 0x25
 8001606:	f001 fec2 	bl	800338e <HAL_NVIC_EnableIRQ>
	HAL_UART_Receive_IT(&huart1, &rxData, 1);
 800160a:	2201      	movs	r2, #1
 800160c:	492e      	ldr	r1, [pc, #184]	; (80016c8 <main+0x16c>)
 800160e:	482f      	ldr	r0, [pc, #188]	; (80016cc <main+0x170>)
 8001610:	f005 f8f0 	bl	80067f4 <HAL_UART_Receive_IT>

	configureGPIO();
 8001614:	f000 ff7a 	bl	800250c <configureGPIO>
	configureADC();
 8001618:	f000 ff3a 	bl	8002490 <configureADC>
	calibrateADC();
 800161c:	f000 ff60 	bl	80024e0 <calibrateADC>
	uint32_t keepAliveStartTicks = HAL_GetTick();
 8001620:	f001 fd94 	bl	800314c <HAL_GetTick>
 8001624:	6078      	str	r0, [r7, #4]
	rdss->lastUpdateTicks = HAL_GetTick();
 8001626:	4b25      	ldr	r3, [pc, #148]	; (80016bc <main+0x160>)
 8001628:	681c      	ldr	r4, [r3, #0]
 800162a:	f001 fd8f 	bl	800314c <HAL_GetTick>
 800162e:	4603      	mov	r3, r0
 8001630:	6363      	str	r3, [r4, #52]	; 0x34
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		adcValues[0] = readADCChannel(0);
 8001632:	2000      	movs	r0, #0
 8001634:	f000 ffaa 	bl	800258c <readADCChannel>
 8001638:	4603      	mov	r3, r0
 800163a:	461a      	mov	r2, r3
 800163c:	4b24      	ldr	r3, [pc, #144]	; (80016d0 <main+0x174>)
 800163e:	801a      	strh	r2, [r3, #0]
		adcValues[1] = readADCChannel(1);
 8001640:	2001      	movs	r0, #1
 8001642:	f000 ffa3 	bl	800258c <readADCChannel>
 8001646:	4603      	mov	r3, r0
 8001648:	461a      	mov	r2, r3
 800164a:	4b21      	ldr	r3, [pc, #132]	; (80016d0 <main+0x174>)
 800164c:	805a      	strh	r2, [r3, #2]
		adcValues[2] = lm75_read();
 800164e:	f7ff ff45 	bl	80014dc <lm75_read>
 8001652:	4603      	mov	r3, r0
 8001654:	461a      	mov	r2, r3
 8001656:	4b1e      	ldr	r3, [pc, #120]	; (80016d0 <main+0x174>)
 8001658:	809a      	strh	r2, [r3, #4]
		updateMasterStatus(rdss, adcValues, 5000);
 800165a:	4b18      	ldr	r3, [pc, #96]	; (80016bc <main+0x160>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001662:	491b      	ldr	r1, [pc, #108]	; (80016d0 <main+0x174>)
 8001664:	4618      	mov	r0, r3
 8001666:	f000 ffab 	bl	80025c0 <updateMasterStatus>
		processUart1Rx(&u1, rdss, server, loRa);
 800166a:	4b14      	ldr	r3, [pc, #80]	; (80016bc <main+0x160>)
 800166c:	6819      	ldr	r1, [r3, #0]
 800166e:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <main+0x158>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <main+0x168>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	480c      	ldr	r0, [pc, #48]	; (80016a8 <main+0x14c>)
 8001678:	f000 fd12 	bl	80020a0 <processUart1Rx>
		configureLoRaRx(loRa, MASTER_RECEIVER);
 800167c:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <main+0x168>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2103      	movs	r1, #3
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff fe06 	bl	8001294 <configureLoRaRx>
		masterProcessLoRaRx(loRa, rdss, vlad);
 8001688:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <main+0x168>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a0b      	ldr	r2, [pc, #44]	; (80016bc <main+0x160>)
 800168e:	6811      	ldr	r1, [r2, #0]
 8001690:	4a07      	ldr	r2, [pc, #28]	; (80016b0 <main+0x154>)
 8001692:	6812      	ldr	r2, [r2, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f000 fe79 	bl	800238c <masterProcessLoRaRx>

#ifdef IWDG_DEBUG
		HAL_IWDG_Refresh(&hiwdg);
#endif
		keepAliveStartTicks = enableKeepAliveLed(keepAliveStartTicks);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 fed0 	bl	8002440 <enableKeepAliveLed>
 80016a0:	6078      	str	r0, [r7, #4]
		adcValues[0] = readADCChannel(0);
 80016a2:	e7c6      	b.n	8001632 <main+0xd6>
 80016a4:	20000204 	.word	0x20000204
 80016a8:	20000228 	.word	0x20000228
 80016ac:	40010c00 	.word	0x40010c00
 80016b0:	20000360 	.word	0x20000360
 80016b4:	20000368 	.word	0x20000368
 80016b8:	20000208 	.word	0x20000208
 80016bc:	20000224 	.word	0x20000224
 80016c0:	200000d4 	.word	0x200000d4
 80016c4:	20000364 	.word	0x20000364
 80016c8:	2000036c 	.word	0x2000036c
 80016cc:	2000012c 	.word	0x2000012c
 80016d0:	20000078 	.word	0x20000078

080016d4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b094      	sub	sp, #80	; 0x50
 80016d8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80016da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016de:	2228      	movs	r2, #40	; 0x28
 80016e0:	2100      	movs	r1, #0
 80016e2:	4618      	mov	r0, r3
 80016e4:	f005 fe7a 	bl	80073dc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80016f8:	1d3b      	adds	r3, r7, #4
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]
 8001700:	609a      	str	r2, [r3, #8]
 8001702:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 8001704:	2309      	movs	r3, #9
 8001706:	62bb      	str	r3, [r7, #40]	; 0x28
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001708:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800170c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800170e:	2300      	movs	r3, #0
 8001710:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001712:	2301      	movs	r3, #1
 8001714:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001716:	2301      	movs	r3, #1
 8001718:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800171a:	2302      	movs	r3, #2
 800171c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800171e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001722:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001724:	2300      	movs	r3, #0
 8001726:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001728:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800172c:	4618      	mov	r0, r3
 800172e:	f003 fdc3 	bl	80052b8 <HAL_RCC_OscConfig>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <SystemClock_Config+0x68>
		Error_Handler();
 8001738:	f000 ffe9 	bl	800270e <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800173c:	230f      	movs	r3, #15
 800173e:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001740:	2302      	movs	r3, #2
 8001742:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001744:	2300      	movs	r3, #0
 8001746:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001748:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800174c:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800174e:	2300      	movs	r3, #0
 8001750:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001752:	f107 0314 	add.w	r3, r7, #20
 8001756:	2100      	movs	r1, #0
 8001758:	4618      	mov	r0, r3
 800175a:	f004 f82f 	bl	80057bc <HAL_RCC_ClockConfig>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <SystemClock_Config+0x94>
		Error_Handler();
 8001764:	f000 ffd3 	bl	800270e <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001768:	2302      	movs	r3, #2
 800176a:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800176c:	2300      	movs	r3, #0
 800176e:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001770:	1d3b      	adds	r3, r7, #4
 8001772:	4618      	mov	r0, r3
 8001774:	f004 f9b0 	bl	8005ad8 <HAL_RCCEx_PeriphCLKConfig>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <SystemClock_Config+0xae>
		Error_Handler();
 800177e:	f000 ffc6 	bl	800270e <Error_Handler>
	}
}
 8001782:	bf00      	nop
 8001784:	3750      	adds	r7, #80	; 0x50
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
	...

0800178c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001790:	4b12      	ldr	r3, [pc, #72]	; (80017dc <MX_I2C1_Init+0x50>)
 8001792:	4a13      	ldr	r2, [pc, #76]	; (80017e0 <MX_I2C1_Init+0x54>)
 8001794:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001796:	4b11      	ldr	r3, [pc, #68]	; (80017dc <MX_I2C1_Init+0x50>)
 8001798:	4a12      	ldr	r2, [pc, #72]	; (80017e4 <MX_I2C1_Init+0x58>)
 800179a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800179c:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <MX_I2C1_Init+0x50>)
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80017a2:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <MX_I2C1_Init+0x50>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017a8:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <MX_I2C1_Init+0x50>)
 80017aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017ae:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017b0:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <MX_I2C1_Init+0x50>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80017b6:	4b09      	ldr	r3, [pc, #36]	; (80017dc <MX_I2C1_Init+0x50>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017bc:	4b07      	ldr	r3, [pc, #28]	; (80017dc <MX_I2C1_Init+0x50>)
 80017be:	2200      	movs	r2, #0
 80017c0:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017c2:	4b06      	ldr	r3, [pc, #24]	; (80017dc <MX_I2C1_Init+0x50>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80017c8:	4804      	ldr	r0, [pc, #16]	; (80017dc <MX_I2C1_Init+0x50>)
 80017ca:	f002 f861 	bl	8003890 <HAL_I2C_Init>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80017d4:	f000 ff9b 	bl	800270e <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80017d8:	bf00      	nop
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20000080 	.word	0x20000080
 80017e0:	40005400 	.word	0x40005400
 80017e4:	000186a0 	.word	0x000186a0

080017e8 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80017ec:	4b17      	ldr	r3, [pc, #92]	; (800184c <MX_SPI1_Init+0x64>)
 80017ee:	4a18      	ldr	r2, [pc, #96]	; (8001850 <MX_SPI1_Init+0x68>)
 80017f0:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80017f2:	4b16      	ldr	r3, [pc, #88]	; (800184c <MX_SPI1_Init+0x64>)
 80017f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017f8:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017fa:	4b14      	ldr	r3, [pc, #80]	; (800184c <MX_SPI1_Init+0x64>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001800:	4b12      	ldr	r3, [pc, #72]	; (800184c <MX_SPI1_Init+0x64>)
 8001802:	2200      	movs	r2, #0
 8001804:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001806:	4b11      	ldr	r3, [pc, #68]	; (800184c <MX_SPI1_Init+0x64>)
 8001808:	2200      	movs	r2, #0
 800180a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800180c:	4b0f      	ldr	r3, [pc, #60]	; (800184c <MX_SPI1_Init+0x64>)
 800180e:	2200      	movs	r2, #0
 8001810:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <MX_SPI1_Init+0x64>)
 8001814:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001818:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800181a:	4b0c      	ldr	r3, [pc, #48]	; (800184c <MX_SPI1_Init+0x64>)
 800181c:	2218      	movs	r2, #24
 800181e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001820:	4b0a      	ldr	r3, [pc, #40]	; (800184c <MX_SPI1_Init+0x64>)
 8001822:	2200      	movs	r2, #0
 8001824:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001826:	4b09      	ldr	r3, [pc, #36]	; (800184c <MX_SPI1_Init+0x64>)
 8001828:	2200      	movs	r2, #0
 800182a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800182c:	4b07      	ldr	r3, [pc, #28]	; (800184c <MX_SPI1_Init+0x64>)
 800182e:	2200      	movs	r2, #0
 8001830:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8001832:	4b06      	ldr	r3, [pc, #24]	; (800184c <MX_SPI1_Init+0x64>)
 8001834:	220a      	movs	r2, #10
 8001836:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001838:	4804      	ldr	r0, [pc, #16]	; (800184c <MX_SPI1_Init+0x64>)
 800183a:	f004 fa03 	bl	8005c44 <HAL_SPI_Init>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_SPI1_Init+0x60>
		Error_Handler();
 8001844:	f000 ff63 	bl	800270e <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}
 800184c:	200000d4 	.word	0x200000d4
 8001850:	40013000 	.word	0x40013000

08001854 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001858:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <MX_USART1_UART_Init+0x4c>)
 800185a:	4a12      	ldr	r2, [pc, #72]	; (80018a4 <MX_USART1_UART_Init+0x50>)
 800185c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 19200;
 800185e:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <MX_USART1_UART_Init+0x4c>)
 8001860:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001864:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001866:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <MX_USART1_UART_Init+0x4c>)
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800186c:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <MX_USART1_UART_Init+0x4c>)
 800186e:	2200      	movs	r2, #0
 8001870:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001872:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <MX_USART1_UART_Init+0x4c>)
 8001874:	2200      	movs	r2, #0
 8001876:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001878:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <MX_USART1_UART_Init+0x4c>)
 800187a:	220c      	movs	r2, #12
 800187c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800187e:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <MX_USART1_UART_Init+0x4c>)
 8001880:	2200      	movs	r2, #0
 8001882:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001884:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <MX_USART1_UART_Init+0x4c>)
 8001886:	2200      	movs	r2, #0
 8001888:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800188a:	4805      	ldr	r0, [pc, #20]	; (80018a0 <MX_USART1_UART_Init+0x4c>)
 800188c:	f004 ff62 	bl	8006754 <HAL_UART_Init>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8001896:	f000 ff3a 	bl	800270e <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	2000012c 	.word	0x2000012c
 80018a4:	40013800 	.word	0x40013800

080018a8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80018ac:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018ae:	4a12      	ldr	r2, [pc, #72]	; (80018f8 <MX_USART2_UART_Init+0x50>)
 80018b0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80018b2:	4b10      	ldr	r3, [pc, #64]	; (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018b8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018ba:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018bc:	2200      	movs	r2, #0
 80018be:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80018c6:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80018cc:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018ce:	220c      	movs	r2, #12
 80018d0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018d2:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d8:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018da:	2200      	movs	r2, #0
 80018dc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80018de:	4805      	ldr	r0, [pc, #20]	; (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018e0:	f004 ff38 	bl	8006754 <HAL_UART_Init>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80018ea:	f000 ff10 	bl	800270e <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000174 	.word	0x20000174
 80018f8:	40004400 	.word	0x40004400

080018fc <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001900:	4b11      	ldr	r3, [pc, #68]	; (8001948 <MX_USART3_UART_Init+0x4c>)
 8001902:	4a12      	ldr	r2, [pc, #72]	; (800194c <MX_USART3_UART_Init+0x50>)
 8001904:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8001906:	4b10      	ldr	r3, [pc, #64]	; (8001948 <MX_USART3_UART_Init+0x4c>)
 8001908:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800190c:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800190e:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <MX_USART3_UART_Init+0x4c>)
 8001910:	2200      	movs	r2, #0
 8001912:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001914:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <MX_USART3_UART_Init+0x4c>)
 8001916:	2200      	movs	r2, #0
 8001918:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800191a:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <MX_USART3_UART_Init+0x4c>)
 800191c:	2200      	movs	r2, #0
 800191e:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001920:	4b09      	ldr	r3, [pc, #36]	; (8001948 <MX_USART3_UART_Init+0x4c>)
 8001922:	220c      	movs	r2, #12
 8001924:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001926:	4b08      	ldr	r3, [pc, #32]	; (8001948 <MX_USART3_UART_Init+0x4c>)
 8001928:	2200      	movs	r2, #0
 800192a:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800192c:	4b06      	ldr	r3, [pc, #24]	; (8001948 <MX_USART3_UART_Init+0x4c>)
 800192e:	2200      	movs	r2, #0
 8001930:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8001932:	4805      	ldr	r0, [pc, #20]	; (8001948 <MX_USART3_UART_Init+0x4c>)
 8001934:	f004 ff0e 	bl	8006754 <HAL_UART_Init>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_USART3_UART_Init+0x46>
		Error_Handler();
 800193e:	f000 fee6 	bl	800270e <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	200001bc 	.word	0x200001bc
 800194c:	40004800 	.word	0x40004800

08001950 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001950:	b580      	push	{r7, lr}
 8001952:	b088      	sub	sp, #32
 8001954:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001956:	f107 0310 	add.w	r3, r7, #16
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	605a      	str	r2, [r3, #4]
 8001960:	609a      	str	r2, [r3, #8]
 8001962:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001964:	4b1e      	ldr	r3, [pc, #120]	; (80019e0 <MX_GPIO_Init+0x90>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	4a1d      	ldr	r2, [pc, #116]	; (80019e0 <MX_GPIO_Init+0x90>)
 800196a:	f043 0320 	orr.w	r3, r3, #32
 800196e:	6193      	str	r3, [r2, #24]
 8001970:	4b1b      	ldr	r3, [pc, #108]	; (80019e0 <MX_GPIO_Init+0x90>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	f003 0320 	and.w	r3, r3, #32
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800197c:	4b18      	ldr	r3, [pc, #96]	; (80019e0 <MX_GPIO_Init+0x90>)
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	4a17      	ldr	r2, [pc, #92]	; (80019e0 <MX_GPIO_Init+0x90>)
 8001982:	f043 0304 	orr.w	r3, r3, #4
 8001986:	6193      	str	r3, [r2, #24]
 8001988:	4b15      	ldr	r3, [pc, #84]	; (80019e0 <MX_GPIO_Init+0x90>)
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	f003 0304 	and.w	r3, r3, #4
 8001990:	60bb      	str	r3, [r7, #8]
 8001992:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001994:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <MX_GPIO_Init+0x90>)
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	4a11      	ldr	r2, [pc, #68]	; (80019e0 <MX_GPIO_Init+0x90>)
 800199a:	f043 0308 	orr.w	r3, r3, #8
 800199e:	6193      	str	r3, [r2, #24]
 80019a0:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <MX_GPIO_Init+0x90>)
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	f003 0308 	and.w	r3, r3, #8
 80019a8:	607b      	str	r3, [r7, #4]
 80019aa:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 80019ac:	2200      	movs	r2, #0
 80019ae:	f247 313b 	movw	r1, #29499	; 0x733b
 80019b2:	480c      	ldr	r0, [pc, #48]	; (80019e4 <MX_GPIO_Init+0x94>)
 80019b4:	f001 ff53 	bl	800385e <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : LORA_NSS_Pin LORA_RST_Pin LORA_DIO3_Pin LORA_DIO1_Pin
	 LORA_BUSSY_Pin LORA_TX_OK_Pin LORA_RX_OK_Pin KEEP_ALIVE_Pin
	 RS485_DE_Pin BUZZER_Pin */
	GPIO_InitStruct.Pin = LORA_NSS_Pin | LORA_RST_Pin | LORA_DIO3_Pin
 80019b8:	f247 333b 	movw	r3, #29499	; 0x733b
 80019bc:	613b      	str	r3, [r7, #16]
			| LORA_DIO1_Pin | LORA_BUSSY_Pin | LORA_TX_OK_Pin | LORA_RX_OK_Pin
			| KEEP_ALIVE_Pin | RS485_DE_Pin | BUZZER_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019be:	2301      	movs	r3, #1
 80019c0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c6:	2302      	movs	r3, #2
 80019c8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ca:	f107 0310 	add.w	r3, r7, #16
 80019ce:	4619      	mov	r1, r3
 80019d0:	4804      	ldr	r0, [pc, #16]	; (80019e4 <MX_GPIO_Init+0x94>)
 80019d2:	f001 fda9 	bl	8003528 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80019d6:	bf00      	nop
 80019d8:	3720      	adds	r7, #32
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40021000 	.word	0x40021000
 80019e4:	40010c00 	.word	0x40010c00

080019e8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
	if (uart1_ptr->rxSize >= UART2_RX_BUFFLEN) {
		cleanRx(uart1_ptr);
		uart1_ptr->rxSize = 0;
	}

	uart1_ptr->rxData[uart1_ptr->rxSize++] = rxData;
 80019f0:	4b0f      	ldr	r3, [pc, #60]	; (8001a30 <HAL_UART_RxCpltCallback+0x48>)
 80019f2:	6819      	ldr	r1, [r3, #0]
 80019f4:	4b0e      	ldr	r3, [pc, #56]	; (8001a30 <HAL_UART_RxCpltCallback+0x48>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f893 2131 	ldrb.w	r2, [r3, #305]	; 0x131
 80019fc:	1c50      	adds	r0, r2, #1
 80019fe:	b2c0      	uxtb	r0, r0
 8001a00:	f883 0131 	strb.w	r0, [r3, #305]	; 0x131
 8001a04:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <HAL_UART_RxCpltCallback+0x4c>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	548b      	strb	r3, [r1, r2]

	if (rxData == RDSS_END_MARK)
 8001a0a:	4b0a      	ldr	r3, [pc, #40]	; (8001a34 <HAL_UART_RxCpltCallback+0x4c>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b7f      	cmp	r3, #127	; 0x7f
 8001a10:	d104      	bne.n	8001a1c <HAL_UART_RxCpltCallback+0x34>
		uart1_ptr->isReceivedDataReady = true;
 8001a12:	4b07      	ldr	r3, [pc, #28]	; (8001a30 <HAL_UART_RxCpltCallback+0x48>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132

	HAL_UART_Receive_IT(&huart1, &rxData, 1);
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	4905      	ldr	r1, [pc, #20]	; (8001a34 <HAL_UART_RxCpltCallback+0x4c>)
 8001a20:	4805      	ldr	r0, [pc, #20]	; (8001a38 <HAL_UART_RxCpltCallback+0x50>)
 8001a22:	f004 fee7 	bl	80067f4 <HAL_UART_Receive_IT>
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000204 	.word	0x20000204
 8001a34:	2000036c 	.word	0x2000036c
 8001a38:	2000012c 	.word	0x2000012c

08001a3c <executeServerCmd>:
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
	printf("SPI RX Done .. Do Something ...");
}

uint8_t executeServerCmd(uint8_t *buffer, RDSS_t *rdss, SX1278_t *loRa,
		Server_t *server) {
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
 8001a48:	603b      	str	r3, [r7, #0]
	uint8_t index = 0;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef res;

	if (rdss->buffSize < LTEL_QUERY_LENGTH || rdss->buffSize > LTEL_SET_LENGTH)
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	7a1b      	ldrb	r3, [r3, #8]
 8001a52:	2b08      	cmp	r3, #8
 8001a54:	d903      	bls.n	8001a5e <executeServerCmd+0x22>
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	7a1b      	ldrb	r3, [r3, #8]
 8001a5a:	2b0d      	cmp	r3, #13
 8001a5c:	d901      	bls.n	8001a62 <executeServerCmd+0x26>
		return 0;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	e272      	b.n	8001f48 <executeServerCmd+0x50c>

	index = setRdssStartData(rdss, buffer, server->function);
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	7d5b      	ldrb	r3, [r3, #21]
 8001a66:	461a      	mov	r2, r3
 8001a68:	68f9      	ldr	r1, [r7, #12]
 8001a6a:	68b8      	ldr	r0, [r7, #8]
 8001a6c:	f001 f81d 	bl	8002aaa <setRdssStartData>
 8001a70:	4603      	mov	r3, r0
 8001a72:	75fb      	strb	r3, [r7, #23]

	switch (rdss->cmd) {
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b25      	cmp	r3, #37	; 0x25
 8001a7a:	f300 808b 	bgt.w	8001b94 <executeServerCmd+0x158>
 8001a7e:	2b10      	cmp	r3, #16
 8001a80:	da54      	bge.n	8001b2c <executeServerCmd+0xf0>
		changeMode(loRa, loRa->mode);
		writeLoRaParametersReg(loRa);
		break;

	default:
		break;
 8001a82:	e24a      	b.n	8001f1a <executeServerCmd+0x4de>
	switch (rdss->cmd) {
 8001a84:	3b90      	subs	r3, #144	; 0x90
 8001a86:	2b25      	cmp	r3, #37	; 0x25
 8001a88:	f200 8247 	bhi.w	8001f1a <executeServerCmd+0x4de>
 8001a8c:	a201      	add	r2, pc, #4	; (adr r2, 8001a94 <executeServerCmd+0x58>)
 8001a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a92:	bf00      	nop
 8001a94:	08001d0b 	.word	0x08001d0b
 8001a98:	08001f1b 	.word	0x08001f1b
 8001a9c:	08001f1b 	.word	0x08001f1b
 8001aa0:	08001f1b 	.word	0x08001f1b
 8001aa4:	08001f1b 	.word	0x08001f1b
 8001aa8:	08001f1b 	.word	0x08001f1b
 8001aac:	08001f1b 	.word	0x08001f1b
 8001ab0:	08001f1b 	.word	0x08001f1b
 8001ab4:	08001f1b 	.word	0x08001f1b
 8001ab8:	08001f1b 	.word	0x08001f1b
 8001abc:	08001f1b 	.word	0x08001f1b
 8001ac0:	08001f1b 	.word	0x08001f1b
 8001ac4:	08001f1b 	.word	0x08001f1b
 8001ac8:	08001f1b 	.word	0x08001f1b
 8001acc:	08001f1b 	.word	0x08001f1b
 8001ad0:	08001f1b 	.word	0x08001f1b
 8001ad4:	08001f1b 	.word	0x08001f1b
 8001ad8:	08001f1b 	.word	0x08001f1b
 8001adc:	08001f1b 	.word	0x08001f1b
 8001ae0:	08001f1b 	.word	0x08001f1b
 8001ae4:	08001f1b 	.word	0x08001f1b
 8001ae8:	08001f1b 	.word	0x08001f1b
 8001aec:	08001f1b 	.word	0x08001f1b
 8001af0:	08001f1b 	.word	0x08001f1b
 8001af4:	08001f1b 	.word	0x08001f1b
 8001af8:	08001f1b 	.word	0x08001f1b
 8001afc:	08001f1b 	.word	0x08001f1b
 8001b00:	08001f1b 	.word	0x08001f1b
 8001b04:	08001f1b 	.word	0x08001f1b
 8001b08:	08001f1b 	.word	0x08001f1b
 8001b0c:	08001f1b 	.word	0x08001f1b
 8001b10:	08001f1b 	.word	0x08001f1b
 8001b14:	08001d85 	.word	0x08001d85
 8001b18:	08001dd9 	.word	0x08001dd9
 8001b1c:	08001f1b 	.word	0x08001f1b
 8001b20:	08001e2f 	.word	0x08001e2f
 8001b24:	08001e7f 	.word	0x08001e7f
 8001b28:	08001ecf 	.word	0x08001ecf
 8001b2c:	3b10      	subs	r3, #16
 8001b2e:	2b15      	cmp	r3, #21
 8001b30:	f200 81f3 	bhi.w	8001f1a <executeServerCmd+0x4de>
 8001b34:	a201      	add	r2, pc, #4	; (adr r2, 8001b3c <executeServerCmd+0x100>)
 8001b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b3a:	bf00      	nop
 8001b3c:	08001c7d 	.word	0x08001c7d
 8001b40:	08001ba3 	.word	0x08001ba3
 8001b44:	08001f1b 	.word	0x08001f1b
 8001b48:	08001f1b 	.word	0x08001f1b
 8001b4c:	08001f1b 	.word	0x08001f1b
 8001b50:	08001f1b 	.word	0x08001f1b
 8001b54:	08001f1b 	.word	0x08001f1b
 8001b58:	08001f1b 	.word	0x08001f1b
 8001b5c:	08001f1b 	.word	0x08001f1b
 8001b60:	08001f1b 	.word	0x08001f1b
 8001b64:	08001f1b 	.word	0x08001f1b
 8001b68:	08001f1b 	.word	0x08001f1b
 8001b6c:	08001f1b 	.word	0x08001f1b
 8001b70:	08001f1b 	.word	0x08001f1b
 8001b74:	08001f1b 	.word	0x08001f1b
 8001b78:	08001f1b 	.word	0x08001f1b
 8001b7c:	08001bd9 	.word	0x08001bd9
 8001b80:	08001ba9 	.word	0x08001ba9
 8001b84:	08001f1b 	.word	0x08001f1b
 8001b88:	08001c55 	.word	0x08001c55
 8001b8c:	08001c09 	.word	0x08001c09
 8001b90:	08001c31 	.word	0x08001c31
 8001b94:	2bb5      	cmp	r3, #181	; 0xb5
 8001b96:	f300 81c0 	bgt.w	8001f1a <executeServerCmd+0x4de>
 8001b9a:	2b90      	cmp	r3, #144	; 0x90
 8001b9c:	f6bf af72 	bge.w	8001a84 <executeServerCmd+0x48>
		break;
 8001ba0:	e1bb      	b.n	8001f1a <executeServerCmd+0x4de>
		index = 0;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	75fb      	strb	r3, [r7, #23]
		break;
 8001ba6:	e1b9      	b.n	8001f1c <executeServerCmd+0x4e0>
		buffer[index++] = 4;
 8001ba8:	7dfb      	ldrb	r3, [r7, #23]
 8001baa:	1c5a      	adds	r2, r3, #1
 8001bac:	75fa      	strb	r2, [r7, #23]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	2204      	movs	r2, #4
 8001bb6:	701a      	strb	r2, [r3, #0]
		freqEncode(buffer + index, loRa->upFreq);
 8001bb8:	7dfb      	ldrb	r3, [r7, #23]
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	441a      	add	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4610      	mov	r0, r2
 8001bc6:	f000 ffeb 	bl	8002ba0 <freqEncode>
		index += sizeof(loRa->upFreq);
 8001bca:	7dfb      	ldrb	r3, [r7, #23]
 8001bcc:	3304      	adds	r3, #4
 8001bce:	75fb      	strb	r3, [r7, #23]
		index++;
 8001bd0:	7dfb      	ldrb	r3, [r7, #23]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	75fb      	strb	r3, [r7, #23]
		break;
 8001bd6:	e1a1      	b.n	8001f1c <executeServerCmd+0x4e0>
		buffer[index++] = 4;
 8001bd8:	7dfb      	ldrb	r3, [r7, #23]
 8001bda:	1c5a      	adds	r2, r3, #1
 8001bdc:	75fa      	strb	r2, [r7, #23]
 8001bde:	461a      	mov	r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	4413      	add	r3, r2
 8001be4:	2204      	movs	r2, #4
 8001be6:	701a      	strb	r2, [r3, #0]
		freqEncode(buffer + index, loRa->dlFreq);
 8001be8:	7dfb      	ldrb	r3, [r7, #23]
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	441a      	add	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4610      	mov	r0, r2
 8001bf6:	f000 ffd3 	bl	8002ba0 <freqEncode>
		index += sizeof(loRa->dlFreq);
 8001bfa:	7dfb      	ldrb	r3, [r7, #23]
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	75fb      	strb	r3, [r7, #23]
		index++;
 8001c00:	7dfb      	ldrb	r3, [r7, #23]
 8001c02:	3301      	adds	r3, #1
 8001c04:	75fb      	strb	r3, [r7, #23]
		break;
 8001c06:	e189      	b.n	8001f1c <executeServerCmd+0x4e0>
		buffer[index++] = 1;
 8001c08:	7dfb      	ldrb	r3, [r7, #23]
 8001c0a:	1c5a      	adds	r2, r3, #1
 8001c0c:	75fa      	strb	r2, [r7, #23]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	4413      	add	r3, r2
 8001c14:	2201      	movs	r2, #1
 8001c16:	701a      	strb	r2, [r3, #0]
		buffer[index++] = loRa->spreadFactor - 6;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	7b5a      	ldrb	r2, [r3, #13]
 8001c1c:	7dfb      	ldrb	r3, [r7, #23]
 8001c1e:	1c59      	adds	r1, r3, #1
 8001c20:	75f9      	strb	r1, [r7, #23]
 8001c22:	4619      	mov	r1, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	440b      	add	r3, r1
 8001c28:	3a06      	subs	r2, #6
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	701a      	strb	r2, [r3, #0]
		break;
 8001c2e:	e175      	b.n	8001f1c <executeServerCmd+0x4e0>
		buffer[index++] = 1;
 8001c30:	7dfb      	ldrb	r3, [r7, #23]
 8001c32:	1c5a      	adds	r2, r3, #1
 8001c34:	75fa      	strb	r2, [r7, #23]
 8001c36:	461a      	mov	r2, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	701a      	strb	r2, [r3, #0]
		buffer[index++] = loRa->codingRate;
 8001c40:	7dfb      	ldrb	r3, [r7, #23]
 8001c42:	1c5a      	adds	r2, r3, #1
 8001c44:	75fa      	strb	r2, [r7, #23]
 8001c46:	461a      	mov	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	7bd2      	ldrb	r2, [r2, #15]
 8001c50:	701a      	strb	r2, [r3, #0]
		break;
 8001c52:	e163      	b.n	8001f1c <executeServerCmd+0x4e0>
		buffer[index++] = 1;
 8001c54:	7dfb      	ldrb	r3, [r7, #23]
 8001c56:	1c5a      	adds	r2, r3, #1
 8001c58:	75fa      	strb	r2, [r7, #23]
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	4413      	add	r3, r2
 8001c60:	2201      	movs	r2, #1
 8001c62:	701a      	strb	r2, [r3, #0]
		buffer[index++] = loRa->bandwidth + 1;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	7b9a      	ldrb	r2, [r3, #14]
 8001c68:	7dfb      	ldrb	r3, [r7, #23]
 8001c6a:	1c59      	adds	r1, r3, #1
 8001c6c:	75f9      	strb	r1, [r7, #23]
 8001c6e:	4619      	mov	r1, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	440b      	add	r3, r1
 8001c74:	3201      	adds	r2, #1
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	701a      	strb	r2, [r3, #0]
		break;
 8001c7a:	e14f      	b.n	8001f1c <executeServerCmd+0x4e0>
		index = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	75fb      	strb	r3, [r7, #23]
		buffer[index++] = RDSS_START_MARK;
 8001c80:	7dfb      	ldrb	r3, [r7, #23]
 8001c82:	1c5a      	adds	r2, r3, #1
 8001c84:	75fa      	strb	r2, [r7, #23]
 8001c86:	461a      	mov	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	227e      	movs	r2, #126	; 0x7e
 8001c8e:	701a      	strb	r2, [r3, #0]
		buffer[index++] = server->function;
 8001c90:	7dfb      	ldrb	r3, [r7, #23]
 8001c92:	1c5a      	adds	r2, r3, #1
 8001c94:	75fa      	strb	r2, [r7, #23]
 8001c96:	461a      	mov	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	7d52      	ldrb	r2, [r2, #21]
 8001ca0:	701a      	strb	r2, [r3, #0]
		buffer[index++] = rdss->id;
 8001ca2:	7dfb      	ldrb	r3, [r7, #23]
 8001ca4:	1c5a      	adds	r2, r3, #1
 8001ca6:	75fa      	strb	r2, [r7, #23]
 8001ca8:	461a      	mov	r2, r3
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	4413      	add	r3, r2
 8001cae:	68ba      	ldr	r2, [r7, #8]
 8001cb0:	7c12      	ldrb	r2, [r2, #16]
 8001cb2:	701a      	strb	r2, [r3, #0]
		buffer[index++] = QUERY_MODULE_ID;
 8001cb4:	7dfb      	ldrb	r3, [r7, #23]
 8001cb6:	1c5a      	adds	r2, r3, #1
 8001cb8:	75fa      	strb	r2, [r7, #23]
 8001cba:	461a      	mov	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	2210      	movs	r2, #16
 8001cc2:	701a      	strb	r2, [r3, #0]
		buffer[index++] = 0x00;
 8001cc4:	7dfb      	ldrb	r3, [r7, #23]
 8001cc6:	1c5a      	adds	r2, r3, #1
 8001cc8:	75fa      	strb	r2, [r7, #23]
 8001cca:	461a      	mov	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	4413      	add	r3, r2
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	701a      	strb	r2, [r3, #0]
		buffer[index++] = 2;
 8001cd4:	7dfb      	ldrb	r3, [r7, #23]
 8001cd6:	1c5a      	adds	r2, r3, #1
 8001cd8:	75fa      	strb	r2, [r7, #23]
 8001cda:	461a      	mov	r2, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	4413      	add	r3, r2
 8001ce0:	2202      	movs	r2, #2
 8001ce2:	701a      	strb	r2, [r3, #0]
		buffer[index++] = server->function;
 8001ce4:	7dfb      	ldrb	r3, [r7, #23]
 8001ce6:	1c5a      	adds	r2, r3, #1
 8001ce8:	75fa      	strb	r2, [r7, #23]
 8001cea:	461a      	mov	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	4413      	add	r3, r2
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	7d52      	ldrb	r2, [r2, #21]
 8001cf4:	701a      	strb	r2, [r3, #0]
		buffer[index++] = rdss->id;
 8001cf6:	7dfb      	ldrb	r3, [r7, #23]
 8001cf8:	1c5a      	adds	r2, r3, #1
 8001cfa:	75fa      	strb	r2, [r7, #23]
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	4413      	add	r3, r2
 8001d02:	68ba      	ldr	r2, [r7, #8]
 8001d04:	7c12      	ldrb	r2, [r2, #16]
 8001d06:	701a      	strb	r2, [r3, #0]
		break;
 8001d08:	e108      	b.n	8001f1c <executeServerCmd+0x4e0>
		server->function = rdss->buff[6];
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	3306      	adds	r3, #6
 8001d10:	781a      	ldrb	r2, [r3, #0]
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	755a      	strb	r2, [r3, #21]
		server->id = rdss->buff[7];
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	3307      	adds	r3, #7
 8001d1c:	781a      	ldrb	r2, [r3, #0]
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	751a      	strb	r2, [r3, #20]
		rdss->id = server->id;
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	7d1a      	ldrb	r2, [r3, #20]
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	741a      	strb	r2, [r3, #16]
		index = setRdssStartData(rdss, buffer, server->function);
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	7d5b      	ldrb	r3, [r3, #21]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	68f9      	ldr	r1, [r7, #12]
 8001d32:	68b8      	ldr	r0, [r7, #8]
 8001d34:	f000 feb9 	bl	8002aaa <setRdssStartData>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	75fb      	strb	r3, [r7, #23]
		buffer[index++] = SERVER;
 8001d3c:	7dfb      	ldrb	r3, [r7, #23]
 8001d3e:	1c5a      	adds	r2, r3, #1
 8001d40:	75fa      	strb	r2, [r7, #23]
 8001d42:	461a      	mov	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	4413      	add	r3, r2
 8001d48:	2200      	movs	r2, #0
 8001d4a:	701a      	strb	r2, [r3, #0]
		buffer[index++] = rdss->id;
 8001d4c:	7dfb      	ldrb	r3, [r7, #23]
 8001d4e:	1c5a      	adds	r2, r3, #1
 8001d50:	75fa      	strb	r2, [r7, #23]
 8001d52:	461a      	mov	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4413      	add	r3, r2
 8001d58:	68ba      	ldr	r2, [r7, #8]
 8001d5a:	7c12      	ldrb	r2, [r2, #16]
 8001d5c:	701a      	strb	r2, [r3, #0]
		HAL_savePage(M24C64_PAGE0, (uint8_t*) &(vlad->function), 3, 1);
 8001d5e:	4b7c      	ldr	r3, [pc, #496]	; (8001f50 <executeServerCmd+0x514>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f103 012d 	add.w	r1, r3, #45	; 0x2d
 8001d66:	2301      	movs	r3, #1
 8001d68:	2203      	movs	r2, #3
 8001d6a:	2000      	movs	r0, #0
 8001d6c:	f7ff faec 	bl	8001348 <HAL_savePage>
		HAL_savePage(M24C64_PAGE0, (uint8_t*) &(vlad->id), 4, 1);
 8001d70:	4b77      	ldr	r3, [pc, #476]	; (8001f50 <executeServerCmd+0x514>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8001d78:	2301      	movs	r3, #1
 8001d7a:	2204      	movs	r2, #4
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	f7ff fae3 	bl	8001348 <HAL_savePage>
		break;
 8001d82:	e0cb      	b.n	8001f1c <executeServerCmd+0x4e0>
		buffer[index++] = 4;
 8001d84:	7dfb      	ldrb	r3, [r7, #23]
 8001d86:	1c5a      	adds	r2, r3, #1
 8001d88:	75fa      	strb	r2, [r7, #23]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	4413      	add	r3, r2
 8001d90:	2204      	movs	r2, #4
 8001d92:	701a      	strb	r2, [r3, #0]
		loRa->dlFreq = freqDecode(rdss->buff + index);
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	7dfb      	ldrb	r3, [r7, #23]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f000 fecd 	bl	8002b3c <freqDecode>
 8001da2:	4603      	mov	r3, r0
 8001da4:	461a      	mov	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	605a      	str	r2, [r3, #4]
		index += sizeof(loRa->dlFreq);
 8001daa:	7dfb      	ldrb	r3, [r7, #23]
 8001dac:	3304      	adds	r3, #4
 8001dae:	75fb      	strb	r3, [r7, #23]
		res = HAL_savePage(M24C64_PAGE1, (uint8_t*) &(loRa->dlFreq), 0, 4);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	1d19      	adds	r1, r3, #4
 8001db4:	2304      	movs	r3, #4
 8001db6:	2200      	movs	r2, #0
 8001db8:	2001      	movs	r0, #1
 8001dba:	f7ff fac5 	bl	8001348 <HAL_savePage>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	75bb      	strb	r3, [r7, #22]
		changeMode(loRa, loRa->mode);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001dc8:	4619      	mov	r1, r3
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f7fe fff5 	bl	8000dba <changeMode>
		writeLoRaParametersReg(loRa);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f7fe ff8b 	bl	8000cec <writeLoRaParametersReg>
		break;
 8001dd6:	e0a1      	b.n	8001f1c <executeServerCmd+0x4e0>
		buffer[index++] = 4;
 8001dd8:	7dfb      	ldrb	r3, [r7, #23]
 8001dda:	1c5a      	adds	r2, r3, #1
 8001ddc:	75fa      	strb	r2, [r7, #23]
 8001dde:	461a      	mov	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4413      	add	r3, r2
 8001de4:	2204      	movs	r2, #4
 8001de6:	701a      	strb	r2, [r3, #0]
		loRa->upFreq = freqDecode(rdss->buff + index);
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	7dfb      	ldrb	r3, [r7, #23]
 8001dee:	4413      	add	r3, r2
 8001df0:	4618      	mov	r0, r3
 8001df2:	f000 fea3 	bl	8002b3c <freqDecode>
 8001df6:	4603      	mov	r3, r0
 8001df8:	461a      	mov	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	609a      	str	r2, [r3, #8]
		index += sizeof(loRa->upFreq);
 8001dfe:	7dfb      	ldrb	r3, [r7, #23]
 8001e00:	3304      	adds	r3, #4
 8001e02:	75fb      	strb	r3, [r7, #23]
		res = HAL_savePage(M24C64_PAGE1, (uint8_t*) &(loRa->upFreq), 4, 4);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f103 0108 	add.w	r1, r3, #8
 8001e0a:	2304      	movs	r3, #4
 8001e0c:	2204      	movs	r2, #4
 8001e0e:	2001      	movs	r0, #1
 8001e10:	f7ff fa9a 	bl	8001348 <HAL_savePage>
 8001e14:	4603      	mov	r3, r0
 8001e16:	75bb      	strb	r3, [r7, #22]
		changeMode(loRa, loRa->mode);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001e1e:	4619      	mov	r1, r3
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f7fe ffca 	bl	8000dba <changeMode>
		writeLoRaParametersReg(loRa);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7fe ff60 	bl	8000cec <writeLoRaParametersReg>
		break;
 8001e2c:	e076      	b.n	8001f1c <executeServerCmd+0x4e0>
		buffer[index++] = 1;
 8001e2e:	7dfb      	ldrb	r3, [r7, #23]
 8001e30:	1c5a      	adds	r2, r3, #1
 8001e32:	75fa      	strb	r2, [r7, #23]
 8001e34:	461a      	mov	r2, r3
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	4413      	add	r3, r2
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	701a      	strb	r2, [r3, #0]
		loRa->bandwidth = rdss->buff[index++] - 1;
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	7dfb      	ldrb	r3, [r7, #23]
 8001e44:	1c59      	adds	r1, r3, #1
 8001e46:	75f9      	strb	r1, [r7, #23]
 8001e48:	4413      	add	r3, r2
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	739a      	strb	r2, [r3, #14]
		res = HAL_savePage(M24C64_PAGE0, &(loRa->bandwidth), 1, 1);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f103 010e 	add.w	r1, r3, #14
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	2000      	movs	r0, #0
 8001e60:	f7ff fa72 	bl	8001348 <HAL_savePage>
 8001e64:	4603      	mov	r3, r0
 8001e66:	75bb      	strb	r3, [r7, #22]
		changeMode(loRa, loRa->mode);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001e6e:	4619      	mov	r1, r3
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f7fe ffa2 	bl	8000dba <changeMode>
		writeLoRaParametersReg(loRa);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7fe ff38 	bl	8000cec <writeLoRaParametersReg>
		break;
 8001e7c:	e04e      	b.n	8001f1c <executeServerCmd+0x4e0>
		buffer[index++] = 1;
 8001e7e:	7dfb      	ldrb	r3, [r7, #23]
 8001e80:	1c5a      	adds	r2, r3, #1
 8001e82:	75fa      	strb	r2, [r7, #23]
 8001e84:	461a      	mov	r2, r3
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	4413      	add	r3, r2
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	701a      	strb	r2, [r3, #0]
		loRa->spreadFactor = rdss->buff[index++] + 6;
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	685a      	ldr	r2, [r3, #4]
 8001e92:	7dfb      	ldrb	r3, [r7, #23]
 8001e94:	1c59      	adds	r1, r3, #1
 8001e96:	75f9      	strb	r1, [r7, #23]
 8001e98:	4413      	add	r3, r2
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	3306      	adds	r3, #6
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	735a      	strb	r2, [r3, #13]
		res = HAL_savePage(M24C64_PAGE0, &(loRa->spreadFactor), 0, 1);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f103 010d 	add.w	r1, r3, #13
 8001eaa:	2301      	movs	r3, #1
 8001eac:	2200      	movs	r2, #0
 8001eae:	2000      	movs	r0, #0
 8001eb0:	f7ff fa4a 	bl	8001348 <HAL_savePage>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	75bb      	strb	r3, [r7, #22]
		changeMode(loRa, loRa->mode);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f7fe ff7a 	bl	8000dba <changeMode>
		writeLoRaParametersReg(loRa);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7fe ff10 	bl	8000cec <writeLoRaParametersReg>
		break;
 8001ecc:	e026      	b.n	8001f1c <executeServerCmd+0x4e0>
		buffer[index++] = 1;
 8001ece:	7dfb      	ldrb	r3, [r7, #23]
 8001ed0:	1c5a      	adds	r2, r3, #1
 8001ed2:	75fa      	strb	r2, [r7, #23]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	4413      	add	r3, r2
 8001eda:	2201      	movs	r2, #1
 8001edc:	701a      	strb	r2, [r3, #0]
		loRa->codingRate = rdss->buff[index++];
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	7dfb      	ldrb	r3, [r7, #23]
 8001ee4:	1c59      	adds	r1, r3, #1
 8001ee6:	75f9      	strb	r1, [r7, #23]
 8001ee8:	4413      	add	r3, r2
 8001eea:	781a      	ldrb	r2, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	73da      	strb	r2, [r3, #15]
		res = HAL_savePage(M24C64_PAGE0, &(loRa->codingRate), 2, 1);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f103 010f 	add.w	r1, r3, #15
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	2202      	movs	r2, #2
 8001efa:	2000      	movs	r0, #0
 8001efc:	f7ff fa24 	bl	8001348 <HAL_savePage>
 8001f00:	4603      	mov	r3, r0
 8001f02:	75bb      	strb	r3, [r7, #22]
		changeMode(loRa, loRa->mode);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f7fe ff54 	bl	8000dba <changeMode>
		writeLoRaParametersReg(loRa);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f7fe feea 	bl	8000cec <writeLoRaParametersReg>
		break;
 8001f18:	e000      	b.n	8001f1c <executeServerCmd+0x4e0>
		break;
 8001f1a:	bf00      	nop
	}

	index += setCrc(buffer, index);
 8001f1c:	7dfb      	ldrb	r3, [r7, #23]
 8001f1e:	4619      	mov	r1, r3
 8001f20:	68f8      	ldr	r0, [r7, #12]
 8001f22:	f000 fd9a 	bl	8002a5a <setCrc>
 8001f26:	4603      	mov	r3, r0
 8001f28:	461a      	mov	r2, r3
 8001f2a:	7dfb      	ldrb	r3, [r7, #23]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	75fb      	strb	r3, [r7, #23]
	buffer[index++] = RDSS_END_MARK;
 8001f30:	7dfb      	ldrb	r3, [r7, #23]
 8001f32:	1c5a      	adds	r2, r3, #1
 8001f34:	75fa      	strb	r2, [r7, #23]
 8001f36:	461a      	mov	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	227f      	movs	r2, #127	; 0x7f
 8001f3e:	701a      	strb	r2, [r3, #0]
	rdss->status = UART_SEND;
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	220d      	movs	r2, #13
 8001f44:	745a      	strb	r2, [r3, #17]
	return index;
 8001f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3718      	adds	r7, #24
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	20000360 	.word	0x20000360

08001f54 <clearRx>:
		break;
	}
	cleanTx(u1);
}

void clearRx(UART1_t *u1) {
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
	memset(u1->rxData, 0, sizeof(u1->rxData));
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f62:	2100      	movs	r1, #0
 8001f64:	4618      	mov	r0, r3
 8001f66:	f005 fa39 	bl	80073dc <memset>
	u1->rxSize = 0;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
	...

08001f7c <transmitRdssQuery>:

void transmitRdssQuery(RDSS_t *rdss, SX1278_t *loRa) {
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]

	rdss->idQuery = rdss->idReceived;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	7bda      	ldrb	r2, [r3, #15]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	739a      	strb	r2, [r3, #14]
	loRa->txData = rdss->buff;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685a      	ldr	r2, [r3, #4]
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	loRa->txSize = rdss->buffSize;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	7a1a      	ldrb	r2, [r3, #8]
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

	changeMode(loRa, MASTER_SENDER);
 8001fa2:	2102      	movs	r1, #2
 8001fa4:	6838      	ldr	r0, [r7, #0]
 8001fa6:	f7fe ff08 	bl	8000dba <changeMode>
	transmit(loRa); // TODO: se puede mejorar usando enviando la trama a transmitir
 8001faa:	6838      	ldr	r0, [r7, #0]
 8001fac:	f7ff f88b 	bl	80010c6 <transmit>
	if (loRa->status == TX_DONE)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001fb6:	2b03      	cmp	r3, #3
 8001fb8:	d104      	bne.n	8001fc4 <transmitRdssQuery+0x48>
		HAL_GPIO_WritePin(LORA_TX_OK_GPIO_Port, LORA_TX_OK_Pin, GPIO_PIN_SET);
 8001fba:	2201      	movs	r2, #1
 8001fbc:	2108      	movs	r1, #8
 8001fbe:	480d      	ldr	r0, [pc, #52]	; (8001ff4 <transmitRdssQuery+0x78>)
 8001fc0:	f001 fc4d 	bl	800385e <HAL_GPIO_WritePin>
	uint32_t timeStart = HAL_GetTick();
 8001fc4:	f001 f8c2 	bl	800314c <HAL_GetTick>
 8001fc8:	60f8      	str	r0, [r7, #12]
	changeMode(loRa, MASTER_RECEIVER);
 8001fca:	2103      	movs	r1, #3
 8001fcc:	6838      	ldr	r0, [r7, #0]
 8001fce:	f7fe fef4 	bl	8000dba <changeMode>
	HAL_GPIO_WritePin(LORA_TX_OK_GPIO_Port, LORA_TX_OK_Pin, GPIO_PIN_RESET);
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	2108      	movs	r1, #8
 8001fd6:	4807      	ldr	r0, [pc, #28]	; (8001ff4 <transmitRdssQuery+0x78>)
 8001fd8:	f001 fc41 	bl	800385e <HAL_GPIO_WritePin>
	loRa->lastChangeMode = HAL_GetTick() - timeStart;
 8001fdc:	f001 f8b6 	bl	800314c <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	1ad2      	subs	r2, r2, r3
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fea:	bf00      	nop
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40010c00 	.word	0x40010c00

08001ff8 <processServerCmd>:

void processServerCmd(UART1_t *u1, RDSS_t *rdss, SX1278_t *loRa,
		Server_t *server) {
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
 8002004:	603b      	str	r3, [r7, #0]
	if (rdss->cmd == QUERY_MASTER_STATUS) {
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b13      	cmp	r3, #19
 800200c:	d110      	bne.n	8002030 <processServerCmd+0x38>
		for (uint8_t i = 0; i < 15; i++)
 800200e:	2300      	movs	r3, #0
 8002010:	75fb      	strb	r3, [r7, #23]
 8002012:	e009      	b.n	8002028 <processServerCmd+0x30>
			writeTxReg(rdss->queryBuffer[i]);
 8002014:	7dfb      	ldrb	r3, [r7, #23]
 8002016:	68ba      	ldr	r2, [r7, #8]
 8002018:	4413      	add	r3, r2
 800201a:	7cdb      	ldrb	r3, [r3, #19]
 800201c:	4618      	mov	r0, r3
 800201e:	f000 ffeb 	bl	8002ff8 <writeTxReg>
		for (uint8_t i = 0; i < 15; i++)
 8002022:	7dfb      	ldrb	r3, [r7, #23]
 8002024:	3301      	adds	r3, #1
 8002026:	75fb      	strb	r3, [r7, #23]
 8002028:	7dfb      	ldrb	r3, [r7, #23]
 800202a:	2b0e      	cmp	r3, #14
 800202c:	d9f2      	bls.n	8002014 <processServerCmd+0x1c>
		for (uint8_t i = 0; i < u1->txSize; i++)
			writeTxReg(u1->txData[i]);
		u1->txSize = 0;
		free(u1->txData);
	}
}
 800202e:	e033      	b.n	8002098 <processServerCmd+0xa0>
		u1->txData = malloc(sizeof(uint8_t) * 25);
 8002030:	2019      	movs	r0, #25
 8002032:	f005 f917 	bl	8007264 <malloc>
 8002036:	4603      	mov	r3, r0
 8002038:	461a      	mov	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
		u1->txSize = executeServerCmd(u1->txData, rdss, loRa, server);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f8d3 012c 	ldr.w	r0, [r3, #300]	; 0x12c
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	68b9      	ldr	r1, [r7, #8]
 800204c:	f7ff fcf6 	bl	8001a3c <executeServerCmd>
 8002050:	4603      	mov	r3, r0
 8002052:	461a      	mov	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		for (uint8_t i = 0; i < u1->txSize; i++)
 800205a:	2300      	movs	r3, #0
 800205c:	75bb      	strb	r3, [r7, #22]
 800205e:	e00b      	b.n	8002078 <processServerCmd+0x80>
			writeTxReg(u1->txData[i]);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 8002066:	7dbb      	ldrb	r3, [r7, #22]
 8002068:	4413      	add	r3, r2
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f000 ffc3 	bl	8002ff8 <writeTxReg>
		for (uint8_t i = 0; i < u1->txSize; i++)
 8002072:	7dbb      	ldrb	r3, [r7, #22]
 8002074:	3301      	adds	r3, #1
 8002076:	75bb      	strb	r3, [r7, #22]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800207e:	7dba      	ldrb	r2, [r7, #22]
 8002080:	429a      	cmp	r2, r3
 8002082:	d3ed      	bcc.n	8002060 <processServerCmd+0x68>
		u1->txSize = 0;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		free(u1->txData);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8002092:	4618      	mov	r0, r3
 8002094:	f005 f8ee 	bl	8007274 <free>
}
 8002098:	bf00      	nop
 800209a:	3718      	adds	r7, #24
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <processUart1Rx>:

void processUart1Rx(UART1_t *u1, RDSS_t *rdss, Server_t *server, SX1278_t *loRa) {
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
 80020ac:	603b      	str	r3, [r7, #0]
	if (u1->isReceivedDataReady == false)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 80020b4:	f083 0301 	eor.w	r3, r3, #1
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d13e      	bne.n	800213c <processUart1Rx+0x9c>
		return;
	u1->isReceivedDataReady = false;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132

	if (validate(u1->rxData, u1->rxSize) != DATA_OK) {
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 80020ce:	4619      	mov	r1, r3
 80020d0:	4610      	mov	r0, r2
 80020d2:	f000 fc93 	bl	80029fc <validate>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d00b      	beq.n	80020f4 <processUart1Rx+0x54>
		memset(u1->rxData, 0, sizeof(u1->rxData));
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80020e2:	2100      	movs	r1, #0
 80020e4:	4618      	mov	r0, r3
 80020e6:	f005 f979 	bl	80073dc <memset>
		u1->rxSize = 0;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
		return;
 80020f2:	e024      	b.n	800213e <processUart1Rx+0x9e>
	}
	updateRdss(rdss, u1->rxData, u1->rxSize);
 80020f4:	68f9      	ldr	r1, [r7, #12]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 80020fc:	461a      	mov	r2, r3
 80020fe:	68b8      	ldr	r0, [r7, #8]
 8002100:	f000 fd66 	bl	8002bd0 <updateRdss>
	if (rdss->idReceived == rdss->id) {
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	7bda      	ldrb	r2, [r3, #15]
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	7c1b      	ldrb	r3, [r3, #16]
 800210c:	429a      	cmp	r2, r3
 800210e:	d106      	bne.n	800211e <processUart1Rx+0x7e>
		processServerCmd(u1, rdss, loRa, server);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	68b9      	ldr	r1, [r7, #8]
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f7ff ff6e 	bl	8001ff8 <processServerCmd>
 800211c:	e007      	b.n	800212e <processUart1Rx+0x8e>
	} else if (rdss->cmd != 0) {
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d003      	beq.n	800212e <processUart1Rx+0x8e>
		transmitRdssQuery(rdss, loRa);
 8002126:	6839      	ldr	r1, [r7, #0]
 8002128:	68b8      	ldr	r0, [r7, #8]
 800212a:	f7ff ff27 	bl	8001f7c <transmitRdssQuery>
	}

	clearRx(u1);
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f7ff ff10 	bl	8001f54 <clearRx>
	rdssReinit(rdss);
 8002134:	68b8      	ldr	r0, [r7, #8]
 8002136:	f000 fba0 	bl	800287a <rdssReinit>
 800213a:	e000      	b.n	800213e <processUart1Rx+0x9e>
		return;
 800213c:	bf00      	nop
}
 800213e:	3710      	adds	r7, #16
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <masterProcessRdss>:
	default:
		return 0;
	}
}

void masterProcessRdss(RDSS_t *rdss) {
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
	uint8_t error[] = { 0xff, 0xff, 0xff, 0xff };
 800214c:	f04f 33ff 	mov.w	r3, #4294967295
 8002150:	60bb      	str	r3, [r7, #8]
	switch (rdss->cmd) {
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	2b34      	cmp	r3, #52	; 0x34
 8002158:	f300 80d2 	bgt.w	8002300 <masterProcessRdss+0x1bc>
 800215c:	2b00      	cmp	r3, #0
 800215e:	da5f      	bge.n	8002220 <masterProcessRdss+0xdc>
 8002160:	e0fc      	b.n	800235c <masterProcessRdss+0x218>
 8002162:	3b90      	subs	r3, #144	; 0x90
 8002164:	2b2b      	cmp	r3, #43	; 0x2b
 8002166:	f200 80f9 	bhi.w	800235c <masterProcessRdss+0x218>
 800216a:	a201      	add	r2, pc, #4	; (adr r2, 8002170 <masterProcessRdss+0x2c>)
 800216c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002170:	0800230d 	.word	0x0800230d
 8002174:	0800235d 	.word	0x0800235d
 8002178:	0800235d 	.word	0x0800235d
 800217c:	0800235d 	.word	0x0800235d
 8002180:	0800235d 	.word	0x0800235d
 8002184:	0800235d 	.word	0x0800235d
 8002188:	0800235d 	.word	0x0800235d
 800218c:	0800235d 	.word	0x0800235d
 8002190:	0800235d 	.word	0x0800235d
 8002194:	0800235d 	.word	0x0800235d
 8002198:	0800235d 	.word	0x0800235d
 800219c:	0800235d 	.word	0x0800235d
 80021a0:	0800235d 	.word	0x0800235d
 80021a4:	0800235d 	.word	0x0800235d
 80021a8:	0800235d 	.word	0x0800235d
 80021ac:	0800235d 	.word	0x0800235d
 80021b0:	0800235d 	.word	0x0800235d
 80021b4:	0800235d 	.word	0x0800235d
 80021b8:	0800235d 	.word	0x0800235d
 80021bc:	0800235d 	.word	0x0800235d
 80021c0:	0800235d 	.word	0x0800235d
 80021c4:	0800235d 	.word	0x0800235d
 80021c8:	0800235d 	.word	0x0800235d
 80021cc:	0800235d 	.word	0x0800235d
 80021d0:	0800235d 	.word	0x0800235d
 80021d4:	0800235d 	.word	0x0800235d
 80021d8:	0800235d 	.word	0x0800235d
 80021dc:	0800235d 	.word	0x0800235d
 80021e0:	0800235d 	.word	0x0800235d
 80021e4:	0800235d 	.word	0x0800235d
 80021e8:	0800235d 	.word	0x0800235d
 80021ec:	0800235d 	.word	0x0800235d
 80021f0:	0800230d 	.word	0x0800230d
 80021f4:	0800230d 	.word	0x0800230d
 80021f8:	0800230d 	.word	0x0800230d
 80021fc:	0800230d 	.word	0x0800230d
 8002200:	0800230d 	.word	0x0800230d
 8002204:	0800230d 	.word	0x0800230d
 8002208:	08002335 	.word	0x08002335
 800220c:	0800230d 	.word	0x0800230d
 8002210:	0800230d 	.word	0x0800230d
 8002214:	0800230d 	.word	0x0800230d
 8002218:	0800230d 	.word	0x0800230d
 800221c:	0800230d 	.word	0x0800230d
 8002220:	2b34      	cmp	r3, #52	; 0x34
 8002222:	f200 809b 	bhi.w	800235c <masterProcessRdss+0x218>
 8002226:	a201      	add	r2, pc, #4	; (adr r2, 800222c <masterProcessRdss+0xe8>)
 8002228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800222c:	0800230d 	.word	0x0800230d
 8002230:	0800235d 	.word	0x0800235d
 8002234:	0800235d 	.word	0x0800235d
 8002238:	0800235d 	.word	0x0800235d
 800223c:	0800235d 	.word	0x0800235d
 8002240:	0800235d 	.word	0x0800235d
 8002244:	0800235d 	.word	0x0800235d
 8002248:	0800235d 	.word	0x0800235d
 800224c:	0800235d 	.word	0x0800235d
 8002250:	0800235d 	.word	0x0800235d
 8002254:	0800235d 	.word	0x0800235d
 8002258:	0800235d 	.word	0x0800235d
 800225c:	0800235d 	.word	0x0800235d
 8002260:	0800235d 	.word	0x0800235d
 8002264:	0800235d 	.word	0x0800235d
 8002268:	0800235d 	.word	0x0800235d
 800226c:	0800230d 	.word	0x0800230d
 8002270:	0800230d 	.word	0x0800230d
 8002274:	0800230d 	.word	0x0800230d
 8002278:	0800230d 	.word	0x0800230d
 800227c:	0800230d 	.word	0x0800230d
 8002280:	0800235d 	.word	0x0800235d
 8002284:	08002381 	.word	0x08002381
 8002288:	0800235d 	.word	0x0800235d
 800228c:	0800235d 	.word	0x0800235d
 8002290:	0800235d 	.word	0x0800235d
 8002294:	0800235d 	.word	0x0800235d
 8002298:	0800235d 	.word	0x0800235d
 800229c:	0800235d 	.word	0x0800235d
 80022a0:	0800235d 	.word	0x0800235d
 80022a4:	0800235d 	.word	0x0800235d
 80022a8:	0800235d 	.word	0x0800235d
 80022ac:	0800230d 	.word	0x0800230d
 80022b0:	0800230d 	.word	0x0800230d
 80022b4:	0800230d 	.word	0x0800230d
 80022b8:	0800230d 	.word	0x0800230d
 80022bc:	0800230d 	.word	0x0800230d
 80022c0:	0800230d 	.word	0x0800230d
 80022c4:	0800235d 	.word	0x0800235d
 80022c8:	0800235d 	.word	0x0800235d
 80022cc:	0800235d 	.word	0x0800235d
 80022d0:	0800235d 	.word	0x0800235d
 80022d4:	0800235d 	.word	0x0800235d
 80022d8:	0800235d 	.word	0x0800235d
 80022dc:	0800235d 	.word	0x0800235d
 80022e0:	0800235d 	.word	0x0800235d
 80022e4:	0800235d 	.word	0x0800235d
 80022e8:	0800235d 	.word	0x0800235d
 80022ec:	0800235d 	.word	0x0800235d
 80022f0:	0800230d 	.word	0x0800230d
 80022f4:	0800230d 	.word	0x0800230d
 80022f8:	0800230d 	.word	0x0800230d
 80022fc:	0800230d 	.word	0x0800230d
 8002300:	2bbb      	cmp	r3, #187	; 0xbb
 8002302:	dc2b      	bgt.n	800235c <masterProcessRdss+0x218>
 8002304:	2b90      	cmp	r3, #144	; 0x90
 8002306:	f6bf af2c 	bge.w	8002162 <masterProcessRdss+0x1e>
 800230a:	e027      	b.n	800235c <masterProcessRdss+0x218>
	case SET_PARAMETER_FREQOUT:
	case SET_PARAMETERS:
	case SET_PARAMETER_FREQBASE:
	case QUERY_PARAMETER_PdBm:
	case QUERY_UART1:
		for (uint8_t i = 0; i < rdss->buffSize; i++)
 800230c:	2300      	movs	r3, #0
 800230e:	73fb      	strb	r3, [r7, #15]
 8002310:	e00a      	b.n	8002328 <masterProcessRdss+0x1e4>
			writeTxReg(rdss->buff[i]);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	7bfb      	ldrb	r3, [r7, #15]
 8002318:	4413      	add	r3, r2
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f000 fe6b 	bl	8002ff8 <writeTxReg>
		for (uint8_t i = 0; i < rdss->buffSize; i++)
 8002322:	7bfb      	ldrb	r3, [r7, #15]
 8002324:	3301      	adds	r3, #1
 8002326:	73fb      	strb	r3, [r7, #15]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	7a1b      	ldrb	r3, [r3, #8]
 800232c:	7bfa      	ldrb	r2, [r7, #15]
 800232e:	429a      	cmp	r2, r3
 8002330:	d3ef      	bcc.n	8002312 <masterProcessRdss+0x1ce>
		break;
 8002332:	e026      	b.n	8002382 <masterProcessRdss+0x23e>
	case SET_OUT:
		for (uint8_t i = 0; i < rdss->buffSize; i++)
 8002334:	2300      	movs	r3, #0
 8002336:	73bb      	strb	r3, [r7, #14]
 8002338:	e00a      	b.n	8002350 <masterProcessRdss+0x20c>
			writeTxReg(rdss->buff[i]);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685a      	ldr	r2, [r3, #4]
 800233e:	7bbb      	ldrb	r3, [r7, #14]
 8002340:	4413      	add	r3, r2
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f000 fe57 	bl	8002ff8 <writeTxReg>
		for (uint8_t i = 0; i < rdss->buffSize; i++)
 800234a:	7bbb      	ldrb	r3, [r7, #14]
 800234c:	3301      	adds	r3, #1
 800234e:	73bb      	strb	r3, [r7, #14]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	7a1b      	ldrb	r3, [r3, #8]
 8002354:	7bba      	ldrb	r2, [r7, #14]
 8002356:	429a      	cmp	r2, r3
 8002358:	d3ef      	bcc.n	800233a <masterProcessRdss+0x1f6>
		break;
 800235a:	e012      	b.n	8002382 <masterProcessRdss+0x23e>
	case SEND_ETH_TO_UART:

		break;
	default:
		for (uint8_t i = 0; i < sizeof(error); i++)
 800235c:	2300      	movs	r3, #0
 800235e:	737b      	strb	r3, [r7, #13]
 8002360:	e00a      	b.n	8002378 <masterProcessRdss+0x234>
			writeTxReg(error[i]);
 8002362:	7b7b      	ldrb	r3, [r7, #13]
 8002364:	3310      	adds	r3, #16
 8002366:	443b      	add	r3, r7
 8002368:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800236c:	4618      	mov	r0, r3
 800236e:	f000 fe43 	bl	8002ff8 <writeTxReg>
		for (uint8_t i = 0; i < sizeof(error); i++)
 8002372:	7b7b      	ldrb	r3, [r7, #13]
 8002374:	3301      	adds	r3, #1
 8002376:	737b      	strb	r3, [r7, #13]
 8002378:	7b7b      	ldrb	r3, [r7, #13]
 800237a:	2b03      	cmp	r3, #3
 800237c:	d9f1      	bls.n	8002362 <masterProcessRdss+0x21e>
		break;
 800237e:	e000      	b.n	8002382 <masterProcessRdss+0x23e>
		break;
 8002380:	bf00      	nop
	}
}
 8002382:	bf00      	nop
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop

0800238c <masterProcessLoRaRx>:

void masterProcessLoRaRx(SX1278_t *loRa, RDSS_t *rdss, Vlad_t *vlad) {
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
	if (HAL_GPIO_ReadPin(LORA_BUSSY_GPIO_Port,
 8002398:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800239c:	4827      	ldr	r0, [pc, #156]	; (800243c <masterProcessLoRaRx+0xb0>)
 800239e:	f001 fa47 	bl	8003830 <HAL_GPIO_ReadPin>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d044      	beq.n	8002432 <masterProcessLoRaRx+0xa6>
	LORA_BUSSY_Pin) == GPIO_PIN_RESET)
		return; // if (crcErrorActivation(loRa) != 1)


	getRxFifoData(loRa);
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f7fe fdd9 	bl	8000f60 <getRxFifoData>
	if (loRa->rxData < 0){
		clearIrqFlagsReg(loRa); // Retrieve data from the receive FIFO
		return;
	}

	if (validate(loRa->rxData, loRa->rxSize) != DATA_OK){
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f103 022f 	add.w	r2, r3, #47	; 0x2f
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f893 315b 	ldrb.w	r3, [r3, #347]	; 0x15b
 80023ba:	4619      	mov	r1, r3
 80023bc:	4610      	mov	r0, r2
 80023be:	f000 fb1d 	bl	80029fc <validate>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d003      	beq.n	80023d0 <masterProcessLoRaRx+0x44>
		clearIrqFlagsReg(loRa); // Retrieve data from the receive FIFO
 80023c8:	68f8      	ldr	r0, [r7, #12]
 80023ca:	f7fe fc7c 	bl	8000cc6 <clearIrqFlagsReg>
		return;
 80023ce:	e031      	b.n	8002434 <masterProcessLoRaRx+0xa8>
	}

	updateRdss(rdss, loRa->rxData, loRa->rxSize);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f103 012f 	add.w	r1, r3, #47	; 0x2f
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f893 315b 	ldrb.w	r3, [r3, #347]	; 0x15b
 80023dc:	461a      	mov	r2, r3
 80023de:	68b8      	ldr	r0, [r7, #8]
 80023e0:	f000 fbf6 	bl	8002bd0 <updateRdss>
	HAL_GPIO_WritePin(LORA_RX_OK_GPIO_Port, LORA_RX_OK_Pin, GPIO_PIN_SET);
 80023e4:	2201      	movs	r2, #1
 80023e6:	2110      	movs	r1, #16
 80023e8:	4814      	ldr	r0, [pc, #80]	; (800243c <masterProcessLoRaRx+0xb0>)
 80023ea:	f001 fa38 	bl	800385e <HAL_GPIO_WritePin>


	masterProcessRdss(rdss);
 80023ee:	68b8      	ldr	r0, [r7, #8]
 80023f0:	f7ff fea8 	bl	8002144 <masterProcessRdss>
	rdssReinit(rdss);
 80023f4:	68b8      	ldr	r0, [r7, #8]
 80023f6:	f000 fa40 	bl	800287a <rdssReinit>
	loRa->rxSize = 0;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
	setLoRaLowFreqModeReg(loRa, SLEEP);
 8002402:	2100      	movs	r1, #0
 8002404:	68f8      	ldr	r0, [r7, #12]
 8002406:	f7fe fc42 	bl	8000c8e <setLoRaLowFreqModeReg>
	uint8_t addr = 0;
 800240a:	2300      	movs	r3, #0
 800240c:	75fb      	strb	r3, [r7, #23]
	writeRegister(loRa->spi, LR_RegFifoAddrPtr, &addr, 1);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8002414:	f107 0217 	add.w	r2, r7, #23
 8002418:	2301      	movs	r3, #1
 800241a:	210d      	movs	r1, #13
 800241c:	f7fe fae6 	bl	80009ec <writeRegister>
	HAL_GPIO_WritePin(LORA_RX_OK_GPIO_Port, LORA_RX_OK_Pin, GPIO_PIN_RESET);
 8002420:	2200      	movs	r2, #0
 8002422:	2110      	movs	r1, #16
 8002424:	4805      	ldr	r0, [pc, #20]	; (800243c <masterProcessLoRaRx+0xb0>)
 8002426:	f001 fa1a 	bl	800385e <HAL_GPIO_WritePin>
	clearIrqFlagsReg(loRa); // Retrieve data from the receive FIFO
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f7fe fc4b 	bl	8000cc6 <clearIrqFlagsReg>
 8002430:	e000      	b.n	8002434 <masterProcessLoRaRx+0xa8>
		return; // if (crcErrorActivation(loRa) != 1)
 8002432:	bf00      	nop
}
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40010c00 	.word	0x40010c00

08002440 <enableKeepAliveLed>:

uint32_t enableKeepAliveLed(uint32_t keepAliveStartTicks) {
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
	if (HAL_GetTick() - keepAliveStartTicks > 1000) {
 8002448:	f000 fe80 	bl	800314c <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002456:	d908      	bls.n	800246a <enableKeepAliveLed+0x2a>
		keepAliveStartTicks = HAL_GetTick();
 8002458:	f000 fe78 	bl	800314c <HAL_GetTick>
 800245c:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(KEEP_ALIVE_GPIO_Port, KEEP_ALIVE_Pin, GPIO_PIN_SET);
 800245e:	2201      	movs	r2, #1
 8002460:	2120      	movs	r1, #32
 8002462:	480a      	ldr	r0, [pc, #40]	; (800248c <enableKeepAliveLed+0x4c>)
 8002464:	f001 f9fb 	bl	800385e <HAL_GPIO_WritePin>
 8002468:	e00b      	b.n	8002482 <enableKeepAliveLed+0x42>
	} else if (HAL_GetTick() - keepAliveStartTicks > 50)
 800246a:	f000 fe6f 	bl	800314c <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b32      	cmp	r3, #50	; 0x32
 8002476:	d904      	bls.n	8002482 <enableKeepAliveLed+0x42>
		HAL_GPIO_WritePin(KEEP_ALIVE_GPIO_Port, KEEP_ALIVE_Pin, GPIO_PIN_RESET);
 8002478:	2200      	movs	r2, #0
 800247a:	2120      	movs	r1, #32
 800247c:	4803      	ldr	r0, [pc, #12]	; (800248c <enableKeepAliveLed+0x4c>)
 800247e:	f001 f9ee 	bl	800385e <HAL_GPIO_WritePin>

	return keepAliveStartTicks;
 8002482:	687b      	ldr	r3, [r7, #4]
}
 8002484:	4618      	mov	r0, r3
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40010c00 	.word	0x40010c00

08002490 <configureADC>:

void configureADC() {
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
	// Enable ADC clock
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8002494:	4b10      	ldr	r3, [pc, #64]	; (80024d8 <configureADC+0x48>)
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	4a0f      	ldr	r2, [pc, #60]	; (80024d8 <configureADC+0x48>)
 800249a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800249e:	6193      	str	r3, [r2, #24]

	// Enable GPIOA clock
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 80024a0:	4b0d      	ldr	r3, [pc, #52]	; (80024d8 <configureADC+0x48>)
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	4a0c      	ldr	r2, [pc, #48]	; (80024d8 <configureADC+0x48>)
 80024a6:	f043 0304 	orr.w	r3, r3, #4
 80024aa:	6193      	str	r3, [r2, #24]

	// Enable SWSTART
	ADC1->CR2 |= ADC_CR2_EXTTRIG | ADC_CR2_EXTSEL; // Set external trigger and trigger source
 80024ac:	4b0b      	ldr	r3, [pc, #44]	; (80024dc <configureADC+0x4c>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	4a0a      	ldr	r2, [pc, #40]	; (80024dc <configureADC+0x4c>)
 80024b2:	f443 13f0 	orr.w	r3, r3, #1966080	; 0x1e0000
 80024b6:	6093      	str	r3, [r2, #8]

	// Enable ADC temperature sensor and Vrefint channels
	ADC1->CR2 |= ADC_CR2_TSVREFE;
 80024b8:	4b08      	ldr	r3, [pc, #32]	; (80024dc <configureADC+0x4c>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	4a07      	ldr	r2, [pc, #28]	; (80024dc <configureADC+0x4c>)
 80024be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024c2:	6093      	str	r3, [r2, #8]
	// Enable ADC1
	ADC1->CR2 |= ADC_CR2_ADON;
 80024c4:	4b05      	ldr	r3, [pc, #20]	; (80024dc <configureADC+0x4c>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	4a04      	ldr	r2, [pc, #16]	; (80024dc <configureADC+0x4c>)
 80024ca:	f043 0301 	orr.w	r3, r3, #1
 80024ce:	6093      	str	r3, [r2, #8]
	// Enable ADC interrupt
//	NVIC_EnableIRQ(ADC1_IRQn);
}
 80024d0:	bf00      	nop
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr
 80024d8:	40021000 	.word	0x40021000
 80024dc:	40012400 	.word	0x40012400

080024e0 <calibrateADC>:

void calibrateADC() {
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
	// Start ADC calibration
	ADC1->CR2 |= ADC_CR2_CAL;
 80024e4:	4b08      	ldr	r3, [pc, #32]	; (8002508 <calibrateADC+0x28>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	4a07      	ldr	r2, [pc, #28]	; (8002508 <calibrateADC+0x28>)
 80024ea:	f043 0304 	orr.w	r3, r3, #4
 80024ee:	6093      	str	r3, [r2, #8]

	// Wait for calibration to complete
	while (ADC1->CR2 & ADC_CR2_CAL) {
 80024f0:	bf00      	nop
 80024f2:	4b05      	ldr	r3, [pc, #20]	; (8002508 <calibrateADC+0x28>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 0304 	and.w	r3, r3, #4
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1f9      	bne.n	80024f2 <calibrateADC+0x12>
	}
}
 80024fe:	bf00      	nop
 8002500:	bf00      	nop
 8002502:	46bd      	mov	sp, r7
 8002504:	bc80      	pop	{r7}
 8002506:	4770      	bx	lr
 8002508:	40012400 	.word	0x40012400

0800250c <configureGPIO>:

void configureGPIO() {
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8002510:	4b0a      	ldr	r3, [pc, #40]	; (800253c <configureGPIO+0x30>)
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	4a09      	ldr	r2, [pc, #36]	; (800253c <configureGPIO+0x30>)
 8002516:	f043 0304 	orr.w	r3, r3, #4
 800251a:	6193      	str	r3, [r2, #24]

	// Configure PA0 and PA11 as analog input mode
	GPIOA->CRL &= ~(GPIO_CRL_CNF0 | GPIO_CRL_MODE0);
 800251c:	4b08      	ldr	r3, [pc, #32]	; (8002540 <configureGPIO+0x34>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a07      	ldr	r2, [pc, #28]	; (8002540 <configureGPIO+0x34>)
 8002522:	f023 030f 	bic.w	r3, r3, #15
 8002526:	6013      	str	r3, [r2, #0]
	GPIOA->CRH &= ~(GPIO_CRH_CNF11 | GPIO_CRH_MODE11);
 8002528:	4b05      	ldr	r3, [pc, #20]	; (8002540 <configureGPIO+0x34>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	4a04      	ldr	r2, [pc, #16]	; (8002540 <configureGPIO+0x34>)
 800252e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002532:	6053      	str	r3, [r2, #4]
}
 8002534:	bf00      	nop
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr
 800253c:	40021000 	.word	0x40021000
 8002540:	40010800 	.word	0x40010800

08002544 <startADCConversion>:

void startADCConversion(uint8_t channel) {
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	71fb      	strb	r3, [r7, #7]
	// Clear previous channel selection
	ADC1->SQR3 &= ~ADC_SQR3_SQ1_Msk;
 800254e:	4b0e      	ldr	r3, [pc, #56]	; (8002588 <startADCConversion+0x44>)
 8002550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002552:	4a0d      	ldr	r2, [pc, #52]	; (8002588 <startADCConversion+0x44>)
 8002554:	f023 031f 	bic.w	r3, r3, #31
 8002558:	6353      	str	r3, [r2, #52]	; 0x34

	// Set new channel selection
	ADC1->SQR3 |= (channel << ADC_SQR3_SQ1_Pos);
 800255a:	4b0b      	ldr	r3, [pc, #44]	; (8002588 <startADCConversion+0x44>)
 800255c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800255e:	79fb      	ldrb	r3, [r7, #7]
 8002560:	4909      	ldr	r1, [pc, #36]	; (8002588 <startADCConversion+0x44>)
 8002562:	4313      	orrs	r3, r2
 8002564:	634b      	str	r3, [r1, #52]	; 0x34

	// Enable ADC1
	ADC1->CR2 |= ADC_CR2_ADON;
 8002566:	4b08      	ldr	r3, [pc, #32]	; (8002588 <startADCConversion+0x44>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	4a07      	ldr	r2, [pc, #28]	; (8002588 <startADCConversion+0x44>)
 800256c:	f043 0301 	orr.w	r3, r3, #1
 8002570:	6093      	str	r3, [r2, #8]

	// Start ADC conversion
	ADC1->CR2 |= ADC_CR2_SWSTART;
 8002572:	4b05      	ldr	r3, [pc, #20]	; (8002588 <startADCConversion+0x44>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	4a04      	ldr	r2, [pc, #16]	; (8002588 <startADCConversion+0x44>)
 8002578:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800257c:	6093      	str	r3, [r2, #8]
}
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr
 8002588:	40012400 	.word	0x40012400

0800258c <readADCChannel>:

uint16_t readADCChannel(uint8_t channel) {
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	71fb      	strb	r3, [r7, #7]
	// Start ADC conversion for the specified channel
	startADCConversion(channel);
 8002596:	79fb      	ldrb	r3, [r7, #7]
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff ffd3 	bl	8002544 <startADCConversion>

	// Wait for conversion to complete
	while ((ADC1->SR & ADC_SR_EOC) == 0) {
 800259e:	bf00      	nop
 80025a0:	4b06      	ldr	r3, [pc, #24]	; (80025bc <readADCChannel+0x30>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d0f9      	beq.n	80025a0 <readADCChannel+0x14>
	}

	// Read the ADC value
	uint16_t adcValue = ADC1->DR;
 80025ac:	4b03      	ldr	r3, [pc, #12]	; (80025bc <readADCChannel+0x30>)
 80025ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b0:	81fb      	strh	r3, [r7, #14]

	return adcValue;
 80025b2:	89fb      	ldrh	r3, [r7, #14]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3710      	adds	r7, #16
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40012400 	.word	0x40012400

080025c0 <updateMasterStatus>:

void updateMasterStatus(RDSS_t *rdss, volatile uint16_t *adcValues,
		uint32_t timeout) {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
	if (HAL_GetTick() - rdss->lastUpdateTicks > timeout) {
 80025cc:	f000 fdbe 	bl	800314c <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	429a      	cmp	r2, r3
 80025dc:	f080 8093 	bcs.w	8002706 <updateMasterStatus+0x146>
		uint8_t index = 0;
 80025e0:	2300      	movs	r3, #0
 80025e2:	75fb      	strb	r3, [r7, #23]
		const uint8_t querySize = 5;
 80025e4:	2305      	movs	r3, #5
 80025e6:	75bb      	strb	r3, [r7, #22]
		memset(rdss->queryBuffer, 0, 14);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	3313      	adds	r3, #19
 80025ec:	220e      	movs	r2, #14
 80025ee:	2100      	movs	r1, #0
 80025f0:	4618      	mov	r0, r3
 80025f2:	f004 fef3 	bl	80073dc <memset>
		rdss->queryBuffer[index++] = RDSS_START_MARK;
 80025f6:	7dfb      	ldrb	r3, [r7, #23]
 80025f8:	1c5a      	adds	r2, r3, #1
 80025fa:	75fa      	strb	r2, [r7, #23]
 80025fc:	461a      	mov	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	4413      	add	r3, r2
 8002602:	227e      	movs	r2, #126	; 0x7e
 8002604:	74da      	strb	r2, [r3, #19]
		rdss->queryBuffer[index++] = SERVER;
 8002606:	7dfb      	ldrb	r3, [r7, #23]
 8002608:	1c5a      	adds	r2, r3, #1
 800260a:	75fa      	strb	r2, [r7, #23]
 800260c:	461a      	mov	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	4413      	add	r3, r2
 8002612:	2200      	movs	r2, #0
 8002614:	74da      	strb	r2, [r3, #19]
		rdss->queryBuffer[index++] = rdss->id;
 8002616:	7dfb      	ldrb	r3, [r7, #23]
 8002618:	1c5a      	adds	r2, r3, #1
 800261a:	75fa      	strb	r2, [r7, #23]
 800261c:	4619      	mov	r1, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	7c1a      	ldrb	r2, [r3, #16]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	440b      	add	r3, r1
 8002626:	74da      	strb	r2, [r3, #19]
		rdss->queryBuffer[index++] = QUERY_MASTER_STATUS;
 8002628:	7dfb      	ldrb	r3, [r7, #23]
 800262a:	1c5a      	adds	r2, r3, #1
 800262c:	75fa      	strb	r2, [r7, #23]
 800262e:	461a      	mov	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	4413      	add	r3, r2
 8002634:	2213      	movs	r2, #19
 8002636:	74da      	strb	r2, [r3, #19]
		rdss->queryBuffer[index++] = 0x00;
 8002638:	7dfb      	ldrb	r3, [r7, #23]
 800263a:	1c5a      	adds	r2, r3, #1
 800263c:	75fa      	strb	r2, [r7, #23]
 800263e:	461a      	mov	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4413      	add	r3, r2
 8002644:	2200      	movs	r2, #0
 8002646:	74da      	strb	r2, [r3, #19]
		rdss->queryBuffer[index++] = querySize;
 8002648:	7dfb      	ldrb	r3, [r7, #23]
 800264a:	1c5a      	adds	r2, r3, #1
 800264c:	75fa      	strb	r2, [r7, #23]
 800264e:	461a      	mov	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	4413      	add	r3, r2
 8002654:	7dba      	ldrb	r2, [r7, #22]
 8002656:	74da      	strb	r2, [r3, #19]
		rdss->queryBuffer[index++] = adcValues[0];
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	881b      	ldrh	r3, [r3, #0]
 800265c:	b29a      	uxth	r2, r3
 800265e:	7dfb      	ldrb	r3, [r7, #23]
 8002660:	1c59      	adds	r1, r3, #1
 8002662:	75f9      	strb	r1, [r7, #23]
 8002664:	4619      	mov	r1, r3
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	440b      	add	r3, r1
 800266c:	74da      	strb	r2, [r3, #19]
		rdss->queryBuffer[index++] = adcValues[0] >> 8;
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	881b      	ldrh	r3, [r3, #0]
 8002672:	b29b      	uxth	r3, r3
 8002674:	0a1b      	lsrs	r3, r3, #8
 8002676:	b29a      	uxth	r2, r3
 8002678:	7dfb      	ldrb	r3, [r7, #23]
 800267a:	1c59      	adds	r1, r3, #1
 800267c:	75f9      	strb	r1, [r7, #23]
 800267e:	4619      	mov	r1, r3
 8002680:	b2d2      	uxtb	r2, r2
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	440b      	add	r3, r1
 8002686:	74da      	strb	r2, [r3, #19]
		rdss->queryBuffer[index++] = adcValues[1];
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	3302      	adds	r3, #2
 800268c:	881b      	ldrh	r3, [r3, #0]
 800268e:	b29a      	uxth	r2, r3
 8002690:	7dfb      	ldrb	r3, [r7, #23]
 8002692:	1c59      	adds	r1, r3, #1
 8002694:	75f9      	strb	r1, [r7, #23]
 8002696:	4619      	mov	r1, r3
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	440b      	add	r3, r1
 800269e:	74da      	strb	r2, [r3, #19]
		rdss->queryBuffer[index++] = adcValues[1] >> 8;
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	3302      	adds	r3, #2
 80026a4:	881b      	ldrh	r3, [r3, #0]
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	0a1b      	lsrs	r3, r3, #8
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	7dfb      	ldrb	r3, [r7, #23]
 80026ae:	1c59      	adds	r1, r3, #1
 80026b0:	75f9      	strb	r1, [r7, #23]
 80026b2:	4619      	mov	r1, r3
 80026b4:	b2d2      	uxtb	r2, r2
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	440b      	add	r3, r1
 80026ba:	74da      	strb	r2, [r3, #19]
		rdss->queryBuffer[index++] = adcValues[2];
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	3304      	adds	r3, #4
 80026c0:	881b      	ldrh	r3, [r3, #0]
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	7dfb      	ldrb	r3, [r7, #23]
 80026c6:	1c59      	adds	r1, r3, #1
 80026c8:	75f9      	strb	r1, [r7, #23]
 80026ca:	4619      	mov	r1, r3
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	440b      	add	r3, r1
 80026d2:	74da      	strb	r2, [r3, #19]
		index += setCrc(rdss->queryBuffer, index);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	3313      	adds	r3, #19
 80026d8:	7dfa      	ldrb	r2, [r7, #23]
 80026da:	4611      	mov	r1, r2
 80026dc:	4618      	mov	r0, r3
 80026de:	f000 f9bc 	bl	8002a5a <setCrc>
 80026e2:	4603      	mov	r3, r0
 80026e4:	461a      	mov	r2, r3
 80026e6:	7dfb      	ldrb	r3, [r7, #23]
 80026e8:	4413      	add	r3, r2
 80026ea:	75fb      	strb	r3, [r7, #23]
		rdss->queryBuffer[index++] = RDSS_END_MARK;
 80026ec:	7dfb      	ldrb	r3, [r7, #23]
 80026ee:	1c5a      	adds	r2, r3, #1
 80026f0:	75fa      	strb	r2, [r7, #23]
 80026f2:	461a      	mov	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	4413      	add	r3, r2
 80026f8:	227f      	movs	r2, #127	; 0x7f
 80026fa:	74da      	strb	r2, [r3, #19]
		rdss->lastUpdateTicks = HAL_GetTick();
 80026fc:	f000 fd26 	bl	800314c <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8002706:	bf00      	nop
 8002708:	3718      	adds	r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800270e:	b480      	push	{r7}
 8002710:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002712:	b672      	cpsid	i
}
 8002714:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002716:	e7fe      	b.n	8002716 <Error_Handler+0x8>

08002718 <vladInit>:
	uhf->PdBm = 0;
	uhf->function = funcion;
	uhf->id = id;
}

Vlad_t* vladInit(Function_t function) {
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	4603      	mov	r3, r0
 8002720:	71fb      	strb	r3, [r7, #7]
	Vlad_t *vlad;
	vlad = malloc(sizeof(Vlad_t));
 8002722:	2038      	movs	r0, #56	; 0x38
 8002724:	f004 fd9e 	bl	8007264 <malloc>
 8002728:	4603      	mov	r3, r0
 800272a:	60fb      	str	r3, [r7, #12]
	vlad->agc152m = 0;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	801a      	strh	r2, [r3, #0]
	vlad->ref152m = 0;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	805a      	strh	r2, [r3, #2]
	vlad->level152m = 0;  // downlink 150 mhz
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	809a      	strh	r2, [r3, #4]
	vlad->agc172m = 0;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	80da      	strh	r2, [r3, #6]
	vlad->level172m = 0; //uplink 170 mhz
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	811a      	strh	r2, [r3, #8]
	vlad->tone_level = 0;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	815a      	strh	r2, [r3, #10]
	vlad->v_5v = 0;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	819a      	strh	r2, [r3, #12]
	vlad->vin = 0;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	81da      	strh	r2, [r3, #14]
	vlad->current = 0;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	821a      	strh	r2, [r3, #16]
	vlad->v_5v_real = 0;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f04f 0200 	mov.w	r2, #0
 8002768:	619a      	str	r2, [r3, #24]
	vlad->inputVoltageReal = 0;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f04f 0200 	mov.w	r2, #0
 8002770:	61da      	str	r2, [r3, #28]
	vlad->currentReal = 0;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	841a      	strh	r2, [r3, #32]
	vlad->ucTemperature = 0;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	vlad->baseCurrentReal = 0;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	849a      	strh	r2, [r3, #36]	; 0x24
	vlad->attenuation = 0;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	vlad->v_5v_real = 0;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f04f 0200 	mov.w	r2, #0
 8002794:	619a      	str	r2, [r3, #24]
	vlad->inputVoltageReal = 0;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f04f 0200 	mov.w	r2, #0
 800279c:	61da      	str	r2, [r3, #28]
	vlad->currentReal = 0;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	841a      	strh	r2, [r3, #32]
	vlad->agc152m_real = 0;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	749a      	strb	r2, [r3, #18]
	vlad->agc172m_real = 0;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	74da      	strb	r2, [r3, #19]
	vlad->level152m_real = 0;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	751a      	strb	r2, [r3, #20]
	vlad->level172m_real = 0;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	755a      	strb	r2, [r3, #21]
	vlad->isRemoteAttenuation = false;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	vlad->is_attenuation_updated = false;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	vlad->state = 0;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	vlad->calc_en = false;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	vlad->function = function;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	79fa      	ldrb	r2, [r7, #7]
 80027e0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	vlad->id = 0;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	vlad->lastUpdateTicks = HAL_GetTick();
 80027ec:	f000 fcae 	bl	800314c <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	631a      	str	r2, [r3, #48]	; 0x30

//	HAL_readPage(CAT24C02_PAGE0_START_ADDR, &(vlad->function), 3, 1);
//	HAL_readPage(CAT24C02_PAGE0_START_ADDR, &(vlad->id), 4, 1);
	return vlad;
 80027f6:	68fb      	ldr	r3, [r7, #12]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <serverInit>:

Server_t* serverInit(Function_t function) {
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	71fb      	strb	r3, [r7, #7]
	Server_t *server;
	server = malloc(sizeof(Server_t));
 800280a:	201c      	movs	r0, #28
 800280c:	f004 fd2a 	bl	8007264 <malloc>
 8002810:	4603      	mov	r3, r0
 8002812:	60fb      	str	r3, [r7, #12]

	if (server != NULL) {
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d012      	beq.n	8002840 <serverInit+0x40>
        server->inputVoltage = 0;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	801a      	strh	r2, [r3, #0]
        server->counsumptionCurrentReal = 0;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f04f 0200 	mov.w	r2, #0
 8002826:	609a      	str	r2, [r3, #8]
        server->lm75Temperature = 0;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2200      	movs	r2, #0
 800282c:	821a      	strh	r2, [r3, #16]
        server->id = 0;  // assuming id can be zero initialized
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	751a      	strb	r2, [r3, #20]
        server->function = function;  // Use the function parameter passed in
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	79fa      	ldrb	r2, [r7, #7]
 8002838:	755a      	strb	r2, [r3, #21]
        server->lastUpdateTicks = 0;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	619a      	str	r2, [r3, #24]
	}
	return server;
 8002840:	68fb      	ldr	r3, [r7, #12]
}
 8002842:	4618      	mov	r0, r3
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <rdssInit>:
 *  Created on: Sep 28, 2022
 *      Author: sigmadev
 */
#include <rs485.h>

RDSS_t* rdssInit(uint8_t id) {
 800284a:	b580      	push	{r7, lr}
 800284c:	b084      	sub	sp, #16
 800284e:	af00      	add	r7, sp, #0
 8002850:	4603      	mov	r3, r0
 8002852:	71fb      	strb	r3, [r7, #7]
	RDSS_t *r;
	r = malloc(sizeof(RDSS_t));
 8002854:	2038      	movs	r0, #56	; 0x38
 8002856:	f004 fd05 	bl	8007264 <malloc>
 800285a:	4603      	mov	r3, r0
 800285c:	60fb      	str	r3, [r7, #12]
	r->status = WAITING;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2208      	movs	r2, #8
 8002862:	745a      	strb	r2, [r3, #17]
	r->cmd = NONE;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	701a      	strb	r2, [r3, #0]
	r->id = id;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	79fa      	ldrb	r2, [r7, #7]
 800286e:	741a      	strb	r2, [r3, #16]

	/* PB9 DE485 as output  */
//	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE9_0);
//	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE9_1);
	return r;
 8002870:	68fb      	ldr	r3, [r7, #12]
}
 8002872:	4618      	mov	r0, r3
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <rdssReinit>:

void rdssReinit(RDSS_t *rdss) {
 800287a:	b480      	push	{r7}
 800287c:	b083      	sub	sp, #12
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
    rdss->cmd = NONE;           // Reset the command field
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	701a      	strb	r2, [r3, #0]
    rdss->crcReceived = 0;      // Reset the received CRC value
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	819a      	strh	r2, [r3, #12]
    rdss->crcCalculated = 0;    // Reset the calculated CRC value
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	815a      	strh	r2, [r3, #10]
//    rdss->idQuery = 0;          // Reset the query ID
    rdss->status = WAITING;     // Set the status to waiting
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2208      	movs	r2, #8
 8002898:	745a      	strb	r2, [r3, #17]
    rdss->idReceived = 0;       // Reset the received ID
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	73da      	strb	r2, [r3, #15]
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bc80      	pop	{r7}
 80028a8:	4770      	bx	lr

080028aa <checkModuleValidity>:
	if (crc_cal == crc_save)
		return DATA_OK;
	return CRC_ERROR;
}

RDSS_status_t checkModuleValidity(uint8_t *frame, uint8_t lenght) {
 80028aa:	b480      	push	{r7}
 80028ac:	b085      	sub	sp, #20
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
 80028b2:	460b      	mov	r3, r1
 80028b4:	70fb      	strb	r3, [r7, #3]
	if (frame[1] >= SERVER || frame[1] <= SNIFFER) {
		for (int i = 3; i < lenght; i++)
 80028b6:	2303      	movs	r3, #3
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	e00a      	b.n	80028d2 <checkModuleValidity+0x28>
			if (frame[i] == RDSS_END_MARK)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	4413      	add	r3, r2
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b7f      	cmp	r3, #127	; 0x7f
 80028c6:	d101      	bne.n	80028cc <checkModuleValidity+0x22>
				return VALID_MODULE;
 80028c8:	2309      	movs	r3, #9
 80028ca:	e007      	b.n	80028dc <checkModuleValidity+0x32>
		for (int i = 3; i < lenght; i++)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	3301      	adds	r3, #1
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	78fb      	ldrb	r3, [r7, #3]
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	dbf0      	blt.n	80028bc <checkModuleValidity+0x12>
	} else
		return WRONG_MODULE_FUNCTION;
	return WRONG_MODULE_FUNCTION;
 80028da:	2304      	movs	r3, #4
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bc80      	pop	{r7}
 80028e4:	4770      	bx	lr

080028e6 <checkFrameValidity>:

RDSS_status_t checkFrameValidity(uint8_t *frame, uint8_t lenght) {
 80028e6:	b480      	push	{r7}
 80028e8:	b083      	sub	sp, #12
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
 80028ee:	460b      	mov	r3, r1
 80028f0:	70fb      	strb	r3, [r7, #3]

	if (lenght > (MINIMUN_FRAME_LEN)) {
 80028f2:	78fb      	ldrb	r3, [r7, #3]
 80028f4:	2b06      	cmp	r3, #6
 80028f6:	d910      	bls.n	800291a <checkFrameValidity+0x34>
		if (frame[0] == RDSS_START_MARK) {
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b7e      	cmp	r3, #126	; 0x7e
 80028fe:	d10a      	bne.n	8002916 <checkFrameValidity+0x30>
			if (frame[lenght - 1] == RDSS_END_MARK)
 8002900:	78fb      	ldrb	r3, [r7, #3]
 8002902:	3b01      	subs	r3, #1
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	4413      	add	r3, r2
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	2b7f      	cmp	r3, #127	; 0x7f
 800290c:	d101      	bne.n	8002912 <checkFrameValidity+0x2c>
				return VALID_FRAME;
 800290e:	2302      	movs	r3, #2
 8002910:	e004      	b.n	800291c <checkFrameValidity+0x36>
			else
				return START_READING;
 8002912:	2301      	movs	r3, #1
 8002914:	e002      	b.n	800291c <checkFrameValidity+0x36>
		} else
			return NOT_VALID_FRAME;
 8002916:	2303      	movs	r3, #3
 8002918:	e000      	b.n	800291c <checkFrameValidity+0x36>
	} else

		return WAITING;
 800291a:	2308      	movs	r3, #8
}
 800291c:	4618      	mov	r0, r3
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	bc80      	pop	{r7}
 8002924:	4770      	bx	lr

08002926 <checkCRCValidity>:

RDSS_status_t checkCRCValidity(uint8_t *frame, uint8_t len) {
 8002926:	b580      	push	{r7, lr}
 8002928:	b084      	sub	sp, #16
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
 800292e:	460b      	mov	r3, r1
 8002930:	70fb      	strb	r3, [r7, #3]
    uint16_t calculatedCrc;
    uint16_t savedCrc;
    savedCrc = ((uint16_t) frame[len - CRC_HIGH_BYTE_OFFSET] << 8);
 8002932:	78fb      	ldrb	r3, [r7, #3]
 8002934:	3b02      	subs	r3, #2
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	4413      	add	r3, r2
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	b29b      	uxth	r3, r3
 800293e:	021b      	lsls	r3, r3, #8
 8002940:	81fb      	strh	r3, [r7, #14]
    savedCrc |= (uint16_t) frame[len - CRC_LOW_BYTE_OFFSET];
 8002942:	78fb      	ldrb	r3, [r7, #3]
 8002944:	3b03      	subs	r3, #3
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	4413      	add	r3, r2
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	b29a      	uxth	r2, r3
 800294e:	89fb      	ldrh	r3, [r7, #14]
 8002950:	4313      	orrs	r3, r2
 8002952:	81fb      	strh	r3, [r7, #14]
    calculatedCrc = crc_get(&frame[1], len - FRAME_HEADER_SIZE);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	1c5a      	adds	r2, r3, #1
 8002958:	78fb      	ldrb	r3, [r7, #3]
 800295a:	3b04      	subs	r3, #4
 800295c:	b2db      	uxtb	r3, r3
 800295e:	4619      	mov	r1, r3
 8002960:	4610      	mov	r0, r2
 8002962:	f000 f80d 	bl	8002980 <crc_get>
 8002966:	4603      	mov	r3, r0
 8002968:	81bb      	strh	r3, [r7, #12]
    return ((calculatedCrc == savedCrc) ? DATA_OK : CRC_ERROR);
 800296a:	89ba      	ldrh	r2, [r7, #12]
 800296c:	89fb      	ldrh	r3, [r7, #14]
 800296e:	429a      	cmp	r2, r3
 8002970:	d101      	bne.n	8002976 <checkCRCValidity+0x50>
 8002972:	2300      	movs	r3, #0
 8002974:	e000      	b.n	8002978 <checkCRCValidity+0x52>
 8002976:	2306      	movs	r3, #6
}
 8002978:	4618      	mov	r0, r3
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <crc_get>:
uint16_t crc_get(uint8_t *buffer, uint8_t buff_len) {
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	70fb      	strb	r3, [r7, #3]
	uint8_t byte_idx;
	uint8_t bit_idx;
	uint16_t generator = 0x1021; // 16-bit divisor
 800298c:	f241 0321 	movw	r3, #4129	; 0x1021
 8002990:	817b      	strh	r3, [r7, #10]
	uint16_t crc = 0;            // 16-bit CRC value
 8002992:	2300      	movs	r3, #0
 8002994:	81bb      	strh	r3, [r7, #12]

	for (byte_idx = 0; byte_idx < buff_len; byte_idx++) {
 8002996:	2300      	movs	r3, #0
 8002998:	73fb      	strb	r3, [r7, #15]
 800299a:	e025      	b.n	80029e8 <crc_get+0x68>
		crc ^= ((uint16_t) (buffer[byte_idx] << 8)); // Move byte into MSB of 16-bit CRC
 800299c:	7bfb      	ldrb	r3, [r7, #15]
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	4413      	add	r3, r2
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	021b      	lsls	r3, r3, #8
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	89bb      	ldrh	r3, [r7, #12]
 80029ac:	4053      	eors	r3, r2
 80029ae:	81bb      	strh	r3, [r7, #12]

		for (bit_idx = 0; bit_idx < 8; bit_idx++) {
 80029b0:	2300      	movs	r3, #0
 80029b2:	73bb      	strb	r3, [r7, #14]
 80029b4:	e012      	b.n	80029dc <crc_get+0x5c>
			if ((crc & 0x8000) != 0) { // Test for MSB = bit 15
 80029b6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	da08      	bge.n	80029d0 <crc_get+0x50>
				crc = ((uint16_t) ((crc << 1) ^ generator));
 80029be:	89bb      	ldrh	r3, [r7, #12]
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	b21a      	sxth	r2, r3
 80029c4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80029c8:	4053      	eors	r3, r2
 80029ca:	b21b      	sxth	r3, r3
 80029cc:	81bb      	strh	r3, [r7, #12]
 80029ce:	e002      	b.n	80029d6 <crc_get+0x56>
			} else {
				crc <<= 1;
 80029d0:	89bb      	ldrh	r3, [r7, #12]
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	81bb      	strh	r3, [r7, #12]
		for (bit_idx = 0; bit_idx < 8; bit_idx++) {
 80029d6:	7bbb      	ldrb	r3, [r7, #14]
 80029d8:	3301      	adds	r3, #1
 80029da:	73bb      	strb	r3, [r7, #14]
 80029dc:	7bbb      	ldrb	r3, [r7, #14]
 80029de:	2b07      	cmp	r3, #7
 80029e0:	d9e9      	bls.n	80029b6 <crc_get+0x36>
	for (byte_idx = 0; byte_idx < buff_len; byte_idx++) {
 80029e2:	7bfb      	ldrb	r3, [r7, #15]
 80029e4:	3301      	adds	r3, #1
 80029e6:	73fb      	strb	r3, [r7, #15]
 80029e8:	7bfa      	ldrb	r2, [r7, #15]
 80029ea:	78fb      	ldrb	r3, [r7, #3]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d3d5      	bcc.n	800299c <crc_get+0x1c>
			}
		}
	}

	return crc;
 80029f0:	89bb      	ldrh	r3, [r7, #12]
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr

080029fc <validate>:

RDSS_status_t validate(uint8_t *buffer, uint8_t length) {
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	460b      	mov	r3, r1
 8002a06:	70fb      	strb	r3, [r7, #3]
	RDSS_status_t frameStatus = checkFrameValidity(buffer, length);
 8002a08:	78fb      	ldrb	r3, [r7, #3]
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f7ff ff6a 	bl	80028e6 <checkFrameValidity>
 8002a12:	4603      	mov	r3, r0
 8002a14:	73fb      	strb	r3, [r7, #15]
	if (frameStatus != VALID_FRAME)
 8002a16:	7bfb      	ldrb	r3, [r7, #15]
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d001      	beq.n	8002a20 <validate+0x24>
		return (frameStatus);
 8002a1c:	7bfb      	ldrb	r3, [r7, #15]
 8002a1e:	e018      	b.n	8002a52 <validate+0x56>
	RDSS_status_t moduleStatus = checkModuleValidity(buffer, length);
 8002a20:	78fb      	ldrb	r3, [r7, #3]
 8002a22:	4619      	mov	r1, r3
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f7ff ff40 	bl	80028aa <checkModuleValidity>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	73bb      	strb	r3, [r7, #14]
	if (moduleStatus != VALID_MODULE)
 8002a2e:	7bbb      	ldrb	r3, [r7, #14]
 8002a30:	2b09      	cmp	r3, #9
 8002a32:	d001      	beq.n	8002a38 <validate+0x3c>
		return (moduleStatus);
 8002a34:	7bbb      	ldrb	r3, [r7, #14]
 8002a36:	e00c      	b.n	8002a52 <validate+0x56>
	RDSS_status_t crcStatus = checkCRCValidity(buffer, length);
 8002a38:	78fb      	ldrb	r3, [r7, #3]
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f7ff ff72 	bl	8002926 <checkCRCValidity>
 8002a42:	4603      	mov	r3, r0
 8002a44:	737b      	strb	r3, [r7, #13]
	if (crcStatus != DATA_OK)
 8002a46:	7b7b      	ldrb	r3, [r7, #13]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <validate+0x54>
		return (crcStatus);
 8002a4c:	7b7b      	ldrb	r3, [r7, #13]
 8002a4e:	e000      	b.n	8002a52 <validate+0x56>
	return (DATA_OK);
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <setCrc>:
	buff[15] = downlinkInputPower;
	buff[16] = downlinkAgc;
	buff[17] = uplinkOuputPower;
}

uint8_t setCrc(uint8_t *buff, uint8_t size) {
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b084      	sub	sp, #16
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
 8002a62:	460b      	mov	r3, r1
 8002a64:	70fb      	strb	r3, [r7, #3]
	uint8_t crc_frame[2];
	uint16_t crc;
	crc = crc_get(buff + 1, size - 1);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	1c5a      	adds	r2, r3, #1
 8002a6a:	78fb      	ldrb	r3, [r7, #3]
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	4619      	mov	r1, r3
 8002a72:	4610      	mov	r0, r2
 8002a74:	f7ff ff84 	bl	8002980 <crc_get>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	817b      	strh	r3, [r7, #10]
 8002a7c:	897b      	ldrh	r3, [r7, #10]
	memcpy(crc_frame, &crc, 2);
 8002a7e:	81bb      	strh	r3, [r7, #12]
	buff[size++] = crc_frame[0];
 8002a80:	78fb      	ldrb	r3, [r7, #3]
 8002a82:	1c5a      	adds	r2, r3, #1
 8002a84:	70fa      	strb	r2, [r7, #3]
 8002a86:	461a      	mov	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	7b3a      	ldrb	r2, [r7, #12]
 8002a8e:	701a      	strb	r2, [r3, #0]
	buff[size++] = crc_frame[1];
 8002a90:	78fb      	ldrb	r3, [r7, #3]
 8002a92:	1c5a      	adds	r2, r3, #1
 8002a94:	70fa      	strb	r2, [r7, #3]
 8002a96:	461a      	mov	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	7b7a      	ldrb	r2, [r7, #13]
 8002a9e:	701a      	strb	r2, [r3, #0]
	return 2;
 8002aa0:	2302      	movs	r3, #2
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <setRdssStartData>:

uint8_t setRdssStartData(RDSS_t *rdss, uint8_t *buffer, Function_t function) {
 8002aaa:	b480      	push	{r7}
 8002aac:	b087      	sub	sp, #28
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	60f8      	str	r0, [r7, #12]
 8002ab2:	60b9      	str	r1, [r7, #8]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	75fb      	strb	r3, [r7, #23]
	if (rdss->cmd == 0)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <setRdssStartData+0x1e>
		return i;
 8002ac4:	7dfb      	ldrb	r3, [r7, #23]
 8002ac6:	e033      	b.n	8002b30 <setRdssStartData+0x86>
	if (rdss->id == 0 && function != SERVER)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	7c1b      	ldrb	r3, [r3, #16]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d104      	bne.n	8002ada <setRdssStartData+0x30>
 8002ad0:	79fb      	ldrb	r3, [r7, #7]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <setRdssStartData+0x30>
		return i;
 8002ad6:	7dfb      	ldrb	r3, [r7, #23]
 8002ad8:	e02a      	b.n	8002b30 <setRdssStartData+0x86>
	buffer[i++] = RDSS_START_MARK;
 8002ada:	7dfb      	ldrb	r3, [r7, #23]
 8002adc:	1c5a      	adds	r2, r3, #1
 8002ade:	75fa      	strb	r2, [r7, #23]
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	227e      	movs	r2, #126	; 0x7e
 8002ae8:	701a      	strb	r2, [r3, #0]
	buffer[i++] = function;
 8002aea:	7dfb      	ldrb	r3, [r7, #23]
 8002aec:	1c5a      	adds	r2, r3, #1
 8002aee:	75fa      	strb	r2, [r7, #23]
 8002af0:	461a      	mov	r2, r3
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	4413      	add	r3, r2
 8002af6:	79fa      	ldrb	r2, [r7, #7]
 8002af8:	701a      	strb	r2, [r3, #0]
	buffer[i++] = rdss->id;
 8002afa:	7dfb      	ldrb	r3, [r7, #23]
 8002afc:	1c5a      	adds	r2, r3, #1
 8002afe:	75fa      	strb	r2, [r7, #23]
 8002b00:	461a      	mov	r2, r3
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	4413      	add	r3, r2
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	7c12      	ldrb	r2, [r2, #16]
 8002b0a:	701a      	strb	r2, [r3, #0]
	buffer[i++] = rdss->cmd;
 8002b0c:	7dfb      	ldrb	r3, [r7, #23]
 8002b0e:	1c5a      	adds	r2, r3, #1
 8002b10:	75fa      	strb	r2, [r7, #23]
 8002b12:	461a      	mov	r2, r3
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	4413      	add	r3, r2
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	7812      	ldrb	r2, [r2, #0]
 8002b1c:	701a      	strb	r2, [r3, #0]
	buffer[i++] = 0x00;
 8002b1e:	7dfb      	ldrb	r3, [r7, #23]
 8002b20:	1c5a      	adds	r2, r3, #1
 8002b22:	75fa      	strb	r2, [r7, #23]
 8002b24:	461a      	mov	r2, r3
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	4413      	add	r3, r2
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	701a      	strb	r2, [r3, #0]
	return i;
 8002b2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	371c      	adds	r7, #28
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bc80      	pop	{r7}
 8002b38:	4770      	bx	lr
	...

08002b3c <freqDecode>:

int freqDecode(uint8_t *buffer) {
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
	union floatConverter freq;
	freq.i = 0;
 8002b44:	2300      	movs	r3, #0
 8002b46:	60fb      	str	r3, [r7, #12]
	freq.i |= (buffer[0]);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	7812      	ldrb	r2, [r2, #0]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	60fb      	str	r3, [r7, #12]
	freq.i |= (buffer[1] << 8);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	3201      	adds	r2, #1
 8002b58:	7812      	ldrb	r2, [r2, #0]
 8002b5a:	0212      	lsls	r2, r2, #8
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	60fb      	str	r3, [r7, #12]
	freq.i |= (buffer[2] << 16);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	3202      	adds	r2, #2
 8002b66:	7812      	ldrb	r2, [r2, #0]
 8002b68:	0412      	lsls	r2, r2, #16
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	60fb      	str	r3, [r7, #12]
	freq.i |= (buffer[3] << 24);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	3203      	adds	r2, #3
 8002b74:	7812      	ldrb	r2, [r2, #0]
 8002b76:	0612      	lsls	r2, r2, #24
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	60fb      	str	r3, [r7, #12]
	freq.f = freq.f * 1000000.0f;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4907      	ldr	r1, [pc, #28]	; (8002b9c <freqDecode+0x60>)
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7fd fbf1 	bl	8000368 <__aeabi_fmul>
 8002b86:	4603      	mov	r3, r0
 8002b88:	60fb      	str	r3, [r7, #12]

	return (int) freq.f;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7fd fd3b 	bl	8000608 <__aeabi_f2iz>
 8002b92:	4603      	mov	r3, r0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	49742400 	.word	0x49742400

08002ba0 <freqEncode>:

void freqEncode(uint8_t *buffer, uint32_t freqIn) {
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
	union floatConverter freqOut;
	freqOut.f = freqIn / 1000000.0f;
 8002baa:	6838      	ldr	r0, [r7, #0]
 8002bac:	f7fd fb84 	bl	80002b8 <__aeabi_ui2f>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	4906      	ldr	r1, [pc, #24]	; (8002bcc <freqEncode+0x2c>)
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7fd fc8b 	bl	80004d0 <__aeabi_fdiv>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	60fb      	str	r3, [r7, #12]
 8002bbe:	68fa      	ldr	r2, [r7, #12]
	memcpy(buffer, &freqOut.i, sizeof(freqOut.i));
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	601a      	str	r2, [r3, #0]
}
 8002bc4:	bf00      	nop
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	49742400 	.word	0x49742400

08002bd0 <updateRdss>:

void updateRdss(RDSS_t *rdss, uint8_t *buffer, uint8_t bufferSize) {
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	71fb      	strb	r3, [r7, #7]
	if (buffer == NULL)
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d012      	beq.n	8002c0a <updateRdss+0x3a>
		return;
	if (bufferSize <= 0)
 8002be4:	79fb      	ldrb	r3, [r7, #7]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d011      	beq.n	8002c0e <updateRdss+0x3e>
		return;
	rdss->cmd = buffer[CMD_INDEX]; // Update the command from the received data
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	3303      	adds	r3, #3
 8002bee:	781a      	ldrb	r2, [r3, #0]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	701a      	strb	r2, [r3, #0]
	rdss->idReceived = buffer[MODULE_ID_INDEX]; // Update the received ID
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	789a      	ldrb	r2, [r3, #2]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	73da      	strb	r2, [r3, #15]
	rdss->buffSize = bufferSize;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	79fa      	ldrb	r2, [r7, #7]
 8002c00:	721a      	strb	r2, [r3, #8]
	rdss->buff = buffer;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	68ba      	ldr	r2, [r7, #8]
 8002c06:	605a      	str	r2, [r3, #4]
 8002c08:	e002      	b.n	8002c10 <updateRdss+0x40>
		return;
 8002c0a:	bf00      	nop
 8002c0c:	e000      	b.n	8002c10 <updateRdss+0x40>
		return;
 8002c0e:	bf00      	nop
}
 8002c10:	3714      	adds	r7, #20
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr

08002c18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002c1e:	4b15      	ldr	r3, [pc, #84]	; (8002c74 <HAL_MspInit+0x5c>)
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	4a14      	ldr	r2, [pc, #80]	; (8002c74 <HAL_MspInit+0x5c>)
 8002c24:	f043 0301 	orr.w	r3, r3, #1
 8002c28:	6193      	str	r3, [r2, #24]
 8002c2a:	4b12      	ldr	r3, [pc, #72]	; (8002c74 <HAL_MspInit+0x5c>)
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	60bb      	str	r3, [r7, #8]
 8002c34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c36:	4b0f      	ldr	r3, [pc, #60]	; (8002c74 <HAL_MspInit+0x5c>)
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	4a0e      	ldr	r2, [pc, #56]	; (8002c74 <HAL_MspInit+0x5c>)
 8002c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c40:	61d3      	str	r3, [r2, #28]
 8002c42:	4b0c      	ldr	r3, [pc, #48]	; (8002c74 <HAL_MspInit+0x5c>)
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c4a:	607b      	str	r3, [r7, #4]
 8002c4c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002c4e:	4b0a      	ldr	r3, [pc, #40]	; (8002c78 <HAL_MspInit+0x60>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002c5a:	60fb      	str	r3, [r7, #12]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	4a04      	ldr	r2, [pc, #16]	; (8002c78 <HAL_MspInit+0x60>)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c6a:	bf00      	nop
 8002c6c:	3714      	adds	r7, #20
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc80      	pop	{r7}
 8002c72:	4770      	bx	lr
 8002c74:	40021000 	.word	0x40021000
 8002c78:	40010000 	.word	0x40010000

08002c7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b088      	sub	sp, #32
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c84:	f107 0310 	add.w	r3, r7, #16
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]
 8002c8c:	605a      	str	r2, [r3, #4]
 8002c8e:	609a      	str	r2, [r3, #8]
 8002c90:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a15      	ldr	r2, [pc, #84]	; (8002cec <HAL_I2C_MspInit+0x70>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d123      	bne.n	8002ce4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c9c:	4b14      	ldr	r3, [pc, #80]	; (8002cf0 <HAL_I2C_MspInit+0x74>)
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	4a13      	ldr	r2, [pc, #76]	; (8002cf0 <HAL_I2C_MspInit+0x74>)
 8002ca2:	f043 0308 	orr.w	r3, r3, #8
 8002ca6:	6193      	str	r3, [r2, #24]
 8002ca8:	4b11      	ldr	r3, [pc, #68]	; (8002cf0 <HAL_I2C_MspInit+0x74>)
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	f003 0308 	and.w	r3, r3, #8
 8002cb0:	60fb      	str	r3, [r7, #12]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002cb4:	23c0      	movs	r3, #192	; 0xc0
 8002cb6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cb8:	2312      	movs	r3, #18
 8002cba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cc0:	f107 0310 	add.w	r3, r7, #16
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	480b      	ldr	r0, [pc, #44]	; (8002cf4 <HAL_I2C_MspInit+0x78>)
 8002cc8:	f000 fc2e 	bl	8003528 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ccc:	4b08      	ldr	r3, [pc, #32]	; (8002cf0 <HAL_I2C_MspInit+0x74>)
 8002cce:	69db      	ldr	r3, [r3, #28]
 8002cd0:	4a07      	ldr	r2, [pc, #28]	; (8002cf0 <HAL_I2C_MspInit+0x74>)
 8002cd2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002cd6:	61d3      	str	r3, [r2, #28]
 8002cd8:	4b05      	ldr	r3, [pc, #20]	; (8002cf0 <HAL_I2C_MspInit+0x74>)
 8002cda:	69db      	ldr	r3, [r3, #28]
 8002cdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ce0:	60bb      	str	r3, [r7, #8]
 8002ce2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002ce4:	bf00      	nop
 8002ce6:	3720      	adds	r7, #32
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40005400 	.word	0x40005400
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	40010c00 	.word	0x40010c00

08002cf8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b088      	sub	sp, #32
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d00:	f107 0310 	add.w	r3, r7, #16
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	605a      	str	r2, [r3, #4]
 8002d0a:	609a      	str	r2, [r3, #8]
 8002d0c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a1b      	ldr	r2, [pc, #108]	; (8002d80 <HAL_SPI_MspInit+0x88>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d12f      	bne.n	8002d78 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d18:	4b1a      	ldr	r3, [pc, #104]	; (8002d84 <HAL_SPI_MspInit+0x8c>)
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	4a19      	ldr	r2, [pc, #100]	; (8002d84 <HAL_SPI_MspInit+0x8c>)
 8002d1e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d22:	6193      	str	r3, [r2, #24]
 8002d24:	4b17      	ldr	r3, [pc, #92]	; (8002d84 <HAL_SPI_MspInit+0x8c>)
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d2c:	60fb      	str	r3, [r7, #12]
 8002d2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d30:	4b14      	ldr	r3, [pc, #80]	; (8002d84 <HAL_SPI_MspInit+0x8c>)
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	4a13      	ldr	r2, [pc, #76]	; (8002d84 <HAL_SPI_MspInit+0x8c>)
 8002d36:	f043 0304 	orr.w	r3, r3, #4
 8002d3a:	6193      	str	r3, [r2, #24]
 8002d3c:	4b11      	ldr	r3, [pc, #68]	; (8002d84 <HAL_SPI_MspInit+0x8c>)
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	f003 0304 	and.w	r3, r3, #4
 8002d44:	60bb      	str	r3, [r7, #8]
 8002d46:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002d48:	23a0      	movs	r3, #160	; 0xa0
 8002d4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d50:	2303      	movs	r3, #3
 8002d52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d54:	f107 0310 	add.w	r3, r7, #16
 8002d58:	4619      	mov	r1, r3
 8002d5a:	480b      	ldr	r0, [pc, #44]	; (8002d88 <HAL_SPI_MspInit+0x90>)
 8002d5c:	f000 fbe4 	bl	8003528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d60:	2340      	movs	r3, #64	; 0x40
 8002d62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d64:	2300      	movs	r3, #0
 8002d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d6c:	f107 0310 	add.w	r3, r7, #16
 8002d70:	4619      	mov	r1, r3
 8002d72:	4805      	ldr	r0, [pc, #20]	; (8002d88 <HAL_SPI_MspInit+0x90>)
 8002d74:	f000 fbd8 	bl	8003528 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002d78:	bf00      	nop
 8002d7a:	3720      	adds	r7, #32
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40013000 	.word	0x40013000
 8002d84:	40021000 	.word	0x40021000
 8002d88:	40010800 	.word	0x40010800

08002d8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b08c      	sub	sp, #48	; 0x30
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d94:	f107 0320 	add.w	r3, r7, #32
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	605a      	str	r2, [r3, #4]
 8002d9e:	609a      	str	r2, [r3, #8]
 8002da0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a57      	ldr	r2, [pc, #348]	; (8002f04 <HAL_UART_MspInit+0x178>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d13a      	bne.n	8002e22 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002dac:	4b56      	ldr	r3, [pc, #344]	; (8002f08 <HAL_UART_MspInit+0x17c>)
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	4a55      	ldr	r2, [pc, #340]	; (8002f08 <HAL_UART_MspInit+0x17c>)
 8002db2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002db6:	6193      	str	r3, [r2, #24]
 8002db8:	4b53      	ldr	r3, [pc, #332]	; (8002f08 <HAL_UART_MspInit+0x17c>)
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dc0:	61fb      	str	r3, [r7, #28]
 8002dc2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dc4:	4b50      	ldr	r3, [pc, #320]	; (8002f08 <HAL_UART_MspInit+0x17c>)
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	4a4f      	ldr	r2, [pc, #316]	; (8002f08 <HAL_UART_MspInit+0x17c>)
 8002dca:	f043 0304 	orr.w	r3, r3, #4
 8002dce:	6193      	str	r3, [r2, #24]
 8002dd0:	4b4d      	ldr	r3, [pc, #308]	; (8002f08 <HAL_UART_MspInit+0x17c>)
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	61bb      	str	r3, [r7, #24]
 8002dda:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USB_TX_Pin;
 8002ddc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002de0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de2:	2302      	movs	r3, #2
 8002de4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002de6:	2303      	movs	r3, #3
 8002de8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(USB_TX_GPIO_Port, &GPIO_InitStruct);
 8002dea:	f107 0320 	add.w	r3, r7, #32
 8002dee:	4619      	mov	r1, r3
 8002df0:	4846      	ldr	r0, [pc, #280]	; (8002f0c <HAL_UART_MspInit+0x180>)
 8002df2:	f000 fb99 	bl	8003528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_RX_Pin;
 8002df6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e00:	2300      	movs	r3, #0
 8002e02:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(USB_RX_GPIO_Port, &GPIO_InitStruct);
 8002e04:	f107 0320 	add.w	r3, r7, #32
 8002e08:	4619      	mov	r1, r3
 8002e0a:	4840      	ldr	r0, [pc, #256]	; (8002f0c <HAL_UART_MspInit+0x180>)
 8002e0c:	f000 fb8c 	bl	8003528 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002e10:	2200      	movs	r2, #0
 8002e12:	2100      	movs	r1, #0
 8002e14:	2025      	movs	r0, #37	; 0x25
 8002e16:	f000 fa9e 	bl	8003356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002e1a:	2025      	movs	r0, #37	; 0x25
 8002e1c:	f000 fab7 	bl	800338e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002e20:	e06c      	b.n	8002efc <HAL_UART_MspInit+0x170>
  else if(huart->Instance==USART2)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a3a      	ldr	r2, [pc, #232]	; (8002f10 <HAL_UART_MspInit+0x184>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d130      	bne.n	8002e8e <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e2c:	4b36      	ldr	r3, [pc, #216]	; (8002f08 <HAL_UART_MspInit+0x17c>)
 8002e2e:	69db      	ldr	r3, [r3, #28]
 8002e30:	4a35      	ldr	r2, [pc, #212]	; (8002f08 <HAL_UART_MspInit+0x17c>)
 8002e32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e36:	61d3      	str	r3, [r2, #28]
 8002e38:	4b33      	ldr	r3, [pc, #204]	; (8002f08 <HAL_UART_MspInit+0x17c>)
 8002e3a:	69db      	ldr	r3, [r3, #28]
 8002e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e40:	617b      	str	r3, [r7, #20]
 8002e42:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e44:	4b30      	ldr	r3, [pc, #192]	; (8002f08 <HAL_UART_MspInit+0x17c>)
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	4a2f      	ldr	r2, [pc, #188]	; (8002f08 <HAL_UART_MspInit+0x17c>)
 8002e4a:	f043 0304 	orr.w	r3, r3, #4
 8002e4e:	6193      	str	r3, [r2, #24]
 8002e50:	4b2d      	ldr	r3, [pc, #180]	; (8002f08 <HAL_UART_MspInit+0x17c>)
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	f003 0304 	and.w	r3, r3, #4
 8002e58:	613b      	str	r3, [r7, #16]
 8002e5a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002e5c:	2304      	movs	r3, #4
 8002e5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e60:	2302      	movs	r3, #2
 8002e62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e64:	2303      	movs	r3, #3
 8002e66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e68:	f107 0320 	add.w	r3, r7, #32
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	4827      	ldr	r0, [pc, #156]	; (8002f0c <HAL_UART_MspInit+0x180>)
 8002e70:	f000 fb5a 	bl	8003528 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002e74:	2308      	movs	r3, #8
 8002e76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e80:	f107 0320 	add.w	r3, r7, #32
 8002e84:	4619      	mov	r1, r3
 8002e86:	4821      	ldr	r0, [pc, #132]	; (8002f0c <HAL_UART_MspInit+0x180>)
 8002e88:	f000 fb4e 	bl	8003528 <HAL_GPIO_Init>
}
 8002e8c:	e036      	b.n	8002efc <HAL_UART_MspInit+0x170>
  else if(huart->Instance==USART3)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a20      	ldr	r2, [pc, #128]	; (8002f14 <HAL_UART_MspInit+0x188>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d131      	bne.n	8002efc <HAL_UART_MspInit+0x170>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e98:	4b1b      	ldr	r3, [pc, #108]	; (8002f08 <HAL_UART_MspInit+0x17c>)
 8002e9a:	69db      	ldr	r3, [r3, #28]
 8002e9c:	4a1a      	ldr	r2, [pc, #104]	; (8002f08 <HAL_UART_MspInit+0x17c>)
 8002e9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ea2:	61d3      	str	r3, [r2, #28]
 8002ea4:	4b18      	ldr	r3, [pc, #96]	; (8002f08 <HAL_UART_MspInit+0x17c>)
 8002ea6:	69db      	ldr	r3, [r3, #28]
 8002ea8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eb0:	4b15      	ldr	r3, [pc, #84]	; (8002f08 <HAL_UART_MspInit+0x17c>)
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	4a14      	ldr	r2, [pc, #80]	; (8002f08 <HAL_UART_MspInit+0x17c>)
 8002eb6:	f043 0308 	orr.w	r3, r3, #8
 8002eba:	6193      	str	r3, [r2, #24]
 8002ebc:	4b12      	ldr	r3, [pc, #72]	; (8002f08 <HAL_UART_MspInit+0x17c>)
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	f003 0308 	and.w	r3, r3, #8
 8002ec4:	60bb      	str	r3, [r7, #8]
 8002ec6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RS485_TX_Pin;
 8002ec8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ecc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ece:	2302      	movs	r3, #2
 8002ed0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RS485_TX_GPIO_Port, &GPIO_InitStruct);
 8002ed6:	f107 0320 	add.w	r3, r7, #32
 8002eda:	4619      	mov	r1, r3
 8002edc:	480e      	ldr	r0, [pc, #56]	; (8002f18 <HAL_UART_MspInit+0x18c>)
 8002ede:	f000 fb23 	bl	8003528 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RS485_RX_Pin;
 8002ee2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ee6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eec:	2300      	movs	r3, #0
 8002eee:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(RS485_RX_GPIO_Port, &GPIO_InitStruct);
 8002ef0:	f107 0320 	add.w	r3, r7, #32
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	4808      	ldr	r0, [pc, #32]	; (8002f18 <HAL_UART_MspInit+0x18c>)
 8002ef8:	f000 fb16 	bl	8003528 <HAL_GPIO_Init>
}
 8002efc:	bf00      	nop
 8002efe:	3730      	adds	r7, #48	; 0x30
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	40013800 	.word	0x40013800
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	40010800 	.word	0x40010800
 8002f10:	40004400 	.word	0x40004400
 8002f14:	40004800 	.word	0x40004800
 8002f18:	40010c00 	.word	0x40010c00

08002f1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f20:	e7fe      	b.n	8002f20 <NMI_Handler+0x4>

08002f22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f22:	b480      	push	{r7}
 8002f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f26:	e7fe      	b.n	8002f26 <HardFault_Handler+0x4>

08002f28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f2c:	e7fe      	b.n	8002f2c <MemManage_Handler+0x4>

08002f2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f32:	e7fe      	b.n	8002f32 <BusFault_Handler+0x4>

08002f34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f38:	e7fe      	b.n	8002f38 <UsageFault_Handler+0x4>

08002f3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f3e:	bf00      	nop
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bc80      	pop	{r7}
 8002f44:	4770      	bx	lr

08002f46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f46:	b480      	push	{r7}
 8002f48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f4a:	bf00      	nop
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bc80      	pop	{r7}
 8002f50:	4770      	bx	lr

08002f52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f52:	b480      	push	{r7}
 8002f54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f56:	bf00      	nop
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bc80      	pop	{r7}
 8002f5c:	4770      	bx	lr

08002f5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f62:	f000 f8e1 	bl	8003128 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f66:	bf00      	nop
 8002f68:	bd80      	pop	{r7, pc}
	...

08002f6c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002f70:	4802      	ldr	r0, [pc, #8]	; (8002f7c <USART1_IRQHandler+0x10>)
 8002f72:	f003 fc65 	bl	8006840 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002f76:	bf00      	nop
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	2000012c 	.word	0x2000012c

08002f80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f88:	4a14      	ldr	r2, [pc, #80]	; (8002fdc <_sbrk+0x5c>)
 8002f8a:	4b15      	ldr	r3, [pc, #84]	; (8002fe0 <_sbrk+0x60>)
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f94:	4b13      	ldr	r3, [pc, #76]	; (8002fe4 <_sbrk+0x64>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d102      	bne.n	8002fa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f9c:	4b11      	ldr	r3, [pc, #68]	; (8002fe4 <_sbrk+0x64>)
 8002f9e:	4a12      	ldr	r2, [pc, #72]	; (8002fe8 <_sbrk+0x68>)
 8002fa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fa2:	4b10      	ldr	r3, [pc, #64]	; (8002fe4 <_sbrk+0x64>)
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4413      	add	r3, r2
 8002faa:	693a      	ldr	r2, [r7, #16]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d207      	bcs.n	8002fc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fb0:	f004 fa2c 	bl	800740c <__errno>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	220c      	movs	r2, #12
 8002fb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fba:	f04f 33ff 	mov.w	r3, #4294967295
 8002fbe:	e009      	b.n	8002fd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fc0:	4b08      	ldr	r3, [pc, #32]	; (8002fe4 <_sbrk+0x64>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fc6:	4b07      	ldr	r3, [pc, #28]	; (8002fe4 <_sbrk+0x64>)
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4413      	add	r3, r2
 8002fce:	4a05      	ldr	r2, [pc, #20]	; (8002fe4 <_sbrk+0x64>)
 8002fd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3718      	adds	r7, #24
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	20005000 	.word	0x20005000
 8002fe0:	00000400 	.word	0x00000400
 8002fe4:	20000370 	.word	0x20000370
 8002fe8:	200004c0 	.word	0x200004c0

08002fec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ff0:	bf00      	nop
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bc80      	pop	{r7}
 8002ff6:	4770      	bx	lr

08002ff8 <writeTxReg>:
	SET_BIT(USART1->CR1, USART_CR1_RXNEIE);
	NVIC_EnableIRQ(USART1_IRQn);
	SET_BIT(USART1->CR1, USART_CR1_UE);
}

void writeTxReg(char ch) {
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	4603      	mov	r3, r0
 8003000:	71fb      	strb	r3, [r7, #7]
	SET_BIT(GPIOB->ODR, GPIO_ODR_ODR8);
 8003002:	4b11      	ldr	r3, [pc, #68]	; (8003048 <writeTxReg+0x50>)
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	4a10      	ldr	r2, [pc, #64]	; (8003048 <writeTxReg+0x50>)
 8003008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800300c:	60d3      	str	r3, [r2, #12]

	while (!READ_BIT(USART1->SR, USART_SR_TXE))
 800300e:	bf00      	nop
 8003010:	4b0e      	ldr	r3, [pc, #56]	; (800304c <writeTxReg+0x54>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003018:	2b00      	cmp	r3, #0
 800301a:	d0f9      	beq.n	8003010 <writeTxReg+0x18>
		;
	USART1->DR = (uint8_t) (ch & 0xFFU);
 800301c:	4a0b      	ldr	r2, [pc, #44]	; (800304c <writeTxReg+0x54>)
 800301e:	79fb      	ldrb	r3, [r7, #7]
 8003020:	6053      	str	r3, [r2, #4]

	while (!READ_BIT(USART1->SR, USART_SR_TC))
 8003022:	bf00      	nop
 8003024:	4b09      	ldr	r3, [pc, #36]	; (800304c <writeTxReg+0x54>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0f9      	beq.n	8003024 <writeTxReg+0x2c>
		;

	CLEAR_BIT(GPIOB->ODR, GPIO_ODR_ODR8);
 8003030:	4b05      	ldr	r3, [pc, #20]	; (8003048 <writeTxReg+0x50>)
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	4a04      	ldr	r2, [pc, #16]	; (8003048 <writeTxReg+0x50>)
 8003036:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800303a:	60d3      	str	r3, [r2, #12]
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	bc80      	pop	{r7}
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	40010c00 	.word	0x40010c00
 800304c:	40013800 	.word	0x40013800

08003050 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:


	/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 8003050:	480c      	ldr	r0, [pc, #48]	; (8003084 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003052:	490d      	ldr	r1, [pc, #52]	; (8003088 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003054:	4a0d      	ldr	r2, [pc, #52]	; (800308c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003056:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003058:	e002      	b.n	8003060 <LoopCopyDataInit>

0800305a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800305a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800305c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800305e:	3304      	adds	r3, #4

08003060 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003060:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003062:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003064:	d3f9      	bcc.n	800305a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003066:	4a0a      	ldr	r2, [pc, #40]	; (8003090 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003068:	4c0a      	ldr	r4, [pc, #40]	; (8003094 <LoopFillZerobss+0x22>)
  movs r3, #0
 800306a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800306c:	e001      	b.n	8003072 <LoopFillZerobss>

0800306e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800306e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003070:	3204      	adds	r2, #4

08003072 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003072:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003074:	d3fb      	bcc.n	800306e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003076:	f7ff ffb9 	bl	8002fec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800307a:	f004 f9cd 	bl	8007418 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800307e:	f7fe fa6d 	bl	800155c <main>
  bx lr
 8003082:	4770      	bx	lr
	/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 8003084:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003088:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800308c:	08007548 	.word	0x08007548
  ldr r2, =_sbss
 8003090:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8003094:	200004c0 	.word	0x200004c0

08003098 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003098:	e7fe      	b.n	8003098 <ADC1_2_IRQHandler>
	...

0800309c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030a0:	4b08      	ldr	r3, [pc, #32]	; (80030c4 <HAL_Init+0x28>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a07      	ldr	r2, [pc, #28]	; (80030c4 <HAL_Init+0x28>)
 80030a6:	f043 0310 	orr.w	r3, r3, #16
 80030aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030ac:	2003      	movs	r0, #3
 80030ae:	f000 f947 	bl	8003340 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030b2:	200f      	movs	r0, #15
 80030b4:	f000 f808 	bl	80030c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030b8:	f7ff fdae 	bl	8002c18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	40022000 	.word	0x40022000

080030c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030d0:	4b12      	ldr	r3, [pc, #72]	; (800311c <HAL_InitTick+0x54>)
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	4b12      	ldr	r3, [pc, #72]	; (8003120 <HAL_InitTick+0x58>)
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	4619      	mov	r1, r3
 80030da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030de:	fbb3 f3f1 	udiv	r3, r3, r1
 80030e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e6:	4618      	mov	r0, r3
 80030e8:	f000 f95f 	bl	80033aa <HAL_SYSTICK_Config>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e00e      	b.n	8003114 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2b0f      	cmp	r3, #15
 80030fa:	d80a      	bhi.n	8003112 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030fc:	2200      	movs	r2, #0
 80030fe:	6879      	ldr	r1, [r7, #4]
 8003100:	f04f 30ff 	mov.w	r0, #4294967295
 8003104:	f000 f927 	bl	8003356 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003108:	4a06      	ldr	r2, [pc, #24]	; (8003124 <HAL_InitTick+0x5c>)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800310e:	2300      	movs	r3, #0
 8003110:	e000      	b.n	8003114 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
}
 8003114:	4618      	mov	r0, r3
 8003116:	3708      	adds	r7, #8
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	20000000 	.word	0x20000000
 8003120:	20000008 	.word	0x20000008
 8003124:	20000004 	.word	0x20000004

08003128 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800312c:	4b05      	ldr	r3, [pc, #20]	; (8003144 <HAL_IncTick+0x1c>)
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	461a      	mov	r2, r3
 8003132:	4b05      	ldr	r3, [pc, #20]	; (8003148 <HAL_IncTick+0x20>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4413      	add	r3, r2
 8003138:	4a03      	ldr	r2, [pc, #12]	; (8003148 <HAL_IncTick+0x20>)
 800313a:	6013      	str	r3, [r2, #0]
}
 800313c:	bf00      	nop
 800313e:	46bd      	mov	sp, r7
 8003140:	bc80      	pop	{r7}
 8003142:	4770      	bx	lr
 8003144:	20000008 	.word	0x20000008
 8003148:	20000374 	.word	0x20000374

0800314c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
  return uwTick;
 8003150:	4b02      	ldr	r3, [pc, #8]	; (800315c <HAL_GetTick+0x10>)
 8003152:	681b      	ldr	r3, [r3, #0]
}
 8003154:	4618      	mov	r0, r3
 8003156:	46bd      	mov	sp, r7
 8003158:	bc80      	pop	{r7}
 800315a:	4770      	bx	lr
 800315c:	20000374 	.word	0x20000374

08003160 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003168:	f7ff fff0 	bl	800314c <HAL_GetTick>
 800316c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003178:	d005      	beq.n	8003186 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800317a:	4b0a      	ldr	r3, [pc, #40]	; (80031a4 <HAL_Delay+0x44>)
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	461a      	mov	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	4413      	add	r3, r2
 8003184:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003186:	bf00      	nop
 8003188:	f7ff ffe0 	bl	800314c <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	429a      	cmp	r2, r3
 8003196:	d8f7      	bhi.n	8003188 <HAL_Delay+0x28>
  {
  }
}
 8003198:	bf00      	nop
 800319a:	bf00      	nop
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	20000008 	.word	0x20000008

080031a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f003 0307 	and.w	r3, r3, #7
 80031b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031b8:	4b0c      	ldr	r3, [pc, #48]	; (80031ec <__NVIC_SetPriorityGrouping+0x44>)
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031be:	68ba      	ldr	r2, [r7, #8]
 80031c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031c4:	4013      	ands	r3, r2
 80031c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031da:	4a04      	ldr	r2, [pc, #16]	; (80031ec <__NVIC_SetPriorityGrouping+0x44>)
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	60d3      	str	r3, [r2, #12]
}
 80031e0:	bf00      	nop
 80031e2:	3714      	adds	r7, #20
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bc80      	pop	{r7}
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	e000ed00 	.word	0xe000ed00

080031f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031f4:	4b04      	ldr	r3, [pc, #16]	; (8003208 <__NVIC_GetPriorityGrouping+0x18>)
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	0a1b      	lsrs	r3, r3, #8
 80031fa:	f003 0307 	and.w	r3, r3, #7
}
 80031fe:	4618      	mov	r0, r3
 8003200:	46bd      	mov	sp, r7
 8003202:	bc80      	pop	{r7}
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	e000ed00 	.word	0xe000ed00

0800320c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	4603      	mov	r3, r0
 8003214:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321a:	2b00      	cmp	r3, #0
 800321c:	db0b      	blt.n	8003236 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800321e:	79fb      	ldrb	r3, [r7, #7]
 8003220:	f003 021f 	and.w	r2, r3, #31
 8003224:	4906      	ldr	r1, [pc, #24]	; (8003240 <__NVIC_EnableIRQ+0x34>)
 8003226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800322a:	095b      	lsrs	r3, r3, #5
 800322c:	2001      	movs	r0, #1
 800322e:	fa00 f202 	lsl.w	r2, r0, r2
 8003232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003236:	bf00      	nop
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	bc80      	pop	{r7}
 800323e:	4770      	bx	lr
 8003240:	e000e100 	.word	0xe000e100

08003244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	4603      	mov	r3, r0
 800324c:	6039      	str	r1, [r7, #0]
 800324e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003254:	2b00      	cmp	r3, #0
 8003256:	db0a      	blt.n	800326e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	b2da      	uxtb	r2, r3
 800325c:	490c      	ldr	r1, [pc, #48]	; (8003290 <__NVIC_SetPriority+0x4c>)
 800325e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003262:	0112      	lsls	r2, r2, #4
 8003264:	b2d2      	uxtb	r2, r2
 8003266:	440b      	add	r3, r1
 8003268:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800326c:	e00a      	b.n	8003284 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	b2da      	uxtb	r2, r3
 8003272:	4908      	ldr	r1, [pc, #32]	; (8003294 <__NVIC_SetPriority+0x50>)
 8003274:	79fb      	ldrb	r3, [r7, #7]
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	3b04      	subs	r3, #4
 800327c:	0112      	lsls	r2, r2, #4
 800327e:	b2d2      	uxtb	r2, r2
 8003280:	440b      	add	r3, r1
 8003282:	761a      	strb	r2, [r3, #24]
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	bc80      	pop	{r7}
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	e000e100 	.word	0xe000e100
 8003294:	e000ed00 	.word	0xe000ed00

08003298 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003298:	b480      	push	{r7}
 800329a:	b089      	sub	sp, #36	; 0x24
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f003 0307 	and.w	r3, r3, #7
 80032aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	f1c3 0307 	rsb	r3, r3, #7
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	bf28      	it	cs
 80032b6:	2304      	movcs	r3, #4
 80032b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	3304      	adds	r3, #4
 80032be:	2b06      	cmp	r3, #6
 80032c0:	d902      	bls.n	80032c8 <NVIC_EncodePriority+0x30>
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	3b03      	subs	r3, #3
 80032c6:	e000      	b.n	80032ca <NVIC_EncodePriority+0x32>
 80032c8:	2300      	movs	r3, #0
 80032ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032cc:	f04f 32ff 	mov.w	r2, #4294967295
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	fa02 f303 	lsl.w	r3, r2, r3
 80032d6:	43da      	mvns	r2, r3
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	401a      	ands	r2, r3
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032e0:	f04f 31ff 	mov.w	r1, #4294967295
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	fa01 f303 	lsl.w	r3, r1, r3
 80032ea:	43d9      	mvns	r1, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032f0:	4313      	orrs	r3, r2
         );
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3724      	adds	r7, #36	; 0x24
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bc80      	pop	{r7}
 80032fa:	4770      	bx	lr

080032fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3b01      	subs	r3, #1
 8003308:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800330c:	d301      	bcc.n	8003312 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800330e:	2301      	movs	r3, #1
 8003310:	e00f      	b.n	8003332 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003312:	4a0a      	ldr	r2, [pc, #40]	; (800333c <SysTick_Config+0x40>)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	3b01      	subs	r3, #1
 8003318:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800331a:	210f      	movs	r1, #15
 800331c:	f04f 30ff 	mov.w	r0, #4294967295
 8003320:	f7ff ff90 	bl	8003244 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003324:	4b05      	ldr	r3, [pc, #20]	; (800333c <SysTick_Config+0x40>)
 8003326:	2200      	movs	r2, #0
 8003328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800332a:	4b04      	ldr	r3, [pc, #16]	; (800333c <SysTick_Config+0x40>)
 800332c:	2207      	movs	r2, #7
 800332e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	e000e010 	.word	0xe000e010

08003340 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f7ff ff2d 	bl	80031a8 <__NVIC_SetPriorityGrouping>
}
 800334e:	bf00      	nop
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003356:	b580      	push	{r7, lr}
 8003358:	b086      	sub	sp, #24
 800335a:	af00      	add	r7, sp, #0
 800335c:	4603      	mov	r3, r0
 800335e:	60b9      	str	r1, [r7, #8]
 8003360:	607a      	str	r2, [r7, #4]
 8003362:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003364:	2300      	movs	r3, #0
 8003366:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003368:	f7ff ff42 	bl	80031f0 <__NVIC_GetPriorityGrouping>
 800336c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	68b9      	ldr	r1, [r7, #8]
 8003372:	6978      	ldr	r0, [r7, #20]
 8003374:	f7ff ff90 	bl	8003298 <NVIC_EncodePriority>
 8003378:	4602      	mov	r2, r0
 800337a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800337e:	4611      	mov	r1, r2
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff ff5f 	bl	8003244 <__NVIC_SetPriority>
}
 8003386:	bf00      	nop
 8003388:	3718      	adds	r7, #24
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800338e:	b580      	push	{r7, lr}
 8003390:	b082      	sub	sp, #8
 8003392:	af00      	add	r7, sp, #0
 8003394:	4603      	mov	r3, r0
 8003396:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339c:	4618      	mov	r0, r3
 800339e:	f7ff ff35 	bl	800320c <__NVIC_EnableIRQ>
}
 80033a2:	bf00      	nop
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b082      	sub	sp, #8
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f7ff ffa2 	bl	80032fc <SysTick_Config>
 80033b8:	4603      	mov	r3, r0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033c2:	b480      	push	{r7}
 80033c4:	b085      	sub	sp, #20
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033ca:	2300      	movs	r3, #0
 80033cc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d008      	beq.n	80033ec <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2204      	movs	r2, #4
 80033de:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e020      	b.n	800342e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 020e 	bic.w	r2, r2, #14
 80033fa:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 0201 	bic.w	r2, r2, #1
 800340a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003414:	2101      	movs	r1, #1
 8003416:	fa01 f202 	lsl.w	r2, r1, r2
 800341a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800342c:	7bfb      	ldrb	r3, [r7, #15]
}
 800342e:	4618      	mov	r0, r3
 8003430:	3714      	adds	r7, #20
 8003432:	46bd      	mov	sp, r7
 8003434:	bc80      	pop	{r7}
 8003436:	4770      	bx	lr

08003438 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003440:	2300      	movs	r3, #0
 8003442:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d005      	beq.n	800345c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2204      	movs	r2, #4
 8003454:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	73fb      	strb	r3, [r7, #15]
 800345a:	e051      	b.n	8003500 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 020e 	bic.w	r2, r2, #14
 800346a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 0201 	bic.w	r2, r2, #1
 800347a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a22      	ldr	r2, [pc, #136]	; (800350c <HAL_DMA_Abort_IT+0xd4>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d029      	beq.n	80034da <HAL_DMA_Abort_IT+0xa2>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a21      	ldr	r2, [pc, #132]	; (8003510 <HAL_DMA_Abort_IT+0xd8>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d022      	beq.n	80034d6 <HAL_DMA_Abort_IT+0x9e>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a1f      	ldr	r2, [pc, #124]	; (8003514 <HAL_DMA_Abort_IT+0xdc>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d01a      	beq.n	80034d0 <HAL_DMA_Abort_IT+0x98>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a1e      	ldr	r2, [pc, #120]	; (8003518 <HAL_DMA_Abort_IT+0xe0>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d012      	beq.n	80034ca <HAL_DMA_Abort_IT+0x92>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a1c      	ldr	r2, [pc, #112]	; (800351c <HAL_DMA_Abort_IT+0xe4>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d00a      	beq.n	80034c4 <HAL_DMA_Abort_IT+0x8c>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a1b      	ldr	r2, [pc, #108]	; (8003520 <HAL_DMA_Abort_IT+0xe8>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d102      	bne.n	80034be <HAL_DMA_Abort_IT+0x86>
 80034b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80034bc:	e00e      	b.n	80034dc <HAL_DMA_Abort_IT+0xa4>
 80034be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034c2:	e00b      	b.n	80034dc <HAL_DMA_Abort_IT+0xa4>
 80034c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034c8:	e008      	b.n	80034dc <HAL_DMA_Abort_IT+0xa4>
 80034ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034ce:	e005      	b.n	80034dc <HAL_DMA_Abort_IT+0xa4>
 80034d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034d4:	e002      	b.n	80034dc <HAL_DMA_Abort_IT+0xa4>
 80034d6:	2310      	movs	r3, #16
 80034d8:	e000      	b.n	80034dc <HAL_DMA_Abort_IT+0xa4>
 80034da:	2301      	movs	r3, #1
 80034dc:	4a11      	ldr	r2, [pc, #68]	; (8003524 <HAL_DMA_Abort_IT+0xec>)
 80034de:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d003      	beq.n	8003500 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	4798      	blx	r3
    } 
  }
  return status;
 8003500:	7bfb      	ldrb	r3, [r7, #15]
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	40020008 	.word	0x40020008
 8003510:	4002001c 	.word	0x4002001c
 8003514:	40020030 	.word	0x40020030
 8003518:	40020044 	.word	0x40020044
 800351c:	40020058 	.word	0x40020058
 8003520:	4002006c 	.word	0x4002006c
 8003524:	40020000 	.word	0x40020000

08003528 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003528:	b480      	push	{r7}
 800352a:	b08b      	sub	sp, #44	; 0x2c
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003532:	2300      	movs	r3, #0
 8003534:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003536:	2300      	movs	r3, #0
 8003538:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800353a:	e169      	b.n	8003810 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800353c:	2201      	movs	r2, #1
 800353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	69fa      	ldr	r2, [r7, #28]
 800354c:	4013      	ands	r3, r2
 800354e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	429a      	cmp	r2, r3
 8003556:	f040 8158 	bne.w	800380a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	4a9a      	ldr	r2, [pc, #616]	; (80037c8 <HAL_GPIO_Init+0x2a0>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d05e      	beq.n	8003622 <HAL_GPIO_Init+0xfa>
 8003564:	4a98      	ldr	r2, [pc, #608]	; (80037c8 <HAL_GPIO_Init+0x2a0>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d875      	bhi.n	8003656 <HAL_GPIO_Init+0x12e>
 800356a:	4a98      	ldr	r2, [pc, #608]	; (80037cc <HAL_GPIO_Init+0x2a4>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d058      	beq.n	8003622 <HAL_GPIO_Init+0xfa>
 8003570:	4a96      	ldr	r2, [pc, #600]	; (80037cc <HAL_GPIO_Init+0x2a4>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d86f      	bhi.n	8003656 <HAL_GPIO_Init+0x12e>
 8003576:	4a96      	ldr	r2, [pc, #600]	; (80037d0 <HAL_GPIO_Init+0x2a8>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d052      	beq.n	8003622 <HAL_GPIO_Init+0xfa>
 800357c:	4a94      	ldr	r2, [pc, #592]	; (80037d0 <HAL_GPIO_Init+0x2a8>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d869      	bhi.n	8003656 <HAL_GPIO_Init+0x12e>
 8003582:	4a94      	ldr	r2, [pc, #592]	; (80037d4 <HAL_GPIO_Init+0x2ac>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d04c      	beq.n	8003622 <HAL_GPIO_Init+0xfa>
 8003588:	4a92      	ldr	r2, [pc, #584]	; (80037d4 <HAL_GPIO_Init+0x2ac>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d863      	bhi.n	8003656 <HAL_GPIO_Init+0x12e>
 800358e:	4a92      	ldr	r2, [pc, #584]	; (80037d8 <HAL_GPIO_Init+0x2b0>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d046      	beq.n	8003622 <HAL_GPIO_Init+0xfa>
 8003594:	4a90      	ldr	r2, [pc, #576]	; (80037d8 <HAL_GPIO_Init+0x2b0>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d85d      	bhi.n	8003656 <HAL_GPIO_Init+0x12e>
 800359a:	2b12      	cmp	r3, #18
 800359c:	d82a      	bhi.n	80035f4 <HAL_GPIO_Init+0xcc>
 800359e:	2b12      	cmp	r3, #18
 80035a0:	d859      	bhi.n	8003656 <HAL_GPIO_Init+0x12e>
 80035a2:	a201      	add	r2, pc, #4	; (adr r2, 80035a8 <HAL_GPIO_Init+0x80>)
 80035a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a8:	08003623 	.word	0x08003623
 80035ac:	080035fd 	.word	0x080035fd
 80035b0:	0800360f 	.word	0x0800360f
 80035b4:	08003651 	.word	0x08003651
 80035b8:	08003657 	.word	0x08003657
 80035bc:	08003657 	.word	0x08003657
 80035c0:	08003657 	.word	0x08003657
 80035c4:	08003657 	.word	0x08003657
 80035c8:	08003657 	.word	0x08003657
 80035cc:	08003657 	.word	0x08003657
 80035d0:	08003657 	.word	0x08003657
 80035d4:	08003657 	.word	0x08003657
 80035d8:	08003657 	.word	0x08003657
 80035dc:	08003657 	.word	0x08003657
 80035e0:	08003657 	.word	0x08003657
 80035e4:	08003657 	.word	0x08003657
 80035e8:	08003657 	.word	0x08003657
 80035ec:	08003605 	.word	0x08003605
 80035f0:	08003619 	.word	0x08003619
 80035f4:	4a79      	ldr	r2, [pc, #484]	; (80037dc <HAL_GPIO_Init+0x2b4>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d013      	beq.n	8003622 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80035fa:	e02c      	b.n	8003656 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	623b      	str	r3, [r7, #32]
          break;
 8003602:	e029      	b.n	8003658 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	3304      	adds	r3, #4
 800360a:	623b      	str	r3, [r7, #32]
          break;
 800360c:	e024      	b.n	8003658 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	3308      	adds	r3, #8
 8003614:	623b      	str	r3, [r7, #32]
          break;
 8003616:	e01f      	b.n	8003658 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	330c      	adds	r3, #12
 800361e:	623b      	str	r3, [r7, #32]
          break;
 8003620:	e01a      	b.n	8003658 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d102      	bne.n	8003630 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800362a:	2304      	movs	r3, #4
 800362c:	623b      	str	r3, [r7, #32]
          break;
 800362e:	e013      	b.n	8003658 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d105      	bne.n	8003644 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003638:	2308      	movs	r3, #8
 800363a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	69fa      	ldr	r2, [r7, #28]
 8003640:	611a      	str	r2, [r3, #16]
          break;
 8003642:	e009      	b.n	8003658 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003644:	2308      	movs	r3, #8
 8003646:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	69fa      	ldr	r2, [r7, #28]
 800364c:	615a      	str	r2, [r3, #20]
          break;
 800364e:	e003      	b.n	8003658 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003650:	2300      	movs	r3, #0
 8003652:	623b      	str	r3, [r7, #32]
          break;
 8003654:	e000      	b.n	8003658 <HAL_GPIO_Init+0x130>
          break;
 8003656:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	2bff      	cmp	r3, #255	; 0xff
 800365c:	d801      	bhi.n	8003662 <HAL_GPIO_Init+0x13a>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	e001      	b.n	8003666 <HAL_GPIO_Init+0x13e>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	3304      	adds	r3, #4
 8003666:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	2bff      	cmp	r3, #255	; 0xff
 800366c:	d802      	bhi.n	8003674 <HAL_GPIO_Init+0x14c>
 800366e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	e002      	b.n	800367a <HAL_GPIO_Init+0x152>
 8003674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003676:	3b08      	subs	r3, #8
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	210f      	movs	r1, #15
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	fa01 f303 	lsl.w	r3, r1, r3
 8003688:	43db      	mvns	r3, r3
 800368a:	401a      	ands	r2, r3
 800368c:	6a39      	ldr	r1, [r7, #32]
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	fa01 f303 	lsl.w	r3, r1, r3
 8003694:	431a      	orrs	r2, r3
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	f000 80b1 	beq.w	800380a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80036a8:	4b4d      	ldr	r3, [pc, #308]	; (80037e0 <HAL_GPIO_Init+0x2b8>)
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	4a4c      	ldr	r2, [pc, #304]	; (80037e0 <HAL_GPIO_Init+0x2b8>)
 80036ae:	f043 0301 	orr.w	r3, r3, #1
 80036b2:	6193      	str	r3, [r2, #24]
 80036b4:	4b4a      	ldr	r3, [pc, #296]	; (80037e0 <HAL_GPIO_Init+0x2b8>)
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	60bb      	str	r3, [r7, #8]
 80036be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80036c0:	4a48      	ldr	r2, [pc, #288]	; (80037e4 <HAL_GPIO_Init+0x2bc>)
 80036c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c4:	089b      	lsrs	r3, r3, #2
 80036c6:	3302      	adds	r3, #2
 80036c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80036ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d0:	f003 0303 	and.w	r3, r3, #3
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	220f      	movs	r2, #15
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	43db      	mvns	r3, r3
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	4013      	ands	r3, r2
 80036e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a40      	ldr	r2, [pc, #256]	; (80037e8 <HAL_GPIO_Init+0x2c0>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d013      	beq.n	8003714 <HAL_GPIO_Init+0x1ec>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a3f      	ldr	r2, [pc, #252]	; (80037ec <HAL_GPIO_Init+0x2c4>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d00d      	beq.n	8003710 <HAL_GPIO_Init+0x1e8>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a3e      	ldr	r2, [pc, #248]	; (80037f0 <HAL_GPIO_Init+0x2c8>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d007      	beq.n	800370c <HAL_GPIO_Init+0x1e4>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a3d      	ldr	r2, [pc, #244]	; (80037f4 <HAL_GPIO_Init+0x2cc>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d101      	bne.n	8003708 <HAL_GPIO_Init+0x1e0>
 8003704:	2303      	movs	r3, #3
 8003706:	e006      	b.n	8003716 <HAL_GPIO_Init+0x1ee>
 8003708:	2304      	movs	r3, #4
 800370a:	e004      	b.n	8003716 <HAL_GPIO_Init+0x1ee>
 800370c:	2302      	movs	r3, #2
 800370e:	e002      	b.n	8003716 <HAL_GPIO_Init+0x1ee>
 8003710:	2301      	movs	r3, #1
 8003712:	e000      	b.n	8003716 <HAL_GPIO_Init+0x1ee>
 8003714:	2300      	movs	r3, #0
 8003716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003718:	f002 0203 	and.w	r2, r2, #3
 800371c:	0092      	lsls	r2, r2, #2
 800371e:	4093      	lsls	r3, r2
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	4313      	orrs	r3, r2
 8003724:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003726:	492f      	ldr	r1, [pc, #188]	; (80037e4 <HAL_GPIO_Init+0x2bc>)
 8003728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372a:	089b      	lsrs	r3, r3, #2
 800372c:	3302      	adds	r3, #2
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d006      	beq.n	800374e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003740:	4b2d      	ldr	r3, [pc, #180]	; (80037f8 <HAL_GPIO_Init+0x2d0>)
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	492c      	ldr	r1, [pc, #176]	; (80037f8 <HAL_GPIO_Init+0x2d0>)
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	4313      	orrs	r3, r2
 800374a:	608b      	str	r3, [r1, #8]
 800374c:	e006      	b.n	800375c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800374e:	4b2a      	ldr	r3, [pc, #168]	; (80037f8 <HAL_GPIO_Init+0x2d0>)
 8003750:	689a      	ldr	r2, [r3, #8]
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	43db      	mvns	r3, r3
 8003756:	4928      	ldr	r1, [pc, #160]	; (80037f8 <HAL_GPIO_Init+0x2d0>)
 8003758:	4013      	ands	r3, r2
 800375a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d006      	beq.n	8003776 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003768:	4b23      	ldr	r3, [pc, #140]	; (80037f8 <HAL_GPIO_Init+0x2d0>)
 800376a:	68da      	ldr	r2, [r3, #12]
 800376c:	4922      	ldr	r1, [pc, #136]	; (80037f8 <HAL_GPIO_Init+0x2d0>)
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	4313      	orrs	r3, r2
 8003772:	60cb      	str	r3, [r1, #12]
 8003774:	e006      	b.n	8003784 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003776:	4b20      	ldr	r3, [pc, #128]	; (80037f8 <HAL_GPIO_Init+0x2d0>)
 8003778:	68da      	ldr	r2, [r3, #12]
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	43db      	mvns	r3, r3
 800377e:	491e      	ldr	r1, [pc, #120]	; (80037f8 <HAL_GPIO_Init+0x2d0>)
 8003780:	4013      	ands	r3, r2
 8003782:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d006      	beq.n	800379e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003790:	4b19      	ldr	r3, [pc, #100]	; (80037f8 <HAL_GPIO_Init+0x2d0>)
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	4918      	ldr	r1, [pc, #96]	; (80037f8 <HAL_GPIO_Init+0x2d0>)
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	4313      	orrs	r3, r2
 800379a:	604b      	str	r3, [r1, #4]
 800379c:	e006      	b.n	80037ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800379e:	4b16      	ldr	r3, [pc, #88]	; (80037f8 <HAL_GPIO_Init+0x2d0>)
 80037a0:	685a      	ldr	r2, [r3, #4]
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	43db      	mvns	r3, r3
 80037a6:	4914      	ldr	r1, [pc, #80]	; (80037f8 <HAL_GPIO_Init+0x2d0>)
 80037a8:	4013      	ands	r3, r2
 80037aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d021      	beq.n	80037fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80037b8:	4b0f      	ldr	r3, [pc, #60]	; (80037f8 <HAL_GPIO_Init+0x2d0>)
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	490e      	ldr	r1, [pc, #56]	; (80037f8 <HAL_GPIO_Init+0x2d0>)
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	600b      	str	r3, [r1, #0]
 80037c4:	e021      	b.n	800380a <HAL_GPIO_Init+0x2e2>
 80037c6:	bf00      	nop
 80037c8:	10320000 	.word	0x10320000
 80037cc:	10310000 	.word	0x10310000
 80037d0:	10220000 	.word	0x10220000
 80037d4:	10210000 	.word	0x10210000
 80037d8:	10120000 	.word	0x10120000
 80037dc:	10110000 	.word	0x10110000
 80037e0:	40021000 	.word	0x40021000
 80037e4:	40010000 	.word	0x40010000
 80037e8:	40010800 	.word	0x40010800
 80037ec:	40010c00 	.word	0x40010c00
 80037f0:	40011000 	.word	0x40011000
 80037f4:	40011400 	.word	0x40011400
 80037f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80037fc:	4b0b      	ldr	r3, [pc, #44]	; (800382c <HAL_GPIO_Init+0x304>)
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	43db      	mvns	r3, r3
 8003804:	4909      	ldr	r1, [pc, #36]	; (800382c <HAL_GPIO_Init+0x304>)
 8003806:	4013      	ands	r3, r2
 8003808:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380c:	3301      	adds	r3, #1
 800380e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003816:	fa22 f303 	lsr.w	r3, r2, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	f47f ae8e 	bne.w	800353c <HAL_GPIO_Init+0x14>
  }
}
 8003820:	bf00      	nop
 8003822:	bf00      	nop
 8003824:	372c      	adds	r7, #44	; 0x2c
 8003826:	46bd      	mov	sp, r7
 8003828:	bc80      	pop	{r7}
 800382a:	4770      	bx	lr
 800382c:	40010400 	.word	0x40010400

08003830 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	460b      	mov	r3, r1
 800383a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689a      	ldr	r2, [r3, #8]
 8003840:	887b      	ldrh	r3, [r7, #2]
 8003842:	4013      	ands	r3, r2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d002      	beq.n	800384e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003848:	2301      	movs	r3, #1
 800384a:	73fb      	strb	r3, [r7, #15]
 800384c:	e001      	b.n	8003852 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800384e:	2300      	movs	r3, #0
 8003850:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003852:	7bfb      	ldrb	r3, [r7, #15]
}
 8003854:	4618      	mov	r0, r3
 8003856:	3714      	adds	r7, #20
 8003858:	46bd      	mov	sp, r7
 800385a:	bc80      	pop	{r7}
 800385c:	4770      	bx	lr

0800385e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800385e:	b480      	push	{r7}
 8003860:	b083      	sub	sp, #12
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
 8003866:	460b      	mov	r3, r1
 8003868:	807b      	strh	r3, [r7, #2]
 800386a:	4613      	mov	r3, r2
 800386c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800386e:	787b      	ldrb	r3, [r7, #1]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d003      	beq.n	800387c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003874:	887a      	ldrh	r2, [r7, #2]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800387a:	e003      	b.n	8003884 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800387c:	887b      	ldrh	r3, [r7, #2]
 800387e:	041a      	lsls	r2, r3, #16
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	611a      	str	r2, [r3, #16]
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	bc80      	pop	{r7}
 800388c:	4770      	bx	lr
	...

08003890 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e12b      	b.n	8003afa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d106      	bne.n	80038bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f7ff f9e0 	bl	8002c7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2224      	movs	r2, #36	; 0x24
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 0201 	bic.w	r2, r2, #1
 80038d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038f4:	f002 f8aa 	bl	8005a4c <HAL_RCC_GetPCLK1Freq>
 80038f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	4a81      	ldr	r2, [pc, #516]	; (8003b04 <HAL_I2C_Init+0x274>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d807      	bhi.n	8003914 <HAL_I2C_Init+0x84>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	4a80      	ldr	r2, [pc, #512]	; (8003b08 <HAL_I2C_Init+0x278>)
 8003908:	4293      	cmp	r3, r2
 800390a:	bf94      	ite	ls
 800390c:	2301      	movls	r3, #1
 800390e:	2300      	movhi	r3, #0
 8003910:	b2db      	uxtb	r3, r3
 8003912:	e006      	b.n	8003922 <HAL_I2C_Init+0x92>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	4a7d      	ldr	r2, [pc, #500]	; (8003b0c <HAL_I2C_Init+0x27c>)
 8003918:	4293      	cmp	r3, r2
 800391a:	bf94      	ite	ls
 800391c:	2301      	movls	r3, #1
 800391e:	2300      	movhi	r3, #0
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e0e7      	b.n	8003afa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	4a78      	ldr	r2, [pc, #480]	; (8003b10 <HAL_I2C_Init+0x280>)
 800392e:	fba2 2303 	umull	r2, r3, r2, r3
 8003932:	0c9b      	lsrs	r3, r3, #18
 8003934:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68ba      	ldr	r2, [r7, #8]
 8003946:	430a      	orrs	r2, r1
 8003948:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	4a6a      	ldr	r2, [pc, #424]	; (8003b04 <HAL_I2C_Init+0x274>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d802      	bhi.n	8003964 <HAL_I2C_Init+0xd4>
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	3301      	adds	r3, #1
 8003962:	e009      	b.n	8003978 <HAL_I2C_Init+0xe8>
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800396a:	fb02 f303 	mul.w	r3, r2, r3
 800396e:	4a69      	ldr	r2, [pc, #420]	; (8003b14 <HAL_I2C_Init+0x284>)
 8003970:	fba2 2303 	umull	r2, r3, r2, r3
 8003974:	099b      	lsrs	r3, r3, #6
 8003976:	3301      	adds	r3, #1
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	6812      	ldr	r2, [r2, #0]
 800397c:	430b      	orrs	r3, r1
 800397e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800398a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	495c      	ldr	r1, [pc, #368]	; (8003b04 <HAL_I2C_Init+0x274>)
 8003994:	428b      	cmp	r3, r1
 8003996:	d819      	bhi.n	80039cc <HAL_I2C_Init+0x13c>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	1e59      	subs	r1, r3, #1
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80039a6:	1c59      	adds	r1, r3, #1
 80039a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80039ac:	400b      	ands	r3, r1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00a      	beq.n	80039c8 <HAL_I2C_Init+0x138>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	1e59      	subs	r1, r3, #1
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	005b      	lsls	r3, r3, #1
 80039bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80039c0:	3301      	adds	r3, #1
 80039c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039c6:	e051      	b.n	8003a6c <HAL_I2C_Init+0x1dc>
 80039c8:	2304      	movs	r3, #4
 80039ca:	e04f      	b.n	8003a6c <HAL_I2C_Init+0x1dc>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d111      	bne.n	80039f8 <HAL_I2C_Init+0x168>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	1e58      	subs	r0, r3, #1
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6859      	ldr	r1, [r3, #4]
 80039dc:	460b      	mov	r3, r1
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	440b      	add	r3, r1
 80039e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80039e6:	3301      	adds	r3, #1
 80039e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	bf0c      	ite	eq
 80039f0:	2301      	moveq	r3, #1
 80039f2:	2300      	movne	r3, #0
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	e012      	b.n	8003a1e <HAL_I2C_Init+0x18e>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	1e58      	subs	r0, r3, #1
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6859      	ldr	r1, [r3, #4]
 8003a00:	460b      	mov	r3, r1
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	440b      	add	r3, r1
 8003a06:	0099      	lsls	r1, r3, #2
 8003a08:	440b      	add	r3, r1
 8003a0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a0e:	3301      	adds	r3, #1
 8003a10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	bf0c      	ite	eq
 8003a18:	2301      	moveq	r3, #1
 8003a1a:	2300      	movne	r3, #0
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <HAL_I2C_Init+0x196>
 8003a22:	2301      	movs	r3, #1
 8003a24:	e022      	b.n	8003a6c <HAL_I2C_Init+0x1dc>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d10e      	bne.n	8003a4c <HAL_I2C_Init+0x1bc>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	1e58      	subs	r0, r3, #1
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6859      	ldr	r1, [r3, #4]
 8003a36:	460b      	mov	r3, r1
 8003a38:	005b      	lsls	r3, r3, #1
 8003a3a:	440b      	add	r3, r1
 8003a3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a40:	3301      	adds	r3, #1
 8003a42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a4a:	e00f      	b.n	8003a6c <HAL_I2C_Init+0x1dc>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	1e58      	subs	r0, r3, #1
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6859      	ldr	r1, [r3, #4]
 8003a54:	460b      	mov	r3, r1
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	440b      	add	r3, r1
 8003a5a:	0099      	lsls	r1, r3, #2
 8003a5c:	440b      	add	r3, r1
 8003a5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a62:	3301      	adds	r3, #1
 8003a64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a6c:	6879      	ldr	r1, [r7, #4]
 8003a6e:	6809      	ldr	r1, [r1, #0]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	69da      	ldr	r2, [r3, #28]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	431a      	orrs	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	6911      	ldr	r1, [r2, #16]
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	68d2      	ldr	r2, [r2, #12]
 8003aa6:	4311      	orrs	r1, r2
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	6812      	ldr	r2, [r2, #0]
 8003aac:	430b      	orrs	r3, r1
 8003aae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	695a      	ldr	r2, [r3, #20]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f042 0201 	orr.w	r2, r2, #1
 8003ada:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2220      	movs	r2, #32
 8003ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	000186a0 	.word	0x000186a0
 8003b08:	001e847f 	.word	0x001e847f
 8003b0c:	003d08ff 	.word	0x003d08ff
 8003b10:	431bde83 	.word	0x431bde83
 8003b14:	10624dd3 	.word	0x10624dd3

08003b18 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b088      	sub	sp, #32
 8003b1c:	af02      	add	r7, sp, #8
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	607a      	str	r2, [r7, #4]
 8003b22:	461a      	mov	r2, r3
 8003b24:	460b      	mov	r3, r1
 8003b26:	817b      	strh	r3, [r7, #10]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b2c:	f7ff fb0e 	bl	800314c <HAL_GetTick>
 8003b30:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b20      	cmp	r3, #32
 8003b3c:	f040 80e0 	bne.w	8003d00 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	2319      	movs	r3, #25
 8003b46:	2201      	movs	r2, #1
 8003b48:	4970      	ldr	r1, [pc, #448]	; (8003d0c <HAL_I2C_Master_Transmit+0x1f4>)
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f001 f97e 	bl	8004e4c <I2C_WaitOnFlagUntilTimeout>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003b56:	2302      	movs	r3, #2
 8003b58:	e0d3      	b.n	8003d02 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d101      	bne.n	8003b68 <HAL_I2C_Master_Transmit+0x50>
 8003b64:	2302      	movs	r3, #2
 8003b66:	e0cc      	b.n	8003d02 <HAL_I2C_Master_Transmit+0x1ea>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d007      	beq.n	8003b8e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f042 0201 	orr.w	r2, r2, #1
 8003b8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b9c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2221      	movs	r2, #33	; 0x21
 8003ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2210      	movs	r2, #16
 8003baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	893a      	ldrh	r2, [r7, #8]
 8003bbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	4a50      	ldr	r2, [pc, #320]	; (8003d10 <HAL_I2C_Master_Transmit+0x1f8>)
 8003bce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003bd0:	8979      	ldrh	r1, [r7, #10]
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	6a3a      	ldr	r2, [r7, #32]
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f000 fe6a 	bl	80048b0 <I2C_MasterRequestWrite>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d001      	beq.n	8003be6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e08d      	b.n	8003d02 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003be6:	2300      	movs	r3, #0
 8003be8:	613b      	str	r3, [r7, #16]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	613b      	str	r3, [r7, #16]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	613b      	str	r3, [r7, #16]
 8003bfa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003bfc:	e066      	b.n	8003ccc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	6a39      	ldr	r1, [r7, #32]
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f001 fa3c 	bl	8005080 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00d      	beq.n	8003c2a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	2b04      	cmp	r3, #4
 8003c14:	d107      	bne.n	8003c26 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e06b      	b.n	8003d02 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	781a      	ldrb	r2, [r3, #0]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3a:	1c5a      	adds	r2, r3, #1
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	3b01      	subs	r3, #1
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c52:	3b01      	subs	r3, #1
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	f003 0304 	and.w	r3, r3, #4
 8003c64:	2b04      	cmp	r3, #4
 8003c66:	d11b      	bne.n	8003ca0 <HAL_I2C_Master_Transmit+0x188>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d017      	beq.n	8003ca0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c74:	781a      	ldrb	r2, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c80:	1c5a      	adds	r2, r3, #1
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	6a39      	ldr	r1, [r7, #32]
 8003ca4:	68f8      	ldr	r0, [r7, #12]
 8003ca6:	f001 fa33 	bl	8005110 <I2C_WaitOnBTFFlagUntilTimeout>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00d      	beq.n	8003ccc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb4:	2b04      	cmp	r3, #4
 8003cb6:	d107      	bne.n	8003cc8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cc6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e01a      	b.n	8003d02 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d194      	bne.n	8003bfe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ce2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	e000      	b.n	8003d02 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003d00:	2302      	movs	r3, #2
  }
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3718      	adds	r7, #24
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	00100002 	.word	0x00100002
 8003d10:	ffff0000 	.word	0xffff0000

08003d14 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b08c      	sub	sp, #48	; 0x30
 8003d18:	af02      	add	r7, sp, #8
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	607a      	str	r2, [r7, #4]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	460b      	mov	r3, r1
 8003d22:	817b      	strh	r3, [r7, #10]
 8003d24:	4613      	mov	r3, r2
 8003d26:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d2c:	f7ff fa0e 	bl	800314c <HAL_GetTick>
 8003d30:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b20      	cmp	r3, #32
 8003d3c:	f040 824b 	bne.w	80041d6 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d42:	9300      	str	r3, [sp, #0]
 8003d44:	2319      	movs	r3, #25
 8003d46:	2201      	movs	r2, #1
 8003d48:	497f      	ldr	r1, [pc, #508]	; (8003f48 <HAL_I2C_Master_Receive+0x234>)
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	f001 f87e 	bl	8004e4c <I2C_WaitOnFlagUntilTimeout>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003d56:	2302      	movs	r3, #2
 8003d58:	e23e      	b.n	80041d8 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d101      	bne.n	8003d68 <HAL_I2C_Master_Receive+0x54>
 8003d64:	2302      	movs	r3, #2
 8003d66:	e237      	b.n	80041d8 <HAL_I2C_Master_Receive+0x4c4>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d007      	beq.n	8003d8e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f042 0201 	orr.w	r2, r2, #1
 8003d8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d9c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2222      	movs	r2, #34	; 0x22
 8003da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2210      	movs	r2, #16
 8003daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	893a      	ldrh	r2, [r7, #8]
 8003dbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	4a5f      	ldr	r2, [pc, #380]	; (8003f4c <HAL_I2C_Master_Receive+0x238>)
 8003dce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003dd0:	8979      	ldrh	r1, [r7, #10]
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f000 fdec 	bl	80049b4 <I2C_MasterRequestRead>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d001      	beq.n	8003de6 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e1f8      	b.n	80041d8 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d113      	bne.n	8003e16 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dee:	2300      	movs	r3, #0
 8003df0:	61fb      	str	r3, [r7, #28]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	695b      	ldr	r3, [r3, #20]
 8003df8:	61fb      	str	r3, [r7, #28]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	61fb      	str	r3, [r7, #28]
 8003e02:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e12:	601a      	str	r2, [r3, #0]
 8003e14:	e1cc      	b.n	80041b0 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d11e      	bne.n	8003e5c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e2c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e2e:	b672      	cpsid	i
}
 8003e30:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e32:	2300      	movs	r3, #0
 8003e34:	61bb      	str	r3, [r7, #24]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	695b      	ldr	r3, [r3, #20]
 8003e3c:	61bb      	str	r3, [r7, #24]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	61bb      	str	r3, [r7, #24]
 8003e46:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e56:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003e58:	b662      	cpsie	i
}
 8003e5a:	e035      	b.n	8003ec8 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d11e      	bne.n	8003ea2 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e72:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e74:	b672      	cpsid	i
}
 8003e76:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e78:	2300      	movs	r3, #0
 8003e7a:	617b      	str	r3, [r7, #20]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	617b      	str	r3, [r7, #20]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	617b      	str	r3, [r7, #20]
 8003e8c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e9c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003e9e:	b662      	cpsie	i
}
 8003ea0:	e012      	b.n	8003ec8 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003eb0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	613b      	str	r3, [r7, #16]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	695b      	ldr	r3, [r3, #20]
 8003ebc:	613b      	str	r3, [r7, #16]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	613b      	str	r3, [r7, #16]
 8003ec6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003ec8:	e172      	b.n	80041b0 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ece:	2b03      	cmp	r3, #3
 8003ed0:	f200 811f 	bhi.w	8004112 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d123      	bne.n	8003f24 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ede:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f001 f95d 	bl	80051a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d001      	beq.n	8003ef0 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e173      	b.n	80041d8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	691a      	ldr	r2, [r3, #16]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efa:	b2d2      	uxtb	r2, r2
 8003efc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f02:	1c5a      	adds	r2, r3, #1
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f22:	e145      	b.n	80041b0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d152      	bne.n	8003fd2 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2e:	9300      	str	r3, [sp, #0]
 8003f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f32:	2200      	movs	r2, #0
 8003f34:	4906      	ldr	r1, [pc, #24]	; (8003f50 <HAL_I2C_Master_Receive+0x23c>)
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	f000 ff88 	bl	8004e4c <I2C_WaitOnFlagUntilTimeout>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d008      	beq.n	8003f54 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e148      	b.n	80041d8 <HAL_I2C_Master_Receive+0x4c4>
 8003f46:	bf00      	nop
 8003f48:	00100002 	.word	0x00100002
 8003f4c:	ffff0000 	.word	0xffff0000
 8003f50:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003f54:	b672      	cpsid	i
}
 8003f56:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	691a      	ldr	r2, [r3, #16]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f72:	b2d2      	uxtb	r2, r2
 8003f74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7a:	1c5a      	adds	r2, r3, #1
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f84:	3b01      	subs	r3, #1
 8003f86:	b29a      	uxth	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	3b01      	subs	r3, #1
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003f9a:	b662      	cpsie	i
}
 8003f9c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	691a      	ldr	r2, [r3, #16]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa8:	b2d2      	uxtb	r2, r2
 8003faa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb0:	1c5a      	adds	r2, r3, #1
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fd0:	e0ee      	b.n	80041b0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	9300      	str	r3, [sp, #0]
 8003fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd8:	2200      	movs	r2, #0
 8003fda:	4981      	ldr	r1, [pc, #516]	; (80041e0 <HAL_I2C_Master_Receive+0x4cc>)
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f000 ff35 	bl	8004e4c <I2C_WaitOnFlagUntilTimeout>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e0f5      	b.n	80041d8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ffa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ffc:	b672      	cpsid	i
}
 8003ffe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	691a      	ldr	r2, [r3, #16]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	b2d2      	uxtb	r2, r2
 800400c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004012:	1c5a      	adds	r2, r3, #1
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800401c:	3b01      	subs	r3, #1
 800401e:	b29a      	uxth	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004028:	b29b      	uxth	r3, r3
 800402a:	3b01      	subs	r3, #1
 800402c:	b29a      	uxth	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004032:	4b6c      	ldr	r3, [pc, #432]	; (80041e4 <HAL_I2C_Master_Receive+0x4d0>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	08db      	lsrs	r3, r3, #3
 8004038:	4a6b      	ldr	r2, [pc, #428]	; (80041e8 <HAL_I2C_Master_Receive+0x4d4>)
 800403a:	fba2 2303 	umull	r2, r3, r2, r3
 800403e:	0a1a      	lsrs	r2, r3, #8
 8004040:	4613      	mov	r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	4413      	add	r3, r2
 8004046:	00da      	lsls	r2, r3, #3
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800404c:	6a3b      	ldr	r3, [r7, #32]
 800404e:	3b01      	subs	r3, #1
 8004050:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004052:	6a3b      	ldr	r3, [r7, #32]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d118      	bne.n	800408a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2220      	movs	r2, #32
 8004062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004072:	f043 0220 	orr.w	r2, r3, #32
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800407a:	b662      	cpsie	i
}
 800407c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e0a6      	b.n	80041d8 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	f003 0304 	and.w	r3, r3, #4
 8004094:	2b04      	cmp	r3, #4
 8004096:	d1d9      	bne.n	800404c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	691a      	ldr	r2, [r3, #16]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	b2d2      	uxtb	r2, r2
 80040b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ba:	1c5a      	adds	r2, r3, #1
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c4:	3b01      	subs	r3, #1
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	3b01      	subs	r3, #1
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80040da:	b662      	cpsie	i
}
 80040dc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	691a      	ldr	r2, [r3, #16]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	b2d2      	uxtb	r2, r2
 80040ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f0:	1c5a      	adds	r2, r3, #1
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040fa:	3b01      	subs	r3, #1
 80040fc:	b29a      	uxth	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004106:	b29b      	uxth	r3, r3
 8004108:	3b01      	subs	r3, #1
 800410a:	b29a      	uxth	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004110:	e04e      	b.n	80041b0 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004114:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f001 f842 	bl	80051a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e058      	b.n	80041d8 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	691a      	ldr	r2, [r3, #16]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004130:	b2d2      	uxtb	r2, r2
 8004132:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004138:	1c5a      	adds	r2, r3, #1
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004142:	3b01      	subs	r3, #1
 8004144:	b29a      	uxth	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800414e:	b29b      	uxth	r3, r3
 8004150:	3b01      	subs	r3, #1
 8004152:	b29a      	uxth	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	f003 0304 	and.w	r3, r3, #4
 8004162:	2b04      	cmp	r3, #4
 8004164:	d124      	bne.n	80041b0 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800416a:	2b03      	cmp	r3, #3
 800416c:	d107      	bne.n	800417e <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800417c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	691a      	ldr	r2, [r3, #16]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	b2d2      	uxtb	r2, r2
 800418a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004190:	1c5a      	adds	r2, r3, #1
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800419a:	3b01      	subs	r3, #1
 800419c:	b29a      	uxth	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	3b01      	subs	r3, #1
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f47f ae88 	bne.w	8003eca <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2220      	movs	r2, #32
 80041be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80041d2:	2300      	movs	r3, #0
 80041d4:	e000      	b.n	80041d8 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80041d6:	2302      	movs	r3, #2
  }
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3728      	adds	r7, #40	; 0x28
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	00010004 	.word	0x00010004
 80041e4:	20000000 	.word	0x20000000
 80041e8:	14f8b589 	.word	0x14f8b589

080041ec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b088      	sub	sp, #32
 80041f0:	af02      	add	r7, sp, #8
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	4608      	mov	r0, r1
 80041f6:	4611      	mov	r1, r2
 80041f8:	461a      	mov	r2, r3
 80041fa:	4603      	mov	r3, r0
 80041fc:	817b      	strh	r3, [r7, #10]
 80041fe:	460b      	mov	r3, r1
 8004200:	813b      	strh	r3, [r7, #8]
 8004202:	4613      	mov	r3, r2
 8004204:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004206:	f7fe ffa1 	bl	800314c <HAL_GetTick>
 800420a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004212:	b2db      	uxtb	r3, r3
 8004214:	2b20      	cmp	r3, #32
 8004216:	f040 80d9 	bne.w	80043cc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	9300      	str	r3, [sp, #0]
 800421e:	2319      	movs	r3, #25
 8004220:	2201      	movs	r2, #1
 8004222:	496d      	ldr	r1, [pc, #436]	; (80043d8 <HAL_I2C_Mem_Write+0x1ec>)
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f000 fe11 	bl	8004e4c <I2C_WaitOnFlagUntilTimeout>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004230:	2302      	movs	r3, #2
 8004232:	e0cc      	b.n	80043ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800423a:	2b01      	cmp	r3, #1
 800423c:	d101      	bne.n	8004242 <HAL_I2C_Mem_Write+0x56>
 800423e:	2302      	movs	r3, #2
 8004240:	e0c5      	b.n	80043ce <HAL_I2C_Mem_Write+0x1e2>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2201      	movs	r2, #1
 8004246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b01      	cmp	r3, #1
 8004256:	d007      	beq.n	8004268 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f042 0201 	orr.w	r2, r2, #1
 8004266:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004276:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2221      	movs	r2, #33	; 0x21
 800427c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2240      	movs	r2, #64	; 0x40
 8004284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6a3a      	ldr	r2, [r7, #32]
 8004292:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004298:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800429e:	b29a      	uxth	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	4a4d      	ldr	r2, [pc, #308]	; (80043dc <HAL_I2C_Mem_Write+0x1f0>)
 80042a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042aa:	88f8      	ldrh	r0, [r7, #6]
 80042ac:	893a      	ldrh	r2, [r7, #8]
 80042ae:	8979      	ldrh	r1, [r7, #10]
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	9301      	str	r3, [sp, #4]
 80042b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b6:	9300      	str	r3, [sp, #0]
 80042b8:	4603      	mov	r3, r0
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f000 fc48 	bl	8004b50 <I2C_RequestMemoryWrite>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d052      	beq.n	800436c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e081      	b.n	80043ce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042ce:	68f8      	ldr	r0, [r7, #12]
 80042d0:	f000 fed6 	bl	8005080 <I2C_WaitOnTXEFlagUntilTimeout>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00d      	beq.n	80042f6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042de:	2b04      	cmp	r3, #4
 80042e0:	d107      	bne.n	80042f2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e06b      	b.n	80043ce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fa:	781a      	ldrb	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004306:	1c5a      	adds	r2, r3, #1
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004310:	3b01      	subs	r3, #1
 8004312:	b29a      	uxth	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800431c:	b29b      	uxth	r3, r3
 800431e:	3b01      	subs	r3, #1
 8004320:	b29a      	uxth	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	695b      	ldr	r3, [r3, #20]
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	2b04      	cmp	r3, #4
 8004332:	d11b      	bne.n	800436c <HAL_I2C_Mem_Write+0x180>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004338:	2b00      	cmp	r3, #0
 800433a:	d017      	beq.n	800436c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004340:	781a      	ldrb	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434c:	1c5a      	adds	r2, r3, #1
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004356:	3b01      	subs	r3, #1
 8004358:	b29a      	uxth	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004362:	b29b      	uxth	r3, r3
 8004364:	3b01      	subs	r3, #1
 8004366:	b29a      	uxth	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1aa      	bne.n	80042ca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f000 fec9 	bl	8005110 <I2C_WaitOnBTFFlagUntilTimeout>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00d      	beq.n	80043a0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004388:	2b04      	cmp	r3, #4
 800438a:	d107      	bne.n	800439c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800439a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e016      	b.n	80043ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2220      	movs	r2, #32
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80043c8:	2300      	movs	r3, #0
 80043ca:	e000      	b.n	80043ce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80043cc:	2302      	movs	r3, #2
  }
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3718      	adds	r7, #24
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	00100002 	.word	0x00100002
 80043dc:	ffff0000 	.word	0xffff0000

080043e0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b08c      	sub	sp, #48	; 0x30
 80043e4:	af02      	add	r7, sp, #8
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	4608      	mov	r0, r1
 80043ea:	4611      	mov	r1, r2
 80043ec:	461a      	mov	r2, r3
 80043ee:	4603      	mov	r3, r0
 80043f0:	817b      	strh	r3, [r7, #10]
 80043f2:	460b      	mov	r3, r1
 80043f4:	813b      	strh	r3, [r7, #8]
 80043f6:	4613      	mov	r3, r2
 80043f8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80043fa:	2300      	movs	r3, #0
 80043fc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043fe:	f7fe fea5 	bl	800314c <HAL_GetTick>
 8004402:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800440a:	b2db      	uxtb	r3, r3
 800440c:	2b20      	cmp	r3, #32
 800440e:	f040 8244 	bne.w	800489a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004414:	9300      	str	r3, [sp, #0]
 8004416:	2319      	movs	r3, #25
 8004418:	2201      	movs	r2, #1
 800441a:	4982      	ldr	r1, [pc, #520]	; (8004624 <HAL_I2C_Mem_Read+0x244>)
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f000 fd15 	bl	8004e4c <I2C_WaitOnFlagUntilTimeout>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d001      	beq.n	800442c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004428:	2302      	movs	r3, #2
 800442a:	e237      	b.n	800489c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004432:	2b01      	cmp	r3, #1
 8004434:	d101      	bne.n	800443a <HAL_I2C_Mem_Read+0x5a>
 8004436:	2302      	movs	r3, #2
 8004438:	e230      	b.n	800489c <HAL_I2C_Mem_Read+0x4bc>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2201      	movs	r2, #1
 800443e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	2b01      	cmp	r3, #1
 800444e:	d007      	beq.n	8004460 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f042 0201 	orr.w	r2, r2, #1
 800445e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800446e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2222      	movs	r2, #34	; 0x22
 8004474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2240      	movs	r2, #64	; 0x40
 800447c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800448a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004490:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004496:	b29a      	uxth	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	4a62      	ldr	r2, [pc, #392]	; (8004628 <HAL_I2C_Mem_Read+0x248>)
 80044a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044a2:	88f8      	ldrh	r0, [r7, #6]
 80044a4:	893a      	ldrh	r2, [r7, #8]
 80044a6:	8979      	ldrh	r1, [r7, #10]
 80044a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044aa:	9301      	str	r3, [sp, #4]
 80044ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ae:	9300      	str	r3, [sp, #0]
 80044b0:	4603      	mov	r3, r0
 80044b2:	68f8      	ldr	r0, [r7, #12]
 80044b4:	f000 fbe2 	bl	8004c7c <I2C_RequestMemoryRead>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d001      	beq.n	80044c2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e1ec      	b.n	800489c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d113      	bne.n	80044f2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044ca:	2300      	movs	r3, #0
 80044cc:	61fb      	str	r3, [r7, #28]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	61fb      	str	r3, [r7, #28]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	61fb      	str	r3, [r7, #28]
 80044de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ee:	601a      	str	r2, [r3, #0]
 80044f0:	e1c0      	b.n	8004874 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d11e      	bne.n	8004538 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004508:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800450a:	b672      	cpsid	i
}
 800450c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800450e:	2300      	movs	r3, #0
 8004510:	61bb      	str	r3, [r7, #24]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	61bb      	str	r3, [r7, #24]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	61bb      	str	r3, [r7, #24]
 8004522:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004532:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004534:	b662      	cpsie	i
}
 8004536:	e035      	b.n	80045a4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800453c:	2b02      	cmp	r3, #2
 800453e:	d11e      	bne.n	800457e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800454e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004550:	b672      	cpsid	i
}
 8004552:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004554:	2300      	movs	r3, #0
 8004556:	617b      	str	r3, [r7, #20]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	617b      	str	r3, [r7, #20]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	617b      	str	r3, [r7, #20]
 8004568:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004578:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800457a:	b662      	cpsie	i
}
 800457c:	e012      	b.n	80045a4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800458c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800458e:	2300      	movs	r3, #0
 8004590:	613b      	str	r3, [r7, #16]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	695b      	ldr	r3, [r3, #20]
 8004598:	613b      	str	r3, [r7, #16]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	613b      	str	r3, [r7, #16]
 80045a2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80045a4:	e166      	b.n	8004874 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045aa:	2b03      	cmp	r3, #3
 80045ac:	f200 811f 	bhi.w	80047ee <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d123      	bne.n	8004600 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f000 fdef 	bl	80051a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d001      	beq.n	80045cc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e167      	b.n	800489c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	691a      	ldr	r2, [r3, #16]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d6:	b2d2      	uxtb	r2, r2
 80045d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045de:	1c5a      	adds	r2, r3, #1
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e8:	3b01      	subs	r3, #1
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	3b01      	subs	r3, #1
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045fe:	e139      	b.n	8004874 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004604:	2b02      	cmp	r3, #2
 8004606:	d152      	bne.n	80046ae <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800460e:	2200      	movs	r2, #0
 8004610:	4906      	ldr	r1, [pc, #24]	; (800462c <HAL_I2C_Mem_Read+0x24c>)
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f000 fc1a 	bl	8004e4c <I2C_WaitOnFlagUntilTimeout>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d008      	beq.n	8004630 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e13c      	b.n	800489c <HAL_I2C_Mem_Read+0x4bc>
 8004622:	bf00      	nop
 8004624:	00100002 	.word	0x00100002
 8004628:	ffff0000 	.word	0xffff0000
 800462c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004630:	b672      	cpsid	i
}
 8004632:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004642:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	691a      	ldr	r2, [r3, #16]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464e:	b2d2      	uxtb	r2, r2
 8004650:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004656:	1c5a      	adds	r2, r3, #1
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004660:	3b01      	subs	r3, #1
 8004662:	b29a      	uxth	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800466c:	b29b      	uxth	r3, r3
 800466e:	3b01      	subs	r3, #1
 8004670:	b29a      	uxth	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004676:	b662      	cpsie	i
}
 8004678:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	691a      	ldr	r2, [r3, #16]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004684:	b2d2      	uxtb	r2, r2
 8004686:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468c:	1c5a      	adds	r2, r3, #1
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004696:	3b01      	subs	r3, #1
 8004698:	b29a      	uxth	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	3b01      	subs	r3, #1
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046ac:	e0e2      	b.n	8004874 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b4:	2200      	movs	r2, #0
 80046b6:	497b      	ldr	r1, [pc, #492]	; (80048a4 <HAL_I2C_Mem_Read+0x4c4>)
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f000 fbc7 	bl	8004e4c <I2C_WaitOnFlagUntilTimeout>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d001      	beq.n	80046c8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e0e9      	b.n	800489c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046d6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80046d8:	b672      	cpsid	i
}
 80046da:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	691a      	ldr	r2, [r3, #16]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e6:	b2d2      	uxtb	r2, r2
 80046e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ee:	1c5a      	adds	r2, r3, #1
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046f8:	3b01      	subs	r3, #1
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004704:	b29b      	uxth	r3, r3
 8004706:	3b01      	subs	r3, #1
 8004708:	b29a      	uxth	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800470e:	4b66      	ldr	r3, [pc, #408]	; (80048a8 <HAL_I2C_Mem_Read+0x4c8>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	08db      	lsrs	r3, r3, #3
 8004714:	4a65      	ldr	r2, [pc, #404]	; (80048ac <HAL_I2C_Mem_Read+0x4cc>)
 8004716:	fba2 2303 	umull	r2, r3, r2, r3
 800471a:	0a1a      	lsrs	r2, r3, #8
 800471c:	4613      	mov	r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4413      	add	r3, r2
 8004722:	00da      	lsls	r2, r3, #3
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004728:	6a3b      	ldr	r3, [r7, #32]
 800472a:	3b01      	subs	r3, #1
 800472c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800472e:	6a3b      	ldr	r3, [r7, #32]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d118      	bne.n	8004766 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2220      	movs	r2, #32
 800473e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474e:	f043 0220 	orr.w	r2, r3, #32
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004756:	b662      	cpsie	i
}
 8004758:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e09a      	b.n	800489c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	695b      	ldr	r3, [r3, #20]
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b04      	cmp	r3, #4
 8004772:	d1d9      	bne.n	8004728 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004782:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	691a      	ldr	r2, [r3, #16]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478e:	b2d2      	uxtb	r2, r2
 8004790:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004796:	1c5a      	adds	r2, r3, #1
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047a0:	3b01      	subs	r3, #1
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	3b01      	subs	r3, #1
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80047b6:	b662      	cpsie	i
}
 80047b8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	691a      	ldr	r2, [r3, #16]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c4:	b2d2      	uxtb	r2, r2
 80047c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047cc:	1c5a      	adds	r2, r3, #1
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d6:	3b01      	subs	r3, #1
 80047d8:	b29a      	uxth	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	3b01      	subs	r3, #1
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047ec:	e042      	b.n	8004874 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f000 fcd4 	bl	80051a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d001      	beq.n	8004802 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e04c      	b.n	800489c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	691a      	ldr	r2, [r3, #16]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480c:	b2d2      	uxtb	r2, r2
 800480e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004814:	1c5a      	adds	r2, r3, #1
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800481e:	3b01      	subs	r3, #1
 8004820:	b29a      	uxth	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800482a:	b29b      	uxth	r3, r3
 800482c:	3b01      	subs	r3, #1
 800482e:	b29a      	uxth	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	f003 0304 	and.w	r3, r3, #4
 800483e:	2b04      	cmp	r3, #4
 8004840:	d118      	bne.n	8004874 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	691a      	ldr	r2, [r3, #16]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484c:	b2d2      	uxtb	r2, r2
 800484e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004854:	1c5a      	adds	r2, r3, #1
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800485e:	3b01      	subs	r3, #1
 8004860:	b29a      	uxth	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800486a:	b29b      	uxth	r3, r3
 800486c:	3b01      	subs	r3, #1
 800486e:	b29a      	uxth	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004878:	2b00      	cmp	r3, #0
 800487a:	f47f ae94 	bne.w	80045a6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2220      	movs	r2, #32
 8004882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004896:	2300      	movs	r3, #0
 8004898:	e000      	b.n	800489c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800489a:	2302      	movs	r3, #2
  }
}
 800489c:	4618      	mov	r0, r3
 800489e:	3728      	adds	r7, #40	; 0x28
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	00010004 	.word	0x00010004
 80048a8:	20000000 	.word	0x20000000
 80048ac:	14f8b589 	.word	0x14f8b589

080048b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b088      	sub	sp, #32
 80048b4:	af02      	add	r7, sp, #8
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	607a      	str	r2, [r7, #4]
 80048ba:	603b      	str	r3, [r7, #0]
 80048bc:	460b      	mov	r3, r1
 80048be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	2b08      	cmp	r3, #8
 80048ca:	d006      	beq.n	80048da <I2C_MasterRequestWrite+0x2a>
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d003      	beq.n	80048da <I2C_MasterRequestWrite+0x2a>
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048d8:	d108      	bne.n	80048ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048e8:	601a      	str	r2, [r3, #0]
 80048ea:	e00b      	b.n	8004904 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f0:	2b12      	cmp	r3, #18
 80048f2:	d107      	bne.n	8004904 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004902:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	9300      	str	r3, [sp, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	f000 fa9b 	bl	8004e4c <I2C_WaitOnFlagUntilTimeout>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00d      	beq.n	8004938 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004926:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800492a:	d103      	bne.n	8004934 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004932:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e035      	b.n	80049a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004940:	d108      	bne.n	8004954 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004942:	897b      	ldrh	r3, [r7, #10]
 8004944:	b2db      	uxtb	r3, r3
 8004946:	461a      	mov	r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004950:	611a      	str	r2, [r3, #16]
 8004952:	e01b      	b.n	800498c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004954:	897b      	ldrh	r3, [r7, #10]
 8004956:	11db      	asrs	r3, r3, #7
 8004958:	b2db      	uxtb	r3, r3
 800495a:	f003 0306 	and.w	r3, r3, #6
 800495e:	b2db      	uxtb	r3, r3
 8004960:	f063 030f 	orn	r3, r3, #15
 8004964:	b2da      	uxtb	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	490e      	ldr	r1, [pc, #56]	; (80049ac <I2C_MasterRequestWrite+0xfc>)
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f000 fae4 	bl	8004f40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e010      	b.n	80049a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004982:	897b      	ldrh	r3, [r7, #10]
 8004984:	b2da      	uxtb	r2, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	4907      	ldr	r1, [pc, #28]	; (80049b0 <I2C_MasterRequestWrite+0x100>)
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f000 fad4 	bl	8004f40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e000      	b.n	80049a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3718      	adds	r7, #24
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	00010008 	.word	0x00010008
 80049b0:	00010002 	.word	0x00010002

080049b4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b088      	sub	sp, #32
 80049b8:	af02      	add	r7, sp, #8
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	607a      	str	r2, [r7, #4]
 80049be:	603b      	str	r3, [r7, #0]
 80049c0:	460b      	mov	r3, r1
 80049c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049d8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	2b08      	cmp	r3, #8
 80049de:	d006      	beq.n	80049ee <I2C_MasterRequestRead+0x3a>
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d003      	beq.n	80049ee <I2C_MasterRequestRead+0x3a>
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049ec:	d108      	bne.n	8004a00 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049fc:	601a      	str	r2, [r3, #0]
 80049fe:	e00b      	b.n	8004a18 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a04:	2b11      	cmp	r3, #17
 8004a06:	d107      	bne.n	8004a18 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a16:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	9300      	str	r3, [sp, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f000 fa11 	bl	8004e4c <I2C_WaitOnFlagUntilTimeout>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00d      	beq.n	8004a4c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a3e:	d103      	bne.n	8004a48 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e079      	b.n	8004b40 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a54:	d108      	bne.n	8004a68 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004a56:	897b      	ldrh	r3, [r7, #10]
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	f043 0301 	orr.w	r3, r3, #1
 8004a5e:	b2da      	uxtb	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	611a      	str	r2, [r3, #16]
 8004a66:	e05f      	b.n	8004b28 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004a68:	897b      	ldrh	r3, [r7, #10]
 8004a6a:	11db      	asrs	r3, r3, #7
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	f003 0306 	and.w	r3, r3, #6
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	f063 030f 	orn	r3, r3, #15
 8004a78:	b2da      	uxtb	r2, r3
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	4930      	ldr	r1, [pc, #192]	; (8004b48 <I2C_MasterRequestRead+0x194>)
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f000 fa5a 	bl	8004f40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d001      	beq.n	8004a96 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e054      	b.n	8004b40 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004a96:	897b      	ldrh	r3, [r7, #10]
 8004a98:	b2da      	uxtb	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	4929      	ldr	r1, [pc, #164]	; (8004b4c <I2C_MasterRequestRead+0x198>)
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	f000 fa4a 	bl	8004f40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d001      	beq.n	8004ab6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e044      	b.n	8004b40 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	613b      	str	r3, [r7, #16]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	613b      	str	r3, [r7, #16]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	699b      	ldr	r3, [r3, #24]
 8004ac8:	613b      	str	r3, [r7, #16]
 8004aca:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ada:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	9300      	str	r3, [sp, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	f000 f9af 	bl	8004e4c <I2C_WaitOnFlagUntilTimeout>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00d      	beq.n	8004b10 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004afe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b02:	d103      	bne.n	8004b0c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b0a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e017      	b.n	8004b40 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004b10:	897b      	ldrh	r3, [r7, #10]
 8004b12:	11db      	asrs	r3, r3, #7
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	f003 0306 	and.w	r3, r3, #6
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	f063 030e 	orn	r3, r3, #14
 8004b20:	b2da      	uxtb	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	4907      	ldr	r1, [pc, #28]	; (8004b4c <I2C_MasterRequestRead+0x198>)
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f000 fa06 	bl	8004f40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d001      	beq.n	8004b3e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e000      	b.n	8004b40 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3718      	adds	r7, #24
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	00010008 	.word	0x00010008
 8004b4c:	00010002 	.word	0x00010002

08004b50 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b088      	sub	sp, #32
 8004b54:	af02      	add	r7, sp, #8
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	4608      	mov	r0, r1
 8004b5a:	4611      	mov	r1, r2
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	4603      	mov	r3, r0
 8004b60:	817b      	strh	r3, [r7, #10]
 8004b62:	460b      	mov	r3, r1
 8004b64:	813b      	strh	r3, [r7, #8]
 8004b66:	4613      	mov	r3, r2
 8004b68:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b78:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	9300      	str	r3, [sp, #0]
 8004b7e:	6a3b      	ldr	r3, [r7, #32]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f000 f960 	bl	8004e4c <I2C_WaitOnFlagUntilTimeout>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00d      	beq.n	8004bae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ba0:	d103      	bne.n	8004baa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ba8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e05f      	b.n	8004c6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004bae:	897b      	ldrh	r3, [r7, #10]
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004bbc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc0:	6a3a      	ldr	r2, [r7, #32]
 8004bc2:	492d      	ldr	r1, [pc, #180]	; (8004c78 <I2C_RequestMemoryWrite+0x128>)
 8004bc4:	68f8      	ldr	r0, [r7, #12]
 8004bc6:	f000 f9bb 	bl	8004f40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d001      	beq.n	8004bd4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e04c      	b.n	8004c6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	617b      	str	r3, [r7, #20]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	617b      	str	r3, [r7, #20]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	617b      	str	r3, [r7, #20]
 8004be8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bec:	6a39      	ldr	r1, [r7, #32]
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	f000 fa46 	bl	8005080 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00d      	beq.n	8004c16 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfe:	2b04      	cmp	r3, #4
 8004c00:	d107      	bne.n	8004c12 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c10:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e02b      	b.n	8004c6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c16:	88fb      	ldrh	r3, [r7, #6]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d105      	bne.n	8004c28 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c1c:	893b      	ldrh	r3, [r7, #8]
 8004c1e:	b2da      	uxtb	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	611a      	str	r2, [r3, #16]
 8004c26:	e021      	b.n	8004c6c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c28:	893b      	ldrh	r3, [r7, #8]
 8004c2a:	0a1b      	lsrs	r3, r3, #8
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	b2da      	uxtb	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c38:	6a39      	ldr	r1, [r7, #32]
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f000 fa20 	bl	8005080 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00d      	beq.n	8004c62 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4a:	2b04      	cmp	r3, #4
 8004c4c:	d107      	bne.n	8004c5e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c5c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e005      	b.n	8004c6e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c62:	893b      	ldrh	r3, [r7, #8]
 8004c64:	b2da      	uxtb	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3718      	adds	r7, #24
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	00010002 	.word	0x00010002

08004c7c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b088      	sub	sp, #32
 8004c80:	af02      	add	r7, sp, #8
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	4608      	mov	r0, r1
 8004c86:	4611      	mov	r1, r2
 8004c88:	461a      	mov	r2, r3
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	817b      	strh	r3, [r7, #10]
 8004c8e:	460b      	mov	r3, r1
 8004c90:	813b      	strh	r3, [r7, #8]
 8004c92:	4613      	mov	r3, r2
 8004c94:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ca4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cb4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb8:	9300      	str	r3, [sp, #0]
 8004cba:	6a3b      	ldr	r3, [r7, #32]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004cc2:	68f8      	ldr	r0, [r7, #12]
 8004cc4:	f000 f8c2 	bl	8004e4c <I2C_WaitOnFlagUntilTimeout>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00d      	beq.n	8004cea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cdc:	d103      	bne.n	8004ce6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ce4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e0aa      	b.n	8004e40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004cea:	897b      	ldrh	r3, [r7, #10]
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	461a      	mov	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004cf8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfc:	6a3a      	ldr	r2, [r7, #32]
 8004cfe:	4952      	ldr	r1, [pc, #328]	; (8004e48 <I2C_RequestMemoryRead+0x1cc>)
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f000 f91d 	bl	8004f40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d001      	beq.n	8004d10 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e097      	b.n	8004e40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d10:	2300      	movs	r3, #0
 8004d12:	617b      	str	r3, [r7, #20]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	617b      	str	r3, [r7, #20]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	617b      	str	r3, [r7, #20]
 8004d24:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d28:	6a39      	ldr	r1, [r7, #32]
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f000 f9a8 	bl	8005080 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00d      	beq.n	8004d52 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3a:	2b04      	cmp	r3, #4
 8004d3c:	d107      	bne.n	8004d4e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e076      	b.n	8004e40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d52:	88fb      	ldrh	r3, [r7, #6]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d105      	bne.n	8004d64 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d58:	893b      	ldrh	r3, [r7, #8]
 8004d5a:	b2da      	uxtb	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	611a      	str	r2, [r3, #16]
 8004d62:	e021      	b.n	8004da8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004d64:	893b      	ldrh	r3, [r7, #8]
 8004d66:	0a1b      	lsrs	r3, r3, #8
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	b2da      	uxtb	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d74:	6a39      	ldr	r1, [r7, #32]
 8004d76:	68f8      	ldr	r0, [r7, #12]
 8004d78:	f000 f982 	bl	8005080 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00d      	beq.n	8004d9e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d86:	2b04      	cmp	r3, #4
 8004d88:	d107      	bne.n	8004d9a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d98:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e050      	b.n	8004e40 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d9e:	893b      	ldrh	r3, [r7, #8]
 8004da0:	b2da      	uxtb	r2, r3
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004daa:	6a39      	ldr	r1, [r7, #32]
 8004dac:	68f8      	ldr	r0, [r7, #12]
 8004dae:	f000 f967 	bl	8005080 <I2C_WaitOnTXEFlagUntilTimeout>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00d      	beq.n	8004dd4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbc:	2b04      	cmp	r3, #4
 8004dbe:	d107      	bne.n	8004dd0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e035      	b.n	8004e40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004de2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de6:	9300      	str	r3, [sp, #0]
 8004de8:	6a3b      	ldr	r3, [r7, #32]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004df0:	68f8      	ldr	r0, [r7, #12]
 8004df2:	f000 f82b 	bl	8004e4c <I2C_WaitOnFlagUntilTimeout>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00d      	beq.n	8004e18 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e0a:	d103      	bne.n	8004e14 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e013      	b.n	8004e40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004e18:	897b      	ldrh	r3, [r7, #10]
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	f043 0301 	orr.w	r3, r3, #1
 8004e20:	b2da      	uxtb	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2a:	6a3a      	ldr	r2, [r7, #32]
 8004e2c:	4906      	ldr	r1, [pc, #24]	; (8004e48 <I2C_RequestMemoryRead+0x1cc>)
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	f000 f886 	bl	8004f40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d001      	beq.n	8004e3e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e000      	b.n	8004e40 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3718      	adds	r7, #24
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	00010002 	.word	0x00010002

08004e4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	603b      	str	r3, [r7, #0]
 8004e58:	4613      	mov	r3, r2
 8004e5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e5c:	e048      	b.n	8004ef0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e64:	d044      	beq.n	8004ef0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e66:	f7fe f971 	bl	800314c <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	683a      	ldr	r2, [r7, #0]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d302      	bcc.n	8004e7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d139      	bne.n	8004ef0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	0c1b      	lsrs	r3, r3, #16
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d10d      	bne.n	8004ea2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	695b      	ldr	r3, [r3, #20]
 8004e8c:	43da      	mvns	r2, r3
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	4013      	ands	r3, r2
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	bf0c      	ite	eq
 8004e98:	2301      	moveq	r3, #1
 8004e9a:	2300      	movne	r3, #0
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	e00c      	b.n	8004ebc <I2C_WaitOnFlagUntilTimeout+0x70>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	43da      	mvns	r2, r3
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	4013      	ands	r3, r2
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	bf0c      	ite	eq
 8004eb4:	2301      	moveq	r3, #1
 8004eb6:	2300      	movne	r3, #0
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	461a      	mov	r2, r3
 8004ebc:	79fb      	ldrb	r3, [r7, #7]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d116      	bne.n	8004ef0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004edc:	f043 0220 	orr.w	r2, r3, #32
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e023      	b.n	8004f38 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	0c1b      	lsrs	r3, r3, #16
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d10d      	bne.n	8004f16 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	695b      	ldr	r3, [r3, #20]
 8004f00:	43da      	mvns	r2, r3
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	4013      	ands	r3, r2
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	bf0c      	ite	eq
 8004f0c:	2301      	moveq	r3, #1
 8004f0e:	2300      	movne	r3, #0
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	461a      	mov	r2, r3
 8004f14:	e00c      	b.n	8004f30 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	43da      	mvns	r2, r3
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	4013      	ands	r3, r2
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	bf0c      	ite	eq
 8004f28:	2301      	moveq	r3, #1
 8004f2a:	2300      	movne	r3, #0
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	461a      	mov	r2, r3
 8004f30:	79fb      	ldrb	r3, [r7, #7]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d093      	beq.n	8004e5e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
 8004f4c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f4e:	e071      	b.n	8005034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f5e:	d123      	bne.n	8004fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f6e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2220      	movs	r2, #32
 8004f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f94:	f043 0204 	orr.w	r2, r3, #4
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e067      	b.n	8005078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fae:	d041      	beq.n	8005034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fb0:	f7fe f8cc 	bl	800314c <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d302      	bcc.n	8004fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d136      	bne.n	8005034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	0c1b      	lsrs	r3, r3, #16
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d10c      	bne.n	8004fea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	43da      	mvns	r2, r3
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	4013      	ands	r3, r2
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	bf14      	ite	ne
 8004fe2:	2301      	movne	r3, #1
 8004fe4:	2300      	moveq	r3, #0
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	e00b      	b.n	8005002 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	699b      	ldr	r3, [r3, #24]
 8004ff0:	43da      	mvns	r2, r3
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	bf14      	ite	ne
 8004ffc:	2301      	movne	r3, #1
 8004ffe:	2300      	moveq	r3, #0
 8005000:	b2db      	uxtb	r3, r3
 8005002:	2b00      	cmp	r3, #0
 8005004:	d016      	beq.n	8005034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2220      	movs	r2, #32
 8005010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005020:	f043 0220 	orr.w	r2, r3, #32
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e021      	b.n	8005078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	0c1b      	lsrs	r3, r3, #16
 8005038:	b2db      	uxtb	r3, r3
 800503a:	2b01      	cmp	r3, #1
 800503c:	d10c      	bne.n	8005058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	695b      	ldr	r3, [r3, #20]
 8005044:	43da      	mvns	r2, r3
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	4013      	ands	r3, r2
 800504a:	b29b      	uxth	r3, r3
 800504c:	2b00      	cmp	r3, #0
 800504e:	bf14      	ite	ne
 8005050:	2301      	movne	r3, #1
 8005052:	2300      	moveq	r3, #0
 8005054:	b2db      	uxtb	r3, r3
 8005056:	e00b      	b.n	8005070 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	43da      	mvns	r2, r3
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	4013      	ands	r3, r2
 8005064:	b29b      	uxth	r3, r3
 8005066:	2b00      	cmp	r3, #0
 8005068:	bf14      	ite	ne
 800506a:	2301      	movne	r3, #1
 800506c:	2300      	moveq	r3, #0
 800506e:	b2db      	uxtb	r3, r3
 8005070:	2b00      	cmp	r3, #0
 8005072:	f47f af6d 	bne.w	8004f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3710      	adds	r7, #16
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800508c:	e034      	b.n	80050f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	f000 f8e3 	bl	800525a <I2C_IsAcknowledgeFailed>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d001      	beq.n	800509e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e034      	b.n	8005108 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a4:	d028      	beq.n	80050f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050a6:	f7fe f851 	bl	800314c <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	68ba      	ldr	r2, [r7, #8]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d302      	bcc.n	80050bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d11d      	bne.n	80050f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050c6:	2b80      	cmp	r3, #128	; 0x80
 80050c8:	d016      	beq.n	80050f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2200      	movs	r2, #0
 80050ce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2220      	movs	r2, #32
 80050d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e4:	f043 0220 	orr.w	r2, r3, #32
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e007      	b.n	8005108 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	695b      	ldr	r3, [r3, #20]
 80050fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005102:	2b80      	cmp	r3, #128	; 0x80
 8005104:	d1c3      	bne.n	800508e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005106:	2300      	movs	r3, #0
}
 8005108:	4618      	mov	r0, r3
 800510a:	3710      	adds	r7, #16
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800511c:	e034      	b.n	8005188 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	f000 f89b 	bl	800525a <I2C_IsAcknowledgeFailed>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d001      	beq.n	800512e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e034      	b.n	8005198 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005134:	d028      	beq.n	8005188 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005136:	f7fe f809 	bl	800314c <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	68ba      	ldr	r2, [r7, #8]
 8005142:	429a      	cmp	r2, r3
 8005144:	d302      	bcc.n	800514c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d11d      	bne.n	8005188 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	f003 0304 	and.w	r3, r3, #4
 8005156:	2b04      	cmp	r3, #4
 8005158:	d016      	beq.n	8005188 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2220      	movs	r2, #32
 8005164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005174:	f043 0220 	orr.w	r2, r3, #32
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e007      	b.n	8005198 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	f003 0304 	and.w	r3, r3, #4
 8005192:	2b04      	cmp	r3, #4
 8005194:	d1c3      	bne.n	800511e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	3710      	adds	r7, #16
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80051ac:	e049      	b.n	8005242 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	695b      	ldr	r3, [r3, #20]
 80051b4:	f003 0310 	and.w	r3, r3, #16
 80051b8:	2b10      	cmp	r3, #16
 80051ba:	d119      	bne.n	80051f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f06f 0210 	mvn.w	r2, #16
 80051c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2220      	movs	r2, #32
 80051d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e030      	b.n	8005252 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051f0:	f7fd ffac 	bl	800314c <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	68ba      	ldr	r2, [r7, #8]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d302      	bcc.n	8005206 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d11d      	bne.n	8005242 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	695b      	ldr	r3, [r3, #20]
 800520c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005210:	2b40      	cmp	r3, #64	; 0x40
 8005212:	d016      	beq.n	8005242 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2200      	movs	r2, #0
 8005218:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2220      	movs	r2, #32
 800521e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522e:	f043 0220 	orr.w	r2, r3, #32
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e007      	b.n	8005252 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	695b      	ldr	r3, [r3, #20]
 8005248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800524c:	2b40      	cmp	r3, #64	; 0x40
 800524e:	d1ae      	bne.n	80051ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}

0800525a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800525a:	b480      	push	{r7}
 800525c:	b083      	sub	sp, #12
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	695b      	ldr	r3, [r3, #20]
 8005268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800526c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005270:	d11b      	bne.n	80052aa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800527a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2220      	movs	r2, #32
 8005286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005296:	f043 0204 	orr.w	r2, r3, #4
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e000      	b.n	80052ac <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80052aa:	2300      	movs	r3, #0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bc80      	pop	{r7}
 80052b4:	4770      	bx	lr
	...

080052b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b086      	sub	sp, #24
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d101      	bne.n	80052ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e272      	b.n	80057b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	f000 8087 	beq.w	80053e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80052d8:	4b92      	ldr	r3, [pc, #584]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	f003 030c 	and.w	r3, r3, #12
 80052e0:	2b04      	cmp	r3, #4
 80052e2:	d00c      	beq.n	80052fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80052e4:	4b8f      	ldr	r3, [pc, #572]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f003 030c 	and.w	r3, r3, #12
 80052ec:	2b08      	cmp	r3, #8
 80052ee:	d112      	bne.n	8005316 <HAL_RCC_OscConfig+0x5e>
 80052f0:	4b8c      	ldr	r3, [pc, #560]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052fc:	d10b      	bne.n	8005316 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052fe:	4b89      	ldr	r3, [pc, #548]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d06c      	beq.n	80053e4 <HAL_RCC_OscConfig+0x12c>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d168      	bne.n	80053e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e24c      	b.n	80057b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800531e:	d106      	bne.n	800532e <HAL_RCC_OscConfig+0x76>
 8005320:	4b80      	ldr	r3, [pc, #512]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a7f      	ldr	r2, [pc, #508]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 8005326:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800532a:	6013      	str	r3, [r2, #0]
 800532c:	e02e      	b.n	800538c <HAL_RCC_OscConfig+0xd4>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d10c      	bne.n	8005350 <HAL_RCC_OscConfig+0x98>
 8005336:	4b7b      	ldr	r3, [pc, #492]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a7a      	ldr	r2, [pc, #488]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 800533c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005340:	6013      	str	r3, [r2, #0]
 8005342:	4b78      	ldr	r3, [pc, #480]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a77      	ldr	r2, [pc, #476]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 8005348:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800534c:	6013      	str	r3, [r2, #0]
 800534e:	e01d      	b.n	800538c <HAL_RCC_OscConfig+0xd4>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005358:	d10c      	bne.n	8005374 <HAL_RCC_OscConfig+0xbc>
 800535a:	4b72      	ldr	r3, [pc, #456]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a71      	ldr	r2, [pc, #452]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 8005360:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005364:	6013      	str	r3, [r2, #0]
 8005366:	4b6f      	ldr	r3, [pc, #444]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a6e      	ldr	r2, [pc, #440]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 800536c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005370:	6013      	str	r3, [r2, #0]
 8005372:	e00b      	b.n	800538c <HAL_RCC_OscConfig+0xd4>
 8005374:	4b6b      	ldr	r3, [pc, #428]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a6a      	ldr	r2, [pc, #424]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 800537a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800537e:	6013      	str	r3, [r2, #0]
 8005380:	4b68      	ldr	r3, [pc, #416]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a67      	ldr	r2, [pc, #412]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 8005386:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800538a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d013      	beq.n	80053bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005394:	f7fd feda 	bl	800314c <HAL_GetTick>
 8005398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800539a:	e008      	b.n	80053ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800539c:	f7fd fed6 	bl	800314c <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	2b64      	cmp	r3, #100	; 0x64
 80053a8:	d901      	bls.n	80053ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e200      	b.n	80057b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ae:	4b5d      	ldr	r3, [pc, #372]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d0f0      	beq.n	800539c <HAL_RCC_OscConfig+0xe4>
 80053ba:	e014      	b.n	80053e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053bc:	f7fd fec6 	bl	800314c <HAL_GetTick>
 80053c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053c2:	e008      	b.n	80053d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053c4:	f7fd fec2 	bl	800314c <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	2b64      	cmp	r3, #100	; 0x64
 80053d0:	d901      	bls.n	80053d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e1ec      	b.n	80057b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053d6:	4b53      	ldr	r3, [pc, #332]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1f0      	bne.n	80053c4 <HAL_RCC_OscConfig+0x10c>
 80053e2:	e000      	b.n	80053e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d063      	beq.n	80054ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80053f2:	4b4c      	ldr	r3, [pc, #304]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f003 030c 	and.w	r3, r3, #12
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00b      	beq.n	8005416 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80053fe:	4b49      	ldr	r3, [pc, #292]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f003 030c 	and.w	r3, r3, #12
 8005406:	2b08      	cmp	r3, #8
 8005408:	d11c      	bne.n	8005444 <HAL_RCC_OscConfig+0x18c>
 800540a:	4b46      	ldr	r3, [pc, #280]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d116      	bne.n	8005444 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005416:	4b43      	ldr	r3, [pc, #268]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 0302 	and.w	r3, r3, #2
 800541e:	2b00      	cmp	r3, #0
 8005420:	d005      	beq.n	800542e <HAL_RCC_OscConfig+0x176>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	2b01      	cmp	r3, #1
 8005428:	d001      	beq.n	800542e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e1c0      	b.n	80057b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800542e:	4b3d      	ldr	r3, [pc, #244]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	00db      	lsls	r3, r3, #3
 800543c:	4939      	ldr	r1, [pc, #228]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 800543e:	4313      	orrs	r3, r2
 8005440:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005442:	e03a      	b.n	80054ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d020      	beq.n	800548e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800544c:	4b36      	ldr	r3, [pc, #216]	; (8005528 <HAL_RCC_OscConfig+0x270>)
 800544e:	2201      	movs	r2, #1
 8005450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005452:	f7fd fe7b 	bl	800314c <HAL_GetTick>
 8005456:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005458:	e008      	b.n	800546c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800545a:	f7fd fe77 	bl	800314c <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	2b02      	cmp	r3, #2
 8005466:	d901      	bls.n	800546c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e1a1      	b.n	80057b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800546c:	4b2d      	ldr	r3, [pc, #180]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0302 	and.w	r3, r3, #2
 8005474:	2b00      	cmp	r3, #0
 8005476:	d0f0      	beq.n	800545a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005478:	4b2a      	ldr	r3, [pc, #168]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	695b      	ldr	r3, [r3, #20]
 8005484:	00db      	lsls	r3, r3, #3
 8005486:	4927      	ldr	r1, [pc, #156]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 8005488:	4313      	orrs	r3, r2
 800548a:	600b      	str	r3, [r1, #0]
 800548c:	e015      	b.n	80054ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800548e:	4b26      	ldr	r3, [pc, #152]	; (8005528 <HAL_RCC_OscConfig+0x270>)
 8005490:	2200      	movs	r2, #0
 8005492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005494:	f7fd fe5a 	bl	800314c <HAL_GetTick>
 8005498:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800549a:	e008      	b.n	80054ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800549c:	f7fd fe56 	bl	800314c <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d901      	bls.n	80054ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e180      	b.n	80057b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054ae:	4b1d      	ldr	r3, [pc, #116]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0302 	and.w	r3, r3, #2
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d1f0      	bne.n	800549c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0308 	and.w	r3, r3, #8
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d03a      	beq.n	800553c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d019      	beq.n	8005502 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054ce:	4b17      	ldr	r3, [pc, #92]	; (800552c <HAL_RCC_OscConfig+0x274>)
 80054d0:	2201      	movs	r2, #1
 80054d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054d4:	f7fd fe3a 	bl	800314c <HAL_GetTick>
 80054d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054da:	e008      	b.n	80054ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054dc:	f7fd fe36 	bl	800314c <HAL_GetTick>
 80054e0:	4602      	mov	r2, r0
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d901      	bls.n	80054ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e160      	b.n	80057b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054ee:	4b0d      	ldr	r3, [pc, #52]	; (8005524 <HAL_RCC_OscConfig+0x26c>)
 80054f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f2:	f003 0302 	and.w	r3, r3, #2
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d0f0      	beq.n	80054dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80054fa:	2001      	movs	r0, #1
 80054fc:	f000 face 	bl	8005a9c <RCC_Delay>
 8005500:	e01c      	b.n	800553c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005502:	4b0a      	ldr	r3, [pc, #40]	; (800552c <HAL_RCC_OscConfig+0x274>)
 8005504:	2200      	movs	r2, #0
 8005506:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005508:	f7fd fe20 	bl	800314c <HAL_GetTick>
 800550c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800550e:	e00f      	b.n	8005530 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005510:	f7fd fe1c 	bl	800314c <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	2b02      	cmp	r3, #2
 800551c:	d908      	bls.n	8005530 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e146      	b.n	80057b0 <HAL_RCC_OscConfig+0x4f8>
 8005522:	bf00      	nop
 8005524:	40021000 	.word	0x40021000
 8005528:	42420000 	.word	0x42420000
 800552c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005530:	4b92      	ldr	r3, [pc, #584]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 8005532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005534:	f003 0302 	and.w	r3, r3, #2
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1e9      	bne.n	8005510 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0304 	and.w	r3, r3, #4
 8005544:	2b00      	cmp	r3, #0
 8005546:	f000 80a6 	beq.w	8005696 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800554a:	2300      	movs	r3, #0
 800554c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800554e:	4b8b      	ldr	r3, [pc, #556]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 8005550:	69db      	ldr	r3, [r3, #28]
 8005552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d10d      	bne.n	8005576 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800555a:	4b88      	ldr	r3, [pc, #544]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 800555c:	69db      	ldr	r3, [r3, #28]
 800555e:	4a87      	ldr	r2, [pc, #540]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 8005560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005564:	61d3      	str	r3, [r2, #28]
 8005566:	4b85      	ldr	r3, [pc, #532]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 8005568:	69db      	ldr	r3, [r3, #28]
 800556a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800556e:	60bb      	str	r3, [r7, #8]
 8005570:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005572:	2301      	movs	r3, #1
 8005574:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005576:	4b82      	ldr	r3, [pc, #520]	; (8005780 <HAL_RCC_OscConfig+0x4c8>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800557e:	2b00      	cmp	r3, #0
 8005580:	d118      	bne.n	80055b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005582:	4b7f      	ldr	r3, [pc, #508]	; (8005780 <HAL_RCC_OscConfig+0x4c8>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a7e      	ldr	r2, [pc, #504]	; (8005780 <HAL_RCC_OscConfig+0x4c8>)
 8005588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800558c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800558e:	f7fd fddd 	bl	800314c <HAL_GetTick>
 8005592:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005594:	e008      	b.n	80055a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005596:	f7fd fdd9 	bl	800314c <HAL_GetTick>
 800559a:	4602      	mov	r2, r0
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	2b64      	cmp	r3, #100	; 0x64
 80055a2:	d901      	bls.n	80055a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e103      	b.n	80057b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055a8:	4b75      	ldr	r3, [pc, #468]	; (8005780 <HAL_RCC_OscConfig+0x4c8>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d0f0      	beq.n	8005596 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d106      	bne.n	80055ca <HAL_RCC_OscConfig+0x312>
 80055bc:	4b6f      	ldr	r3, [pc, #444]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 80055be:	6a1b      	ldr	r3, [r3, #32]
 80055c0:	4a6e      	ldr	r2, [pc, #440]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 80055c2:	f043 0301 	orr.w	r3, r3, #1
 80055c6:	6213      	str	r3, [r2, #32]
 80055c8:	e02d      	b.n	8005626 <HAL_RCC_OscConfig+0x36e>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10c      	bne.n	80055ec <HAL_RCC_OscConfig+0x334>
 80055d2:	4b6a      	ldr	r3, [pc, #424]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	4a69      	ldr	r2, [pc, #420]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 80055d8:	f023 0301 	bic.w	r3, r3, #1
 80055dc:	6213      	str	r3, [r2, #32]
 80055de:	4b67      	ldr	r3, [pc, #412]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	4a66      	ldr	r2, [pc, #408]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 80055e4:	f023 0304 	bic.w	r3, r3, #4
 80055e8:	6213      	str	r3, [r2, #32]
 80055ea:	e01c      	b.n	8005626 <HAL_RCC_OscConfig+0x36e>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	2b05      	cmp	r3, #5
 80055f2:	d10c      	bne.n	800560e <HAL_RCC_OscConfig+0x356>
 80055f4:	4b61      	ldr	r3, [pc, #388]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 80055f6:	6a1b      	ldr	r3, [r3, #32]
 80055f8:	4a60      	ldr	r2, [pc, #384]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 80055fa:	f043 0304 	orr.w	r3, r3, #4
 80055fe:	6213      	str	r3, [r2, #32]
 8005600:	4b5e      	ldr	r3, [pc, #376]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 8005602:	6a1b      	ldr	r3, [r3, #32]
 8005604:	4a5d      	ldr	r2, [pc, #372]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 8005606:	f043 0301 	orr.w	r3, r3, #1
 800560a:	6213      	str	r3, [r2, #32]
 800560c:	e00b      	b.n	8005626 <HAL_RCC_OscConfig+0x36e>
 800560e:	4b5b      	ldr	r3, [pc, #364]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 8005610:	6a1b      	ldr	r3, [r3, #32]
 8005612:	4a5a      	ldr	r2, [pc, #360]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 8005614:	f023 0301 	bic.w	r3, r3, #1
 8005618:	6213      	str	r3, [r2, #32]
 800561a:	4b58      	ldr	r3, [pc, #352]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	4a57      	ldr	r2, [pc, #348]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 8005620:	f023 0304 	bic.w	r3, r3, #4
 8005624:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d015      	beq.n	800565a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800562e:	f7fd fd8d 	bl	800314c <HAL_GetTick>
 8005632:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005634:	e00a      	b.n	800564c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005636:	f7fd fd89 	bl	800314c <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	f241 3288 	movw	r2, #5000	; 0x1388
 8005644:	4293      	cmp	r3, r2
 8005646:	d901      	bls.n	800564c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e0b1      	b.n	80057b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800564c:	4b4b      	ldr	r3, [pc, #300]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 800564e:	6a1b      	ldr	r3, [r3, #32]
 8005650:	f003 0302 	and.w	r3, r3, #2
 8005654:	2b00      	cmp	r3, #0
 8005656:	d0ee      	beq.n	8005636 <HAL_RCC_OscConfig+0x37e>
 8005658:	e014      	b.n	8005684 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800565a:	f7fd fd77 	bl	800314c <HAL_GetTick>
 800565e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005660:	e00a      	b.n	8005678 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005662:	f7fd fd73 	bl	800314c <HAL_GetTick>
 8005666:	4602      	mov	r2, r0
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005670:	4293      	cmp	r3, r2
 8005672:	d901      	bls.n	8005678 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e09b      	b.n	80057b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005678:	4b40      	ldr	r3, [pc, #256]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 800567a:	6a1b      	ldr	r3, [r3, #32]
 800567c:	f003 0302 	and.w	r3, r3, #2
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1ee      	bne.n	8005662 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005684:	7dfb      	ldrb	r3, [r7, #23]
 8005686:	2b01      	cmp	r3, #1
 8005688:	d105      	bne.n	8005696 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800568a:	4b3c      	ldr	r3, [pc, #240]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 800568c:	69db      	ldr	r3, [r3, #28]
 800568e:	4a3b      	ldr	r2, [pc, #236]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 8005690:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005694:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	69db      	ldr	r3, [r3, #28]
 800569a:	2b00      	cmp	r3, #0
 800569c:	f000 8087 	beq.w	80057ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80056a0:	4b36      	ldr	r3, [pc, #216]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	f003 030c 	and.w	r3, r3, #12
 80056a8:	2b08      	cmp	r3, #8
 80056aa:	d061      	beq.n	8005770 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	69db      	ldr	r3, [r3, #28]
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d146      	bne.n	8005742 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056b4:	4b33      	ldr	r3, [pc, #204]	; (8005784 <HAL_RCC_OscConfig+0x4cc>)
 80056b6:	2200      	movs	r2, #0
 80056b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ba:	f7fd fd47 	bl	800314c <HAL_GetTick>
 80056be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056c0:	e008      	b.n	80056d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056c2:	f7fd fd43 	bl	800314c <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d901      	bls.n	80056d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e06d      	b.n	80057b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056d4:	4b29      	ldr	r3, [pc, #164]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1f0      	bne.n	80056c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a1b      	ldr	r3, [r3, #32]
 80056e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056e8:	d108      	bne.n	80056fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80056ea:	4b24      	ldr	r3, [pc, #144]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	4921      	ldr	r1, [pc, #132]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 80056f8:	4313      	orrs	r3, r2
 80056fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056fc:	4b1f      	ldr	r3, [pc, #124]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a19      	ldr	r1, [r3, #32]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570c:	430b      	orrs	r3, r1
 800570e:	491b      	ldr	r1, [pc, #108]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 8005710:	4313      	orrs	r3, r2
 8005712:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005714:	4b1b      	ldr	r3, [pc, #108]	; (8005784 <HAL_RCC_OscConfig+0x4cc>)
 8005716:	2201      	movs	r2, #1
 8005718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800571a:	f7fd fd17 	bl	800314c <HAL_GetTick>
 800571e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005720:	e008      	b.n	8005734 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005722:	f7fd fd13 	bl	800314c <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	2b02      	cmp	r3, #2
 800572e:	d901      	bls.n	8005734 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e03d      	b.n	80057b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005734:	4b11      	ldr	r3, [pc, #68]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d0f0      	beq.n	8005722 <HAL_RCC_OscConfig+0x46a>
 8005740:	e035      	b.n	80057ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005742:	4b10      	ldr	r3, [pc, #64]	; (8005784 <HAL_RCC_OscConfig+0x4cc>)
 8005744:	2200      	movs	r2, #0
 8005746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005748:	f7fd fd00 	bl	800314c <HAL_GetTick>
 800574c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800574e:	e008      	b.n	8005762 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005750:	f7fd fcfc 	bl	800314c <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	2b02      	cmp	r3, #2
 800575c:	d901      	bls.n	8005762 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	e026      	b.n	80057b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005762:	4b06      	ldr	r3, [pc, #24]	; (800577c <HAL_RCC_OscConfig+0x4c4>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1f0      	bne.n	8005750 <HAL_RCC_OscConfig+0x498>
 800576e:	e01e      	b.n	80057ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	69db      	ldr	r3, [r3, #28]
 8005774:	2b01      	cmp	r3, #1
 8005776:	d107      	bne.n	8005788 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e019      	b.n	80057b0 <HAL_RCC_OscConfig+0x4f8>
 800577c:	40021000 	.word	0x40021000
 8005780:	40007000 	.word	0x40007000
 8005784:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005788:	4b0b      	ldr	r3, [pc, #44]	; (80057b8 <HAL_RCC_OscConfig+0x500>)
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a1b      	ldr	r3, [r3, #32]
 8005798:	429a      	cmp	r2, r3
 800579a:	d106      	bne.n	80057aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d001      	beq.n	80057ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e000      	b.n	80057b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3718      	adds	r7, #24
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	40021000 	.word	0x40021000

080057bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d101      	bne.n	80057d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e0d0      	b.n	8005972 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80057d0:	4b6a      	ldr	r3, [pc, #424]	; (800597c <HAL_RCC_ClockConfig+0x1c0>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0307 	and.w	r3, r3, #7
 80057d8:	683a      	ldr	r2, [r7, #0]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d910      	bls.n	8005800 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057de:	4b67      	ldr	r3, [pc, #412]	; (800597c <HAL_RCC_ClockConfig+0x1c0>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f023 0207 	bic.w	r2, r3, #7
 80057e6:	4965      	ldr	r1, [pc, #404]	; (800597c <HAL_RCC_ClockConfig+0x1c0>)
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ee:	4b63      	ldr	r3, [pc, #396]	; (800597c <HAL_RCC_ClockConfig+0x1c0>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0307 	and.w	r3, r3, #7
 80057f6:	683a      	ldr	r2, [r7, #0]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d001      	beq.n	8005800 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e0b8      	b.n	8005972 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0302 	and.w	r3, r3, #2
 8005808:	2b00      	cmp	r3, #0
 800580a:	d020      	beq.n	800584e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0304 	and.w	r3, r3, #4
 8005814:	2b00      	cmp	r3, #0
 8005816:	d005      	beq.n	8005824 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005818:	4b59      	ldr	r3, [pc, #356]	; (8005980 <HAL_RCC_ClockConfig+0x1c4>)
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	4a58      	ldr	r2, [pc, #352]	; (8005980 <HAL_RCC_ClockConfig+0x1c4>)
 800581e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005822:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0308 	and.w	r3, r3, #8
 800582c:	2b00      	cmp	r3, #0
 800582e:	d005      	beq.n	800583c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005830:	4b53      	ldr	r3, [pc, #332]	; (8005980 <HAL_RCC_ClockConfig+0x1c4>)
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	4a52      	ldr	r2, [pc, #328]	; (8005980 <HAL_RCC_ClockConfig+0x1c4>)
 8005836:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800583a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800583c:	4b50      	ldr	r3, [pc, #320]	; (8005980 <HAL_RCC_ClockConfig+0x1c4>)
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	494d      	ldr	r1, [pc, #308]	; (8005980 <HAL_RCC_ClockConfig+0x1c4>)
 800584a:	4313      	orrs	r3, r2
 800584c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0301 	and.w	r3, r3, #1
 8005856:	2b00      	cmp	r3, #0
 8005858:	d040      	beq.n	80058dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d107      	bne.n	8005872 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005862:	4b47      	ldr	r3, [pc, #284]	; (8005980 <HAL_RCC_ClockConfig+0x1c4>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d115      	bne.n	800589a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e07f      	b.n	8005972 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	2b02      	cmp	r3, #2
 8005878:	d107      	bne.n	800588a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800587a:	4b41      	ldr	r3, [pc, #260]	; (8005980 <HAL_RCC_ClockConfig+0x1c4>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d109      	bne.n	800589a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e073      	b.n	8005972 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800588a:	4b3d      	ldr	r3, [pc, #244]	; (8005980 <HAL_RCC_ClockConfig+0x1c4>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0302 	and.w	r3, r3, #2
 8005892:	2b00      	cmp	r3, #0
 8005894:	d101      	bne.n	800589a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e06b      	b.n	8005972 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800589a:	4b39      	ldr	r3, [pc, #228]	; (8005980 <HAL_RCC_ClockConfig+0x1c4>)
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	f023 0203 	bic.w	r2, r3, #3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	4936      	ldr	r1, [pc, #216]	; (8005980 <HAL_RCC_ClockConfig+0x1c4>)
 80058a8:	4313      	orrs	r3, r2
 80058aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058ac:	f7fd fc4e 	bl	800314c <HAL_GetTick>
 80058b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058b2:	e00a      	b.n	80058ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058b4:	f7fd fc4a 	bl	800314c <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	f241 3288 	movw	r2, #5000	; 0x1388
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d901      	bls.n	80058ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	e053      	b.n	8005972 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058ca:	4b2d      	ldr	r3, [pc, #180]	; (8005980 <HAL_RCC_ClockConfig+0x1c4>)
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	f003 020c 	and.w	r2, r3, #12
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	429a      	cmp	r2, r3
 80058da:	d1eb      	bne.n	80058b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80058dc:	4b27      	ldr	r3, [pc, #156]	; (800597c <HAL_RCC_ClockConfig+0x1c0>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0307 	and.w	r3, r3, #7
 80058e4:	683a      	ldr	r2, [r7, #0]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d210      	bcs.n	800590c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058ea:	4b24      	ldr	r3, [pc, #144]	; (800597c <HAL_RCC_ClockConfig+0x1c0>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f023 0207 	bic.w	r2, r3, #7
 80058f2:	4922      	ldr	r1, [pc, #136]	; (800597c <HAL_RCC_ClockConfig+0x1c0>)
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058fa:	4b20      	ldr	r3, [pc, #128]	; (800597c <HAL_RCC_ClockConfig+0x1c0>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0307 	and.w	r3, r3, #7
 8005902:	683a      	ldr	r2, [r7, #0]
 8005904:	429a      	cmp	r2, r3
 8005906:	d001      	beq.n	800590c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e032      	b.n	8005972 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0304 	and.w	r3, r3, #4
 8005914:	2b00      	cmp	r3, #0
 8005916:	d008      	beq.n	800592a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005918:	4b19      	ldr	r3, [pc, #100]	; (8005980 <HAL_RCC_ClockConfig+0x1c4>)
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	4916      	ldr	r1, [pc, #88]	; (8005980 <HAL_RCC_ClockConfig+0x1c4>)
 8005926:	4313      	orrs	r3, r2
 8005928:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0308 	and.w	r3, r3, #8
 8005932:	2b00      	cmp	r3, #0
 8005934:	d009      	beq.n	800594a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005936:	4b12      	ldr	r3, [pc, #72]	; (8005980 <HAL_RCC_ClockConfig+0x1c4>)
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	00db      	lsls	r3, r3, #3
 8005944:	490e      	ldr	r1, [pc, #56]	; (8005980 <HAL_RCC_ClockConfig+0x1c4>)
 8005946:	4313      	orrs	r3, r2
 8005948:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800594a:	f000 f821 	bl	8005990 <HAL_RCC_GetSysClockFreq>
 800594e:	4602      	mov	r2, r0
 8005950:	4b0b      	ldr	r3, [pc, #44]	; (8005980 <HAL_RCC_ClockConfig+0x1c4>)
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	091b      	lsrs	r3, r3, #4
 8005956:	f003 030f 	and.w	r3, r3, #15
 800595a:	490a      	ldr	r1, [pc, #40]	; (8005984 <HAL_RCC_ClockConfig+0x1c8>)
 800595c:	5ccb      	ldrb	r3, [r1, r3]
 800595e:	fa22 f303 	lsr.w	r3, r2, r3
 8005962:	4a09      	ldr	r2, [pc, #36]	; (8005988 <HAL_RCC_ClockConfig+0x1cc>)
 8005964:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005966:	4b09      	ldr	r3, [pc, #36]	; (800598c <HAL_RCC_ClockConfig+0x1d0>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4618      	mov	r0, r3
 800596c:	f7fd fbac 	bl	80030c8 <HAL_InitTick>

  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3710      	adds	r7, #16
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	40022000 	.word	0x40022000
 8005980:	40021000 	.word	0x40021000
 8005984:	0800750c 	.word	0x0800750c
 8005988:	20000000 	.word	0x20000000
 800598c:	20000004 	.word	0x20000004

08005990 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005990:	b480      	push	{r7}
 8005992:	b087      	sub	sp, #28
 8005994:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005996:	2300      	movs	r3, #0
 8005998:	60fb      	str	r3, [r7, #12]
 800599a:	2300      	movs	r3, #0
 800599c:	60bb      	str	r3, [r7, #8]
 800599e:	2300      	movs	r3, #0
 80059a0:	617b      	str	r3, [r7, #20]
 80059a2:	2300      	movs	r3, #0
 80059a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80059a6:	2300      	movs	r3, #0
 80059a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80059aa:	4b1e      	ldr	r3, [pc, #120]	; (8005a24 <HAL_RCC_GetSysClockFreq+0x94>)
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f003 030c 	and.w	r3, r3, #12
 80059b6:	2b04      	cmp	r3, #4
 80059b8:	d002      	beq.n	80059c0 <HAL_RCC_GetSysClockFreq+0x30>
 80059ba:	2b08      	cmp	r3, #8
 80059bc:	d003      	beq.n	80059c6 <HAL_RCC_GetSysClockFreq+0x36>
 80059be:	e027      	b.n	8005a10 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80059c0:	4b19      	ldr	r3, [pc, #100]	; (8005a28 <HAL_RCC_GetSysClockFreq+0x98>)
 80059c2:	613b      	str	r3, [r7, #16]
      break;
 80059c4:	e027      	b.n	8005a16 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	0c9b      	lsrs	r3, r3, #18
 80059ca:	f003 030f 	and.w	r3, r3, #15
 80059ce:	4a17      	ldr	r2, [pc, #92]	; (8005a2c <HAL_RCC_GetSysClockFreq+0x9c>)
 80059d0:	5cd3      	ldrb	r3, [r2, r3]
 80059d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d010      	beq.n	8005a00 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80059de:	4b11      	ldr	r3, [pc, #68]	; (8005a24 <HAL_RCC_GetSysClockFreq+0x94>)
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	0c5b      	lsrs	r3, r3, #17
 80059e4:	f003 0301 	and.w	r3, r3, #1
 80059e8:	4a11      	ldr	r2, [pc, #68]	; (8005a30 <HAL_RCC_GetSysClockFreq+0xa0>)
 80059ea:	5cd3      	ldrb	r3, [r2, r3]
 80059ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a0d      	ldr	r2, [pc, #52]	; (8005a28 <HAL_RCC_GetSysClockFreq+0x98>)
 80059f2:	fb03 f202 	mul.w	r2, r3, r2
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059fc:	617b      	str	r3, [r7, #20]
 80059fe:	e004      	b.n	8005a0a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a0c      	ldr	r2, [pc, #48]	; (8005a34 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005a04:	fb02 f303 	mul.w	r3, r2, r3
 8005a08:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	613b      	str	r3, [r7, #16]
      break;
 8005a0e:	e002      	b.n	8005a16 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005a10:	4b05      	ldr	r3, [pc, #20]	; (8005a28 <HAL_RCC_GetSysClockFreq+0x98>)
 8005a12:	613b      	str	r3, [r7, #16]
      break;
 8005a14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a16:	693b      	ldr	r3, [r7, #16]
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	371c      	adds	r7, #28
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bc80      	pop	{r7}
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	40021000 	.word	0x40021000
 8005a28:	007a1200 	.word	0x007a1200
 8005a2c:	08007524 	.word	0x08007524
 8005a30:	08007534 	.word	0x08007534
 8005a34:	003d0900 	.word	0x003d0900

08005a38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a3c:	4b02      	ldr	r3, [pc, #8]	; (8005a48 <HAL_RCC_GetHCLKFreq+0x10>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bc80      	pop	{r7}
 8005a46:	4770      	bx	lr
 8005a48:	20000000 	.word	0x20000000

08005a4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005a50:	f7ff fff2 	bl	8005a38 <HAL_RCC_GetHCLKFreq>
 8005a54:	4602      	mov	r2, r0
 8005a56:	4b05      	ldr	r3, [pc, #20]	; (8005a6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	0a1b      	lsrs	r3, r3, #8
 8005a5c:	f003 0307 	and.w	r3, r3, #7
 8005a60:	4903      	ldr	r1, [pc, #12]	; (8005a70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a62:	5ccb      	ldrb	r3, [r1, r3]
 8005a64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	40021000 	.word	0x40021000
 8005a70:	0800751c 	.word	0x0800751c

08005a74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005a78:	f7ff ffde 	bl	8005a38 <HAL_RCC_GetHCLKFreq>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	4b05      	ldr	r3, [pc, #20]	; (8005a94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	0adb      	lsrs	r3, r3, #11
 8005a84:	f003 0307 	and.w	r3, r3, #7
 8005a88:	4903      	ldr	r1, [pc, #12]	; (8005a98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a8a:	5ccb      	ldrb	r3, [r1, r3]
 8005a8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	40021000 	.word	0x40021000
 8005a98:	0800751c 	.word	0x0800751c

08005a9c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005aa4:	4b0a      	ldr	r3, [pc, #40]	; (8005ad0 <RCC_Delay+0x34>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a0a      	ldr	r2, [pc, #40]	; (8005ad4 <RCC_Delay+0x38>)
 8005aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8005aae:	0a5b      	lsrs	r3, r3, #9
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	fb02 f303 	mul.w	r3, r2, r3
 8005ab6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005ab8:	bf00      	nop
  }
  while (Delay --);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	1e5a      	subs	r2, r3, #1
 8005abe:	60fa      	str	r2, [r7, #12]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1f9      	bne.n	8005ab8 <RCC_Delay+0x1c>
}
 8005ac4:	bf00      	nop
 8005ac6:	bf00      	nop
 8005ac8:	3714      	adds	r7, #20
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bc80      	pop	{r7}
 8005ace:	4770      	bx	lr
 8005ad0:	20000000 	.word	0x20000000
 8005ad4:	10624dd3 	.word	0x10624dd3

08005ad8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b086      	sub	sp, #24
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	613b      	str	r3, [r7, #16]
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0301 	and.w	r3, r3, #1
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d07d      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005af4:	2300      	movs	r3, #0
 8005af6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005af8:	4b4f      	ldr	r3, [pc, #316]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005afa:	69db      	ldr	r3, [r3, #28]
 8005afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d10d      	bne.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b04:	4b4c      	ldr	r3, [pc, #304]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b06:	69db      	ldr	r3, [r3, #28]
 8005b08:	4a4b      	ldr	r2, [pc, #300]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b0e:	61d3      	str	r3, [r2, #28]
 8005b10:	4b49      	ldr	r3, [pc, #292]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b12:	69db      	ldr	r3, [r3, #28]
 8005b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b18:	60bb      	str	r3, [r7, #8]
 8005b1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b20:	4b46      	ldr	r3, [pc, #280]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d118      	bne.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b2c:	4b43      	ldr	r3, [pc, #268]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a42      	ldr	r2, [pc, #264]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005b32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b36:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b38:	f7fd fb08 	bl	800314c <HAL_GetTick>
 8005b3c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b3e:	e008      	b.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b40:	f7fd fb04 	bl	800314c <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	2b64      	cmp	r3, #100	; 0x64
 8005b4c:	d901      	bls.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e06d      	b.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b52:	4b3a      	ldr	r3, [pc, #232]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d0f0      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b5e:	4b36      	ldr	r3, [pc, #216]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b66:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d02e      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d027      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b7c:	4b2e      	ldr	r3, [pc, #184]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b7e:	6a1b      	ldr	r3, [r3, #32]
 8005b80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b84:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b86:	4b2e      	ldr	r3, [pc, #184]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005b88:	2201      	movs	r2, #1
 8005b8a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b8c:	4b2c      	ldr	r3, [pc, #176]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005b8e:	2200      	movs	r2, #0
 8005b90:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005b92:	4a29      	ldr	r2, [pc, #164]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f003 0301 	and.w	r3, r3, #1
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d014      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ba2:	f7fd fad3 	bl	800314c <HAL_GetTick>
 8005ba6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ba8:	e00a      	b.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005baa:	f7fd facf 	bl	800314c <HAL_GetTick>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d901      	bls.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e036      	b.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bc0:	4b1d      	ldr	r3, [pc, #116]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bc2:	6a1b      	ldr	r3, [r3, #32]
 8005bc4:	f003 0302 	and.w	r3, r3, #2
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d0ee      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bcc:	4b1a      	ldr	r3, [pc, #104]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bce:	6a1b      	ldr	r3, [r3, #32]
 8005bd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	4917      	ldr	r1, [pc, #92]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005bde:	7dfb      	ldrb	r3, [r7, #23]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d105      	bne.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005be4:	4b14      	ldr	r3, [pc, #80]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005be6:	69db      	ldr	r3, [r3, #28]
 8005be8:	4a13      	ldr	r2, [pc, #76]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0302 	and.w	r3, r3, #2
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d008      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005bfc:	4b0e      	ldr	r3, [pc, #56]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	490b      	ldr	r1, [pc, #44]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0310 	and.w	r3, r3, #16
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d008      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c1a:	4b07      	ldr	r3, [pc, #28]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	4904      	ldr	r1, [pc, #16]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3718      	adds	r7, #24
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	40021000 	.word	0x40021000
 8005c3c:	40007000 	.word	0x40007000
 8005c40:	42420440 	.word	0x42420440

08005c44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b082      	sub	sp, #8
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d101      	bne.n	8005c56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e076      	b.n	8005d44 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d108      	bne.n	8005c70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c66:	d009      	beq.n	8005c7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	61da      	str	r2, [r3, #28]
 8005c6e:	e005      	b.n	8005c7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d106      	bne.n	8005c9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f7fd f82e 	bl	8002cf8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2202      	movs	r2, #2
 8005ca0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cb2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005cc4:	431a      	orrs	r2, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cce:	431a      	orrs	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	f003 0302 	and.w	r3, r3, #2
 8005cd8:	431a      	orrs	r2, r3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	f003 0301 	and.w	r3, r3, #1
 8005ce2:	431a      	orrs	r2, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	699b      	ldr	r3, [r3, #24]
 8005ce8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cec:	431a      	orrs	r2, r3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	69db      	ldr	r3, [r3, #28]
 8005cf2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005cf6:	431a      	orrs	r2, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6a1b      	ldr	r3, [r3, #32]
 8005cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d00:	ea42 0103 	orr.w	r1, r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d08:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	430a      	orrs	r2, r1
 8005d12:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	699b      	ldr	r3, [r3, #24]
 8005d18:	0c1a      	lsrs	r2, r3, #16
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f002 0204 	and.w	r2, r2, #4
 8005d22:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	69da      	ldr	r2, [r3, #28]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d32:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3708      	adds	r7, #8
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b088      	sub	sp, #32
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	603b      	str	r3, [r7, #0]
 8005d58:	4613      	mov	r3, r2
 8005d5a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d101      	bne.n	8005d6e <HAL_SPI_Transmit+0x22>
 8005d6a:	2302      	movs	r3, #2
 8005d6c:	e12d      	b.n	8005fca <HAL_SPI_Transmit+0x27e>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d76:	f7fd f9e9 	bl	800314c <HAL_GetTick>
 8005d7a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005d7c:	88fb      	ldrh	r3, [r7, #6]
 8005d7e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d002      	beq.n	8005d92 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005d8c:	2302      	movs	r3, #2
 8005d8e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005d90:	e116      	b.n	8005fc0 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d002      	beq.n	8005d9e <HAL_SPI_Transmit+0x52>
 8005d98:	88fb      	ldrh	r3, [r7, #6]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d102      	bne.n	8005da4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005da2:	e10d      	b.n	8005fc0 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2203      	movs	r2, #3
 8005da8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	68ba      	ldr	r2, [r7, #8]
 8005db6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	88fa      	ldrh	r2, [r7, #6]
 8005dbc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	88fa      	ldrh	r2, [r7, #6]
 8005dc2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dea:	d10f      	bne.n	8005e0c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dfa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e0a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e16:	2b40      	cmp	r3, #64	; 0x40
 8005e18:	d007      	beq.n	8005e2a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e28:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e32:	d14f      	bne.n	8005ed4 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d002      	beq.n	8005e42 <HAL_SPI_Transmit+0xf6>
 8005e3c:	8afb      	ldrh	r3, [r7, #22]
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d142      	bne.n	8005ec8 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e46:	881a      	ldrh	r2, [r3, #0]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e52:	1c9a      	adds	r2, r3, #2
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005e66:	e02f      	b.n	8005ec8 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f003 0302 	and.w	r3, r3, #2
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d112      	bne.n	8005e9c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7a:	881a      	ldrh	r2, [r3, #0]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e86:	1c9a      	adds	r2, r3, #2
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	3b01      	subs	r3, #1
 8005e94:	b29a      	uxth	r2, r3
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	86da      	strh	r2, [r3, #54]	; 0x36
 8005e9a:	e015      	b.n	8005ec8 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e9c:	f7fd f956 	bl	800314c <HAL_GetTick>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	683a      	ldr	r2, [r7, #0]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d803      	bhi.n	8005eb4 <HAL_SPI_Transmit+0x168>
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb2:	d102      	bne.n	8005eba <HAL_SPI_Transmit+0x16e>
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d106      	bne.n	8005ec8 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005ec6:	e07b      	b.n	8005fc0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1ca      	bne.n	8005e68 <HAL_SPI_Transmit+0x11c>
 8005ed2:	e050      	b.n	8005f76 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d002      	beq.n	8005ee2 <HAL_SPI_Transmit+0x196>
 8005edc:	8afb      	ldrh	r3, [r7, #22]
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d144      	bne.n	8005f6c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	330c      	adds	r3, #12
 8005eec:	7812      	ldrb	r2, [r2, #0]
 8005eee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef4:	1c5a      	adds	r2, r3, #1
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	3b01      	subs	r3, #1
 8005f02:	b29a      	uxth	r2, r3
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005f08:	e030      	b.n	8005f6c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	f003 0302 	and.w	r3, r3, #2
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	d113      	bne.n	8005f40 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	330c      	adds	r3, #12
 8005f22:	7812      	ldrb	r2, [r2, #0]
 8005f24:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2a:	1c5a      	adds	r2, r3, #1
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	3b01      	subs	r3, #1
 8005f38:	b29a      	uxth	r2, r3
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	86da      	strh	r2, [r3, #54]	; 0x36
 8005f3e:	e015      	b.n	8005f6c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f40:	f7fd f904 	bl	800314c <HAL_GetTick>
 8005f44:	4602      	mov	r2, r0
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	1ad3      	subs	r3, r2, r3
 8005f4a:	683a      	ldr	r2, [r7, #0]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d803      	bhi.n	8005f58 <HAL_SPI_Transmit+0x20c>
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f56:	d102      	bne.n	8005f5e <HAL_SPI_Transmit+0x212>
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d106      	bne.n	8005f6c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2201      	movs	r2, #1
 8005f66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005f6a:	e029      	b.n	8005fc0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1c9      	bne.n	8005f0a <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f76:	69ba      	ldr	r2, [r7, #24]
 8005f78:	6839      	ldr	r1, [r7, #0]
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f000 fbcc 	bl	8006718 <SPI_EndRxTxTransaction>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d002      	beq.n	8005f8c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2220      	movs	r2, #32
 8005f8a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d10a      	bne.n	8005faa <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f94:	2300      	movs	r3, #0
 8005f96:	613b      	str	r3, [r7, #16]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	613b      	str	r3, [r7, #16]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	613b      	str	r3, [r7, #16]
 8005fa8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d002      	beq.n	8005fb8 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	77fb      	strb	r3, [r7, #31]
 8005fb6:	e003      	b.n	8005fc0 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005fc8:	7ffb      	ldrb	r3, [r7, #31]
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3720      	adds	r7, #32
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b088      	sub	sp, #32
 8005fd6:	af02      	add	r7, sp, #8
 8005fd8:	60f8      	str	r0, [r7, #12]
 8005fda:	60b9      	str	r1, [r7, #8]
 8005fdc:	603b      	str	r3, [r7, #0]
 8005fde:	4613      	mov	r3, r2
 8005fe0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d002      	beq.n	8005ff8 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8005ff2:	2302      	movs	r3, #2
 8005ff4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005ff6:	e0fb      	b.n	80061f0 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006000:	d112      	bne.n	8006028 <HAL_SPI_Receive+0x56>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d10e      	bne.n	8006028 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2204      	movs	r2, #4
 800600e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006012:	88fa      	ldrh	r2, [r7, #6]
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	9300      	str	r3, [sp, #0]
 8006018:	4613      	mov	r3, r2
 800601a:	68ba      	ldr	r2, [r7, #8]
 800601c:	68b9      	ldr	r1, [r7, #8]
 800601e:	68f8      	ldr	r0, [r7, #12]
 8006020:	f000 f8ef 	bl	8006202 <HAL_SPI_TransmitReceive>
 8006024:	4603      	mov	r3, r0
 8006026:	e0e8      	b.n	80061fa <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800602e:	2b01      	cmp	r3, #1
 8006030:	d101      	bne.n	8006036 <HAL_SPI_Receive+0x64>
 8006032:	2302      	movs	r3, #2
 8006034:	e0e1      	b.n	80061fa <HAL_SPI_Receive+0x228>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800603e:	f7fd f885 	bl	800314c <HAL_GetTick>
 8006042:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d002      	beq.n	8006050 <HAL_SPI_Receive+0x7e>
 800604a:	88fb      	ldrh	r3, [r7, #6]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d102      	bne.n	8006056 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006054:	e0cc      	b.n	80061f0 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2204      	movs	r2, #4
 800605a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2200      	movs	r2, #0
 8006062:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	68ba      	ldr	r2, [r7, #8]
 8006068:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	88fa      	ldrh	r2, [r7, #6]
 800606e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	88fa      	ldrh	r2, [r7, #6]
 8006074:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2200      	movs	r2, #0
 8006080:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2200      	movs	r2, #0
 8006086:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2200      	movs	r2, #0
 800608c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2200      	movs	r2, #0
 8006092:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800609c:	d10f      	bne.n	80060be <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80060bc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c8:	2b40      	cmp	r3, #64	; 0x40
 80060ca:	d007      	beq.n	80060dc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060da:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d16a      	bne.n	80061ba <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80060e4:	e032      	b.n	800614c <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	f003 0301 	and.w	r3, r3, #1
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d115      	bne.n	8006120 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f103 020c 	add.w	r2, r3, #12
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006100:	7812      	ldrb	r2, [r2, #0]
 8006102:	b2d2      	uxtb	r2, r2
 8006104:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610a:	1c5a      	adds	r2, r3, #1
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006114:	b29b      	uxth	r3, r3
 8006116:	3b01      	subs	r3, #1
 8006118:	b29a      	uxth	r2, r3
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800611e:	e015      	b.n	800614c <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006120:	f7fd f814 	bl	800314c <HAL_GetTick>
 8006124:	4602      	mov	r2, r0
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	683a      	ldr	r2, [r7, #0]
 800612c:	429a      	cmp	r2, r3
 800612e:	d803      	bhi.n	8006138 <HAL_SPI_Receive+0x166>
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006136:	d102      	bne.n	800613e <HAL_SPI_Receive+0x16c>
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d106      	bne.n	800614c <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2201      	movs	r2, #1
 8006146:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800614a:	e051      	b.n	80061f0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006150:	b29b      	uxth	r3, r3
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1c7      	bne.n	80060e6 <HAL_SPI_Receive+0x114>
 8006156:	e035      	b.n	80061c4 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	f003 0301 	and.w	r3, r3, #1
 8006162:	2b01      	cmp	r3, #1
 8006164:	d113      	bne.n	800618e <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68da      	ldr	r2, [r3, #12]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006170:	b292      	uxth	r2, r2
 8006172:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006178:	1c9a      	adds	r2, r3, #2
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006182:	b29b      	uxth	r3, r3
 8006184:	3b01      	subs	r3, #1
 8006186:	b29a      	uxth	r2, r3
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800618c:	e015      	b.n	80061ba <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800618e:	f7fc ffdd 	bl	800314c <HAL_GetTick>
 8006192:	4602      	mov	r2, r0
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	1ad3      	subs	r3, r2, r3
 8006198:	683a      	ldr	r2, [r7, #0]
 800619a:	429a      	cmp	r2, r3
 800619c:	d803      	bhi.n	80061a6 <HAL_SPI_Receive+0x1d4>
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a4:	d102      	bne.n	80061ac <HAL_SPI_Receive+0x1da>
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d106      	bne.n	80061ba <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80061ac:	2303      	movs	r3, #3
 80061ae:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80061b8:	e01a      	b.n	80061f0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061be:	b29b      	uxth	r3, r3
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d1c9      	bne.n	8006158 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	6839      	ldr	r1, [r7, #0]
 80061c8:	68f8      	ldr	r0, [r7, #12]
 80061ca:	f000 fa53 	bl	8006674 <SPI_EndRxTransaction>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d002      	beq.n	80061da <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2220      	movs	r2, #32
 80061d8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d002      	beq.n	80061e8 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	75fb      	strb	r3, [r7, #23]
 80061e6:	e003      	b.n	80061f0 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80061f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3718      	adds	r7, #24
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}

08006202 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006202:	b580      	push	{r7, lr}
 8006204:	b08c      	sub	sp, #48	; 0x30
 8006206:	af00      	add	r7, sp, #0
 8006208:	60f8      	str	r0, [r7, #12]
 800620a:	60b9      	str	r1, [r7, #8]
 800620c:	607a      	str	r2, [r7, #4]
 800620e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006210:	2301      	movs	r3, #1
 8006212:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006214:	2300      	movs	r3, #0
 8006216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006220:	2b01      	cmp	r3, #1
 8006222:	d101      	bne.n	8006228 <HAL_SPI_TransmitReceive+0x26>
 8006224:	2302      	movs	r3, #2
 8006226:	e198      	b.n	800655a <HAL_SPI_TransmitReceive+0x358>
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006230:	f7fc ff8c 	bl	800314c <HAL_GetTick>
 8006234:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800623c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006246:	887b      	ldrh	r3, [r7, #2]
 8006248:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800624a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800624e:	2b01      	cmp	r3, #1
 8006250:	d00f      	beq.n	8006272 <HAL_SPI_TransmitReceive+0x70>
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006258:	d107      	bne.n	800626a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d103      	bne.n	800626a <HAL_SPI_TransmitReceive+0x68>
 8006262:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006266:	2b04      	cmp	r3, #4
 8006268:	d003      	beq.n	8006272 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800626a:	2302      	movs	r3, #2
 800626c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006270:	e16d      	b.n	800654e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d005      	beq.n	8006284 <HAL_SPI_TransmitReceive+0x82>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d002      	beq.n	8006284 <HAL_SPI_TransmitReceive+0x82>
 800627e:	887b      	ldrh	r3, [r7, #2]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d103      	bne.n	800628c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800628a:	e160      	b.n	800654e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006292:	b2db      	uxtb	r3, r3
 8006294:	2b04      	cmp	r3, #4
 8006296:	d003      	beq.n	80062a0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2205      	movs	r2, #5
 800629c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	887a      	ldrh	r2, [r7, #2]
 80062b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	887a      	ldrh	r2, [r7, #2]
 80062b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	68ba      	ldr	r2, [r7, #8]
 80062bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	887a      	ldrh	r2, [r7, #2]
 80062c2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	887a      	ldrh	r2, [r7, #2]
 80062c8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2200      	movs	r2, #0
 80062ce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e0:	2b40      	cmp	r3, #64	; 0x40
 80062e2:	d007      	beq.n	80062f4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062fc:	d17c      	bne.n	80063f8 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d002      	beq.n	800630c <HAL_SPI_TransmitReceive+0x10a>
 8006306:	8b7b      	ldrh	r3, [r7, #26]
 8006308:	2b01      	cmp	r3, #1
 800630a:	d16a      	bne.n	80063e2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006310:	881a      	ldrh	r2, [r3, #0]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800631c:	1c9a      	adds	r2, r3, #2
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006326:	b29b      	uxth	r3, r3
 8006328:	3b01      	subs	r3, #1
 800632a:	b29a      	uxth	r2, r3
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006330:	e057      	b.n	80063e2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	f003 0302 	and.w	r3, r3, #2
 800633c:	2b02      	cmp	r3, #2
 800633e:	d11b      	bne.n	8006378 <HAL_SPI_TransmitReceive+0x176>
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006344:	b29b      	uxth	r3, r3
 8006346:	2b00      	cmp	r3, #0
 8006348:	d016      	beq.n	8006378 <HAL_SPI_TransmitReceive+0x176>
 800634a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800634c:	2b01      	cmp	r3, #1
 800634e:	d113      	bne.n	8006378 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006354:	881a      	ldrh	r2, [r3, #0]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006360:	1c9a      	adds	r2, r3, #2
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800636a:	b29b      	uxth	r3, r3
 800636c:	3b01      	subs	r3, #1
 800636e:	b29a      	uxth	r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006374:	2300      	movs	r3, #0
 8006376:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	f003 0301 	and.w	r3, r3, #1
 8006382:	2b01      	cmp	r3, #1
 8006384:	d119      	bne.n	80063ba <HAL_SPI_TransmitReceive+0x1b8>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800638a:	b29b      	uxth	r3, r3
 800638c:	2b00      	cmp	r3, #0
 800638e:	d014      	beq.n	80063ba <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68da      	ldr	r2, [r3, #12]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639a:	b292      	uxth	r2, r2
 800639c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a2:	1c9a      	adds	r2, r3, #2
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	3b01      	subs	r3, #1
 80063b0:	b29a      	uxth	r2, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80063b6:	2301      	movs	r3, #1
 80063b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80063ba:	f7fc fec7 	bl	800314c <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d80b      	bhi.n	80063e2 <HAL_SPI_TransmitReceive+0x1e0>
 80063ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d0:	d007      	beq.n	80063e2 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80063d2:	2303      	movs	r3, #3
 80063d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80063e0:	e0b5      	b.n	800654e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d1a2      	bne.n	8006332 <HAL_SPI_TransmitReceive+0x130>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d19d      	bne.n	8006332 <HAL_SPI_TransmitReceive+0x130>
 80063f6:	e080      	b.n	80064fa <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d002      	beq.n	8006406 <HAL_SPI_TransmitReceive+0x204>
 8006400:	8b7b      	ldrh	r3, [r7, #26]
 8006402:	2b01      	cmp	r3, #1
 8006404:	d16f      	bne.n	80064e6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	330c      	adds	r3, #12
 8006410:	7812      	ldrb	r2, [r2, #0]
 8006412:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006418:	1c5a      	adds	r2, r3, #1
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006422:	b29b      	uxth	r3, r3
 8006424:	3b01      	subs	r3, #1
 8006426:	b29a      	uxth	r2, r3
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800642c:	e05b      	b.n	80064e6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	f003 0302 	and.w	r3, r3, #2
 8006438:	2b02      	cmp	r3, #2
 800643a:	d11c      	bne.n	8006476 <HAL_SPI_TransmitReceive+0x274>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006440:	b29b      	uxth	r3, r3
 8006442:	2b00      	cmp	r3, #0
 8006444:	d017      	beq.n	8006476 <HAL_SPI_TransmitReceive+0x274>
 8006446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006448:	2b01      	cmp	r3, #1
 800644a:	d114      	bne.n	8006476 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	330c      	adds	r3, #12
 8006456:	7812      	ldrb	r2, [r2, #0]
 8006458:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800645e:	1c5a      	adds	r2, r3, #1
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006468:	b29b      	uxth	r3, r3
 800646a:	3b01      	subs	r3, #1
 800646c:	b29a      	uxth	r2, r3
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006472:	2300      	movs	r3, #0
 8006474:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	f003 0301 	and.w	r3, r3, #1
 8006480:	2b01      	cmp	r3, #1
 8006482:	d119      	bne.n	80064b8 <HAL_SPI_TransmitReceive+0x2b6>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006488:	b29b      	uxth	r3, r3
 800648a:	2b00      	cmp	r3, #0
 800648c:	d014      	beq.n	80064b8 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	68da      	ldr	r2, [r3, #12]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006498:	b2d2      	uxtb	r2, r2
 800649a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a0:	1c5a      	adds	r2, r3, #1
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	3b01      	subs	r3, #1
 80064ae:	b29a      	uxth	r2, r3
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80064b4:	2301      	movs	r3, #1
 80064b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80064b8:	f7fc fe48 	bl	800314c <HAL_GetTick>
 80064bc:	4602      	mov	r2, r0
 80064be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d803      	bhi.n	80064d0 <HAL_SPI_TransmitReceive+0x2ce>
 80064c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ce:	d102      	bne.n	80064d6 <HAL_SPI_TransmitReceive+0x2d4>
 80064d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d107      	bne.n	80064e6 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80064d6:	2303      	movs	r3, #3
 80064d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80064e4:	e033      	b.n	800654e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d19e      	bne.n	800642e <HAL_SPI_TransmitReceive+0x22c>
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d199      	bne.n	800642e <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80064fe:	68f8      	ldr	r0, [r7, #12]
 8006500:	f000 f90a 	bl	8006718 <SPI_EndRxTxTransaction>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d006      	beq.n	8006518 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2220      	movs	r2, #32
 8006514:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006516:	e01a      	b.n	800654e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d10a      	bne.n	8006536 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006520:	2300      	movs	r3, #0
 8006522:	617b      	str	r3, [r7, #20]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	617b      	str	r3, [r7, #20]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	617b      	str	r3, [r7, #20]
 8006534:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800653a:	2b00      	cmp	r3, #0
 800653c:	d003      	beq.n	8006546 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006544:	e003      	b.n	800654e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2201      	movs	r2, #1
 800654a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006556:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800655a:	4618      	mov	r0, r3
 800655c:	3730      	adds	r7, #48	; 0x30
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
	...

08006564 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b088      	sub	sp, #32
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	603b      	str	r3, [r7, #0]
 8006570:	4613      	mov	r3, r2
 8006572:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006574:	f7fc fdea 	bl	800314c <HAL_GetTick>
 8006578:	4602      	mov	r2, r0
 800657a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657c:	1a9b      	subs	r3, r3, r2
 800657e:	683a      	ldr	r2, [r7, #0]
 8006580:	4413      	add	r3, r2
 8006582:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006584:	f7fc fde2 	bl	800314c <HAL_GetTick>
 8006588:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800658a:	4b39      	ldr	r3, [pc, #228]	; (8006670 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	015b      	lsls	r3, r3, #5
 8006590:	0d1b      	lsrs	r3, r3, #20
 8006592:	69fa      	ldr	r2, [r7, #28]
 8006594:	fb02 f303 	mul.w	r3, r2, r3
 8006598:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800659a:	e054      	b.n	8006646 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a2:	d050      	beq.n	8006646 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80065a4:	f7fc fdd2 	bl	800314c <HAL_GetTick>
 80065a8:	4602      	mov	r2, r0
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	69fa      	ldr	r2, [r7, #28]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d902      	bls.n	80065ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d13d      	bne.n	8006636 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	685a      	ldr	r2, [r3, #4]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80065c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065d2:	d111      	bne.n	80065f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065dc:	d004      	beq.n	80065e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065e6:	d107      	bne.n	80065f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006600:	d10f      	bne.n	8006622 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006610:	601a      	str	r2, [r3, #0]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006620:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2201      	movs	r2, #1
 8006626:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	e017      	b.n	8006666 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d101      	bne.n	8006640 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800663c:	2300      	movs	r3, #0
 800663e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	3b01      	subs	r3, #1
 8006644:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	689a      	ldr	r2, [r3, #8]
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	4013      	ands	r3, r2
 8006650:	68ba      	ldr	r2, [r7, #8]
 8006652:	429a      	cmp	r2, r3
 8006654:	bf0c      	ite	eq
 8006656:	2301      	moveq	r3, #1
 8006658:	2300      	movne	r3, #0
 800665a:	b2db      	uxtb	r3, r3
 800665c:	461a      	mov	r2, r3
 800665e:	79fb      	ldrb	r3, [r7, #7]
 8006660:	429a      	cmp	r2, r3
 8006662:	d19b      	bne.n	800659c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3720      	adds	r7, #32
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	20000000 	.word	0x20000000

08006674 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b086      	sub	sp, #24
 8006678:	af02      	add	r7, sp, #8
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006688:	d111      	bne.n	80066ae <SPI_EndRxTransaction+0x3a>
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006692:	d004      	beq.n	800669e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800669c:	d107      	bne.n	80066ae <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066ac:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066b6:	d117      	bne.n	80066e8 <SPI_EndRxTransaction+0x74>
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066c0:	d112      	bne.n	80066e8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	9300      	str	r3, [sp, #0]
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	2200      	movs	r2, #0
 80066ca:	2101      	movs	r1, #1
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	f7ff ff49 	bl	8006564 <SPI_WaitFlagStateUntilTimeout>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d01a      	beq.n	800670e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066dc:	f043 0220 	orr.w	r2, r3, #32
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80066e4:	2303      	movs	r3, #3
 80066e6:	e013      	b.n	8006710 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	9300      	str	r3, [sp, #0]
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	2200      	movs	r2, #0
 80066f0:	2180      	movs	r1, #128	; 0x80
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f7ff ff36 	bl	8006564 <SPI_WaitFlagStateUntilTimeout>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d007      	beq.n	800670e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006702:	f043 0220 	orr.w	r2, r3, #32
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800670a:	2303      	movs	r3, #3
 800670c:	e000      	b.n	8006710 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800670e:	2300      	movs	r3, #0
}
 8006710:	4618      	mov	r0, r3
 8006712:	3710      	adds	r7, #16
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b086      	sub	sp, #24
 800671c:	af02      	add	r7, sp, #8
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	9300      	str	r3, [sp, #0]
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	2200      	movs	r2, #0
 800672c:	2180      	movs	r1, #128	; 0x80
 800672e:	68f8      	ldr	r0, [r7, #12]
 8006730:	f7ff ff18 	bl	8006564 <SPI_WaitFlagStateUntilTimeout>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d007      	beq.n	800674a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800673e:	f043 0220 	orr.w	r2, r3, #32
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006746:	2303      	movs	r3, #3
 8006748:	e000      	b.n	800674c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800674a:	2300      	movs	r3, #0
}
 800674c:	4618      	mov	r0, r3
 800674e:	3710      	adds	r7, #16
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b082      	sub	sp, #8
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d101      	bne.n	8006766 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e042      	b.n	80067ec <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800676c:	b2db      	uxtb	r3, r3
 800676e:	2b00      	cmp	r3, #0
 8006770:	d106      	bne.n	8006780 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f7fc fb06 	bl	8002d8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2224      	movs	r2, #36	; 0x24
 8006784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68da      	ldr	r2, [r3, #12]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006796:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 fcd5 	bl	8007148 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	691a      	ldr	r2, [r3, #16]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	695a      	ldr	r2, [r3, #20]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	68da      	ldr	r2, [r3, #12]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2220      	movs	r2, #32
 80067d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2220      	movs	r2, #32
 80067e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80067ea:	2300      	movs	r3, #0
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3708      	adds	r7, #8
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	4613      	mov	r3, r2
 8006800:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006808:	b2db      	uxtb	r3, r3
 800680a:	2b20      	cmp	r3, #32
 800680c:	d112      	bne.n	8006834 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d002      	beq.n	800681a <HAL_UART_Receive_IT+0x26>
 8006814:	88fb      	ldrh	r3, [r7, #6]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d101      	bne.n	800681e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e00b      	b.n	8006836 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2200      	movs	r2, #0
 8006822:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006824:	88fb      	ldrh	r3, [r7, #6]
 8006826:	461a      	mov	r2, r3
 8006828:	68b9      	ldr	r1, [r7, #8]
 800682a:	68f8      	ldr	r0, [r7, #12]
 800682c:	f000 fab7 	bl	8006d9e <UART_Start_Receive_IT>
 8006830:	4603      	mov	r3, r0
 8006832:	e000      	b.n	8006836 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006834:	2302      	movs	r3, #2
  }
}
 8006836:	4618      	mov	r0, r3
 8006838:	3710      	adds	r7, #16
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
	...

08006840 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b0ba      	sub	sp, #232	; 0xe8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	695b      	ldr	r3, [r3, #20]
 8006862:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006866:	2300      	movs	r3, #0
 8006868:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800686c:	2300      	movs	r3, #0
 800686e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006876:	f003 030f 	and.w	r3, r3, #15
 800687a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800687e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006882:	2b00      	cmp	r3, #0
 8006884:	d10f      	bne.n	80068a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800688a:	f003 0320 	and.w	r3, r3, #32
 800688e:	2b00      	cmp	r3, #0
 8006890:	d009      	beq.n	80068a6 <HAL_UART_IRQHandler+0x66>
 8006892:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006896:	f003 0320 	and.w	r3, r3, #32
 800689a:	2b00      	cmp	r3, #0
 800689c:	d003      	beq.n	80068a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 fb93 	bl	8006fca <UART_Receive_IT>
      return;
 80068a4:	e25b      	b.n	8006d5e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80068a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	f000 80de 	beq.w	8006a6c <HAL_UART_IRQHandler+0x22c>
 80068b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068b4:	f003 0301 	and.w	r3, r3, #1
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d106      	bne.n	80068ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80068bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068c0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f000 80d1 	beq.w	8006a6c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80068ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ce:	f003 0301 	and.w	r3, r3, #1
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d00b      	beq.n	80068ee <HAL_UART_IRQHandler+0xae>
 80068d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d005      	beq.n	80068ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068e6:	f043 0201 	orr.w	r2, r3, #1
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068f2:	f003 0304 	and.w	r3, r3, #4
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00b      	beq.n	8006912 <HAL_UART_IRQHandler+0xd2>
 80068fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068fe:	f003 0301 	and.w	r3, r3, #1
 8006902:	2b00      	cmp	r3, #0
 8006904:	d005      	beq.n	8006912 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800690a:	f043 0202 	orr.w	r2, r3, #2
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006916:	f003 0302 	and.w	r3, r3, #2
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00b      	beq.n	8006936 <HAL_UART_IRQHandler+0xf6>
 800691e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006922:	f003 0301 	and.w	r3, r3, #1
 8006926:	2b00      	cmp	r3, #0
 8006928:	d005      	beq.n	8006936 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800692e:	f043 0204 	orr.w	r2, r3, #4
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800693a:	f003 0308 	and.w	r3, r3, #8
 800693e:	2b00      	cmp	r3, #0
 8006940:	d011      	beq.n	8006966 <HAL_UART_IRQHandler+0x126>
 8006942:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006946:	f003 0320 	and.w	r3, r3, #32
 800694a:	2b00      	cmp	r3, #0
 800694c:	d105      	bne.n	800695a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800694e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006952:	f003 0301 	and.w	r3, r3, #1
 8006956:	2b00      	cmp	r3, #0
 8006958:	d005      	beq.n	8006966 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800695e:	f043 0208 	orr.w	r2, r3, #8
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800696a:	2b00      	cmp	r3, #0
 800696c:	f000 81f2 	beq.w	8006d54 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006974:	f003 0320 	and.w	r3, r3, #32
 8006978:	2b00      	cmp	r3, #0
 800697a:	d008      	beq.n	800698e <HAL_UART_IRQHandler+0x14e>
 800697c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006980:	f003 0320 	and.w	r3, r3, #32
 8006984:	2b00      	cmp	r3, #0
 8006986:	d002      	beq.n	800698e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 fb1e 	bl	8006fca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	695b      	ldr	r3, [r3, #20]
 8006994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006998:	2b00      	cmp	r3, #0
 800699a:	bf14      	ite	ne
 800699c:	2301      	movne	r3, #1
 800699e:	2300      	moveq	r3, #0
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069aa:	f003 0308 	and.w	r3, r3, #8
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d103      	bne.n	80069ba <HAL_UART_IRQHandler+0x17a>
 80069b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d04f      	beq.n	8006a5a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 fa28 	bl	8006e10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	695b      	ldr	r3, [r3, #20]
 80069c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d041      	beq.n	8006a52 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	3314      	adds	r3, #20
 80069d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80069dc:	e853 3f00 	ldrex	r3, [r3]
 80069e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80069e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	3314      	adds	r3, #20
 80069f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80069fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80069fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006a06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006a0a:	e841 2300 	strex	r3, r2, [r1]
 8006a0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006a12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d1d9      	bne.n	80069ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d013      	beq.n	8006a4a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a26:	4a7e      	ldr	r2, [pc, #504]	; (8006c20 <HAL_UART_IRQHandler+0x3e0>)
 8006a28:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7fc fd02 	bl	8003438 <HAL_DMA_Abort_IT>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d016      	beq.n	8006a68 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006a44:	4610      	mov	r0, r2
 8006a46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a48:	e00e      	b.n	8006a68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 f993 	bl	8006d76 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a50:	e00a      	b.n	8006a68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 f98f 	bl	8006d76 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a58:	e006      	b.n	8006a68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 f98b 	bl	8006d76 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006a66:	e175      	b.n	8006d54 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a68:	bf00      	nop
    return;
 8006a6a:	e173      	b.n	8006d54 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	f040 814f 	bne.w	8006d14 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a7a:	f003 0310 	and.w	r3, r3, #16
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	f000 8148 	beq.w	8006d14 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a88:	f003 0310 	and.w	r3, r3, #16
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	f000 8141 	beq.w	8006d14 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a92:	2300      	movs	r3, #0
 8006a94:	60bb      	str	r3, [r7, #8]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	60bb      	str	r3, [r7, #8]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	60bb      	str	r3, [r7, #8]
 8006aa6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	695b      	ldr	r3, [r3, #20]
 8006aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	f000 80b6 	beq.w	8006c24 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ac4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	f000 8145 	beq.w	8006d58 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006ad2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	f080 813e 	bcs.w	8006d58 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ae2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ae8:	699b      	ldr	r3, [r3, #24]
 8006aea:	2b20      	cmp	r3, #32
 8006aec:	f000 8088 	beq.w	8006c00 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	330c      	adds	r3, #12
 8006af6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006afa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006afe:	e853 3f00 	ldrex	r3, [r3]
 8006b02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006b06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b0e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	330c      	adds	r3, #12
 8006b18:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006b1c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006b20:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b24:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006b28:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006b2c:	e841 2300 	strex	r3, r2, [r1]
 8006b30:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006b34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d1d9      	bne.n	8006af0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	3314      	adds	r3, #20
 8006b42:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b46:	e853 3f00 	ldrex	r3, [r3]
 8006b4a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006b4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b4e:	f023 0301 	bic.w	r3, r3, #1
 8006b52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	3314      	adds	r3, #20
 8006b5c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006b60:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006b64:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b66:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006b68:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006b6c:	e841 2300 	strex	r3, r2, [r1]
 8006b70:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006b72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d1e1      	bne.n	8006b3c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	3314      	adds	r3, #20
 8006b7e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b82:	e853 3f00 	ldrex	r3, [r3]
 8006b86:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006b88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	3314      	adds	r3, #20
 8006b98:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006b9c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006b9e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006ba2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006ba4:	e841 2300 	strex	r3, r2, [r1]
 8006ba8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006baa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d1e3      	bne.n	8006b78 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2220      	movs	r2, #32
 8006bb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	330c      	adds	r3, #12
 8006bc4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bc8:	e853 3f00 	ldrex	r3, [r3]
 8006bcc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006bce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bd0:	f023 0310 	bic.w	r3, r3, #16
 8006bd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	330c      	adds	r3, #12
 8006bde:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006be2:	65ba      	str	r2, [r7, #88]	; 0x58
 8006be4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006be8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006bea:	e841 2300 	strex	r3, r2, [r1]
 8006bee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006bf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d1e3      	bne.n	8006bbe <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7fc fbe1 	bl	80033c2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2202      	movs	r2, #2
 8006c04:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	4619      	mov	r1, r3
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 f8b6 	bl	8006d88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c1c:	e09c      	b.n	8006d58 <HAL_UART_IRQHandler+0x518>
 8006c1e:	bf00      	nop
 8006c20:	08006ed5 	.word	0x08006ed5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	f000 808e 	beq.w	8006d5c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006c40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	f000 8089 	beq.w	8006d5c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	330c      	adds	r3, #12
 8006c50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c54:	e853 3f00 	ldrex	r3, [r3]
 8006c58:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	330c      	adds	r3, #12
 8006c6a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006c6e:	647a      	str	r2, [r7, #68]	; 0x44
 8006c70:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c76:	e841 2300 	strex	r3, r2, [r1]
 8006c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d1e3      	bne.n	8006c4a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	3314      	adds	r3, #20
 8006c88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8c:	e853 3f00 	ldrex	r3, [r3]
 8006c90:	623b      	str	r3, [r7, #32]
   return(result);
 8006c92:	6a3b      	ldr	r3, [r7, #32]
 8006c94:	f023 0301 	bic.w	r3, r3, #1
 8006c98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	3314      	adds	r3, #20
 8006ca2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006ca6:	633a      	str	r2, [r7, #48]	; 0x30
 8006ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006caa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cae:	e841 2300 	strex	r3, r2, [r1]
 8006cb2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1e3      	bne.n	8006c82 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2220      	movs	r2, #32
 8006cbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	330c      	adds	r3, #12
 8006cce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	e853 3f00 	ldrex	r3, [r3]
 8006cd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f023 0310 	bic.w	r3, r3, #16
 8006cde:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	330c      	adds	r3, #12
 8006ce8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006cec:	61fa      	str	r2, [r7, #28]
 8006cee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf0:	69b9      	ldr	r1, [r7, #24]
 8006cf2:	69fa      	ldr	r2, [r7, #28]
 8006cf4:	e841 2300 	strex	r3, r2, [r1]
 8006cf8:	617b      	str	r3, [r7, #20]
   return(result);
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1e3      	bne.n	8006cc8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2202      	movs	r2, #2
 8006d04:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d06:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 f83b 	bl	8006d88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d12:	e023      	b.n	8006d5c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006d14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d009      	beq.n	8006d34 <HAL_UART_IRQHandler+0x4f4>
 8006d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d003      	beq.n	8006d34 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 f8e5 	bl	8006efc <UART_Transmit_IT>
    return;
 8006d32:	e014      	b.n	8006d5e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00e      	beq.n	8006d5e <HAL_UART_IRQHandler+0x51e>
 8006d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d008      	beq.n	8006d5e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 f924 	bl	8006f9a <UART_EndTransmit_IT>
    return;
 8006d52:	e004      	b.n	8006d5e <HAL_UART_IRQHandler+0x51e>
    return;
 8006d54:	bf00      	nop
 8006d56:	e002      	b.n	8006d5e <HAL_UART_IRQHandler+0x51e>
      return;
 8006d58:	bf00      	nop
 8006d5a:	e000      	b.n	8006d5e <HAL_UART_IRQHandler+0x51e>
      return;
 8006d5c:	bf00      	nop
  }
}
 8006d5e:	37e8      	adds	r7, #232	; 0xe8
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006d6c:	bf00      	nop
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bc80      	pop	{r7}
 8006d74:	4770      	bx	lr

08006d76 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d76:	b480      	push	{r7}
 8006d78:	b083      	sub	sp, #12
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d7e:	bf00      	nop
 8006d80:	370c      	adds	r7, #12
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bc80      	pop	{r7}
 8006d86:	4770      	bx	lr

08006d88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	460b      	mov	r3, r1
 8006d92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d94:	bf00      	nop
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bc80      	pop	{r7}
 8006d9c:	4770      	bx	lr

08006d9e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d9e:	b480      	push	{r7}
 8006da0:	b085      	sub	sp, #20
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	60f8      	str	r0, [r7, #12]
 8006da6:	60b9      	str	r1, [r7, #8]
 8006da8:	4613      	mov	r3, r2
 8006daa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	68ba      	ldr	r2, [r7, #8]
 8006db0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	88fa      	ldrh	r2, [r7, #6]
 8006db6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	88fa      	ldrh	r2, [r7, #6]
 8006dbc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2222      	movs	r2, #34	; 0x22
 8006dc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	691b      	ldr	r3, [r3, #16]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d007      	beq.n	8006de4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	68da      	ldr	r2, [r3, #12]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006de2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	695a      	ldr	r2, [r3, #20]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f042 0201 	orr.w	r2, r2, #1
 8006df2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	68da      	ldr	r2, [r3, #12]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f042 0220 	orr.w	r2, r2, #32
 8006e02:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3714      	adds	r7, #20
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bc80      	pop	{r7}
 8006e0e:	4770      	bx	lr

08006e10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b095      	sub	sp, #84	; 0x54
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	330c      	adds	r3, #12
 8006e1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e22:	e853 3f00 	ldrex	r3, [r3]
 8006e26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	330c      	adds	r3, #12
 8006e36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e38:	643a      	str	r2, [r7, #64]	; 0x40
 8006e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e40:	e841 2300 	strex	r3, r2, [r1]
 8006e44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d1e5      	bne.n	8006e18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	3314      	adds	r3, #20
 8006e52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e54:	6a3b      	ldr	r3, [r7, #32]
 8006e56:	e853 3f00 	ldrex	r3, [r3]
 8006e5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	f023 0301 	bic.w	r3, r3, #1
 8006e62:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	3314      	adds	r3, #20
 8006e6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e74:	e841 2300 	strex	r3, r2, [r1]
 8006e78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d1e5      	bne.n	8006e4c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d119      	bne.n	8006ebc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	330c      	adds	r3, #12
 8006e8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	e853 3f00 	ldrex	r3, [r3]
 8006e96:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	f023 0310 	bic.w	r3, r3, #16
 8006e9e:	647b      	str	r3, [r7, #68]	; 0x44
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	330c      	adds	r3, #12
 8006ea6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ea8:	61ba      	str	r2, [r7, #24]
 8006eaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eac:	6979      	ldr	r1, [r7, #20]
 8006eae:	69ba      	ldr	r2, [r7, #24]
 8006eb0:	e841 2300 	strex	r3, r2, [r1]
 8006eb4:	613b      	str	r3, [r7, #16]
   return(result);
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d1e5      	bne.n	8006e88 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2220      	movs	r2, #32
 8006ec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006eca:	bf00      	nop
 8006ecc:	3754      	adds	r7, #84	; 0x54
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bc80      	pop	{r7}
 8006ed2:	4770      	bx	lr

08006ed4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2200      	movs	r2, #0
 8006eec:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006eee:	68f8      	ldr	r0, [r7, #12]
 8006ef0:	f7ff ff41 	bl	8006d76 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ef4:	bf00      	nop
 8006ef6:	3710      	adds	r7, #16
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b085      	sub	sp, #20
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	2b21      	cmp	r3, #33	; 0x21
 8006f0e:	d13e      	bne.n	8006f8e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f18:	d114      	bne.n	8006f44 <UART_Transmit_IT+0x48>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d110      	bne.n	8006f44 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a1b      	ldr	r3, [r3, #32]
 8006f26:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	881b      	ldrh	r3, [r3, #0]
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f36:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6a1b      	ldr	r3, [r3, #32]
 8006f3c:	1c9a      	adds	r2, r3, #2
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	621a      	str	r2, [r3, #32]
 8006f42:	e008      	b.n	8006f56 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6a1b      	ldr	r3, [r3, #32]
 8006f48:	1c59      	adds	r1, r3, #1
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	6211      	str	r1, [r2, #32]
 8006f4e:	781a      	ldrb	r2, [r3, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	3b01      	subs	r3, #1
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	4619      	mov	r1, r3
 8006f64:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d10f      	bne.n	8006f8a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68da      	ldr	r2, [r3, #12]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f78:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68da      	ldr	r2, [r3, #12]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f88:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	e000      	b.n	8006f90 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006f8e:	2302      	movs	r3, #2
  }
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3714      	adds	r7, #20
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bc80      	pop	{r7}
 8006f98:	4770      	bx	lr

08006f9a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b082      	sub	sp, #8
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	68da      	ldr	r2, [r3, #12]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fb0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2220      	movs	r2, #32
 8006fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f7ff fed2 	bl	8006d64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3708      	adds	r7, #8
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b08c      	sub	sp, #48	; 0x30
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	2b22      	cmp	r3, #34	; 0x22
 8006fdc:	f040 80ae 	bne.w	800713c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fe8:	d117      	bne.n	800701a <UART_Receive_IT+0x50>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d113      	bne.n	800701a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	b29b      	uxth	r3, r3
 8007004:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007008:	b29a      	uxth	r2, r3
 800700a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800700c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007012:	1c9a      	adds	r2, r3, #2
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	629a      	str	r2, [r3, #40]	; 0x28
 8007018:	e026      	b.n	8007068 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800701e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007020:	2300      	movs	r3, #0
 8007022:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800702c:	d007      	beq.n	800703e <UART_Receive_IT+0x74>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d10a      	bne.n	800704c <UART_Receive_IT+0x82>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	691b      	ldr	r3, [r3, #16]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d106      	bne.n	800704c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	b2da      	uxtb	r2, r3
 8007046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007048:	701a      	strb	r2, [r3, #0]
 800704a:	e008      	b.n	800705e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	b2db      	uxtb	r3, r3
 8007054:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007058:	b2da      	uxtb	r2, r3
 800705a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800705c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007062:	1c5a      	adds	r2, r3, #1
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800706c:	b29b      	uxth	r3, r3
 800706e:	3b01      	subs	r3, #1
 8007070:	b29b      	uxth	r3, r3
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	4619      	mov	r1, r3
 8007076:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007078:	2b00      	cmp	r3, #0
 800707a:	d15d      	bne.n	8007138 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	68da      	ldr	r2, [r3, #12]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f022 0220 	bic.w	r2, r2, #32
 800708a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	68da      	ldr	r2, [r3, #12]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800709a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	695a      	ldr	r2, [r3, #20]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f022 0201 	bic.w	r2, r2, #1
 80070aa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2220      	movs	r2, #32
 80070b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d135      	bne.n	800712e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	330c      	adds	r3, #12
 80070ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	e853 3f00 	ldrex	r3, [r3]
 80070d6:	613b      	str	r3, [r7, #16]
   return(result);
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	f023 0310 	bic.w	r3, r3, #16
 80070de:	627b      	str	r3, [r7, #36]	; 0x24
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	330c      	adds	r3, #12
 80070e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070e8:	623a      	str	r2, [r7, #32]
 80070ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ec:	69f9      	ldr	r1, [r7, #28]
 80070ee:	6a3a      	ldr	r2, [r7, #32]
 80070f0:	e841 2300 	strex	r3, r2, [r1]
 80070f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d1e5      	bne.n	80070c8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 0310 	and.w	r3, r3, #16
 8007106:	2b10      	cmp	r3, #16
 8007108:	d10a      	bne.n	8007120 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800710a:	2300      	movs	r3, #0
 800710c:	60fb      	str	r3, [r7, #12]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	60fb      	str	r3, [r7, #12]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	60fb      	str	r3, [r7, #12]
 800711e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007124:	4619      	mov	r1, r3
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f7ff fe2e 	bl	8006d88 <HAL_UARTEx_RxEventCallback>
 800712c:	e002      	b.n	8007134 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f7fa fc5a 	bl	80019e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007134:	2300      	movs	r3, #0
 8007136:	e002      	b.n	800713e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007138:	2300      	movs	r3, #0
 800713a:	e000      	b.n	800713e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800713c:	2302      	movs	r3, #2
  }
}
 800713e:	4618      	mov	r0, r3
 8007140:	3730      	adds	r7, #48	; 0x30
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
	...

08007148 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b084      	sub	sp, #16
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	68da      	ldr	r2, [r3, #12]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	430a      	orrs	r2, r1
 8007164:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	689a      	ldr	r2, [r3, #8]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	431a      	orrs	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	695b      	ldr	r3, [r3, #20]
 8007174:	4313      	orrs	r3, r2
 8007176:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007182:	f023 030c 	bic.w	r3, r3, #12
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	6812      	ldr	r2, [r2, #0]
 800718a:	68b9      	ldr	r1, [r7, #8]
 800718c:	430b      	orrs	r3, r1
 800718e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	695b      	ldr	r3, [r3, #20]
 8007196:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	699a      	ldr	r2, [r3, #24]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	430a      	orrs	r2, r1
 80071a4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a2c      	ldr	r2, [pc, #176]	; (800725c <UART_SetConfig+0x114>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d103      	bne.n	80071b8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80071b0:	f7fe fc60 	bl	8005a74 <HAL_RCC_GetPCLK2Freq>
 80071b4:	60f8      	str	r0, [r7, #12]
 80071b6:	e002      	b.n	80071be <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80071b8:	f7fe fc48 	bl	8005a4c <HAL_RCC_GetPCLK1Freq>
 80071bc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	4613      	mov	r3, r2
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	4413      	add	r3, r2
 80071c6:	009a      	lsls	r2, r3, #2
 80071c8:	441a      	add	r2, r3
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80071d4:	4a22      	ldr	r2, [pc, #136]	; (8007260 <UART_SetConfig+0x118>)
 80071d6:	fba2 2303 	umull	r2, r3, r2, r3
 80071da:	095b      	lsrs	r3, r3, #5
 80071dc:	0119      	lsls	r1, r3, #4
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	4613      	mov	r3, r2
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	4413      	add	r3, r2
 80071e6:	009a      	lsls	r2, r3, #2
 80071e8:	441a      	add	r2, r3
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80071f4:	4b1a      	ldr	r3, [pc, #104]	; (8007260 <UART_SetConfig+0x118>)
 80071f6:	fba3 0302 	umull	r0, r3, r3, r2
 80071fa:	095b      	lsrs	r3, r3, #5
 80071fc:	2064      	movs	r0, #100	; 0x64
 80071fe:	fb00 f303 	mul.w	r3, r0, r3
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	011b      	lsls	r3, r3, #4
 8007206:	3332      	adds	r3, #50	; 0x32
 8007208:	4a15      	ldr	r2, [pc, #84]	; (8007260 <UART_SetConfig+0x118>)
 800720a:	fba2 2303 	umull	r2, r3, r2, r3
 800720e:	095b      	lsrs	r3, r3, #5
 8007210:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007214:	4419      	add	r1, r3
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	4613      	mov	r3, r2
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	4413      	add	r3, r2
 800721e:	009a      	lsls	r2, r3, #2
 8007220:	441a      	add	r2, r3
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	fbb2 f2f3 	udiv	r2, r2, r3
 800722c:	4b0c      	ldr	r3, [pc, #48]	; (8007260 <UART_SetConfig+0x118>)
 800722e:	fba3 0302 	umull	r0, r3, r3, r2
 8007232:	095b      	lsrs	r3, r3, #5
 8007234:	2064      	movs	r0, #100	; 0x64
 8007236:	fb00 f303 	mul.w	r3, r0, r3
 800723a:	1ad3      	subs	r3, r2, r3
 800723c:	011b      	lsls	r3, r3, #4
 800723e:	3332      	adds	r3, #50	; 0x32
 8007240:	4a07      	ldr	r2, [pc, #28]	; (8007260 <UART_SetConfig+0x118>)
 8007242:	fba2 2303 	umull	r2, r3, r2, r3
 8007246:	095b      	lsrs	r3, r3, #5
 8007248:	f003 020f 	and.w	r2, r3, #15
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	440a      	add	r2, r1
 8007252:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007254:	bf00      	nop
 8007256:	3710      	adds	r7, #16
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}
 800725c:	40013800 	.word	0x40013800
 8007260:	51eb851f 	.word	0x51eb851f

08007264 <malloc>:
 8007264:	4b02      	ldr	r3, [pc, #8]	; (8007270 <malloc+0xc>)
 8007266:	4601      	mov	r1, r0
 8007268:	6818      	ldr	r0, [r3, #0]
 800726a:	f000 b82b 	b.w	80072c4 <_malloc_r>
 800726e:	bf00      	nop
 8007270:	20000058 	.word	0x20000058

08007274 <free>:
 8007274:	4b02      	ldr	r3, [pc, #8]	; (8007280 <free+0xc>)
 8007276:	4601      	mov	r1, r0
 8007278:	6818      	ldr	r0, [r3, #0]
 800727a:	f000 b8f3 	b.w	8007464 <_free_r>
 800727e:	bf00      	nop
 8007280:	20000058 	.word	0x20000058

08007284 <sbrk_aligned>:
 8007284:	b570      	push	{r4, r5, r6, lr}
 8007286:	4e0e      	ldr	r6, [pc, #56]	; (80072c0 <sbrk_aligned+0x3c>)
 8007288:	460c      	mov	r4, r1
 800728a:	6831      	ldr	r1, [r6, #0]
 800728c:	4605      	mov	r5, r0
 800728e:	b911      	cbnz	r1, 8007296 <sbrk_aligned+0x12>
 8007290:	f000 f8ac 	bl	80073ec <_sbrk_r>
 8007294:	6030      	str	r0, [r6, #0]
 8007296:	4621      	mov	r1, r4
 8007298:	4628      	mov	r0, r5
 800729a:	f000 f8a7 	bl	80073ec <_sbrk_r>
 800729e:	1c43      	adds	r3, r0, #1
 80072a0:	d00a      	beq.n	80072b8 <sbrk_aligned+0x34>
 80072a2:	1cc4      	adds	r4, r0, #3
 80072a4:	f024 0403 	bic.w	r4, r4, #3
 80072a8:	42a0      	cmp	r0, r4
 80072aa:	d007      	beq.n	80072bc <sbrk_aligned+0x38>
 80072ac:	1a21      	subs	r1, r4, r0
 80072ae:	4628      	mov	r0, r5
 80072b0:	f000 f89c 	bl	80073ec <_sbrk_r>
 80072b4:	3001      	adds	r0, #1
 80072b6:	d101      	bne.n	80072bc <sbrk_aligned+0x38>
 80072b8:	f04f 34ff 	mov.w	r4, #4294967295
 80072bc:	4620      	mov	r0, r4
 80072be:	bd70      	pop	{r4, r5, r6, pc}
 80072c0:	2000037c 	.word	0x2000037c

080072c4 <_malloc_r>:
 80072c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072c8:	1ccd      	adds	r5, r1, #3
 80072ca:	f025 0503 	bic.w	r5, r5, #3
 80072ce:	3508      	adds	r5, #8
 80072d0:	2d0c      	cmp	r5, #12
 80072d2:	bf38      	it	cc
 80072d4:	250c      	movcc	r5, #12
 80072d6:	2d00      	cmp	r5, #0
 80072d8:	4607      	mov	r7, r0
 80072da:	db01      	blt.n	80072e0 <_malloc_r+0x1c>
 80072dc:	42a9      	cmp	r1, r5
 80072de:	d905      	bls.n	80072ec <_malloc_r+0x28>
 80072e0:	230c      	movs	r3, #12
 80072e2:	2600      	movs	r6, #0
 80072e4:	603b      	str	r3, [r7, #0]
 80072e6:	4630      	mov	r0, r6
 80072e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80073c0 <_malloc_r+0xfc>
 80072f0:	f000 f868 	bl	80073c4 <__malloc_lock>
 80072f4:	f8d8 3000 	ldr.w	r3, [r8]
 80072f8:	461c      	mov	r4, r3
 80072fa:	bb5c      	cbnz	r4, 8007354 <_malloc_r+0x90>
 80072fc:	4629      	mov	r1, r5
 80072fe:	4638      	mov	r0, r7
 8007300:	f7ff ffc0 	bl	8007284 <sbrk_aligned>
 8007304:	1c43      	adds	r3, r0, #1
 8007306:	4604      	mov	r4, r0
 8007308:	d155      	bne.n	80073b6 <_malloc_r+0xf2>
 800730a:	f8d8 4000 	ldr.w	r4, [r8]
 800730e:	4626      	mov	r6, r4
 8007310:	2e00      	cmp	r6, #0
 8007312:	d145      	bne.n	80073a0 <_malloc_r+0xdc>
 8007314:	2c00      	cmp	r4, #0
 8007316:	d048      	beq.n	80073aa <_malloc_r+0xe6>
 8007318:	6823      	ldr	r3, [r4, #0]
 800731a:	4631      	mov	r1, r6
 800731c:	4638      	mov	r0, r7
 800731e:	eb04 0903 	add.w	r9, r4, r3
 8007322:	f000 f863 	bl	80073ec <_sbrk_r>
 8007326:	4581      	cmp	r9, r0
 8007328:	d13f      	bne.n	80073aa <_malloc_r+0xe6>
 800732a:	6821      	ldr	r1, [r4, #0]
 800732c:	4638      	mov	r0, r7
 800732e:	1a6d      	subs	r5, r5, r1
 8007330:	4629      	mov	r1, r5
 8007332:	f7ff ffa7 	bl	8007284 <sbrk_aligned>
 8007336:	3001      	adds	r0, #1
 8007338:	d037      	beq.n	80073aa <_malloc_r+0xe6>
 800733a:	6823      	ldr	r3, [r4, #0]
 800733c:	442b      	add	r3, r5
 800733e:	6023      	str	r3, [r4, #0]
 8007340:	f8d8 3000 	ldr.w	r3, [r8]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d038      	beq.n	80073ba <_malloc_r+0xf6>
 8007348:	685a      	ldr	r2, [r3, #4]
 800734a:	42a2      	cmp	r2, r4
 800734c:	d12b      	bne.n	80073a6 <_malloc_r+0xe2>
 800734e:	2200      	movs	r2, #0
 8007350:	605a      	str	r2, [r3, #4]
 8007352:	e00f      	b.n	8007374 <_malloc_r+0xb0>
 8007354:	6822      	ldr	r2, [r4, #0]
 8007356:	1b52      	subs	r2, r2, r5
 8007358:	d41f      	bmi.n	800739a <_malloc_r+0xd6>
 800735a:	2a0b      	cmp	r2, #11
 800735c:	d917      	bls.n	800738e <_malloc_r+0xca>
 800735e:	1961      	adds	r1, r4, r5
 8007360:	42a3      	cmp	r3, r4
 8007362:	6025      	str	r5, [r4, #0]
 8007364:	bf18      	it	ne
 8007366:	6059      	strne	r1, [r3, #4]
 8007368:	6863      	ldr	r3, [r4, #4]
 800736a:	bf08      	it	eq
 800736c:	f8c8 1000 	streq.w	r1, [r8]
 8007370:	5162      	str	r2, [r4, r5]
 8007372:	604b      	str	r3, [r1, #4]
 8007374:	4638      	mov	r0, r7
 8007376:	f104 060b 	add.w	r6, r4, #11
 800737a:	f000 f829 	bl	80073d0 <__malloc_unlock>
 800737e:	f026 0607 	bic.w	r6, r6, #7
 8007382:	1d23      	adds	r3, r4, #4
 8007384:	1af2      	subs	r2, r6, r3
 8007386:	d0ae      	beq.n	80072e6 <_malloc_r+0x22>
 8007388:	1b9b      	subs	r3, r3, r6
 800738a:	50a3      	str	r3, [r4, r2]
 800738c:	e7ab      	b.n	80072e6 <_malloc_r+0x22>
 800738e:	42a3      	cmp	r3, r4
 8007390:	6862      	ldr	r2, [r4, #4]
 8007392:	d1dd      	bne.n	8007350 <_malloc_r+0x8c>
 8007394:	f8c8 2000 	str.w	r2, [r8]
 8007398:	e7ec      	b.n	8007374 <_malloc_r+0xb0>
 800739a:	4623      	mov	r3, r4
 800739c:	6864      	ldr	r4, [r4, #4]
 800739e:	e7ac      	b.n	80072fa <_malloc_r+0x36>
 80073a0:	4634      	mov	r4, r6
 80073a2:	6876      	ldr	r6, [r6, #4]
 80073a4:	e7b4      	b.n	8007310 <_malloc_r+0x4c>
 80073a6:	4613      	mov	r3, r2
 80073a8:	e7cc      	b.n	8007344 <_malloc_r+0x80>
 80073aa:	230c      	movs	r3, #12
 80073ac:	4638      	mov	r0, r7
 80073ae:	603b      	str	r3, [r7, #0]
 80073b0:	f000 f80e 	bl	80073d0 <__malloc_unlock>
 80073b4:	e797      	b.n	80072e6 <_malloc_r+0x22>
 80073b6:	6025      	str	r5, [r4, #0]
 80073b8:	e7dc      	b.n	8007374 <_malloc_r+0xb0>
 80073ba:	605b      	str	r3, [r3, #4]
 80073bc:	deff      	udf	#255	; 0xff
 80073be:	bf00      	nop
 80073c0:	20000378 	.word	0x20000378

080073c4 <__malloc_lock>:
 80073c4:	4801      	ldr	r0, [pc, #4]	; (80073cc <__malloc_lock+0x8>)
 80073c6:	f000 b84b 	b.w	8007460 <__retarget_lock_acquire_recursive>
 80073ca:	bf00      	nop
 80073cc:	200004bc 	.word	0x200004bc

080073d0 <__malloc_unlock>:
 80073d0:	4801      	ldr	r0, [pc, #4]	; (80073d8 <__malloc_unlock+0x8>)
 80073d2:	f000 b846 	b.w	8007462 <__retarget_lock_release_recursive>
 80073d6:	bf00      	nop
 80073d8:	200004bc 	.word	0x200004bc

080073dc <memset>:
 80073dc:	4603      	mov	r3, r0
 80073de:	4402      	add	r2, r0
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d100      	bne.n	80073e6 <memset+0xa>
 80073e4:	4770      	bx	lr
 80073e6:	f803 1b01 	strb.w	r1, [r3], #1
 80073ea:	e7f9      	b.n	80073e0 <memset+0x4>

080073ec <_sbrk_r>:
 80073ec:	b538      	push	{r3, r4, r5, lr}
 80073ee:	2300      	movs	r3, #0
 80073f0:	4d05      	ldr	r5, [pc, #20]	; (8007408 <_sbrk_r+0x1c>)
 80073f2:	4604      	mov	r4, r0
 80073f4:	4608      	mov	r0, r1
 80073f6:	602b      	str	r3, [r5, #0]
 80073f8:	f7fb fdc2 	bl	8002f80 <_sbrk>
 80073fc:	1c43      	adds	r3, r0, #1
 80073fe:	d102      	bne.n	8007406 <_sbrk_r+0x1a>
 8007400:	682b      	ldr	r3, [r5, #0]
 8007402:	b103      	cbz	r3, 8007406 <_sbrk_r+0x1a>
 8007404:	6023      	str	r3, [r4, #0]
 8007406:	bd38      	pop	{r3, r4, r5, pc}
 8007408:	200004b8 	.word	0x200004b8

0800740c <__errno>:
 800740c:	4b01      	ldr	r3, [pc, #4]	; (8007414 <__errno+0x8>)
 800740e:	6818      	ldr	r0, [r3, #0]
 8007410:	4770      	bx	lr
 8007412:	bf00      	nop
 8007414:	20000058 	.word	0x20000058

08007418 <__libc_init_array>:
 8007418:	b570      	push	{r4, r5, r6, lr}
 800741a:	2600      	movs	r6, #0
 800741c:	4d0c      	ldr	r5, [pc, #48]	; (8007450 <__libc_init_array+0x38>)
 800741e:	4c0d      	ldr	r4, [pc, #52]	; (8007454 <__libc_init_array+0x3c>)
 8007420:	1b64      	subs	r4, r4, r5
 8007422:	10a4      	asrs	r4, r4, #2
 8007424:	42a6      	cmp	r6, r4
 8007426:	d109      	bne.n	800743c <__libc_init_array+0x24>
 8007428:	f000 f864 	bl	80074f4 <_init>
 800742c:	2600      	movs	r6, #0
 800742e:	4d0a      	ldr	r5, [pc, #40]	; (8007458 <__libc_init_array+0x40>)
 8007430:	4c0a      	ldr	r4, [pc, #40]	; (800745c <__libc_init_array+0x44>)
 8007432:	1b64      	subs	r4, r4, r5
 8007434:	10a4      	asrs	r4, r4, #2
 8007436:	42a6      	cmp	r6, r4
 8007438:	d105      	bne.n	8007446 <__libc_init_array+0x2e>
 800743a:	bd70      	pop	{r4, r5, r6, pc}
 800743c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007440:	4798      	blx	r3
 8007442:	3601      	adds	r6, #1
 8007444:	e7ee      	b.n	8007424 <__libc_init_array+0xc>
 8007446:	f855 3b04 	ldr.w	r3, [r5], #4
 800744a:	4798      	blx	r3
 800744c:	3601      	adds	r6, #1
 800744e:	e7f2      	b.n	8007436 <__libc_init_array+0x1e>
 8007450:	08007540 	.word	0x08007540
 8007454:	08007540 	.word	0x08007540
 8007458:	08007540 	.word	0x08007540
 800745c:	08007544 	.word	0x08007544

08007460 <__retarget_lock_acquire_recursive>:
 8007460:	4770      	bx	lr

08007462 <__retarget_lock_release_recursive>:
 8007462:	4770      	bx	lr

08007464 <_free_r>:
 8007464:	b538      	push	{r3, r4, r5, lr}
 8007466:	4605      	mov	r5, r0
 8007468:	2900      	cmp	r1, #0
 800746a:	d040      	beq.n	80074ee <_free_r+0x8a>
 800746c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007470:	1f0c      	subs	r4, r1, #4
 8007472:	2b00      	cmp	r3, #0
 8007474:	bfb8      	it	lt
 8007476:	18e4      	addlt	r4, r4, r3
 8007478:	f7ff ffa4 	bl	80073c4 <__malloc_lock>
 800747c:	4a1c      	ldr	r2, [pc, #112]	; (80074f0 <_free_r+0x8c>)
 800747e:	6813      	ldr	r3, [r2, #0]
 8007480:	b933      	cbnz	r3, 8007490 <_free_r+0x2c>
 8007482:	6063      	str	r3, [r4, #4]
 8007484:	6014      	str	r4, [r2, #0]
 8007486:	4628      	mov	r0, r5
 8007488:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800748c:	f7ff bfa0 	b.w	80073d0 <__malloc_unlock>
 8007490:	42a3      	cmp	r3, r4
 8007492:	d908      	bls.n	80074a6 <_free_r+0x42>
 8007494:	6820      	ldr	r0, [r4, #0]
 8007496:	1821      	adds	r1, r4, r0
 8007498:	428b      	cmp	r3, r1
 800749a:	bf01      	itttt	eq
 800749c:	6819      	ldreq	r1, [r3, #0]
 800749e:	685b      	ldreq	r3, [r3, #4]
 80074a0:	1809      	addeq	r1, r1, r0
 80074a2:	6021      	streq	r1, [r4, #0]
 80074a4:	e7ed      	b.n	8007482 <_free_r+0x1e>
 80074a6:	461a      	mov	r2, r3
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	b10b      	cbz	r3, 80074b0 <_free_r+0x4c>
 80074ac:	42a3      	cmp	r3, r4
 80074ae:	d9fa      	bls.n	80074a6 <_free_r+0x42>
 80074b0:	6811      	ldr	r1, [r2, #0]
 80074b2:	1850      	adds	r0, r2, r1
 80074b4:	42a0      	cmp	r0, r4
 80074b6:	d10b      	bne.n	80074d0 <_free_r+0x6c>
 80074b8:	6820      	ldr	r0, [r4, #0]
 80074ba:	4401      	add	r1, r0
 80074bc:	1850      	adds	r0, r2, r1
 80074be:	4283      	cmp	r3, r0
 80074c0:	6011      	str	r1, [r2, #0]
 80074c2:	d1e0      	bne.n	8007486 <_free_r+0x22>
 80074c4:	6818      	ldr	r0, [r3, #0]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	4408      	add	r0, r1
 80074ca:	6010      	str	r0, [r2, #0]
 80074cc:	6053      	str	r3, [r2, #4]
 80074ce:	e7da      	b.n	8007486 <_free_r+0x22>
 80074d0:	d902      	bls.n	80074d8 <_free_r+0x74>
 80074d2:	230c      	movs	r3, #12
 80074d4:	602b      	str	r3, [r5, #0]
 80074d6:	e7d6      	b.n	8007486 <_free_r+0x22>
 80074d8:	6820      	ldr	r0, [r4, #0]
 80074da:	1821      	adds	r1, r4, r0
 80074dc:	428b      	cmp	r3, r1
 80074de:	bf01      	itttt	eq
 80074e0:	6819      	ldreq	r1, [r3, #0]
 80074e2:	685b      	ldreq	r3, [r3, #4]
 80074e4:	1809      	addeq	r1, r1, r0
 80074e6:	6021      	streq	r1, [r4, #0]
 80074e8:	6063      	str	r3, [r4, #4]
 80074ea:	6054      	str	r4, [r2, #4]
 80074ec:	e7cb      	b.n	8007486 <_free_r+0x22>
 80074ee:	bd38      	pop	{r3, r4, r5, pc}
 80074f0:	20000378 	.word	0x20000378

080074f4 <_init>:
 80074f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074f6:	bf00      	nop
 80074f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074fa:	bc08      	pop	{r3}
 80074fc:	469e      	mov	lr, r3
 80074fe:	4770      	bx	lr

08007500 <_fini>:
 8007500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007502:	bf00      	nop
 8007504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007506:	bc08      	pop	{r3}
 8007508:	469e      	mov	lr, r3
 800750a:	4770      	bx	lr
