
RX_Ethernet_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b64  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08007c70  08007c70  00017c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c9c  08007c9c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08007c9c  08007c9c  00017c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ca4  08007ca4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ca4  08007ca4  00017ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ca8  08007ca8  00017ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08007cac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e0  2000005c  08007d08  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000063c  08007d08  0002063c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012f34  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003271  00000000  00000000  00032ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010e0  00000000  00000000  00036270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d13  00000000  00000000  00037350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a262  00000000  00000000  00038063  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016926  00000000  00000000  000522c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f2b2  00000000  00000000  00068beb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004960  00000000  00000000  000f7ea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000fc800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08007c58 	.word	0x08007c58

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08007c58 	.word	0x08007c58

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2iz>:
 8000608:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30f      	bcc.n	8000632 <__aeabi_f2iz+0x2a>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d90d      	bls.n	8000638 <__aeabi_f2iz+0x30>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000628:	fa23 f002 	lsr.w	r0, r3, r2
 800062c:	bf18      	it	ne
 800062e:	4240      	negne	r0, r0
 8000630:	4770      	bx	lr
 8000632:	f04f 0000 	mov.w	r0, #0
 8000636:	4770      	bx	lr
 8000638:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800063c:	d101      	bne.n	8000642 <__aeabi_f2iz+0x3a>
 800063e:	0242      	lsls	r2, r0, #9
 8000640:	d105      	bne.n	800064e <__aeabi_f2iz+0x46>
 8000642:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000646:	bf08      	it	eq
 8000648:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr

08000654 <__aeabi_f2uiz>:
 8000654:	0042      	lsls	r2, r0, #1
 8000656:	d20e      	bcs.n	8000676 <__aeabi_f2uiz+0x22>
 8000658:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800065c:	d30b      	bcc.n	8000676 <__aeabi_f2uiz+0x22>
 800065e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000662:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000666:	d409      	bmi.n	800067c <__aeabi_f2uiz+0x28>
 8000668:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800066c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000670:	fa23 f002 	lsr.w	r0, r3, r2
 8000674:	4770      	bx	lr
 8000676:	f04f 0000 	mov.w	r0, #0
 800067a:	4770      	bx	lr
 800067c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000680:	d101      	bne.n	8000686 <__aeabi_f2uiz+0x32>
 8000682:	0242      	lsls	r2, r0, #9
 8000684:	d102      	bne.n	800068c <__aeabi_f2uiz+0x38>
 8000686:	f04f 30ff 	mov.w	r0, #4294967295
 800068a:	4770      	bx	lr
 800068c:	f04f 0000 	mov.w	r0, #0
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <__aeabi_uldivmod>:
 8000694:	b953      	cbnz	r3, 80006ac <__aeabi_uldivmod+0x18>
 8000696:	b94a      	cbnz	r2, 80006ac <__aeabi_uldivmod+0x18>
 8000698:	2900      	cmp	r1, #0
 800069a:	bf08      	it	eq
 800069c:	2800      	cmpeq	r0, #0
 800069e:	bf1c      	itt	ne
 80006a0:	f04f 31ff 	movne.w	r1, #4294967295
 80006a4:	f04f 30ff 	movne.w	r0, #4294967295
 80006a8:	f000 b972 	b.w	8000990 <__aeabi_idiv0>
 80006ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80006b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006b4:	f000 f806 	bl	80006c4 <__udivmoddi4>
 80006b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006c0:	b004      	add	sp, #16
 80006c2:	4770      	bx	lr

080006c4 <__udivmoddi4>:
 80006c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006c8:	9e08      	ldr	r6, [sp, #32]
 80006ca:	460d      	mov	r5, r1
 80006cc:	4604      	mov	r4, r0
 80006ce:	468e      	mov	lr, r1
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d14c      	bne.n	800076e <__udivmoddi4+0xaa>
 80006d4:	428a      	cmp	r2, r1
 80006d6:	4694      	mov	ip, r2
 80006d8:	d967      	bls.n	80007aa <__udivmoddi4+0xe6>
 80006da:	fab2 f382 	clz	r3, r2
 80006de:	b153      	cbz	r3, 80006f6 <__udivmoddi4+0x32>
 80006e0:	fa02 fc03 	lsl.w	ip, r2, r3
 80006e4:	f1c3 0220 	rsb	r2, r3, #32
 80006e8:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ec:	fa20 f202 	lsr.w	r2, r0, r2
 80006f0:	ea42 0e0e 	orr.w	lr, r2, lr
 80006f4:	409c      	lsls	r4, r3
 80006f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006fa:	fbbe f1f7 	udiv	r1, lr, r7
 80006fe:	fa1f f58c 	uxth.w	r5, ip
 8000702:	fb07 ee11 	mls	lr, r7, r1, lr
 8000706:	fb01 f005 	mul.w	r0, r1, r5
 800070a:	0c22      	lsrs	r2, r4, #16
 800070c:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000710:	4290      	cmp	r0, r2
 8000712:	d90a      	bls.n	800072a <__udivmoddi4+0x66>
 8000714:	eb1c 0202 	adds.w	r2, ip, r2
 8000718:	f101 3eff 	add.w	lr, r1, #4294967295
 800071c:	f080 8119 	bcs.w	8000952 <__udivmoddi4+0x28e>
 8000720:	4290      	cmp	r0, r2
 8000722:	f240 8116 	bls.w	8000952 <__udivmoddi4+0x28e>
 8000726:	3902      	subs	r1, #2
 8000728:	4462      	add	r2, ip
 800072a:	1a12      	subs	r2, r2, r0
 800072c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000730:	fb07 2210 	mls	r2, r7, r0, r2
 8000734:	fb00 f505 	mul.w	r5, r0, r5
 8000738:	b2a4      	uxth	r4, r4
 800073a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800073e:	42a5      	cmp	r5, r4
 8000740:	d90a      	bls.n	8000758 <__udivmoddi4+0x94>
 8000742:	eb1c 0404 	adds.w	r4, ip, r4
 8000746:	f100 32ff 	add.w	r2, r0, #4294967295
 800074a:	f080 8104 	bcs.w	8000956 <__udivmoddi4+0x292>
 800074e:	42a5      	cmp	r5, r4
 8000750:	f240 8101 	bls.w	8000956 <__udivmoddi4+0x292>
 8000754:	4464      	add	r4, ip
 8000756:	3802      	subs	r0, #2
 8000758:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800075c:	2100      	movs	r1, #0
 800075e:	1b64      	subs	r4, r4, r5
 8000760:	b11e      	cbz	r6, 800076a <__udivmoddi4+0xa6>
 8000762:	40dc      	lsrs	r4, r3
 8000764:	2300      	movs	r3, #0
 8000766:	e9c6 4300 	strd	r4, r3, [r6]
 800076a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800076e:	428b      	cmp	r3, r1
 8000770:	d908      	bls.n	8000784 <__udivmoddi4+0xc0>
 8000772:	2e00      	cmp	r6, #0
 8000774:	f000 80ea 	beq.w	800094c <__udivmoddi4+0x288>
 8000778:	2100      	movs	r1, #0
 800077a:	e9c6 0500 	strd	r0, r5, [r6]
 800077e:	4608      	mov	r0, r1
 8000780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000784:	fab3 f183 	clz	r1, r3
 8000788:	2900      	cmp	r1, #0
 800078a:	d148      	bne.n	800081e <__udivmoddi4+0x15a>
 800078c:	42ab      	cmp	r3, r5
 800078e:	d302      	bcc.n	8000796 <__udivmoddi4+0xd2>
 8000790:	4282      	cmp	r2, r0
 8000792:	f200 80f8 	bhi.w	8000986 <__udivmoddi4+0x2c2>
 8000796:	1a84      	subs	r4, r0, r2
 8000798:	eb65 0203 	sbc.w	r2, r5, r3
 800079c:	2001      	movs	r0, #1
 800079e:	4696      	mov	lr, r2
 80007a0:	2e00      	cmp	r6, #0
 80007a2:	d0e2      	beq.n	800076a <__udivmoddi4+0xa6>
 80007a4:	e9c6 4e00 	strd	r4, lr, [r6]
 80007a8:	e7df      	b.n	800076a <__udivmoddi4+0xa6>
 80007aa:	b902      	cbnz	r2, 80007ae <__udivmoddi4+0xea>
 80007ac:	deff      	udf	#255	; 0xff
 80007ae:	fab2 f382 	clz	r3, r2
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	f040 808e 	bne.w	80008d4 <__udivmoddi4+0x210>
 80007b8:	1a88      	subs	r0, r1, r2
 80007ba:	2101      	movs	r1, #1
 80007bc:	0c17      	lsrs	r7, r2, #16
 80007be:	fa1f fe82 	uxth.w	lr, r2
 80007c2:	fbb0 f5f7 	udiv	r5, r0, r7
 80007c6:	fb07 0015 	mls	r0, r7, r5, r0
 80007ca:	0c22      	lsrs	r2, r4, #16
 80007cc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80007d0:	fb0e f005 	mul.w	r0, lr, r5
 80007d4:	4290      	cmp	r0, r2
 80007d6:	d908      	bls.n	80007ea <__udivmoddi4+0x126>
 80007d8:	eb1c 0202 	adds.w	r2, ip, r2
 80007dc:	f105 38ff 	add.w	r8, r5, #4294967295
 80007e0:	d202      	bcs.n	80007e8 <__udivmoddi4+0x124>
 80007e2:	4290      	cmp	r0, r2
 80007e4:	f200 80cc 	bhi.w	8000980 <__udivmoddi4+0x2bc>
 80007e8:	4645      	mov	r5, r8
 80007ea:	1a12      	subs	r2, r2, r0
 80007ec:	fbb2 f0f7 	udiv	r0, r2, r7
 80007f0:	fb07 2210 	mls	r2, r7, r0, r2
 80007f4:	fb0e fe00 	mul.w	lr, lr, r0
 80007f8:	b2a4      	uxth	r4, r4
 80007fa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80007fe:	45a6      	cmp	lr, r4
 8000800:	d908      	bls.n	8000814 <__udivmoddi4+0x150>
 8000802:	eb1c 0404 	adds.w	r4, ip, r4
 8000806:	f100 32ff 	add.w	r2, r0, #4294967295
 800080a:	d202      	bcs.n	8000812 <__udivmoddi4+0x14e>
 800080c:	45a6      	cmp	lr, r4
 800080e:	f200 80b4 	bhi.w	800097a <__udivmoddi4+0x2b6>
 8000812:	4610      	mov	r0, r2
 8000814:	eba4 040e 	sub.w	r4, r4, lr
 8000818:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800081c:	e7a0      	b.n	8000760 <__udivmoddi4+0x9c>
 800081e:	f1c1 0720 	rsb	r7, r1, #32
 8000822:	408b      	lsls	r3, r1
 8000824:	fa22 fc07 	lsr.w	ip, r2, r7
 8000828:	ea4c 0c03 	orr.w	ip, ip, r3
 800082c:	fa25 fa07 	lsr.w	sl, r5, r7
 8000830:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000834:	fbba f8f9 	udiv	r8, sl, r9
 8000838:	408d      	lsls	r5, r1
 800083a:	fa20 f307 	lsr.w	r3, r0, r7
 800083e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000842:	fa1f fe8c 	uxth.w	lr, ip
 8000846:	432b      	orrs	r3, r5
 8000848:	fa00 f501 	lsl.w	r5, r0, r1
 800084c:	fb08 f00e 	mul.w	r0, r8, lr
 8000850:	0c1c      	lsrs	r4, r3, #16
 8000852:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000856:	42a0      	cmp	r0, r4
 8000858:	fa02 f201 	lsl.w	r2, r2, r1
 800085c:	d90b      	bls.n	8000876 <__udivmoddi4+0x1b2>
 800085e:	eb1c 0404 	adds.w	r4, ip, r4
 8000862:	f108 3aff 	add.w	sl, r8, #4294967295
 8000866:	f080 8086 	bcs.w	8000976 <__udivmoddi4+0x2b2>
 800086a:	42a0      	cmp	r0, r4
 800086c:	f240 8083 	bls.w	8000976 <__udivmoddi4+0x2b2>
 8000870:	f1a8 0802 	sub.w	r8, r8, #2
 8000874:	4464      	add	r4, ip
 8000876:	1a24      	subs	r4, r4, r0
 8000878:	b298      	uxth	r0, r3
 800087a:	fbb4 f3f9 	udiv	r3, r4, r9
 800087e:	fb09 4413 	mls	r4, r9, r3, r4
 8000882:	fb03 fe0e 	mul.w	lr, r3, lr
 8000886:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 800088a:	45a6      	cmp	lr, r4
 800088c:	d908      	bls.n	80008a0 <__udivmoddi4+0x1dc>
 800088e:	eb1c 0404 	adds.w	r4, ip, r4
 8000892:	f103 30ff 	add.w	r0, r3, #4294967295
 8000896:	d26a      	bcs.n	800096e <__udivmoddi4+0x2aa>
 8000898:	45a6      	cmp	lr, r4
 800089a:	d968      	bls.n	800096e <__udivmoddi4+0x2aa>
 800089c:	3b02      	subs	r3, #2
 800089e:	4464      	add	r4, ip
 80008a0:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80008a4:	fba0 9302 	umull	r9, r3, r0, r2
 80008a8:	eba4 040e 	sub.w	r4, r4, lr
 80008ac:	429c      	cmp	r4, r3
 80008ae:	46c8      	mov	r8, r9
 80008b0:	469e      	mov	lr, r3
 80008b2:	d354      	bcc.n	800095e <__udivmoddi4+0x29a>
 80008b4:	d051      	beq.n	800095a <__udivmoddi4+0x296>
 80008b6:	2e00      	cmp	r6, #0
 80008b8:	d067      	beq.n	800098a <__udivmoddi4+0x2c6>
 80008ba:	ebb5 0308 	subs.w	r3, r5, r8
 80008be:	eb64 040e 	sbc.w	r4, r4, lr
 80008c2:	40cb      	lsrs	r3, r1
 80008c4:	fa04 f707 	lsl.w	r7, r4, r7
 80008c8:	431f      	orrs	r7, r3
 80008ca:	40cc      	lsrs	r4, r1
 80008cc:	e9c6 7400 	strd	r7, r4, [r6]
 80008d0:	2100      	movs	r1, #0
 80008d2:	e74a      	b.n	800076a <__udivmoddi4+0xa6>
 80008d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80008d8:	f1c3 0020 	rsb	r0, r3, #32
 80008dc:	40c1      	lsrs	r1, r0
 80008de:	409d      	lsls	r5, r3
 80008e0:	fa24 f000 	lsr.w	r0, r4, r0
 80008e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008e8:	4328      	orrs	r0, r5
 80008ea:	fbb1 f5f7 	udiv	r5, r1, r7
 80008ee:	fb07 1115 	mls	r1, r7, r5, r1
 80008f2:	fa1f fe8c 	uxth.w	lr, ip
 80008f6:	0c02      	lsrs	r2, r0, #16
 80008f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008fc:	fb05 f10e 	mul.w	r1, r5, lr
 8000900:	4291      	cmp	r1, r2
 8000902:	fa04 f403 	lsl.w	r4, r4, r3
 8000906:	d908      	bls.n	800091a <__udivmoddi4+0x256>
 8000908:	eb1c 0202 	adds.w	r2, ip, r2
 800090c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000910:	d22f      	bcs.n	8000972 <__udivmoddi4+0x2ae>
 8000912:	4291      	cmp	r1, r2
 8000914:	d92d      	bls.n	8000972 <__udivmoddi4+0x2ae>
 8000916:	3d02      	subs	r5, #2
 8000918:	4462      	add	r2, ip
 800091a:	1a52      	subs	r2, r2, r1
 800091c:	fbb2 f1f7 	udiv	r1, r2, r7
 8000920:	fb07 2211 	mls	r2, r7, r1, r2
 8000924:	b280      	uxth	r0, r0
 8000926:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800092a:	fb01 f20e 	mul.w	r2, r1, lr
 800092e:	4282      	cmp	r2, r0
 8000930:	d908      	bls.n	8000944 <__udivmoddi4+0x280>
 8000932:	eb1c 0000 	adds.w	r0, ip, r0
 8000936:	f101 38ff 	add.w	r8, r1, #4294967295
 800093a:	d216      	bcs.n	800096a <__udivmoddi4+0x2a6>
 800093c:	4282      	cmp	r2, r0
 800093e:	d914      	bls.n	800096a <__udivmoddi4+0x2a6>
 8000940:	3902      	subs	r1, #2
 8000942:	4460      	add	r0, ip
 8000944:	1a80      	subs	r0, r0, r2
 8000946:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800094a:	e73a      	b.n	80007c2 <__udivmoddi4+0xfe>
 800094c:	4631      	mov	r1, r6
 800094e:	4630      	mov	r0, r6
 8000950:	e70b      	b.n	800076a <__udivmoddi4+0xa6>
 8000952:	4671      	mov	r1, lr
 8000954:	e6e9      	b.n	800072a <__udivmoddi4+0x66>
 8000956:	4610      	mov	r0, r2
 8000958:	e6fe      	b.n	8000758 <__udivmoddi4+0x94>
 800095a:	454d      	cmp	r5, r9
 800095c:	d2ab      	bcs.n	80008b6 <__udivmoddi4+0x1f2>
 800095e:	ebb9 0802 	subs.w	r8, r9, r2
 8000962:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000966:	3801      	subs	r0, #1
 8000968:	e7a5      	b.n	80008b6 <__udivmoddi4+0x1f2>
 800096a:	4641      	mov	r1, r8
 800096c:	e7ea      	b.n	8000944 <__udivmoddi4+0x280>
 800096e:	4603      	mov	r3, r0
 8000970:	e796      	b.n	80008a0 <__udivmoddi4+0x1dc>
 8000972:	4645      	mov	r5, r8
 8000974:	e7d1      	b.n	800091a <__udivmoddi4+0x256>
 8000976:	46d0      	mov	r8, sl
 8000978:	e77d      	b.n	8000876 <__udivmoddi4+0x1b2>
 800097a:	4464      	add	r4, ip
 800097c:	3802      	subs	r0, #2
 800097e:	e749      	b.n	8000814 <__udivmoddi4+0x150>
 8000980:	3d02      	subs	r5, #2
 8000982:	4462      	add	r2, ip
 8000984:	e731      	b.n	80007ea <__udivmoddi4+0x126>
 8000986:	4608      	mov	r0, r1
 8000988:	e70a      	b.n	80007a0 <__udivmoddi4+0xdc>
 800098a:	4631      	mov	r1, r6
 800098c:	e6ed      	b.n	800076a <__udivmoddi4+0xa6>
 800098e:	bf00      	nop

08000990 <__aeabi_idiv0>:
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop

08000994 <readRegister>:
 * https://github.com/realspinner/SX1278_LoRa
 */

#include <SX1278.h>

uint8_t readRegister(SPI_HandleTypeDef *spi, uint8_t address) {
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	460b      	mov	r3, r1
 800099e:	70fb      	strb	r3, [r7, #3]
	uint8_t rec = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET);  // pull the pin low
 80009a4:	2200      	movs	r2, #0
 80009a6:	2101      	movs	r1, #1
 80009a8:	480f      	ldr	r0, [pc, #60]	; (80009e8 <readRegister+0x54>)
 80009aa:	f003 fb0a 	bl	8003fc2 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80009ae:	2001      	movs	r0, #1
 80009b0:	f002 fd5a 	bl	8003468 <HAL_Delay>
	HAL_SPI_Transmit(spi, &address, 1, 100);  // send address
 80009b4:	1cf9      	adds	r1, r7, #3
 80009b6:	2364      	movs	r3, #100	; 0x64
 80009b8:	2201      	movs	r2, #1
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f005 fd78 	bl	80064b0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi, &rec, 1, 100);  // receive 6 bytes data
 80009c0:	f107 010f 	add.w	r1, r7, #15
 80009c4:	2364      	movs	r3, #100	; 0x64
 80009c6:	2201      	movs	r2, #1
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f005 feb4 	bl	8006736 <HAL_SPI_Receive>
	HAL_Delay(1);
 80009ce:	2001      	movs	r0, #1
 80009d0:	f002 fd4a 	bl	8003468 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);  // pull the pin high
 80009d4:	2201      	movs	r2, #1
 80009d6:	2101      	movs	r1, #1
 80009d8:	4803      	ldr	r0, [pc, #12]	; (80009e8 <readRegister+0x54>)
 80009da:	f003 faf2 	bl	8003fc2 <HAL_GPIO_WritePin>
	return rec;
 80009de:	7bfb      	ldrb	r3, [r7, #15]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3710      	adds	r7, #16
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40010c00 	.word	0x40010c00

080009ec <writeRegister>:

void writeRegister(SPI_HandleTypeDef *spi, uint8_t address, uint8_t *cmd,
		uint8_t lenght) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b088      	sub	sp, #32
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	607a      	str	r2, [r7, #4]
 80009f6:	461a      	mov	r2, r3
 80009f8:	460b      	mov	r3, r1
 80009fa:	72fb      	strb	r3, [r7, #11]
 80009fc:	4613      	mov	r3, r2
 80009fe:	72bb      	strb	r3, [r7, #10]
	if (lenght > 4)
 8000a00:	7abb      	ldrb	r3, [r7, #10]
 8000a02:	2b04      	cmp	r3, #4
 8000a04:	d837      	bhi.n	8000a76 <writeRegister+0x8a>
		return;
	uint8_t tx_data[5] = { 0 };
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	753b      	strb	r3, [r7, #20]
	tx_data[0] = address | 0x80;
 8000a0e:	7afb      	ldrb	r3, [r7, #11]
 8000a10:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	743b      	strb	r3, [r7, #16]
	int j = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]
	for (int i = 1; i <= lenght; i++) {
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	61bb      	str	r3, [r7, #24]
 8000a20:	e00f      	b.n	8000a42 <writeRegister+0x56>
		tx_data[i] = cmd[j++];
 8000a22:	69fb      	ldr	r3, [r7, #28]
 8000a24:	1c5a      	adds	r2, r3, #1
 8000a26:	61fa      	str	r2, [r7, #28]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	7819      	ldrb	r1, [r3, #0]
 8000a30:	f107 0210 	add.w	r2, r7, #16
 8000a34:	69bb      	ldr	r3, [r7, #24]
 8000a36:	4413      	add	r3, r2
 8000a38:	460a      	mov	r2, r1
 8000a3a:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i <= lenght; i++) {
 8000a3c:	69bb      	ldr	r3, [r7, #24]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	61bb      	str	r3, [r7, #24]
 8000a42:	7abb      	ldrb	r3, [r7, #10]
 8000a44:	69ba      	ldr	r2, [r7, #24]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	ddeb      	ble.n	8000a22 <writeRegister+0x36>
	}
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET);  // pull the pin low
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	480c      	ldr	r0, [pc, #48]	; (8000a80 <writeRegister+0x94>)
 8000a50:	f003 fab7 	bl	8003fc2 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi, tx_data, lenght + 1, 1000);
 8000a54:	7abb      	ldrb	r3, [r7, #10]
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	3301      	adds	r3, #1
 8000a5a:	b29a      	uxth	r2, r3
 8000a5c:	f107 0110 	add.w	r1, r7, #16
 8000a60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a64:	68f8      	ldr	r0, [r7, #12]
 8000a66:	f005 fd23 	bl	80064b0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);  // pull the pin high
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	4804      	ldr	r0, [pc, #16]	; (8000a80 <writeRegister+0x94>)
 8000a70:	f003 faa7 	bl	8003fc2 <HAL_GPIO_WritePin>
 8000a74:	e000      	b.n	8000a78 <writeRegister+0x8c>
		return;
 8000a76:	bf00      	nop
//	HAL_Delay(10);
}
 8000a78:	3720      	adds	r7, #32
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40010c00 	.word	0x40010c00

08000a84 <setRFFrequencyReg>:
	rec = spi->Instance->DR; // read data
	HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET);  // pull the pin high
	return rec;
}

void setRFFrequencyReg(SX1278_t *module) {
 8000a84:	b5b0      	push	{r4, r5, r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
	uint64_t freq = ((uint64_t) module->frequency << 19) / FXOSC;
 8000a8c:	6879      	ldr	r1, [r7, #4]
 8000a8e:	6809      	ldr	r1, [r1, #0]
 8000a90:	2000      	movs	r0, #0
 8000a92:	460a      	mov	r2, r1
 8000a94:	4603      	mov	r3, r0
 8000a96:	0b55      	lsrs	r5, r2, #13
 8000a98:	04d4      	lsls	r4, r2, #19
 8000a9a:	4a19      	ldr	r2, [pc, #100]	; (8000b00 <setRFFrequencyReg+0x7c>)
 8000a9c:	f04f 0300 	mov.w	r3, #0
 8000aa0:	4620      	mov	r0, r4
 8000aa2:	4629      	mov	r1, r5
 8000aa4:	f7ff fdf6 	bl	8000694 <__aeabi_uldivmod>
 8000aa8:	4602      	mov	r2, r0
 8000aaa:	460b      	mov	r3, r1
 8000aac:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 8000ab0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000ab4:	f04f 0200 	mov.w	r2, #0
 8000ab8:	f04f 0300 	mov.w	r3, #0
 8000abc:	0c02      	lsrs	r2, r0, #16
 8000abe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ac2:	0c0b      	lsrs	r3, r1, #16
 8000ac4:	b2d3      	uxtb	r3, r2
 8000ac6:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 8000ac8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000acc:	f04f 0200 	mov.w	r2, #0
 8000ad0:	f04f 0300 	mov.w	r3, #0
 8000ad4:	0a02      	lsrs	r2, r0, #8
 8000ad6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000ada:	0a0b      	lsrs	r3, r1, #8
 8000adc:	b2d3      	uxtb	r3, r2
 8000ade:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 8000ae0:	7c3b      	ldrb	r3, [r7, #16]
 8000ae2:	73bb      	strb	r3, [r7, #14]
	writeRegister(module->spi, LR_RegFrMsb, freq_reg, sizeof(freq_reg));
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000aea:	f107 020c 	add.w	r2, r7, #12
 8000aee:	2303      	movs	r3, #3
 8000af0:	2106      	movs	r1, #6
 8000af2:	f7ff ff7b 	bl	80009ec <writeRegister>

}
 8000af6:	bf00      	nop
 8000af8:	3718      	adds	r7, #24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bdb0      	pop	{r4, r5, r7, pc}
 8000afe:	bf00      	nop
 8000b00:	01e84800 	.word	0x01e84800

08000b04 <setOutputPower>:

void setOutputPower(SX1278_t *module) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
	writeRegister(module->spi, LR_RegPaConfig, &(module->power), 1);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	f103 020c 	add.w	r2, r3, #12
 8000b18:	2301      	movs	r3, #1
 8000b1a:	2109      	movs	r1, #9
 8000b1c:	f7ff ff66 	bl	80009ec <writeRegister>
}
 8000b20:	bf00      	nop
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <setOvercurrentProtect>:

void setLORAWAN(SX1278_t *module) {
	writeRegister(module->spi, RegSyncWord, &(module->syncWord), 1);
}

void setOvercurrentProtect(SX1278_t *module) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
	writeRegister(module->spi, LR_RegOcp, &(module->ocp), 1);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	f103 0212 	add.w	r2, r3, #18
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	210b      	movs	r1, #11
 8000b40:	f7ff ff54 	bl	80009ec <writeRegister>
}
 8000b44:	bf00      	nop
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <setPreambleParameters>:

void setLNAGain(SX1278_t *module) {
	writeRegister(module->spi, LR_RegLna, &(module->lnaGain), 1);
}

void setPreambleParameters(SX1278_t *module) {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]

	writeRegister(module->spi, LR_RegSymbTimeoutLsb, &(module->symbTimeoutLsb),
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	f103 0215 	add.w	r2, r3, #21
 8000b60:	2301      	movs	r3, #1
 8000b62:	211f      	movs	r1, #31
 8000b64:	f7ff ff42 	bl	80009ec <writeRegister>
			1);
	writeRegister(module->spi, LR_RegPreambleMsb, &(module->preambleLengthMsb),
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	f103 0217 	add.w	r2, r3, #23
 8000b74:	2301      	movs	r3, #1
 8000b76:	2120      	movs	r1, #32
 8000b78:	f7ff ff38 	bl	80009ec <writeRegister>
			1);
	writeRegister(module->spi, LR_RegPreambleLsb, &(module->preambleLengthLsb),
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	f103 0218 	add.w	r2, r3, #24
 8000b88:	2301      	movs	r3, #1
 8000b8a:	2121      	movs	r1, #33	; 0x21
 8000b8c:	f7ff ff2e 	bl	80009ec <writeRegister>
			1);
}
 8000b90:	bf00      	nop
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <setReModemConfig>:

void setReModemConfig(SX1278_t *module) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
	uint8_t cmd = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	73fb      	strb	r3, [r7, #15]
	cmd = module->bandwidth << 4;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	7b9b      	ldrb	r3, [r3, #14]
 8000ba8:	011b      	lsls	r3, r3, #4
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	73fb      	strb	r3, [r7, #15]
	cmd += module->codingRate << 1;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	7bdb      	ldrb	r3, [r3, #15]
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	7bfb      	ldrb	r3, [r7, #15]
 8000bb8:	4413      	add	r3, r2
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	73fb      	strb	r3, [r7, #15]
	cmd += module->headerMode;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	7f1a      	ldrb	r2, [r3, #28]
 8000bc2:	7bfb      	ldrb	r3, [r7, #15]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegModemConfig1, &cmd, 1); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000bd0:	f107 020f 	add.w	r2, r7, #15
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	211d      	movs	r1, #29
 8000bd8:	f7ff ff08 	bl	80009ec <writeRegister>

	cmd = module->spreadFactor << 4;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	7b5b      	ldrb	r3, [r3, #13]
 8000be0:	011b      	lsls	r3, r3, #4
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	73fb      	strb	r3, [r7, #15]
	cmd += module->LoRa_CRC_sum << 2;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	7c1b      	ldrb	r3, [r3, #16]
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	7bfb      	ldrb	r3, [r7, #15]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	73fb      	strb	r3, [r7, #15]
	cmd += module->symbTimeoutMsb;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	7d9a      	ldrb	r2, [r3, #22]
 8000bfa:	7bfb      	ldrb	r3, [r7, #15]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegModemConfig2, &cmd, 1);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000c08:	f107 020f 	add.w	r2, r7, #15
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	211e      	movs	r1, #30
 8000c10:	f7ff feec 	bl	80009ec <writeRegister>
	writeRegister(module->spi, LR_RegModemConfig3, &(module->AgcAutoOn), 1);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	f103 0214 	add.w	r2, r3, #20
 8000c20:	2301      	movs	r3, #1
 8000c22:	2126      	movs	r1, #38	; 0x26
 8000c24:	f7ff fee2 	bl	80009ec <writeRegister>
}
 8000c28:	bf00      	nop
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <setDetectionParametersReg>:

void setDetectionParametersReg(SX1278_t *module) {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = readRegister(module->spi, LR_RegDetectOptimize);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8000c3e:	2131      	movs	r1, #49	; 0x31
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff fea7 	bl	8000994 <readRegister>
 8000c46:	4603      	mov	r3, r0
 8000c48:	73fb      	strb	r3, [r7, #15]
	tmp &= 0xF8;
 8000c4a:	7bfb      	ldrb	r3, [r7, #15]
 8000c4c:	f023 0307 	bic.w	r3, r3, #7
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	73fb      	strb	r3, [r7, #15]
	tmp |= 0x05;
 8000c54:	7bfb      	ldrb	r3, [r7, #15]
 8000c56:	f043 0305 	orr.w	r3, r3, #5
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegDetectOptimize, &tmp, 1);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000c64:	f107 020f 	add.w	r2, r7, #15
 8000c68:	2301      	movs	r3, #1
 8000c6a:	2131      	movs	r1, #49	; 0x31
 8000c6c:	f7ff febe 	bl	80009ec <writeRegister>
	tmp = 0x0C;
 8000c70:	230c      	movs	r3, #12
 8000c72:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegDetectionThreshold, &tmp, 1);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000c7a:	f107 020f 	add.w	r2, r7, #15
 8000c7e:	2301      	movs	r3, #1
 8000c80:	2137      	movs	r1, #55	; 0x37
 8000c82:	f7ff feb3 	bl	80009ec <writeRegister>
}
 8000c86:	bf00      	nop
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <setLoRaLowFreqModeReg>:
void readOperatingMode(SX1278_t *module) {
	module->operatingMode = (0x07 & readRegister(module->spi,
	LR_RegOpMode));
}

void setLoRaLowFreqModeReg(SX1278_t *module, OPERATING_MODE_t mode) {
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b084      	sub	sp, #16
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
 8000c96:	460b      	mov	r3, r1
 8000c98:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd = LORA_MODE_ACTIVATION | LOW_FREQUENCY_MODE | mode;
 8000c9a:	78fb      	ldrb	r3, [r7, #3]
 8000c9c:	f063 0377 	orn	r3, r3, #119	; 0x77
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegOpMode, &cmd, 1);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000caa:	f107 020f 	add.w	r2, r7, #15
 8000cae:	2301      	movs	r3, #1
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	f7ff fe9b 	bl	80009ec <writeRegister>
	module->operatingMode = mode;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	78fa      	ldrb	r2, [r7, #3]
 8000cba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8000cbe:	bf00      	nop
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <clearIrqFlagsReg>:

void clearIrqFlagsReg(SX1278_t *module) {
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b084      	sub	sp, #16
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
	uint8_t cmd = 0xFF;
 8000cce:	23ff      	movs	r3, #255	; 0xff
 8000cd0:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegIrqFlags, &cmd, 1);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000cd8:	f107 020f 	add.w	r2, r7, #15
 8000cdc:	2301      	movs	r3, #1
 8000cde:	2112      	movs	r1, #18
 8000ce0:	f7ff fe84 	bl	80009ec <writeRegister>
}
 8000ce4:	bf00      	nop
 8000ce6:	3710      	adds	r7, #16
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <writeLoRaParametersReg>:

void writeLoRaParametersReg(SX1278_t *module) {
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
	setLoRaLowFreqModeReg(module, SLEEP);
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f7ff ffc9 	bl	8000c8e <setLoRaLowFreqModeReg>
	HAL_Delay(15);
 8000cfc:	200f      	movs	r0, #15
 8000cfe:	f002 fbb3 	bl	8003468 <HAL_Delay>
	setRFFrequencyReg(module);
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f7ff febe 	bl	8000a84 <setRFFrequencyReg>
	writeRegister(module->spi, RegSyncWord, &(module->syncWord), 1);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	f103 0211 	add.w	r2, r3, #17
 8000d14:	2301      	movs	r3, #1
 8000d16:	2139      	movs	r1, #57	; 0x39
 8000d18:	f7ff fe68 	bl	80009ec <writeRegister>
	setOutputPower(module);
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	f7ff fef1 	bl	8000b04 <setOutputPower>
	setOvercurrentProtect(module);
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f7ff ff00 	bl	8000b28 <setOvercurrentProtect>
	writeRegister(module->spi, LR_RegLna, &(module->lnaGain), 1);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f103 0213 	add.w	r2, r3, #19
 8000d34:	2301      	movs	r3, #1
 8000d36:	210c      	movs	r1, #12
 8000d38:	f7ff fe58 	bl	80009ec <writeRegister>
	if (module->spreadFactor == SF_6) {
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	7b5b      	ldrb	r3, [r3, #13]
 8000d40:	2b06      	cmp	r3, #6
 8000d42:	d109      	bne.n	8000d58 <writeLoRaParametersReg+0x6c>
		module->headerMode = IMPLICIT;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2201      	movs	r2, #1
 8000d48:	771a      	strb	r2, [r3, #28]
		module->symbTimeoutMsb = 0x03;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2203      	movs	r2, #3
 8000d4e:	759a      	strb	r2, [r3, #22]
		setDetectionParametersReg(module);
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f7ff ff6d 	bl	8000c30 <setDetectionParametersReg>
 8000d56:	e005      	b.n	8000d64 <writeLoRaParametersReg+0x78>
	} else {
		module->headerMode = EXPLICIT;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	771a      	strb	r2, [r3, #28]
		module->symbTimeoutMsb = 0x00;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2200      	movs	r2, #0
 8000d62:	759a      	strb	r2, [r3, #22]
	}

	setReModemConfig(module);
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f7ff ff17 	bl	8000b98 <setReModemConfig>
	setPreambleParameters(module);
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f7ff feee 	bl	8000b4c <setPreambleParameters>
	writeRegister(module->spi, LR_RegHopPeriod, &(module->fhssValue), 1);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f103 0219 	add.w	r2, r3, #25
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	2124      	movs	r1, #36	; 0x24
 8000d80:	f7ff fe34 	bl	80009ec <writeRegister>
	writeRegister(module->spi, LR_RegDioMapping1, &(module->dioConfig), 1);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f103 021a 	add.w	r2, r3, #26
 8000d90:	2301      	movs	r3, #1
 8000d92:	2140      	movs	r1, #64	; 0x40
 8000d94:	f7ff fe2a 	bl	80009ec <writeRegister>
	clearIrqFlagsReg(module);
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f7ff ff94 	bl	8000cc6 <clearIrqFlagsReg>
	writeRegister(module->spi, LR_RegIrqFlagsMask, &(module->flagsMode), 1);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f103 021b 	add.w	r2, r3, #27
 8000daa:	2301      	movs	r3, #1
 8000dac:	2111      	movs	r1, #17
 8000dae:	f7ff fe1d 	bl	80009ec <writeRegister>
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <changeMode>:

void changeMode(SX1278_t *module, Lora_Mode_t mode) {
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b084      	sub	sp, #16
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	70fb      	strb	r3, [r7, #3]
	uint32_t timeStart = HAL_GetTick();
 8000dc6:	f002 fb45 	bl	8003454 <HAL_GetTick>
 8000dca:	60f8      	str	r0, [r7, #12]
	if (mode == SLAVE_SENDER || mode == MASTER_SENDER) {
 8000dcc:	78fb      	ldrb	r3, [r7, #3]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d002      	beq.n	8000dd8 <changeMode+0x1e>
 8000dd2:	78fb      	ldrb	r3, [r7, #3]
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d11f      	bne.n	8000e18 <changeMode+0x5e>
		module->frequency =
				(mode == SLAVE_SENDER) ? module->upFreq : module->dlFreq;
 8000dd8:	78fb      	ldrb	r3, [r7, #3]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d102      	bne.n	8000de4 <changeMode+0x2a>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	e001      	b.n	8000de8 <changeMode+0x2e>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	685b      	ldr	r3, [r3, #4]
		module->frequency =
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	6013      	str	r3, [r2, #0]
		module->dioConfig = DIO0_TX_DONE | DIO1_RX_TIMEOUT
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2241      	movs	r2, #65	; 0x41
 8000df0:	769a      	strb	r2, [r3, #26]
				| DIO2_FHSS_CHANGE_CHANNEL | DIO3_VALID_HEADER;
		module->flagsMode = 0xff;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	22ff      	movs	r2, #255	; 0xff
 8000df6:	76da      	strb	r2, [r3, #27]
		CLEAR_BIT(module->flagsMode, TX_DONE_MASK);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	7edb      	ldrb	r3, [r3, #27]
 8000dfc:	f023 0308 	bic.w	r3, r3, #8
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	76da      	strb	r2, [r3, #27]
		module->mode = mode;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	78fa      	ldrb	r2, [r7, #3]
 8000e0a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		module->status = TX_MODE;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2201      	movs	r2, #1
 8000e12:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8000e16:	e024      	b.n	8000e62 <changeMode+0xa8>

	} else if (mode == SLAVE_RECEIVER || mode == MASTER_RECEIVER) {
 8000e18:	78fb      	ldrb	r3, [r7, #3]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d002      	beq.n	8000e24 <changeMode+0x6a>
 8000e1e:	78fb      	ldrb	r3, [r7, #3]
 8000e20:	2b03      	cmp	r3, #3
 8000e22:	d11e      	bne.n	8000e62 <changeMode+0xa8>
		module->frequency =
				(mode == SLAVE_RECEIVER) ? module->dlFreq : module->upFreq;
 8000e24:	78fb      	ldrb	r3, [r7, #3]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d102      	bne.n	8000e30 <changeMode+0x76>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	e001      	b.n	8000e34 <changeMode+0x7a>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	689b      	ldr	r3, [r3, #8]
		module->frequency =
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	6013      	str	r3, [r2, #0]

		module->dioConfig = DIO0_RX_DONE | DIO1_RX_TIMEOUT
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	769a      	strb	r2, [r3, #26]
				| DIO2_FHSS_CHANGE_CHANNEL | DIO3_VALID_HEADER;
		module->flagsMode = 0xff;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	22ff      	movs	r2, #255	; 0xff
 8000e42:	76da      	strb	r2, [r3, #27]
		module->flagsMode &= ~(RX_DONE_MASK) & ~(PAYLOAD_CRC_ERROR_MASK);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	7edb      	ldrb	r3, [r3, #27]
 8000e48:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	76da      	strb	r2, [r3, #27]
		module->mode = mode;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	78fa      	ldrb	r2, [r7, #3]
 8000e56:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		module->status = RX_MODE;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2202      	movs	r2, #2
 8000e5e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	}

	setLoRaLowFreqModeReg(module, STANDBY);
 8000e62:	2101      	movs	r1, #1
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f7ff ff12 	bl	8000c8e <setLoRaLowFreqModeReg>
	//HAL_Delay(1);
	setRFFrequencyReg(module);
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff fe0a 	bl	8000a84 <setRFFrequencyReg>
	writeRegister(module->spi, LR_RegDioMapping1, &(module->dioConfig), 1);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	f103 021a 	add.w	r2, r3, #26
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	2140      	movs	r1, #64	; 0x40
 8000e80:	f7ff fdb4 	bl	80009ec <writeRegister>
	clearIrqFlagsReg(module);
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f7ff ff1e 	bl	8000cc6 <clearIrqFlagsReg>
	writeRegister(module->spi, LR_RegIrqFlagsMask, &(module->flagsMode), 1);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f103 021b 	add.w	r2, r3, #27
 8000e96:	2301      	movs	r3, #1
 8000e98:	2111      	movs	r1, #17
 8000e9a:	f7ff fda7 	bl	80009ec <writeRegister>
}
 8000e9e:	bf00      	nop
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
	...

08000ea8 <sx1278Reset>:
	module->preambleLengthLsb = PREAMBLE_LENGTH_LSB;
	module->preambleLengthLsb = 6; // for L-TEL PROTOCOL
	module->fhssValue = HOPS_PERIOD; // for L-TEL PROTOCOL
}

void sx1278Reset() {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 8000eac:	2201      	movs	r2, #1
 8000eae:	2101      	movs	r1, #1
 8000eb0:	480a      	ldr	r0, [pc, #40]	; (8000edc <sx1278Reset+0x34>)
 8000eb2:	f003 f886 	bl	8003fc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2101      	movs	r1, #1
 8000eba:	4808      	ldr	r0, [pc, #32]	; (8000edc <sx1278Reset+0x34>)
 8000ebc:	f003 f881 	bl	8003fc2 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	f002 fad1 	bl	8003468 <HAL_Delay>
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	2101      	movs	r1, #1
 8000eca:	4804      	ldr	r0, [pc, #16]	; (8000edc <sx1278Reset+0x34>)
 8000ecc:	f003 f879 	bl	8003fc2 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000ed0:	2064      	movs	r0, #100	; 0x64
 8000ed2:	f002 fac9 	bl	8003468 <HAL_Delay>
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40010c00 	.word	0x40010c00

08000ee0 <waitForTxEnd>:

void waitForTxEnd(SX1278_t *loRa) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	int timeStart = HAL_GetTick();
 8000ee8:	f002 fab4 	bl	8003454 <HAL_GetTick>
 8000eec:	4603      	mov	r3, r0
 8000eee:	60fb      	str	r3, [r7, #12]


	while (1) {
		if (HAL_GPIO_ReadPin(LORA_BUSSY_GPIO_Port, LORA_BUSSY_Pin)) {
 8000ef0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ef4:	4819      	ldr	r0, [pc, #100]	; (8000f5c <waitForTxEnd+0x7c>)
 8000ef6:	f003 f84d 	bl	8003f94 <HAL_GPIO_ReadPin>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d015      	beq.n	8000f2c <waitForTxEnd+0x4c>

			readRegister(loRa->spi, LR_RegIrqFlags);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8000f06:	2112      	movs	r1, #18
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff fd43 	bl	8000994 <readRegister>
			clearIrqFlagsReg(loRa);
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff fed9 	bl	8000cc6 <clearIrqFlagsReg>
			loRa->status = TX_DONE;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2203      	movs	r2, #3
 8000f18:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			loRa->lastTxTime = HAL_GetTick() - timeStart;
 8000f1c:	f002 fa9a 	bl	8003454 <HAL_GetTick>
 8000f20:	4602      	mov	r2, r0
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	1ad2      	subs	r2, r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	621a      	str	r2, [r3, #32]
			return;
 8000f2a:	e013      	b.n	8000f54 <waitForTxEnd+0x74>
		}
		if (HAL_GetTick() - timeStart > LORA_SEND_TIMEOUT) {
 8000f2c:	f002 fa92 	bl	8003454 <HAL_GetTick>
 8000f30:	4602      	mov	r2, r0
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d906      	bls.n	8000f4c <waitForTxEnd+0x6c>
			sx1278Reset();
 8000f3e:	f7ff ffb3 	bl	8000ea8 <sx1278Reset>
			loRa->status = TX_TIMEOUT;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2205      	movs	r2, #5
 8000f46:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			return;
 8000f4a:	e003      	b.n	8000f54 <waitForTxEnd+0x74>
		}
		HAL_Delay(1);
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	f002 fa8b 	bl	8003468 <HAL_Delay>
		if (HAL_GPIO_ReadPin(LORA_BUSSY_GPIO_Port, LORA_BUSSY_Pin)) {
 8000f52:	e7cd      	b.n	8000ef0 <waitForTxEnd+0x10>
	}
}
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40010c00 	.word	0x40010c00

08000f60 <getRxFifoData>:
	flags = readRegister(module->spi, LR_RegIrqFlags);
	uint8_t errorActivation = READ_BIT(flags, PAYLOAD_CRC_ERROR_MASK);
	return errorActivation;
}

void getRxFifoData(SX1278_t *loRa) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	uint8_t timeout = 100;
 8000f68:	2364      	movs	r3, #100	; 0x64
 8000f6a:	73fb      	strb	r3, [r7, #15]
	uint8_t addr = 0x00;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	73bb      	strb	r3, [r7, #14]
	loRa->rxSize = readRegister(loRa->spi, LR_RegRxNbBytes); //Number for received bytes
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8000f76:	2113      	movs	r1, #19
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff fd0b 	bl	8000994 <readRegister>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	461a      	mov	r2, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
	if (loRa->rxSize > 0) {
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f893 315b 	ldrb.w	r3, [r3, #347]	; 0x15b
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d021      	beq.n	8000fd6 <getRxFifoData+0x76>
		HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_RESET); // pull the pin low
 8000f92:	2200      	movs	r2, #0
 8000f94:	2101      	movs	r1, #1
 8000f96:	4812      	ldr	r0, [pc, #72]	; (8000fe0 <getRxFifoData+0x80>)
 8000f98:	f003 f813 	bl	8003fc2 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(loRa->spi, &addr, 1, timeout); // send address
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	f107 010e 	add.w	r1, r7, #14
 8000fa8:	2201      	movs	r2, #1
 8000faa:	f005 fa81 	bl	80064b0 <HAL_SPI_Transmit>
		HAL_SPI_Receive(loRa->spi, loRa->rxData, 256, timeout); // receive 6 bytes data
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f103 012f 	add.w	r1, r3, #47	; 0x2f
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
 8000fbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fc0:	f005 fbb9 	bl	8006736 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin, GPIO_PIN_SET); // pull the pin high
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <getRxFifoData+0x80>)
 8000fca:	f002 fffa 	bl	8003fc2 <HAL_GPIO_WritePin>
		loRa->status = RX_DONE;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2204      	movs	r2, #4
 8000fd2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	}

}
 8000fd6:	bf00      	nop
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40010c00 	.word	0x40010c00

08000fe4 <setRxFifoAddr>:
	cmd = readRegister(loRa->spi, LR_RegPayloadLength);

	return cmd;
}

void setRxFifoAddr(SX1278_t *module) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	setLoRaLowFreqModeReg(module, SLEEP); //Change modem mode Must in Sleep mode
 8000fec:	2100      	movs	r1, #0
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff fe4d 	bl	8000c8e <setLoRaLowFreqModeReg>
	uint8_t cmd = module->rxSize;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f893 315b 	ldrb.w	r3, [r3, #347]	; 0x15b
 8000ffa:	73fb      	strb	r3, [r7, #15]
	writeRegister(module->spi, LR_RegPayloadLength, &(cmd), 1); //RegPayloadLength 21byte
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8001002:	f107 020f 	add.w	r2, r7, #15
 8001006:	2301      	movs	r3, #1
 8001008:	2122      	movs	r1, #34	; 0x22
 800100a:	f7ff fcef 	bl	80009ec <writeRegister>
	uint8_t addr = 0x00;
 800100e:	2300      	movs	r3, #0
 8001010:	73bb      	strb	r3, [r7, #14]
	writeRegister(module->spi, LR_RegFifoAddrPtr, &addr, 1); //RegFifoAddrPtr
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8001018:	f107 020e 	add.w	r2, r7, #14
 800101c:	2301      	movs	r3, #1
 800101e:	210d      	movs	r1, #13
 8001020:	f7ff fce4 	bl	80009ec <writeRegister>
	module->rxSize = readRegister(module->spi, LR_RegPayloadLength);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 800102a:	2122      	movs	r1, #34	; 0x22
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fcb1 	bl	8000994 <readRegister>
 8001032:	4603      	mov	r3, r0
 8001034:	461a      	mov	r2, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
}
 800103c:	bf00      	nop
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <setTxFifoData>:

uint8_t setTxFifoData(SX1278_t *loRa) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	uint8_t cmd = loRa->txSize;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8001052:	72fb      	strb	r3, [r7, #11]
	uint8_t base_addr = 0x80;
 8001054:	2380      	movs	r3, #128	; 0x80
 8001056:	72bb      	strb	r3, [r7, #10]
	if (loRa->txSize > 0) {
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800105e:	2b00      	cmp	r3, #0
 8001060:	d02a      	beq.n	80010b8 <setTxFifoData+0x74>
		writeRegister(loRa->spi, LR_RegPayloadLength, &(cmd), 1);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8001068:	f107 020b 	add.w	r2, r7, #11
 800106c:	2301      	movs	r3, #1
 800106e:	2122      	movs	r1, #34	; 0x22
 8001070:	f7ff fcbc 	bl	80009ec <writeRegister>
		writeRegister(loRa->spi, LR_RegFifoAddrPtr, &base_addr, 1);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 800107a:	f107 020a 	add.w	r2, r7, #10
 800107e:	2301      	movs	r3, #1
 8001080:	210d      	movs	r1, #13
 8001082:	f7ff fcb3 	bl	80009ec <writeRegister>
		for (int i = 0; i < loRa->txSize; i++)
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	e00e      	b.n	80010aa <setTxFifoData+0x66>
			writeRegister(loRa->spi, 0x00, loRa->txData + i, 1);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	441a      	add	r2, r3
 800109c:	2301      	movs	r3, #1
 800109e:	2100      	movs	r1, #0
 80010a0:	f7ff fca4 	bl	80009ec <writeRegister>
		for (int i = 0; i < loRa->txSize; i++)
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	3301      	adds	r3, #1
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 80010b0:	461a      	mov	r2, r3
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	4293      	cmp	r3, r2
 80010b6:	dbe9      	blt.n	800108c <setTxFifoData+0x48>
	}
	return (loRa->txSize);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <transmit>:
	clearRxMemory(loRa);
	waitForRxDone(loRa);
	getRxFifoData(loRa);
}

void transmit(SX1278_t *loRa) {
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
	setTxFifoData(loRa);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff ffb8 	bl	8001044 <setTxFifoData>
	setLoRaLowFreqModeReg(loRa, TX);
 80010d4:	2103      	movs	r1, #3
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f7ff fdd9 	bl	8000c8e <setLoRaLowFreqModeReg>
	waitForTxEnd(loRa);
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff feff 	bl	8000ee0 <waitForTxEnd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <HAL_readLoRaSettings>:

	if (loRa->dlFreq < DOWNLINK_FREQ_MIN || loRa->dlFreq > DOWNLINK_FREQ_MAX)
		loRa->dlFreq = DOWNLINK_FREQ;
}

void HAL_readLoRaSettings(SX1278_t *loRa) {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]

	readPage(M24C64_PAGE0, &(loRa->spreadFactor), 0, 1);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f103 010d 	add.w	r1, r3, #13
 80010fa:	2301      	movs	r3, #1
 80010fc:	2200      	movs	r2, #0
 80010fe:	2000      	movs	r0, #0
 8001100:	f000 f8f2 	bl	80012e8 <readPage>
	readPage(M24C64_PAGE0, &(loRa->bandwidth), 1, 1);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f103 010e 	add.w	r1, r3, #14
 800110a:	2301      	movs	r3, #1
 800110c:	2201      	movs	r2, #1
 800110e:	2000      	movs	r0, #0
 8001110:	f000 f8ea 	bl	80012e8 <readPage>
	readPage(M24C64_PAGE0, &(loRa->codingRate), 2, 1);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f103 010f 	add.w	r1, r3, #15
 800111a:	2301      	movs	r3, #1
 800111c:	2202      	movs	r2, #2
 800111e:	2000      	movs	r0, #0
 8001120:	f000 f8e2 	bl	80012e8 <readPage>
	readPage(M24C64_PAGE1, (uint8_t*) &(loRa->dlFreq), 0, 4);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	1d19      	adds	r1, r3, #4
 8001128:	2304      	movs	r3, #4
 800112a:	2200      	movs	r2, #0
 800112c:	2001      	movs	r0, #1
 800112e:	f000 f8db 	bl	80012e8 <readPage>
	readPage(M24C64_PAGE1, (uint8_t*) &(loRa->upFreq), 4, 4);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f103 0108 	add.w	r1, r3, #8
 8001138:	2304      	movs	r3, #4
 800113a:	2204      	movs	r2, #4
 800113c:	2001      	movs	r0, #1
 800113e:	f000 f8d3 	bl	80012e8 <readPage>
	if (loRa->spreadFactor < SF_6 || loRa->spreadFactor > SF_12)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	7b5b      	ldrb	r3, [r3, #13]
 8001146:	2b05      	cmp	r3, #5
 8001148:	d903      	bls.n	8001152 <HAL_readLoRaSettings+0x66>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	7b5b      	ldrb	r3, [r3, #13]
 800114e:	2b0c      	cmp	r3, #12
 8001150:	d902      	bls.n	8001158 <HAL_readLoRaSettings+0x6c>
		//loRa->spreadFactor = SF_10;
		loRa->spreadFactor = SF_7;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2207      	movs	r2, #7
 8001156:	735a      	strb	r2, [r3, #13]

	if (loRa->bandwidth < LORABW_7_8KHZ || loRa->bandwidth > LORABW_500KHZ)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	7b9b      	ldrb	r3, [r3, #14]
 800115c:	2b09      	cmp	r3, #9
 800115e:	d902      	bls.n	8001166 <HAL_readLoRaSettings+0x7a>
		//loRa->bandwidth = LORABW_62_5KHZ;
		loRa->bandwidth = LORABW_125KHZ;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2207      	movs	r2, #7
 8001164:	739a      	strb	r2, [r3, #14]

	if (loRa->codingRate < LORA_CR_4_5 || loRa->codingRate > LORA_CR_4_8)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	7bdb      	ldrb	r3, [r3, #15]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <HAL_readLoRaSettings+0x8a>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	7bdb      	ldrb	r3, [r3, #15]
 8001172:	2b04      	cmp	r3, #4
 8001174:	d902      	bls.n	800117c <HAL_readLoRaSettings+0x90>
		//loRa->codingRate = LORA_CR_4_6;
		loRa->codingRate = LORA_CR_4_5;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2201      	movs	r2, #1
 800117a:	73da      	strb	r2, [r3, #15]

	if (loRa->upFreq < UPLINK_FREQ_MIN || loRa->upFreq > UPLINK_FREQ_MAX)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	4a0d      	ldr	r2, [pc, #52]	; (80011b8 <HAL_readLoRaSettings+0xcc>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d904      	bls.n	8001190 <HAL_readLoRaSettings+0xa4>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	4a0c      	ldr	r2, [pc, #48]	; (80011bc <HAL_readLoRaSettings+0xd0>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d902      	bls.n	8001196 <HAL_readLoRaSettings+0xaa>
		loRa->upFreq = UPLINK_FREQ;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4a0b      	ldr	r2, [pc, #44]	; (80011c0 <HAL_readLoRaSettings+0xd4>)
 8001194:	609a      	str	r2, [r3, #8]

	if (loRa->dlFreq < DOWNLINK_FREQ_MIN || loRa->dlFreq > DOWNLINK_FREQ_MAX)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	4a0a      	ldr	r2, [pc, #40]	; (80011c4 <HAL_readLoRaSettings+0xd8>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d904      	bls.n	80011aa <HAL_readLoRaSettings+0xbe>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	4a08      	ldr	r2, [pc, #32]	; (80011c8 <HAL_readLoRaSettings+0xdc>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d902      	bls.n	80011b0 <HAL_readLoRaSettings+0xc4>
		loRa->dlFreq = DOWNLINK_FREQ;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a07      	ldr	r2, [pc, #28]	; (80011cc <HAL_readLoRaSettings+0xe0>)
 80011ae:	605a      	str	r2, [r3, #4]
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	09c670ff 	.word	0x09c670ff
 80011bc:	0a5f0780 	.word	0x0a5f0780
 80011c0:	0a408300 	.word	0x0a408300
 80011c4:	08d24cff 	.word	0x08d24cff
 80011c8:	095ba140 	.word	0x095ba140
 80011cc:	091e9840 	.word	0x091e9840

080011d0 <loRaInit>:

SX1278_t* loRaInit(SPI_HandleTypeDef *hspi1, Lora_Mode_t loRaMode) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	460b      	mov	r3, r1
 80011da:	70fb      	strb	r3, [r7, #3]
	SX1278_t *loRa;
	loRa = malloc(sizeof(SX1278_t));
 80011dc:	f44f 70b4 	mov.w	r0, #360	; 0x168
 80011e0:	f006 fbf2 	bl	80079c8 <malloc>
 80011e4:	4603      	mov	r3, r0
 80011e6:	60fb      	str	r3, [r7, #12]
	if(loRa != NULL){
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d04d      	beq.n	800128a <loRaInit+0xba>
		HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 80011ee:	2201      	movs	r2, #1
 80011f0:	2101      	movs	r1, #1
 80011f2:	4828      	ldr	r0, [pc, #160]	; (8001294 <loRaInit+0xc4>)
 80011f4:	f002 fee5 	bl	8003fc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_SET);
 80011f8:	2201      	movs	r2, #1
 80011fa:	2102      	movs	r1, #2
 80011fc:	4825      	ldr	r0, [pc, #148]	; (8001294 <loRaInit+0xc4>)
 80011fe:	f002 fee0 	bl	8003fc2 <HAL_GPIO_WritePin>
		loRa->spi = hspi1;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
		loRa->operatingMode = readRegister(loRa->spi, LR_RegOpMode);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8001210:	2101      	movs	r1, #1
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff fbbe 	bl	8000994 <readRegister>
 8001218:	4603      	mov	r3, r0
 800121a:	461a      	mov	r2, r3
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		loRa->mode = -1;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	22ff      	movs	r2, #255	; 0xff
 8001226:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		loRa->power = SX1278_POWER_17DBM;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	22fc      	movs	r2, #252	; 0xfc
 800122e:	731a      	strb	r2, [r3, #12]
		loRa->LoRa_CRC_sum = CRC_ENABLE;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2201      	movs	r2, #1
 8001234:	741a      	strb	r2, [r3, #16]
		loRa->ocp = OVERCURRENTPROTECT;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	220b      	movs	r2, #11
 800123a:	749a      	strb	r2, [r3, #18]
		loRa->lnaGain = LNAGAIN;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	2223      	movs	r2, #35	; 0x23
 8001240:	74da      	strb	r2, [r3, #19]
		loRa->AgcAutoOn = 12; // for L-TEL PROTOCOL
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	220c      	movs	r2, #12
 8001246:	751a      	strb	r2, [r3, #20]
		loRa->syncWord = 0x12; // for L-TEL PROTOCOL
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	2212      	movs	r2, #18
 800124c:	745a      	strb	r2, [r3, #17]
		loRa->symbTimeoutLsb = RX_TIMEOUT_LSB;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	2208      	movs	r2, #8
 8001252:	755a      	strb	r2, [r3, #21]
		loRa->preambleLengthMsb = PREAMBLE_LENGTH_MSB;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2200      	movs	r2, #0
 8001258:	75da      	strb	r2, [r3, #23]
		loRa->preambleLengthLsb = PREAMBLE_LENGTH_LSB;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	2208      	movs	r2, #8
 800125e:	761a      	strb	r2, [r3, #24]
		loRa->preambleLengthLsb = 6; // for L-TEL PROTOCOL
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2206      	movs	r2, #6
 8001264:	761a      	strb	r2, [r3, #24]
		loRa->fhssValue = HOPS_PERIOD; // for L-TEL PROTOCOL
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2207      	movs	r2, #7
 800126a:	765a      	strb	r2, [r3, #25]
		loRa->rxSize = 0;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2200      	movs	r2, #0
 8001270:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
		HAL_readLoRaSettings(loRa);
 8001274:	68f8      	ldr	r0, [r7, #12]
 8001276:	f7ff ff39 	bl	80010ec <HAL_readLoRaSettings>
		changeMode(loRa, loRaMode);
 800127a:	78fb      	ldrb	r3, [r7, #3]
 800127c:	4619      	mov	r1, r3
 800127e:	68f8      	ldr	r0, [r7, #12]
 8001280:	f7ff fd9b 	bl	8000dba <changeMode>
		writeLoRaParametersReg(loRa);
 8001284:	68f8      	ldr	r0, [r7, #12]
 8001286:	f7ff fd31 	bl	8000cec <writeLoRaParametersReg>
	}
	return loRa;
 800128a:	68fb      	ldr	r3, [r7, #12]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40010c00 	.word	0x40010c00

08001298 <configureLoRaRx>:

void configureLoRaRx(SX1278_t *loRa, Lora_Mode_t mode) {
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	460b      	mov	r3, r1
 80012a2:	70fb      	strb	r3, [r7, #3]
	if (loRa->mode != mode)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80012aa:	78fa      	ldrb	r2, [r7, #3]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d114      	bne.n	80012da <configureLoRaRx+0x42>
		return;
	if (loRa->operatingMode == RX_CONTINUOUS)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80012b6:	2b05      	cmp	r3, #5
 80012b8:	d011      	beq.n	80012de <configureLoRaRx+0x46>
		return;

	changeMode(loRa, mode);
 80012ba:	78fb      	ldrb	r3, [r7, #3]
 80012bc:	4619      	mov	r1, r3
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff fd7b 	bl	8000dba <changeMode>
	writeLoRaParametersReg(loRa);
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff fd11 	bl	8000cec <writeLoRaParametersReg>
	setRxFifoAddr(loRa);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff fe8a 	bl	8000fe4 <setRxFifoAddr>
	setLoRaLowFreqModeReg(loRa, RX_CONTINUOUS);
 80012d0:	2105      	movs	r1, #5
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff fcdb 	bl	8000c8e <setLoRaLowFreqModeReg>
 80012d8:	e002      	b.n	80012e0 <configureLoRaRx+0x48>
		return;
 80012da:	bf00      	nop
 80012dc:	e000      	b.n	80012e0 <configureLoRaRx+0x48>
		return;
 80012de:	bf00      	nop
}
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <readPage>:
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08a      	sub	sp, #40	; 0x28
 80012ec:	af04      	add	r7, sp, #16
 80012ee:	60b9      	str	r1, [r7, #8]
 80012f0:	4611      	mov	r1, r2
 80012f2:	461a      	mov	r2, r3
 80012f4:	4603      	mov	r3, r0
 80012f6:	81fb      	strh	r3, [r7, #14]
 80012f8:	460b      	mov	r3, r1
 80012fa:	81bb      	strh	r3, [r7, #12]
 80012fc:	4613      	mov	r3, r2
 80012fe:	80fb      	strh	r3, [r7, #6]
 8001300:	89fb      	ldrh	r3, [r7, #14]
 8001302:	021b      	lsls	r3, r3, #8
 8001304:	b21a      	sxth	r2, r3
 8001306:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800130a:	4313      	orrs	r3, r2
 800130c:	b21b      	sxth	r3, r3
 800130e:	82fb      	strh	r3, [r7, #22]
 8001310:	8afa      	ldrh	r2, [r7, #22]
 8001312:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001316:	9302      	str	r3, [sp, #8]
 8001318:	88fb      	ldrh	r3, [r7, #6]
 800131a:	9301      	str	r3, [sp, #4]
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	2310      	movs	r3, #16
 8001322:	21a0      	movs	r1, #160	; 0xa0
 8001324:	4808      	ldr	r0, [pc, #32]	; (8001348 <readPage+0x60>)
 8001326:	f003 fc0d 	bl	8004b44 <HAL_I2C_Mem_Read>
 800132a:	4603      	mov	r3, r0
 800132c:	757b      	strb	r3, [r7, #21]
 800132e:	7d7b      	ldrb	r3, [r7, #21]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <readPage+0x50>
 8001334:	7d7b      	ldrb	r3, [r7, #21]
 8001336:	e003      	b.n	8001340 <readPage+0x58>
 8001338:	2005      	movs	r0, #5
 800133a:	f002 f895 	bl	8003468 <HAL_Delay>
 800133e:	7d7b      	ldrb	r3, [r7, #21]
 8001340:	4618      	mov	r0, r3
 8001342:	3718      	adds	r7, #24
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	200000b8 	.word	0x200000b8

0800134c <HAL_savePage>:
 800134c:	b580      	push	{r7, lr}
 800134e:	b08e      	sub	sp, #56	; 0x38
 8001350:	af04      	add	r7, sp, #16
 8001352:	60b9      	str	r1, [r7, #8]
 8001354:	4611      	mov	r1, r2
 8001356:	461a      	mov	r2, r3
 8001358:	4603      	mov	r3, r0
 800135a:	81fb      	strh	r3, [r7, #14]
 800135c:	460b      	mov	r3, r1
 800135e:	81bb      	strh	r3, [r7, #12]
 8001360:	4613      	mov	r3, r2
 8001362:	80fb      	strh	r3, [r7, #6]
 8001364:	2300      	movs	r3, #0
 8001366:	613b      	str	r3, [r7, #16]
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	2300      	movs	r3, #0
 8001376:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800137a:	88fb      	ldrh	r3, [r7, #6]
 800137c:	89ba      	ldrh	r2, [r7, #12]
 800137e:	f107 0110 	add.w	r1, r7, #16
 8001382:	89f8      	ldrh	r0, [r7, #14]
 8001384:	f7ff ffb0 	bl	80012e8 <readPage>
 8001388:	4603      	mov	r3, r0
 800138a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800138e:	2300      	movs	r3, #0
 8001390:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001392:	e011      	b.n	80013b8 <HAL_savePage+0x6c>
 8001394:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001396:	68ba      	ldr	r2, [r7, #8]
 8001398:	4413      	add	r3, r2
 800139a:	781a      	ldrb	r2, [r3, #0]
 800139c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800139e:	3328      	adds	r3, #40	; 0x28
 80013a0:	443b      	add	r3, r7
 80013a2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d003      	beq.n	80013b2 <HAL_savePage+0x66>
 80013aa:	2301      	movs	r3, #1
 80013ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80013b0:	e006      	b.n	80013c0 <HAL_savePage+0x74>
 80013b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80013b4:	3301      	adds	r3, #1
 80013b6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80013b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80013ba:	88fb      	ldrh	r3, [r7, #6]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d3e9      	bcc.n	8001394 <HAL_savePage+0x48>
 80013c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d016      	beq.n	80013f6 <HAL_savePage+0xaa>
 80013c8:	89fb      	ldrh	r3, [r7, #14]
 80013ca:	021b      	lsls	r3, r3, #8
 80013cc:	b21a      	sxth	r2, r3
 80013ce:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	b21b      	sxth	r3, r3
 80013d6:	847b      	strh	r3, [r7, #34]	; 0x22
 80013d8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80013da:	2332      	movs	r3, #50	; 0x32
 80013dc:	9302      	str	r3, [sp, #8]
 80013de:	88fb      	ldrh	r3, [r7, #6]
 80013e0:	9301      	str	r3, [sp, #4]
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	2310      	movs	r3, #16
 80013e8:	21a0      	movs	r1, #160	; 0xa0
 80013ea:	4807      	ldr	r0, [pc, #28]	; (8001408 <HAL_savePage+0xbc>)
 80013ec:	f003 fab0 	bl	8004950 <HAL_I2C_Mem_Write>
 80013f0:	4603      	mov	r3, r0
 80013f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80013f6:	2006      	movs	r0, #6
 80013f8:	f002 f836 	bl	8003468 <HAL_Delay>
 80013fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001400:	4618      	mov	r0, r3
 8001402:	3728      	adds	r7, #40	; 0x28
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	200000b8 	.word	0x200000b8

0800140c <ledInit>:
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	4b15      	ldr	r3, [pc, #84]	; (800146c <ledInit+0x60>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	4a14      	ldr	r2, [pc, #80]	; (800146c <ledInit+0x60>)
 800141a:	f043 0320 	orr.w	r3, r3, #32
 800141e:	60d3      	str	r3, [r2, #12]
 8001420:	4b12      	ldr	r3, [pc, #72]	; (800146c <ledInit+0x60>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	4a11      	ldr	r2, [pc, #68]	; (800146c <ledInit+0x60>)
 8001426:	f023 0320 	bic.w	r3, r3, #32
 800142a:	60d3      	str	r3, [r2, #12]
 800142c:	4b0f      	ldr	r3, [pc, #60]	; (800146c <ledInit+0x60>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	4a0e      	ldr	r2, [pc, #56]	; (800146c <ledInit+0x60>)
 8001432:	f043 0310 	orr.w	r3, r3, #16
 8001436:	60d3      	str	r3, [r2, #12]
 8001438:	4b0c      	ldr	r3, [pc, #48]	; (800146c <ledInit+0x60>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	4a0b      	ldr	r2, [pc, #44]	; (800146c <ledInit+0x60>)
 800143e:	f023 0310 	bic.w	r3, r3, #16
 8001442:	60d3      	str	r3, [r2, #12]
 8001444:	4b09      	ldr	r3, [pc, #36]	; (800146c <ledInit+0x60>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	4a08      	ldr	r2, [pc, #32]	; (800146c <ledInit+0x60>)
 800144a:	f043 0308 	orr.w	r3, r3, #8
 800144e:	60d3      	str	r3, [r2, #12]
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <ledInit+0x60>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	4a05      	ldr	r2, [pc, #20]	; (800146c <ledInit+0x60>)
 8001456:	f023 0308 	bic.w	r3, r3, #8
 800145a:	60d3      	str	r3, [r2, #12]
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f000 f807 	bl	8001470 <led_reset>
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40010c00 	.word	0x40010c00

08001470 <led_reset>:
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	f001 ffe3 	bl	8003454 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	611a      	str	r2, [r3, #16]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	615a      	str	r2, [r3, #20]
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
	...

080014b0 <lm75_init>:
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af02      	add	r7, sp, #8
 80014b6:	2301      	movs	r3, #1
 80014b8:	713b      	strb	r3, [r7, #4]
 80014ba:	2300      	movs	r3, #0
 80014bc:	717b      	strb	r3, [r7, #5]
 80014be:	1d3a      	adds	r2, r7, #4
 80014c0:	2332      	movs	r3, #50	; 0x32
 80014c2:	9300      	str	r3, [sp, #0]
 80014c4:	2302      	movs	r3, #2
 80014c6:	219e      	movs	r1, #158	; 0x9e
 80014c8:	4804      	ldr	r0, [pc, #16]	; (80014dc <lm75_init+0x2c>)
 80014ca:	f002 fed7 	bl	800427c <HAL_I2C_Master_Transmit>
 80014ce:	4603      	mov	r3, r0
 80014d0:	71fb      	strb	r3, [r7, #7]
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	4618      	mov	r0, r3
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	200000b8 	.word	0x200000b8

080014e0 <lm75_read>:
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af02      	add	r7, sp, #8
 80014e6:	f04f 0300 	mov.w	r3, #0
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	2300      	movs	r3, #0
 80014ee:	703b      	strb	r3, [r7, #0]
 80014f0:	463a      	mov	r2, r7
 80014f2:	2332      	movs	r3, #50	; 0x32
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	2301      	movs	r3, #1
 80014f8:	219e      	movs	r1, #158	; 0x9e
 80014fa:	4818      	ldr	r0, [pc, #96]	; (800155c <lm75_read+0x7c>)
 80014fc:	f002 febe 	bl	800427c <HAL_I2C_Master_Transmit>
 8001500:	4603      	mov	r3, r0
 8001502:	70fb      	strb	r3, [r7, #3]
 8001504:	78fb      	ldrb	r3, [r7, #3]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d005      	beq.n	8001516 <lm75_read+0x36>
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f7ff f8a2 	bl	8000654 <__aeabi_f2uiz>
 8001510:	4603      	mov	r3, r0
 8001512:	b29b      	uxth	r3, r3
 8001514:	e01d      	b.n	8001552 <lm75_read+0x72>
 8001516:	463a      	mov	r2, r7
 8001518:	2332      	movs	r3, #50	; 0x32
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	2302      	movs	r3, #2
 800151e:	219f      	movs	r1, #159	; 0x9f
 8001520:	480e      	ldr	r0, [pc, #56]	; (800155c <lm75_read+0x7c>)
 8001522:	f002 ffa9 	bl	8004478 <HAL_I2C_Master_Receive>
 8001526:	4603      	mov	r3, r0
 8001528:	70fb      	strb	r3, [r7, #3]
 800152a:	783b      	ldrb	r3, [r7, #0]
 800152c:	021b      	lsls	r3, r3, #8
 800152e:	787a      	ldrb	r2, [r7, #1]
 8001530:	4313      	orrs	r3, r2
 8001532:	4618      	mov	r0, r3
 8001534:	f7fe fec4 	bl	80002c0 <__aeabi_i2f>
 8001538:	4603      	mov	r3, r0
 800153a:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800153e:	4618      	mov	r0, r3
 8001540:	f7fe ffc6 	bl	80004d0 <__aeabi_fdiv>
 8001544:	4603      	mov	r3, r0
 8001546:	607b      	str	r3, [r7, #4]
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f7ff f883 	bl	8000654 <__aeabi_f2uiz>
 800154e:	4603      	mov	r3, r0
 8001550:	b29b      	uxth	r3, r3
 8001552:	4618      	mov	r0, r3
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	200000b8 	.word	0x200000b8

08001560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001560:	b590      	push	{r4, r7, lr}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	uart1_ptr = &u1;
 8001566:	4b57      	ldr	r3, [pc, #348]	; (80016c4 <main+0x164>)
 8001568:	4a57      	ldr	r2, [pc, #348]	; (80016c8 <main+0x168>)
 800156a:	601a      	str	r2, [r3, #0]
	uart2_ptr =&u2;
 800156c:	4b57      	ldr	r3, [pc, #348]	; (80016cc <main+0x16c>)
 800156e:	4a58      	ldr	r2, [pc, #352]	; (80016d0 <main+0x170>)
 8001570:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001572:	f001 ff17 	bl	80033a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001576:	f000 f8c1 	bl	80016fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800157a:	f000 fa7d 	bl	8001a78 <MX_GPIO_Init>
  MX_I2C1_Init();
 800157e:	f000 f999 	bl	80018b4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001582:	f000 f9c5 	bl	8001910 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001586:	f000 f9f9 	bl	800197c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800158a:	f000 fa21 	bl	80019d0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800158e:	f000 fa49 	bl	8001a24 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8001592:	f000 f90f 	bl	80017b4 <MX_ADC1_Init>
  MX_CRC_Init();
 8001596:	f000 f979 	bl	800188c <MX_CRC_Init>
  //MX_IWDG_Init();
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(KEEP_ALIVE_GPIO_Port, KEEP_ALIVE_Pin, GPIO_PIN_SET);
 800159a:	2201      	movs	r2, #1
 800159c:	2120      	movs	r1, #32
 800159e:	484d      	ldr	r0, [pc, #308]	; (80016d4 <main+0x174>)
 80015a0:	f002 fd0f 	bl	8003fc2 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80015a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015a8:	f001 ff5e 	bl	8003468 <HAL_Delay>
	HAL_GPIO_WritePin(KEEP_ALIVE_GPIO_Port, LORA_TX_OK_Pin, GPIO_PIN_SET);
 80015ac:	2201      	movs	r2, #1
 80015ae:	2108      	movs	r1, #8
 80015b0:	4848      	ldr	r0, [pc, #288]	; (80016d4 <main+0x174>)
 80015b2:	f002 fd06 	bl	8003fc2 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80015b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015ba:	f001 ff55 	bl	8003468 <HAL_Delay>
	HAL_GPIO_WritePin(KEEP_ALIVE_GPIO_Port, LORA_RX_OK_Pin, GPIO_PIN_SET);
 80015be:	2201      	movs	r2, #1
 80015c0:	2110      	movs	r1, #16
 80015c2:	4844      	ldr	r0, [pc, #272]	; (80016d4 <main+0x174>)
 80015c4:	f002 fcfd 	bl	8003fc2 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80015c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015cc:	f001 ff4c 	bl	8003468 <HAL_Delay>
	vlad = vladInit(SERVER);
 80015d0:	2000      	movs	r0, #0
 80015d2:	f001 f99f 	bl	8002914 <vladInit>
 80015d6:	4603      	mov	r3, r0
 80015d8:	4a3f      	ldr	r2, [pc, #252]	; (80016d8 <main+0x178>)
 80015da:	6013      	str	r3, [r2, #0]
	server = serverInit(SERVER);
 80015dc:	2000      	movs	r0, #0
 80015de:	f001 fa0d 	bl	80029fc <serverInit>
 80015e2:	4603      	mov	r3, r0
 80015e4:	4a3d      	ldr	r2, [pc, #244]	; (80016dc <main+0x17c>)
 80015e6:	6013      	str	r3, [r2, #0]
	ledInit(&led);
 80015e8:	483d      	ldr	r0, [pc, #244]	; (80016e0 <main+0x180>)
 80015ea:	f7ff ff0f 	bl	800140c <ledInit>
	rdss = rdssInit(0);
 80015ee:	2000      	movs	r0, #0
 80015f0:	f001 fa29 	bl	8002a46 <rdssInit>
 80015f4:	4603      	mov	r3, r0
 80015f6:	4a3b      	ldr	r2, [pc, #236]	; (80016e4 <main+0x184>)
 80015f8:	6013      	str	r3, [r2, #0]
	loRa = loRaInit(&hspi1, MASTER_RECEIVER);
 80015fa:	2103      	movs	r1, #3
 80015fc:	483a      	ldr	r0, [pc, #232]	; (80016e8 <main+0x188>)
 80015fe:	f7ff fde7 	bl	80011d0 <loRaInit>
 8001602:	4603      	mov	r3, r0
 8001604:	4a39      	ldr	r2, [pc, #228]	; (80016ec <main+0x18c>)
 8001606:	6013      	str	r3, [r2, #0]
	if(loRa == NULL)
 8001608:	4b38      	ldr	r3, [pc, #224]	; (80016ec <main+0x18c>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d101      	bne.n	8001614 <main+0xb4>
		Error_Handler();
 8001610:	f001 f97b 	bl	800290a <Error_Handler>

	lm75_init();
 8001614:	f7ff ff4c 	bl	80014b0 <lm75_init>
	HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001618:	2200      	movs	r2, #0
 800161a:	2100      	movs	r1, #0
 800161c:	2025      	movs	r0, #37	; 0x25
 800161e:	f002 fa30 	bl	8003a82 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001622:	2025      	movs	r0, #37	; 0x25
 8001624:	f002 fa49 	bl	8003aba <HAL_NVIC_EnableIRQ>
	HAL_UART_Receive_IT(&huart1, &rxData, 1);
 8001628:	2201      	movs	r2, #1
 800162a:	4931      	ldr	r1, [pc, #196]	; (80016f0 <main+0x190>)
 800162c:	4831      	ldr	r0, [pc, #196]	; (80016f4 <main+0x194>)
 800162e:	f005 fc93 	bl	8006f58 <HAL_UART_Receive_IT>
	//HAL_UART_Receive_IT(&huart2, &rxData, 1);//TODO: Para búsqueda

	configureGPIO();
 8001632:	f001 f869 	bl	8002708 <configureGPIO>
	configureADC();
 8001636:	f001 f829 	bl	800268c <configureADC>
	calibrateADC();
 800163a:	f001 f84f 	bl	80026dc <calibrateADC>
	uint32_t keepAliveStartTicks = HAL_GetTick();
 800163e:	f001 ff09 	bl	8003454 <HAL_GetTick>
 8001642:	6078      	str	r0, [r7, #4]
	rdss->lastUpdateTicks = HAL_GetTick();
 8001644:	4b27      	ldr	r3, [pc, #156]	; (80016e4 <main+0x184>)
 8001646:	681c      	ldr	r4, [r3, #0]
 8001648:	f001 ff04 	bl	8003454 <HAL_GetTick>
 800164c:	4603      	mov	r3, r0
 800164e:	6363      	str	r3, [r4, #52]	; 0x34
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		adcValues[0] = readADCChannel(0);
 8001650:	2000      	movs	r0, #0
 8001652:	f001 f899 	bl	8002788 <readADCChannel>
 8001656:	4603      	mov	r3, r0
 8001658:	461a      	mov	r2, r3
 800165a:	4b27      	ldr	r3, [pc, #156]	; (80016f8 <main+0x198>)
 800165c:	801a      	strh	r2, [r3, #0]
		adcValues[1] = readADCChannel(1);
 800165e:	2001      	movs	r0, #1
 8001660:	f001 f892 	bl	8002788 <readADCChannel>
 8001664:	4603      	mov	r3, r0
 8001666:	461a      	mov	r2, r3
 8001668:	4b23      	ldr	r3, [pc, #140]	; (80016f8 <main+0x198>)
 800166a:	805a      	strh	r2, [r3, #2]
		adcValues[2] = lm75_read();
 800166c:	f7ff ff38 	bl	80014e0 <lm75_read>
 8001670:	4603      	mov	r3, r0
 8001672:	461a      	mov	r2, r3
 8001674:	4b20      	ldr	r3, [pc, #128]	; (80016f8 <main+0x198>)
 8001676:	809a      	strh	r2, [r3, #4]
		updateMasterStatus(rdss, adcValues, 5000);
 8001678:	4b1a      	ldr	r3, [pc, #104]	; (80016e4 <main+0x184>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001680:	491d      	ldr	r1, [pc, #116]	; (80016f8 <main+0x198>)
 8001682:	4618      	mov	r0, r3
 8001684:	f001 f89a 	bl	80027bc <updateMasterStatus>
		processUartRx(&u1, rdss, server, loRa); // TODO: Para búsqueda
 8001688:	4b16      	ldr	r3, [pc, #88]	; (80016e4 <main+0x184>)
 800168a:	6819      	ldr	r1, [r3, #0]
 800168c:	4b13      	ldr	r3, [pc, #76]	; (80016dc <main+0x17c>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	4b16      	ldr	r3, [pc, #88]	; (80016ec <main+0x18c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	480c      	ldr	r0, [pc, #48]	; (80016c8 <main+0x168>)
 8001696:	f000 fdc5 	bl	8002224 <processUartRx>
		//processUart2Rx(&u2, rdss, server, loRa);
		configureLoRaRx(loRa, MASTER_RECEIVER);
 800169a:	4b14      	ldr	r3, [pc, #80]	; (80016ec <main+0x18c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2103      	movs	r1, #3
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff fdf9 	bl	8001298 <configureLoRaRx>
		masterProcessLoRaRx(loRa, rdss, vlad);
 80016a6:	4b11      	ldr	r3, [pc, #68]	; (80016ec <main+0x18c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a0e      	ldr	r2, [pc, #56]	; (80016e4 <main+0x184>)
 80016ac:	6811      	ldr	r1, [r2, #0]
 80016ae:	4a0a      	ldr	r2, [pc, #40]	; (80016d8 <main+0x178>)
 80016b0:	6812      	ldr	r2, [r2, #0]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f000 ff46 	bl	8002544 <masterProcessLoRaRx>

#ifdef IWDG_DEBUG
		HAL_IWDG_Refresh(&hiwdg);
#endif
		keepAliveStartTicks = enableKeepAliveLed(keepAliveStartTicks);
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f000 ffbf 	bl	800263c <enableKeepAliveLed>
 80016be:	6078      	str	r0, [r7, #4]
		adcValues[0] = readADCChannel(0);
 80016c0:	e7c6      	b.n	8001650 <main+0xf0>
 80016c2:	bf00      	nop
 80016c4:	2000023c 	.word	0x2000023c
 80016c8:	20000264 	.word	0x20000264
 80016cc:	20000240 	.word	0x20000240
 80016d0:	200003a0 	.word	0x200003a0
 80016d4:	40010c00 	.word	0x40010c00
 80016d8:	200004dc 	.word	0x200004dc
 80016dc:	200004e4 	.word	0x200004e4
 80016e0:	20000244 	.word	0x20000244
 80016e4:	20000260 	.word	0x20000260
 80016e8:	2000010c 	.word	0x2000010c
 80016ec:	200004e0 	.word	0x200004e0
 80016f0:	200004e8 	.word	0x200004e8
 80016f4:	20000164 	.word	0x20000164
 80016f8:	20000078 	.word	0x20000078

080016fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b094      	sub	sp, #80	; 0x50
 8001700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001702:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001706:	2228      	movs	r2, #40	; 0x28
 8001708:	2100      	movs	r1, #0
 800170a:	4618      	mov	r0, r3
 800170c:	f006 fa18 	bl	8007b40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001710:	f107 0314 	add.w	r3, r7, #20
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]
 800171e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001720:	1d3b      	adds	r3, r7, #4
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800172c:	2309      	movs	r3, #9
 800172e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001730:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001734:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001736:	2300      	movs	r3, #0
 8001738:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800173a:	2301      	movs	r3, #1
 800173c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800173e:	2301      	movs	r3, #1
 8001740:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001742:	2302      	movs	r3, #2
 8001744:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001746:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800174a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800174c:	2300      	movs	r3, #0
 800174e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001750:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001754:	4618      	mov	r0, r3
 8001756:	f004 f961 	bl	8005a1c <HAL_RCC_OscConfig>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001760:	f001 f8d3 	bl	800290a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001764:	230f      	movs	r3, #15
 8001766:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001768:	2302      	movs	r3, #2
 800176a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800176c:	2300      	movs	r3, #0
 800176e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001770:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001774:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001776:	2300      	movs	r3, #0
 8001778:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800177a:	f107 0314 	add.w	r3, r7, #20
 800177e:	2100      	movs	r1, #0
 8001780:	4618      	mov	r0, r3
 8001782:	f004 fbcd 	bl	8005f20 <HAL_RCC_ClockConfig>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800178c:	f001 f8bd 	bl	800290a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001790:	2302      	movs	r3, #2
 8001792:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001794:	2300      	movs	r3, #0
 8001796:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001798:	1d3b      	adds	r3, r7, #4
 800179a:	4618      	mov	r0, r3
 800179c:	f004 fd4e 	bl	800623c <HAL_RCCEx_PeriphCLKConfig>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80017a6:	f001 f8b0 	bl	800290a <Error_Handler>
  }
}
 80017aa:	bf00      	nop
 80017ac:	3750      	adds	r7, #80	; 0x50
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
	...

080017b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017ba:	1d3b      	adds	r3, r7, #4
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80017c4:	4b2f      	ldr	r3, [pc, #188]	; (8001884 <MX_ADC1_Init+0xd0>)
 80017c6:	4a30      	ldr	r2, [pc, #192]	; (8001888 <MX_ADC1_Init+0xd4>)
 80017c8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80017ca:	4b2e      	ldr	r3, [pc, #184]	; (8001884 <MX_ADC1_Init+0xd0>)
 80017cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017d0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80017d2:	4b2c      	ldr	r3, [pc, #176]	; (8001884 <MX_ADC1_Init+0xd0>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017d8:	4b2a      	ldr	r3, [pc, #168]	; (8001884 <MX_ADC1_Init+0xd0>)
 80017da:	2200      	movs	r2, #0
 80017dc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017de:	4b29      	ldr	r3, [pc, #164]	; (8001884 <MX_ADC1_Init+0xd0>)
 80017e0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80017e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017e6:	4b27      	ldr	r3, [pc, #156]	; (8001884 <MX_ADC1_Init+0xd0>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 80017ec:	4b25      	ldr	r3, [pc, #148]	; (8001884 <MX_ADC1_Init+0xd0>)
 80017ee:	2204      	movs	r2, #4
 80017f0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017f2:	4824      	ldr	r0, [pc, #144]	; (8001884 <MX_ADC1_Init+0xd0>)
 80017f4:	f001 fe5c 	bl	80034b0 <HAL_ADC_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80017fe:	f001 f884 	bl	800290a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001802:	2300      	movs	r3, #0
 8001804:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001806:	2301      	movs	r3, #1
 8001808:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800180a:	2307      	movs	r3, #7
 800180c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	4619      	mov	r1, r3
 8001812:	481c      	ldr	r0, [pc, #112]	; (8001884 <MX_ADC1_Init+0xd0>)
 8001814:	f001 ff24 	bl	8003660 <HAL_ADC_ConfigChannel>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800181e:	f001 f874 	bl	800290a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001822:	2301      	movs	r3, #1
 8001824:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001826:	2302      	movs	r3, #2
 8001828:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800182a:	1d3b      	adds	r3, r7, #4
 800182c:	4619      	mov	r1, r3
 800182e:	4815      	ldr	r0, [pc, #84]	; (8001884 <MX_ADC1_Init+0xd0>)
 8001830:	f001 ff16 	bl	8003660 <HAL_ADC_ConfigChannel>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800183a:	f001 f866 	bl	800290a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800183e:	2311      	movs	r3, #17
 8001840:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001842:	2303      	movs	r3, #3
 8001844:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001846:	1d3b      	adds	r3, r7, #4
 8001848:	4619      	mov	r1, r3
 800184a:	480e      	ldr	r0, [pc, #56]	; (8001884 <MX_ADC1_Init+0xd0>)
 800184c:	f001 ff08 	bl	8003660 <HAL_ADC_ConfigChannel>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001856:	f001 f858 	bl	800290a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800185a:	2300      	movs	r3, #0
 800185c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800185e:	2304      	movs	r3, #4
 8001860:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001862:	2300      	movs	r3, #0
 8001864:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	4619      	mov	r1, r3
 800186a:	4806      	ldr	r0, [pc, #24]	; (8001884 <MX_ADC1_Init+0xd0>)
 800186c:	f001 fef8 	bl	8003660 <HAL_ADC_ConfigChannel>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8001876:	f001 f848 	bl	800290a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800187a:	bf00      	nop
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000080 	.word	0x20000080
 8001888:	40012400 	.word	0x40012400

0800188c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001890:	4b06      	ldr	r3, [pc, #24]	; (80018ac <MX_CRC_Init+0x20>)
 8001892:	4a07      	ldr	r2, [pc, #28]	; (80018b0 <MX_CRC_Init+0x24>)
 8001894:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001896:	4805      	ldr	r0, [pc, #20]	; (80018ac <MX_CRC_Init+0x20>)
 8001898:	f002 f929 	bl	8003aee <HAL_CRC_Init>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80018a2:	f001 f832 	bl	800290a <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	200000b0 	.word	0x200000b0
 80018b0:	40023000 	.word	0x40023000

080018b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018b8:	4b12      	ldr	r3, [pc, #72]	; (8001904 <MX_I2C1_Init+0x50>)
 80018ba:	4a13      	ldr	r2, [pc, #76]	; (8001908 <MX_I2C1_Init+0x54>)
 80018bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80018be:	4b11      	ldr	r3, [pc, #68]	; (8001904 <MX_I2C1_Init+0x50>)
 80018c0:	4a12      	ldr	r2, [pc, #72]	; (800190c <MX_I2C1_Init+0x58>)
 80018c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018c4:	4b0f      	ldr	r3, [pc, #60]	; (8001904 <MX_I2C1_Init+0x50>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018ca:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <MX_I2C1_Init+0x50>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018d0:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <MX_I2C1_Init+0x50>)
 80018d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018d8:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <MX_I2C1_Init+0x50>)
 80018da:	2200      	movs	r2, #0
 80018dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018de:	4b09      	ldr	r3, [pc, #36]	; (8001904 <MX_I2C1_Init+0x50>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018e4:	4b07      	ldr	r3, [pc, #28]	; (8001904 <MX_I2C1_Init+0x50>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018ea:	4b06      	ldr	r3, [pc, #24]	; (8001904 <MX_I2C1_Init+0x50>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018f0:	4804      	ldr	r0, [pc, #16]	; (8001904 <MX_I2C1_Init+0x50>)
 80018f2:	f002 fb7f 	bl	8003ff4 <HAL_I2C_Init>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018fc:	f001 f805 	bl	800290a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}
 8001904:	200000b8 	.word	0x200000b8
 8001908:	40005400 	.word	0x40005400
 800190c:	000186a0 	.word	0x000186a0

08001910 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001914:	4b17      	ldr	r3, [pc, #92]	; (8001974 <MX_SPI1_Init+0x64>)
 8001916:	4a18      	ldr	r2, [pc, #96]	; (8001978 <MX_SPI1_Init+0x68>)
 8001918:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800191a:	4b16      	ldr	r3, [pc, #88]	; (8001974 <MX_SPI1_Init+0x64>)
 800191c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001920:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001922:	4b14      	ldr	r3, [pc, #80]	; (8001974 <MX_SPI1_Init+0x64>)
 8001924:	2200      	movs	r2, #0
 8001926:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001928:	4b12      	ldr	r3, [pc, #72]	; (8001974 <MX_SPI1_Init+0x64>)
 800192a:	2200      	movs	r2, #0
 800192c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800192e:	4b11      	ldr	r3, [pc, #68]	; (8001974 <MX_SPI1_Init+0x64>)
 8001930:	2200      	movs	r2, #0
 8001932:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001934:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <MX_SPI1_Init+0x64>)
 8001936:	2200      	movs	r2, #0
 8001938:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800193a:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <MX_SPI1_Init+0x64>)
 800193c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001940:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001942:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <MX_SPI1_Init+0x64>)
 8001944:	2218      	movs	r2, #24
 8001946:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001948:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <MX_SPI1_Init+0x64>)
 800194a:	2200      	movs	r2, #0
 800194c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800194e:	4b09      	ldr	r3, [pc, #36]	; (8001974 <MX_SPI1_Init+0x64>)
 8001950:	2200      	movs	r2, #0
 8001952:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001954:	4b07      	ldr	r3, [pc, #28]	; (8001974 <MX_SPI1_Init+0x64>)
 8001956:	2200      	movs	r2, #0
 8001958:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800195a:	4b06      	ldr	r3, [pc, #24]	; (8001974 <MX_SPI1_Init+0x64>)
 800195c:	220a      	movs	r2, #10
 800195e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001960:	4804      	ldr	r0, [pc, #16]	; (8001974 <MX_SPI1_Init+0x64>)
 8001962:	f004 fd21 	bl	80063a8 <HAL_SPI_Init>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800196c:	f000 ffcd 	bl	800290a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001970:	bf00      	nop
 8001972:	bd80      	pop	{r7, pc}
 8001974:	2000010c 	.word	0x2000010c
 8001978:	40013000 	.word	0x40013000

0800197c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001980:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <MX_USART1_UART_Init+0x4c>)
 8001982:	4a12      	ldr	r2, [pc, #72]	; (80019cc <MX_USART1_UART_Init+0x50>)
 8001984:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8001986:	4b10      	ldr	r3, [pc, #64]	; (80019c8 <MX_USART1_UART_Init+0x4c>)
 8001988:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 800198c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800198e:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <MX_USART1_UART_Init+0x4c>)
 8001990:	2200      	movs	r2, #0
 8001992:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001994:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <MX_USART1_UART_Init+0x4c>)
 8001996:	2200      	movs	r2, #0
 8001998:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800199a:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <MX_USART1_UART_Init+0x4c>)
 800199c:	2200      	movs	r2, #0
 800199e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019a0:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <MX_USART1_UART_Init+0x4c>)
 80019a2:	220c      	movs	r2, #12
 80019a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019a6:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <MX_USART1_UART_Init+0x4c>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <MX_USART1_UART_Init+0x4c>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019b2:	4805      	ldr	r0, [pc, #20]	; (80019c8 <MX_USART1_UART_Init+0x4c>)
 80019b4:	f005 fa80 	bl	8006eb8 <HAL_UART_Init>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80019be:	f000 ffa4 	bl	800290a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000164 	.word	0x20000164
 80019cc:	40013800 	.word	0x40013800

080019d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019d4:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <MX_USART2_UART_Init+0x4c>)
 80019d6:	4a12      	ldr	r2, [pc, #72]	; (8001a20 <MX_USART2_UART_Init+0x50>)
 80019d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80019da:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <MX_USART2_UART_Init+0x4c>)
 80019dc:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80019e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019e2:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <MX_USART2_UART_Init+0x4c>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019e8:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <MX_USART2_UART_Init+0x4c>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019ee:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <MX_USART2_UART_Init+0x4c>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019f4:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <MX_USART2_UART_Init+0x4c>)
 80019f6:	220c      	movs	r2, #12
 80019f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019fa:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <MX_USART2_UART_Init+0x4c>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a00:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <MX_USART2_UART_Init+0x4c>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a06:	4805      	ldr	r0, [pc, #20]	; (8001a1c <MX_USART2_UART_Init+0x4c>)
 8001a08:	f005 fa56 	bl	8006eb8 <HAL_UART_Init>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a12:	f000 ff7a 	bl	800290a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	200001ac 	.word	0x200001ac
 8001a20:	40004400 	.word	0x40004400

08001a24 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a28:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <MX_USART3_UART_Init+0x4c>)
 8001a2a:	4a12      	ldr	r2, [pc, #72]	; (8001a74 <MX_USART3_UART_Init+0x50>)
 8001a2c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a2e:	4b10      	ldr	r3, [pc, #64]	; (8001a70 <MX_USART3_UART_Init+0x4c>)
 8001a30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a34:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a36:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <MX_USART3_UART_Init+0x4c>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <MX_USART3_UART_Init+0x4c>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a42:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <MX_USART3_UART_Init+0x4c>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a48:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <MX_USART3_UART_Init+0x4c>)
 8001a4a:	220c      	movs	r2, #12
 8001a4c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a4e:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <MX_USART3_UART_Init+0x4c>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a54:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <MX_USART3_UART_Init+0x4c>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a5a:	4805      	ldr	r0, [pc, #20]	; (8001a70 <MX_USART3_UART_Init+0x4c>)
 8001a5c:	f005 fa2c 	bl	8006eb8 <HAL_UART_Init>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001a66:	f000 ff50 	bl	800290a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	200001f4 	.word	0x200001f4
 8001a74:	40004800 	.word	0x40004800

08001a78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b088      	sub	sp, #32
 8001a7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7e:	f107 0310 	add.w	r3, r7, #16
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	605a      	str	r2, [r3, #4]
 8001a88:	609a      	str	r2, [r3, #8]
 8001a8a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a8c:	4b1e      	ldr	r3, [pc, #120]	; (8001b08 <MX_GPIO_Init+0x90>)
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	4a1d      	ldr	r2, [pc, #116]	; (8001b08 <MX_GPIO_Init+0x90>)
 8001a92:	f043 0320 	orr.w	r3, r3, #32
 8001a96:	6193      	str	r3, [r2, #24]
 8001a98:	4b1b      	ldr	r3, [pc, #108]	; (8001b08 <MX_GPIO_Init+0x90>)
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	f003 0320 	and.w	r3, r3, #32
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa4:	4b18      	ldr	r3, [pc, #96]	; (8001b08 <MX_GPIO_Init+0x90>)
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	4a17      	ldr	r2, [pc, #92]	; (8001b08 <MX_GPIO_Init+0x90>)
 8001aaa:	f043 0304 	orr.w	r3, r3, #4
 8001aae:	6193      	str	r3, [r2, #24]
 8001ab0:	4b15      	ldr	r3, [pc, #84]	; (8001b08 <MX_GPIO_Init+0x90>)
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	60bb      	str	r3, [r7, #8]
 8001aba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001abc:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <MX_GPIO_Init+0x90>)
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	4a11      	ldr	r2, [pc, #68]	; (8001b08 <MX_GPIO_Init+0x90>)
 8001ac2:	f043 0308 	orr.w	r3, r3, #8
 8001ac6:	6193      	str	r3, [r2, #24]
 8001ac8:	4b0f      	ldr	r3, [pc, #60]	; (8001b08 <MX_GPIO_Init+0x90>)
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	f003 0308 	and.w	r3, r3, #8
 8001ad0:	607b      	str	r3, [r7, #4]
 8001ad2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LORA_NSS_Pin|LORA_RST_Pin|LORA_DIO3_Pin|LORA_DIO1_Pin
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f247 313b 	movw	r1, #29499	; 0x733b
 8001ada:	480c      	ldr	r0, [pc, #48]	; (8001b0c <MX_GPIO_Init+0x94>)
 8001adc:	f002 fa71 	bl	8003fc2 <HAL_GPIO_WritePin>
                          |RS485_DE_Pin|BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LORA_NSS_Pin LORA_RST_Pin LORA_DIO3_Pin LORA_DIO1_Pin
                           LORA_BUSSY_Pin LORA_TX_OK_Pin LORA_RX_OK_Pin KEEP_ALIVE_Pin
                           RS485_DE_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = LORA_NSS_Pin|LORA_RST_Pin|LORA_DIO3_Pin|LORA_DIO1_Pin
 8001ae0:	f247 333b 	movw	r3, #29499	; 0x733b
 8001ae4:	613b      	str	r3, [r7, #16]
                          |LORA_BUSSY_Pin|LORA_TX_OK_Pin|LORA_RX_OK_Pin|KEEP_ALIVE_Pin
                          |RS485_DE_Pin|BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aee:	2302      	movs	r3, #2
 8001af0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af2:	f107 0310 	add.w	r3, r7, #16
 8001af6:	4619      	mov	r1, r3
 8001af8:	4804      	ldr	r0, [pc, #16]	; (8001b0c <MX_GPIO_Init+0x94>)
 8001afa:	f002 f8c7 	bl	8003c8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001afe:	bf00      	nop
 8001b00:	3720      	adds	r7, #32
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	40010c00 	.word	0x40010c00

08001b10 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) { //TODO: Callback
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]

	if (huart-> Instance == USART1){/* Read received data from UART1 */
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a21      	ldr	r2, [pc, #132]	; (8001ba4 <HAL_UART_RxCpltCallback+0x94>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d11b      	bne.n	8001b5a <HAL_UART_RxCpltCallback+0x4a>
			if (uart1_ptr->rxSize >= UART_RX_BUFFLEN) {
				cleanRx(uart1_ptr);
				uart1_ptr->rxSize = 0;
			}

			uart1_ptr->rxData[uart1_ptr->rxSize++] = rxData;
 8001b22:	4b21      	ldr	r3, [pc, #132]	; (8001ba8 <HAL_UART_RxCpltCallback+0x98>)
 8001b24:	6819      	ldr	r1, [r3, #0]
 8001b26:	4b20      	ldr	r3, [pc, #128]	; (8001ba8 <HAL_UART_RxCpltCallback+0x98>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f893 2131 	ldrb.w	r2, [r3, #305]	; 0x131
 8001b2e:	1c50      	adds	r0, r2, #1
 8001b30:	b2c0      	uxtb	r0, r0
 8001b32:	f883 0131 	strb.w	r0, [r3, #305]	; 0x131
 8001b36:	4b1d      	ldr	r3, [pc, #116]	; (8001bac <HAL_UART_RxCpltCallback+0x9c>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	548b      	strb	r3, [r1, r2]

			if (rxData == RDSS_END_MARK)
 8001b3c:	4b1b      	ldr	r3, [pc, #108]	; (8001bac <HAL_UART_RxCpltCallback+0x9c>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b7f      	cmp	r3, #127	; 0x7f
 8001b42:	d104      	bne.n	8001b4e <HAL_UART_RxCpltCallback+0x3e>
				uart1_ptr->isReceivedDataReady = true;
 8001b44:	4b18      	ldr	r3, [pc, #96]	; (8001ba8 <HAL_UART_RxCpltCallback+0x98>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138

			HAL_UART_Receive_IT(&huart1, &rxData, 1);
 8001b4e:	2201      	movs	r2, #1
 8001b50:	4916      	ldr	r1, [pc, #88]	; (8001bac <HAL_UART_RxCpltCallback+0x9c>)
 8001b52:	4817      	ldr	r0, [pc, #92]	; (8001bb0 <HAL_UART_RxCpltCallback+0xa0>)
 8001b54:	f005 fa00 	bl	8006f58 <HAL_UART_Receive_IT>
			HAL_UART_Receive_IT(&huart2, &rxData, 1);
		}



}
 8001b58:	e01f      	b.n	8001b9a <HAL_UART_RxCpltCallback+0x8a>
	else if(huart->Instance == USART2){ /* Read received data from UART2 */
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a15      	ldr	r2, [pc, #84]	; (8001bb4 <HAL_UART_RxCpltCallback+0xa4>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d11a      	bne.n	8001b9a <HAL_UART_RxCpltCallback+0x8a>
			uart2_ptr->rxData[uart2_ptr->rxSize++] = rxData;
 8001b64:	4b14      	ldr	r3, [pc, #80]	; (8001bb8 <HAL_UART_RxCpltCallback+0xa8>)
 8001b66:	6819      	ldr	r1, [r3, #0]
 8001b68:	4b13      	ldr	r3, [pc, #76]	; (8001bb8 <HAL_UART_RxCpltCallback+0xa8>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f893 2131 	ldrb.w	r2, [r3, #305]	; 0x131
 8001b70:	1c50      	adds	r0, r2, #1
 8001b72:	b2c0      	uxtb	r0, r0
 8001b74:	f883 0131 	strb.w	r0, [r3, #305]	; 0x131
 8001b78:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <HAL_UART_RxCpltCallback+0x9c>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	548b      	strb	r3, [r1, r2]
			if (rxData == RDSS_END_MARK)
 8001b7e:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <HAL_UART_RxCpltCallback+0x9c>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	2b7f      	cmp	r3, #127	; 0x7f
 8001b84:	d104      	bne.n	8001b90 <HAL_UART_RxCpltCallback+0x80>
				uart2_ptr->isReceivedDataReady = true;
 8001b86:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <HAL_UART_RxCpltCallback+0xa8>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
			HAL_UART_Receive_IT(&huart2, &rxData, 1);
 8001b90:	2201      	movs	r2, #1
 8001b92:	4906      	ldr	r1, [pc, #24]	; (8001bac <HAL_UART_RxCpltCallback+0x9c>)
 8001b94:	4809      	ldr	r0, [pc, #36]	; (8001bbc <HAL_UART_RxCpltCallback+0xac>)
 8001b96:	f005 f9df 	bl	8006f58 <HAL_UART_Receive_IT>
}
 8001b9a:	bf00      	nop
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40013800 	.word	0x40013800
 8001ba8:	2000023c 	.word	0x2000023c
 8001bac:	200004e8 	.word	0x200004e8
 8001bb0:	20000164 	.word	0x20000164
 8001bb4:	40004400 	.word	0x40004400
 8001bb8:	20000240 	.word	0x20000240
 8001bbc:	200001ac 	.word	0x200001ac

08001bc0 <executeServerCmd>:
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
	printf("SPI RX Done .. Do Something ...");
}

uint8_t executeServerCmd(uint8_t *buffer, RDSS_t *rdss, SX1278_t *loRa,
		Server_t *server) {
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
 8001bcc:	603b      	str	r3, [r7, #0]
	uint8_t index = 0;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef res;

	if (rdss->buffSize < LTEL_QUERY_LENGTH || rdss->buffSize > LTEL_SET_LENGTH)
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	7a1b      	ldrb	r3, [r3, #8]
 8001bd6:	2b08      	cmp	r3, #8
 8001bd8:	d903      	bls.n	8001be2 <executeServerCmd+0x22>
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	7a1b      	ldrb	r3, [r3, #8]
 8001bde:	2b0d      	cmp	r3, #13
 8001be0:	d901      	bls.n	8001be6 <executeServerCmd+0x26>
		return 0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	e272      	b.n	80020cc <executeServerCmd+0x50c>

	index = setRdssStartData(rdss, buffer, server->function);
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	7d5b      	ldrb	r3, [r3, #21]
 8001bea:	461a      	mov	r2, r3
 8001bec:	68f9      	ldr	r1, [r7, #12]
 8001bee:	68b8      	ldr	r0, [r7, #8]
 8001bf0:	f001 f859 	bl	8002ca6 <setRdssStartData>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	75fb      	strb	r3, [r7, #23]

	switch (rdss->cmd) {
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b25      	cmp	r3, #37	; 0x25
 8001bfe:	f300 808b 	bgt.w	8001d18 <executeServerCmd+0x158>
 8001c02:	2b10      	cmp	r3, #16
 8001c04:	da54      	bge.n	8001cb0 <executeServerCmd+0xf0>
		changeMode(loRa, loRa->mode);
		writeLoRaParametersReg(loRa);
		break;

	default:
		break;
 8001c06:	e24a      	b.n	800209e <executeServerCmd+0x4de>
	switch (rdss->cmd) {
 8001c08:	3b90      	subs	r3, #144	; 0x90
 8001c0a:	2b25      	cmp	r3, #37	; 0x25
 8001c0c:	f200 8247 	bhi.w	800209e <executeServerCmd+0x4de>
 8001c10:	a201      	add	r2, pc, #4	; (adr r2, 8001c18 <executeServerCmd+0x58>)
 8001c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c16:	bf00      	nop
 8001c18:	08001e8f 	.word	0x08001e8f
 8001c1c:	0800209f 	.word	0x0800209f
 8001c20:	0800209f 	.word	0x0800209f
 8001c24:	0800209f 	.word	0x0800209f
 8001c28:	0800209f 	.word	0x0800209f
 8001c2c:	0800209f 	.word	0x0800209f
 8001c30:	0800209f 	.word	0x0800209f
 8001c34:	0800209f 	.word	0x0800209f
 8001c38:	0800209f 	.word	0x0800209f
 8001c3c:	0800209f 	.word	0x0800209f
 8001c40:	0800209f 	.word	0x0800209f
 8001c44:	0800209f 	.word	0x0800209f
 8001c48:	0800209f 	.word	0x0800209f
 8001c4c:	0800209f 	.word	0x0800209f
 8001c50:	0800209f 	.word	0x0800209f
 8001c54:	0800209f 	.word	0x0800209f
 8001c58:	0800209f 	.word	0x0800209f
 8001c5c:	0800209f 	.word	0x0800209f
 8001c60:	0800209f 	.word	0x0800209f
 8001c64:	0800209f 	.word	0x0800209f
 8001c68:	0800209f 	.word	0x0800209f
 8001c6c:	0800209f 	.word	0x0800209f
 8001c70:	0800209f 	.word	0x0800209f
 8001c74:	0800209f 	.word	0x0800209f
 8001c78:	0800209f 	.word	0x0800209f
 8001c7c:	0800209f 	.word	0x0800209f
 8001c80:	0800209f 	.word	0x0800209f
 8001c84:	0800209f 	.word	0x0800209f
 8001c88:	0800209f 	.word	0x0800209f
 8001c8c:	0800209f 	.word	0x0800209f
 8001c90:	0800209f 	.word	0x0800209f
 8001c94:	0800209f 	.word	0x0800209f
 8001c98:	08001f09 	.word	0x08001f09
 8001c9c:	08001f5d 	.word	0x08001f5d
 8001ca0:	0800209f 	.word	0x0800209f
 8001ca4:	08001fb3 	.word	0x08001fb3
 8001ca8:	08002003 	.word	0x08002003
 8001cac:	08002053 	.word	0x08002053
 8001cb0:	3b10      	subs	r3, #16
 8001cb2:	2b15      	cmp	r3, #21
 8001cb4:	f200 81f3 	bhi.w	800209e <executeServerCmd+0x4de>
 8001cb8:	a201      	add	r2, pc, #4	; (adr r2, 8001cc0 <executeServerCmd+0x100>)
 8001cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cbe:	bf00      	nop
 8001cc0:	08001e01 	.word	0x08001e01
 8001cc4:	08001d27 	.word	0x08001d27
 8001cc8:	0800209f 	.word	0x0800209f
 8001ccc:	0800209f 	.word	0x0800209f
 8001cd0:	0800209f 	.word	0x0800209f
 8001cd4:	0800209f 	.word	0x0800209f
 8001cd8:	0800209f 	.word	0x0800209f
 8001cdc:	0800209f 	.word	0x0800209f
 8001ce0:	0800209f 	.word	0x0800209f
 8001ce4:	0800209f 	.word	0x0800209f
 8001ce8:	0800209f 	.word	0x0800209f
 8001cec:	0800209f 	.word	0x0800209f
 8001cf0:	0800209f 	.word	0x0800209f
 8001cf4:	0800209f 	.word	0x0800209f
 8001cf8:	0800209f 	.word	0x0800209f
 8001cfc:	0800209f 	.word	0x0800209f
 8001d00:	08001d5d 	.word	0x08001d5d
 8001d04:	08001d2d 	.word	0x08001d2d
 8001d08:	0800209f 	.word	0x0800209f
 8001d0c:	08001dd9 	.word	0x08001dd9
 8001d10:	08001d8d 	.word	0x08001d8d
 8001d14:	08001db5 	.word	0x08001db5
 8001d18:	2bb5      	cmp	r3, #181	; 0xb5
 8001d1a:	f300 81c0 	bgt.w	800209e <executeServerCmd+0x4de>
 8001d1e:	2b90      	cmp	r3, #144	; 0x90
 8001d20:	f6bf af72 	bge.w	8001c08 <executeServerCmd+0x48>
		break;
 8001d24:	e1bb      	b.n	800209e <executeServerCmd+0x4de>
		index = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	75fb      	strb	r3, [r7, #23]
		break;
 8001d2a:	e1b9      	b.n	80020a0 <executeServerCmd+0x4e0>
		buffer[index++] = 4;
 8001d2c:	7dfb      	ldrb	r3, [r7, #23]
 8001d2e:	1c5a      	adds	r2, r3, #1
 8001d30:	75fa      	strb	r2, [r7, #23]
 8001d32:	461a      	mov	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	4413      	add	r3, r2
 8001d38:	2204      	movs	r2, #4
 8001d3a:	701a      	strb	r2, [r3, #0]
		freqEncode(buffer + index, loRa->upFreq);
 8001d3c:	7dfb      	ldrb	r3, [r7, #23]
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	441a      	add	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	4619      	mov	r1, r3
 8001d48:	4610      	mov	r0, r2
 8001d4a:	f001 f827 	bl	8002d9c <freqEncode>
		index += sizeof(loRa->upFreq);
 8001d4e:	7dfb      	ldrb	r3, [r7, #23]
 8001d50:	3304      	adds	r3, #4
 8001d52:	75fb      	strb	r3, [r7, #23]
		index++;
 8001d54:	7dfb      	ldrb	r3, [r7, #23]
 8001d56:	3301      	adds	r3, #1
 8001d58:	75fb      	strb	r3, [r7, #23]
		break;
 8001d5a:	e1a1      	b.n	80020a0 <executeServerCmd+0x4e0>
		buffer[index++] = 4;
 8001d5c:	7dfb      	ldrb	r3, [r7, #23]
 8001d5e:	1c5a      	adds	r2, r3, #1
 8001d60:	75fa      	strb	r2, [r7, #23]
 8001d62:	461a      	mov	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	4413      	add	r3, r2
 8001d68:	2204      	movs	r2, #4
 8001d6a:	701a      	strb	r2, [r3, #0]
		freqEncode(buffer + index, loRa->dlFreq);
 8001d6c:	7dfb      	ldrb	r3, [r7, #23]
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	441a      	add	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	4619      	mov	r1, r3
 8001d78:	4610      	mov	r0, r2
 8001d7a:	f001 f80f 	bl	8002d9c <freqEncode>
		index += sizeof(loRa->dlFreq);
 8001d7e:	7dfb      	ldrb	r3, [r7, #23]
 8001d80:	3304      	adds	r3, #4
 8001d82:	75fb      	strb	r3, [r7, #23]
		index++;
 8001d84:	7dfb      	ldrb	r3, [r7, #23]
 8001d86:	3301      	adds	r3, #1
 8001d88:	75fb      	strb	r3, [r7, #23]
		break;
 8001d8a:	e189      	b.n	80020a0 <executeServerCmd+0x4e0>
		buffer[index++] = 1;
 8001d8c:	7dfb      	ldrb	r3, [r7, #23]
 8001d8e:	1c5a      	adds	r2, r3, #1
 8001d90:	75fa      	strb	r2, [r7, #23]
 8001d92:	461a      	mov	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	4413      	add	r3, r2
 8001d98:	2201      	movs	r2, #1
 8001d9a:	701a      	strb	r2, [r3, #0]
		buffer[index++] = loRa->spreadFactor - 6;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	7b5a      	ldrb	r2, [r3, #13]
 8001da0:	7dfb      	ldrb	r3, [r7, #23]
 8001da2:	1c59      	adds	r1, r3, #1
 8001da4:	75f9      	strb	r1, [r7, #23]
 8001da6:	4619      	mov	r1, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	440b      	add	r3, r1
 8001dac:	3a06      	subs	r2, #6
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	701a      	strb	r2, [r3, #0]
		break;
 8001db2:	e175      	b.n	80020a0 <executeServerCmd+0x4e0>
		buffer[index++] = 1;
 8001db4:	7dfb      	ldrb	r3, [r7, #23]
 8001db6:	1c5a      	adds	r2, r3, #1
 8001db8:	75fa      	strb	r2, [r7, #23]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	701a      	strb	r2, [r3, #0]
		buffer[index++] = loRa->codingRate;
 8001dc4:	7dfb      	ldrb	r3, [r7, #23]
 8001dc6:	1c5a      	adds	r2, r3, #1
 8001dc8:	75fa      	strb	r2, [r7, #23]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4413      	add	r3, r2
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	7bd2      	ldrb	r2, [r2, #15]
 8001dd4:	701a      	strb	r2, [r3, #0]
		break;
 8001dd6:	e163      	b.n	80020a0 <executeServerCmd+0x4e0>
		buffer[index++] = 1;
 8001dd8:	7dfb      	ldrb	r3, [r7, #23]
 8001dda:	1c5a      	adds	r2, r3, #1
 8001ddc:	75fa      	strb	r2, [r7, #23]
 8001dde:	461a      	mov	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4413      	add	r3, r2
 8001de4:	2201      	movs	r2, #1
 8001de6:	701a      	strb	r2, [r3, #0]
		buffer[index++] = loRa->bandwidth + 1;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	7b9a      	ldrb	r2, [r3, #14]
 8001dec:	7dfb      	ldrb	r3, [r7, #23]
 8001dee:	1c59      	adds	r1, r3, #1
 8001df0:	75f9      	strb	r1, [r7, #23]
 8001df2:	4619      	mov	r1, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	440b      	add	r3, r1
 8001df8:	3201      	adds	r2, #1
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	701a      	strb	r2, [r3, #0]
		break;
 8001dfe:	e14f      	b.n	80020a0 <executeServerCmd+0x4e0>
		index = 0;
 8001e00:	2300      	movs	r3, #0
 8001e02:	75fb      	strb	r3, [r7, #23]
		buffer[index++] = RDSS_START_MARK;
 8001e04:	7dfb      	ldrb	r3, [r7, #23]
 8001e06:	1c5a      	adds	r2, r3, #1
 8001e08:	75fa      	strb	r2, [r7, #23]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	4413      	add	r3, r2
 8001e10:	227e      	movs	r2, #126	; 0x7e
 8001e12:	701a      	strb	r2, [r3, #0]
		buffer[index++] = server->function;
 8001e14:	7dfb      	ldrb	r3, [r7, #23]
 8001e16:	1c5a      	adds	r2, r3, #1
 8001e18:	75fa      	strb	r2, [r7, #23]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	4413      	add	r3, r2
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	7d52      	ldrb	r2, [r2, #21]
 8001e24:	701a      	strb	r2, [r3, #0]
		buffer[index++] = rdss->id;
 8001e26:	7dfb      	ldrb	r3, [r7, #23]
 8001e28:	1c5a      	adds	r2, r3, #1
 8001e2a:	75fa      	strb	r2, [r7, #23]
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	4413      	add	r3, r2
 8001e32:	68ba      	ldr	r2, [r7, #8]
 8001e34:	7c12      	ldrb	r2, [r2, #16]
 8001e36:	701a      	strb	r2, [r3, #0]
		buffer[index++] = QUERY_MODULE_ID;
 8001e38:	7dfb      	ldrb	r3, [r7, #23]
 8001e3a:	1c5a      	adds	r2, r3, #1
 8001e3c:	75fa      	strb	r2, [r7, #23]
 8001e3e:	461a      	mov	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	4413      	add	r3, r2
 8001e44:	2210      	movs	r2, #16
 8001e46:	701a      	strb	r2, [r3, #0]
		buffer[index++] = 0x00;
 8001e48:	7dfb      	ldrb	r3, [r7, #23]
 8001e4a:	1c5a      	adds	r2, r3, #1
 8001e4c:	75fa      	strb	r2, [r7, #23]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	4413      	add	r3, r2
 8001e54:	2200      	movs	r2, #0
 8001e56:	701a      	strb	r2, [r3, #0]
		buffer[index++] = 2;
 8001e58:	7dfb      	ldrb	r3, [r7, #23]
 8001e5a:	1c5a      	adds	r2, r3, #1
 8001e5c:	75fa      	strb	r2, [r7, #23]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	4413      	add	r3, r2
 8001e64:	2202      	movs	r2, #2
 8001e66:	701a      	strb	r2, [r3, #0]
		buffer[index++] = server->function;
 8001e68:	7dfb      	ldrb	r3, [r7, #23]
 8001e6a:	1c5a      	adds	r2, r3, #1
 8001e6c:	75fa      	strb	r2, [r7, #23]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4413      	add	r3, r2
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	7d52      	ldrb	r2, [r2, #21]
 8001e78:	701a      	strb	r2, [r3, #0]
		buffer[index++] = rdss->id;
 8001e7a:	7dfb      	ldrb	r3, [r7, #23]
 8001e7c:	1c5a      	adds	r2, r3, #1
 8001e7e:	75fa      	strb	r2, [r7, #23]
 8001e80:	461a      	mov	r2, r3
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	4413      	add	r3, r2
 8001e86:	68ba      	ldr	r2, [r7, #8]
 8001e88:	7c12      	ldrb	r2, [r2, #16]
 8001e8a:	701a      	strb	r2, [r3, #0]
		break;
 8001e8c:	e108      	b.n	80020a0 <executeServerCmd+0x4e0>
		server->function = rdss->buff[6];
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	3306      	adds	r3, #6
 8001e94:	781a      	ldrb	r2, [r3, #0]
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	755a      	strb	r2, [r3, #21]
		server->id = rdss->buff[7];
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	3307      	adds	r3, #7
 8001ea0:	781a      	ldrb	r2, [r3, #0]
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	751a      	strb	r2, [r3, #20]
		rdss->id = server->id;
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	7d1a      	ldrb	r2, [r3, #20]
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	741a      	strb	r2, [r3, #16]
		index = setRdssStartData(rdss, buffer, server->function);
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	7d5b      	ldrb	r3, [r3, #21]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	68f9      	ldr	r1, [r7, #12]
 8001eb6:	68b8      	ldr	r0, [r7, #8]
 8001eb8:	f000 fef5 	bl	8002ca6 <setRdssStartData>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	75fb      	strb	r3, [r7, #23]
		buffer[index++] = SERVER;
 8001ec0:	7dfb      	ldrb	r3, [r7, #23]
 8001ec2:	1c5a      	adds	r2, r3, #1
 8001ec4:	75fa      	strb	r2, [r7, #23]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	4413      	add	r3, r2
 8001ecc:	2200      	movs	r2, #0
 8001ece:	701a      	strb	r2, [r3, #0]
		buffer[index++] = rdss->id;
 8001ed0:	7dfb      	ldrb	r3, [r7, #23]
 8001ed2:	1c5a      	adds	r2, r3, #1
 8001ed4:	75fa      	strb	r2, [r7, #23]
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	4413      	add	r3, r2
 8001edc:	68ba      	ldr	r2, [r7, #8]
 8001ede:	7c12      	ldrb	r2, [r2, #16]
 8001ee0:	701a      	strb	r2, [r3, #0]
		HAL_savePage(M24C64_PAGE0, (uint8_t*) &(vlad->function), 3, 1);
 8001ee2:	4b7c      	ldr	r3, [pc, #496]	; (80020d4 <executeServerCmd+0x514>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f103 012d 	add.w	r1, r3, #45	; 0x2d
 8001eea:	2301      	movs	r3, #1
 8001eec:	2203      	movs	r2, #3
 8001eee:	2000      	movs	r0, #0
 8001ef0:	f7ff fa2c 	bl	800134c <HAL_savePage>
		HAL_savePage(M24C64_PAGE0, (uint8_t*) &(vlad->id), 4, 1);
 8001ef4:	4b77      	ldr	r3, [pc, #476]	; (80020d4 <executeServerCmd+0x514>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8001efc:	2301      	movs	r3, #1
 8001efe:	2204      	movs	r2, #4
 8001f00:	2000      	movs	r0, #0
 8001f02:	f7ff fa23 	bl	800134c <HAL_savePage>
		break;
 8001f06:	e0cb      	b.n	80020a0 <executeServerCmd+0x4e0>
		buffer[index++] = 4;
 8001f08:	7dfb      	ldrb	r3, [r7, #23]
 8001f0a:	1c5a      	adds	r2, r3, #1
 8001f0c:	75fa      	strb	r2, [r7, #23]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4413      	add	r3, r2
 8001f14:	2204      	movs	r2, #4
 8001f16:	701a      	strb	r2, [r3, #0]
		loRa->dlFreq = freqDecode(rdss->buff + index);
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	7dfb      	ldrb	r3, [r7, #23]
 8001f1e:	4413      	add	r3, r2
 8001f20:	4618      	mov	r0, r3
 8001f22:	f000 ff09 	bl	8002d38 <freqDecode>
 8001f26:	4603      	mov	r3, r0
 8001f28:	461a      	mov	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	605a      	str	r2, [r3, #4]
		index += sizeof(loRa->dlFreq);
 8001f2e:	7dfb      	ldrb	r3, [r7, #23]
 8001f30:	3304      	adds	r3, #4
 8001f32:	75fb      	strb	r3, [r7, #23]
		res = HAL_savePage(M24C64_PAGE1, (uint8_t*) &(loRa->dlFreq), 0, 4);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	1d19      	adds	r1, r3, #4
 8001f38:	2304      	movs	r3, #4
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2001      	movs	r0, #1
 8001f3e:	f7ff fa05 	bl	800134c <HAL_savePage>
 8001f42:	4603      	mov	r3, r0
 8001f44:	75bb      	strb	r3, [r7, #22]
		changeMode(loRa, loRa->mode);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7fe ff33 	bl	8000dba <changeMode>
		writeLoRaParametersReg(loRa);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7fe fec9 	bl	8000cec <writeLoRaParametersReg>
		break;
 8001f5a:	e0a1      	b.n	80020a0 <executeServerCmd+0x4e0>
		buffer[index++] = 4;
 8001f5c:	7dfb      	ldrb	r3, [r7, #23]
 8001f5e:	1c5a      	adds	r2, r3, #1
 8001f60:	75fa      	strb	r2, [r7, #23]
 8001f62:	461a      	mov	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4413      	add	r3, r2
 8001f68:	2204      	movs	r2, #4
 8001f6a:	701a      	strb	r2, [r3, #0]
		loRa->upFreq = freqDecode(rdss->buff + index);
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	7dfb      	ldrb	r3, [r7, #23]
 8001f72:	4413      	add	r3, r2
 8001f74:	4618      	mov	r0, r3
 8001f76:	f000 fedf 	bl	8002d38 <freqDecode>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	609a      	str	r2, [r3, #8]
		index += sizeof(loRa->upFreq);
 8001f82:	7dfb      	ldrb	r3, [r7, #23]
 8001f84:	3304      	adds	r3, #4
 8001f86:	75fb      	strb	r3, [r7, #23]
		res = HAL_savePage(M24C64_PAGE1, (uint8_t*) &(loRa->upFreq), 4, 4);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f103 0108 	add.w	r1, r3, #8
 8001f8e:	2304      	movs	r3, #4
 8001f90:	2204      	movs	r2, #4
 8001f92:	2001      	movs	r0, #1
 8001f94:	f7ff f9da 	bl	800134c <HAL_savePage>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	75bb      	strb	r3, [r7, #22]
		changeMode(loRa, loRa->mode);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f7fe ff08 	bl	8000dba <changeMode>
		writeLoRaParametersReg(loRa);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7fe fe9e 	bl	8000cec <writeLoRaParametersReg>
		break;
 8001fb0:	e076      	b.n	80020a0 <executeServerCmd+0x4e0>
		buffer[index++] = 1;
 8001fb2:	7dfb      	ldrb	r3, [r7, #23]
 8001fb4:	1c5a      	adds	r2, r3, #1
 8001fb6:	75fa      	strb	r2, [r7, #23]
 8001fb8:	461a      	mov	r2, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	701a      	strb	r2, [r3, #0]
		loRa->bandwidth = rdss->buff[index++] - 1;
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	685a      	ldr	r2, [r3, #4]
 8001fc6:	7dfb      	ldrb	r3, [r7, #23]
 8001fc8:	1c59      	adds	r1, r3, #1
 8001fca:	75f9      	strb	r1, [r7, #23]
 8001fcc:	4413      	add	r3, r2
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	739a      	strb	r2, [r3, #14]
		res = HAL_savePage(M24C64_PAGE0, &(loRa->bandwidth), 1, 1);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f103 010e 	add.w	r1, r3, #14
 8001fde:	2301      	movs	r3, #1
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	2000      	movs	r0, #0
 8001fe4:	f7ff f9b2 	bl	800134c <HAL_savePage>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	75bb      	strb	r3, [r7, #22]
		changeMode(loRa, loRa->mode);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f7fe fee0 	bl	8000dba <changeMode>
		writeLoRaParametersReg(loRa);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7fe fe76 	bl	8000cec <writeLoRaParametersReg>
		break;
 8002000:	e04e      	b.n	80020a0 <executeServerCmd+0x4e0>
		buffer[index++] = 1;
 8002002:	7dfb      	ldrb	r3, [r7, #23]
 8002004:	1c5a      	adds	r2, r3, #1
 8002006:	75fa      	strb	r2, [r7, #23]
 8002008:	461a      	mov	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	4413      	add	r3, r2
 800200e:	2201      	movs	r2, #1
 8002010:	701a      	strb	r2, [r3, #0]
		loRa->spreadFactor = rdss->buff[index++] + 6;
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	685a      	ldr	r2, [r3, #4]
 8002016:	7dfb      	ldrb	r3, [r7, #23]
 8002018:	1c59      	adds	r1, r3, #1
 800201a:	75f9      	strb	r1, [r7, #23]
 800201c:	4413      	add	r3, r2
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	3306      	adds	r3, #6
 8002022:	b2da      	uxtb	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	735a      	strb	r2, [r3, #13]
		res = HAL_savePage(M24C64_PAGE0, &(loRa->spreadFactor), 0, 1);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f103 010d 	add.w	r1, r3, #13
 800202e:	2301      	movs	r3, #1
 8002030:	2200      	movs	r2, #0
 8002032:	2000      	movs	r0, #0
 8002034:	f7ff f98a 	bl	800134c <HAL_savePage>
 8002038:	4603      	mov	r3, r0
 800203a:	75bb      	strb	r3, [r7, #22]
		changeMode(loRa, loRa->mode);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002042:	4619      	mov	r1, r3
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f7fe feb8 	bl	8000dba <changeMode>
		writeLoRaParametersReg(loRa);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7fe fe4e 	bl	8000cec <writeLoRaParametersReg>
		break;
 8002050:	e026      	b.n	80020a0 <executeServerCmd+0x4e0>
		buffer[index++] = 1;
 8002052:	7dfb      	ldrb	r3, [r7, #23]
 8002054:	1c5a      	adds	r2, r3, #1
 8002056:	75fa      	strb	r2, [r7, #23]
 8002058:	461a      	mov	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	4413      	add	r3, r2
 800205e:	2201      	movs	r2, #1
 8002060:	701a      	strb	r2, [r3, #0]
		loRa->codingRate = rdss->buff[index++];
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	685a      	ldr	r2, [r3, #4]
 8002066:	7dfb      	ldrb	r3, [r7, #23]
 8002068:	1c59      	adds	r1, r3, #1
 800206a:	75f9      	strb	r1, [r7, #23]
 800206c:	4413      	add	r3, r2
 800206e:	781a      	ldrb	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	73da      	strb	r2, [r3, #15]
		res = HAL_savePage(M24C64_PAGE0, &(loRa->codingRate), 2, 1);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f103 010f 	add.w	r1, r3, #15
 800207a:	2301      	movs	r3, #1
 800207c:	2202      	movs	r2, #2
 800207e:	2000      	movs	r0, #0
 8002080:	f7ff f964 	bl	800134c <HAL_savePage>
 8002084:	4603      	mov	r3, r0
 8002086:	75bb      	strb	r3, [r7, #22]
		changeMode(loRa, loRa->mode);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800208e:	4619      	mov	r1, r3
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7fe fe92 	bl	8000dba <changeMode>
		writeLoRaParametersReg(loRa);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7fe fe28 	bl	8000cec <writeLoRaParametersReg>
		break;
 800209c:	e000      	b.n	80020a0 <executeServerCmd+0x4e0>
		break;
 800209e:	bf00      	nop
	}

	index += setCrc(buffer, index);
 80020a0:	7dfb      	ldrb	r3, [r7, #23]
 80020a2:	4619      	mov	r1, r3
 80020a4:	68f8      	ldr	r0, [r7, #12]
 80020a6:	f000 fdd6 	bl	8002c56 <setCrc>
 80020aa:	4603      	mov	r3, r0
 80020ac:	461a      	mov	r2, r3
 80020ae:	7dfb      	ldrb	r3, [r7, #23]
 80020b0:	4413      	add	r3, r2
 80020b2:	75fb      	strb	r3, [r7, #23]
	buffer[index++] = RDSS_END_MARK;
 80020b4:	7dfb      	ldrb	r3, [r7, #23]
 80020b6:	1c5a      	adds	r2, r3, #1
 80020b8:	75fa      	strb	r2, [r7, #23]
 80020ba:	461a      	mov	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4413      	add	r3, r2
 80020c0:	227f      	movs	r2, #127	; 0x7f
 80020c2:	701a      	strb	r2, [r3, #0]
	rdss->status = UART_SEND;
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	220d      	movs	r2, #13
 80020c8:	745a      	strb	r2, [r3, #17]
	return index;
 80020ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3718      	adds	r7, #24
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	200004dc 	.word	0x200004dc

080020d8 <clearRx>:
		break;
	}
	cleanTx(u1);
}

void clearRx(UART_tt *u1) {
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
	memset(u1->rxData, 0, sizeof(u1->rxData));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80020e6:	2100      	movs	r1, #0
 80020e8:	4618      	mov	r0, r3
 80020ea:	f005 fd29 	bl	8007b40 <memset>
	u1->rxSize = 0;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
}
 80020f6:	bf00      	nop
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
	...

08002100 <transmitRdssQuery>:

void transmitRdssQuery(RDSS_t *rdss, SX1278_t *loRa) {
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]

	rdss->idQuery = rdss->idReceived;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	7bda      	ldrb	r2, [r3, #15]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	739a      	strb	r2, [r3, #14]
	loRa->txData = rdss->buff;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	loRa->txSize = rdss->buffSize;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	7a1a      	ldrb	r2, [r3, #8]
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

	changeMode(loRa, MASTER_SENDER);
 8002126:	2102      	movs	r1, #2
 8002128:	6838      	ldr	r0, [r7, #0]
 800212a:	f7fe fe46 	bl	8000dba <changeMode>
	transmit(loRa);
 800212e:	6838      	ldr	r0, [r7, #0]
 8002130:	f7fe ffc9 	bl	80010c6 <transmit>
	if (loRa->status == TX_DONE)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800213a:	2b03      	cmp	r3, #3
 800213c:	d104      	bne.n	8002148 <transmitRdssQuery+0x48>
		HAL_GPIO_WritePin(LORA_TX_OK_GPIO_Port, LORA_TX_OK_Pin, GPIO_PIN_SET);
 800213e:	2201      	movs	r2, #1
 8002140:	2108      	movs	r1, #8
 8002142:	480d      	ldr	r0, [pc, #52]	; (8002178 <transmitRdssQuery+0x78>)
 8002144:	f001 ff3d 	bl	8003fc2 <HAL_GPIO_WritePin>
	uint32_t timeStart = HAL_GetTick();
 8002148:	f001 f984 	bl	8003454 <HAL_GetTick>
 800214c:	60f8      	str	r0, [r7, #12]
	changeMode(loRa, MASTER_RECEIVER);
 800214e:	2103      	movs	r1, #3
 8002150:	6838      	ldr	r0, [r7, #0]
 8002152:	f7fe fe32 	bl	8000dba <changeMode>
	HAL_GPIO_WritePin(LORA_TX_OK_GPIO_Port, LORA_TX_OK_Pin, GPIO_PIN_RESET);
 8002156:	2200      	movs	r2, #0
 8002158:	2108      	movs	r1, #8
 800215a:	4807      	ldr	r0, [pc, #28]	; (8002178 <transmitRdssQuery+0x78>)
 800215c:	f001 ff31 	bl	8003fc2 <HAL_GPIO_WritePin>
	loRa->lastChangeMode = HAL_GetTick() - timeStart;
 8002160:	f001 f978 	bl	8003454 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	1ad2      	subs	r2, r2, r3
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800216e:	bf00      	nop
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40010c00 	.word	0x40010c00

0800217c <processServerCmd>:

void processServerCmd(UART_tt *u1, RDSS_t *rdss, SX1278_t *loRa,
		Server_t *server) {
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
 8002188:	603b      	str	r3, [r7, #0]
	if (rdss->cmd == QUERY_MASTER_STATUS) {
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	2b13      	cmp	r3, #19
 8002190:	d110      	bne.n	80021b4 <processServerCmd+0x38>
		for (uint8_t i = 0; i < 15; i++)
 8002192:	2300      	movs	r3, #0
 8002194:	75fb      	strb	r3, [r7, #23]
 8002196:	e009      	b.n	80021ac <processServerCmd+0x30>
			writeTxReg(rdss->queryBuffer[i]);
 8002198:	7dfb      	ldrb	r3, [r7, #23]
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	4413      	add	r3, r2
 800219e:	7cdb      	ldrb	r3, [r3, #19]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f001 f881 	bl	80032a8 <writeTxReg>
		for (uint8_t i = 0; i < 15; i++)
 80021a6:	7dfb      	ldrb	r3, [r7, #23]
 80021a8:	3301      	adds	r3, #1
 80021aa:	75fb      	strb	r3, [r7, #23]
 80021ac:	7dfb      	ldrb	r3, [r7, #23]
 80021ae:	2b0e      	cmp	r3, #14
 80021b0:	d9f2      	bls.n	8002198 <processServerCmd+0x1c>
		for (uint8_t i = 0; i < u1->txSize; i++)
			writeTxReg(u1->txData[i]);
		u1->txSize = 0;
		free(u1->txData);
	}
}
 80021b2:	e033      	b.n	800221c <processServerCmd+0xa0>
		u1->txData = malloc(sizeof(uint8_t) * 25);
 80021b4:	2019      	movs	r0, #25
 80021b6:	f005 fc07 	bl	80079c8 <malloc>
 80021ba:	4603      	mov	r3, r0
 80021bc:	461a      	mov	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
		u1->txSize = executeServerCmd(u1->txData, rdss, loRa, server);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f8d3 012c 	ldr.w	r0, [r3, #300]	; 0x12c
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	68b9      	ldr	r1, [r7, #8]
 80021d0:	f7ff fcf6 	bl	8001bc0 <executeServerCmd>
 80021d4:	4603      	mov	r3, r0
 80021d6:	461a      	mov	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		for (uint8_t i = 0; i < u1->txSize; i++)
 80021de:	2300      	movs	r3, #0
 80021e0:	75bb      	strb	r3, [r7, #22]
 80021e2:	e00b      	b.n	80021fc <processServerCmd+0x80>
			writeTxReg(u1->txData[i]);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 80021ea:	7dbb      	ldrb	r3, [r7, #22]
 80021ec:	4413      	add	r3, r2
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f001 f859 	bl	80032a8 <writeTxReg>
		for (uint8_t i = 0; i < u1->txSize; i++)
 80021f6:	7dbb      	ldrb	r3, [r7, #22]
 80021f8:	3301      	adds	r3, #1
 80021fa:	75bb      	strb	r3, [r7, #22]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8002202:	7dba      	ldrb	r2, [r7, #22]
 8002204:	429a      	cmp	r2, r3
 8002206:	d3ed      	bcc.n	80021e4 <processServerCmd+0x68>
		u1->txSize = 0;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		free(u1->txData);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8002216:	4618      	mov	r0, r3
 8002218:	f005 fbde 	bl	80079d8 <free>
}
 800221c:	bf00      	nop
 800221e:	3718      	adds	r7, #24
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <processUartRx>:

void processUartRx(UART_tt *u1, RDSS_t *rdss, Server_t *server, SX1278_t *loRa) {//Todo Procesamiento Uart
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
 8002230:	603b      	str	r3, [r7, #0]
	if (u1->isReceivedDataReady == false)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8002238:	f083 0301 	eor.w	r3, r3, #1
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d13e      	bne.n	80022c0 <processUartRx+0x9c>
		return;
	u1->isReceivedDataReady = false;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	//HAL_Delay(1);
	if (validate(u1->rxData, u1->rxSize) != DATA_OK) {
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8002252:	4619      	mov	r1, r3
 8002254:	4610      	mov	r0, r2
 8002256:	f000 fccf 	bl	8002bf8 <validate>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00b      	beq.n	8002278 <processUartRx+0x54>
		memset(u1->rxData, 0, sizeof(u1->rxData));
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002266:	2100      	movs	r1, #0
 8002268:	4618      	mov	r0, r3
 800226a:	f005 fc69 	bl	8007b40 <memset>
		u1->rxSize = 0;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
		return;
 8002276:	e024      	b.n	80022c2 <processUartRx+0x9e>
	}
	updateRdss(rdss, u1->rxData, u1->rxSize);
 8002278:	68f9      	ldr	r1, [r7, #12]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8002280:	461a      	mov	r2, r3
 8002282:	68b8      	ldr	r0, [r7, #8]
 8002284:	f000 fda2 	bl	8002dcc <updateRdss>
	if (rdss->idReceived == rdss->id) {
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	7bda      	ldrb	r2, [r3, #15]
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	7c1b      	ldrb	r3, [r3, #16]
 8002290:	429a      	cmp	r2, r3
 8002292:	d106      	bne.n	80022a2 <processUartRx+0x7e>
		processServerCmd(u1, rdss, loRa, server);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	68b9      	ldr	r1, [r7, #8]
 800229a:	68f8      	ldr	r0, [r7, #12]
 800229c:	f7ff ff6e 	bl	800217c <processServerCmd>
 80022a0:	e007      	b.n	80022b2 <processUartRx+0x8e>
	} else if (rdss->cmd != 0) {
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <processUartRx+0x8e>
		transmitRdssQuery(rdss, loRa);
 80022aa:	6839      	ldr	r1, [r7, #0]
 80022ac:	68b8      	ldr	r0, [r7, #8]
 80022ae:	f7ff ff27 	bl	8002100 <transmitRdssQuery>
	}

	clearRx(u1);
 80022b2:	68f8      	ldr	r0, [r7, #12]
 80022b4:	f7ff ff10 	bl	80020d8 <clearRx>
	rdssReinit(rdss);
 80022b8:	68b8      	ldr	r0, [r7, #8]
 80022ba:	f000 fbdc 	bl	8002a76 <rdssReinit>
 80022be:	e000      	b.n	80022c2 <processUartRx+0x9e>
		return;
 80022c0:	bf00      	nop
}
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <masterProcessRdss>:
		return 1;
	default:
		return 0;
	}
}
void masterProcessRdss(RDSS_t *rdss) {
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
	uint8_t error[] = { 0xff, 0xff, 0xff, 0xff };
 80022d0:	f04f 33ff 	mov.w	r3, #4294967295
 80022d4:	60bb      	str	r3, [r7, #8]
	switch (loRa->rxData[CMD_INDEX]) {
 80022d6:	4b9a      	ldr	r3, [pc, #616]	; (8002540 <masterProcessRdss+0x278>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80022de:	2b34      	cmp	r3, #52	; 0x34
 80022e0:	f300 80d2 	bgt.w	8002488 <masterProcessRdss+0x1c0>
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	da5f      	bge.n	80023a8 <masterProcessRdss+0xe0>
 80022e8:	e114      	b.n	8002514 <masterProcessRdss+0x24c>
 80022ea:	3b90      	subs	r3, #144	; 0x90
 80022ec:	2b2b      	cmp	r3, #43	; 0x2b
 80022ee:	f200 8111 	bhi.w	8002514 <masterProcessRdss+0x24c>
 80022f2:	a201      	add	r2, pc, #4	; (adr r2, 80022f8 <masterProcessRdss+0x30>)
 80022f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022f8:	08002495 	.word	0x08002495
 80022fc:	08002515 	.word	0x08002515
 8002300:	08002515 	.word	0x08002515
 8002304:	08002515 	.word	0x08002515
 8002308:	08002515 	.word	0x08002515
 800230c:	08002515 	.word	0x08002515
 8002310:	08002515 	.word	0x08002515
 8002314:	08002515 	.word	0x08002515
 8002318:	08002515 	.word	0x08002515
 800231c:	08002515 	.word	0x08002515
 8002320:	08002515 	.word	0x08002515
 8002324:	08002515 	.word	0x08002515
 8002328:	08002515 	.word	0x08002515
 800232c:	08002515 	.word	0x08002515
 8002330:	08002515 	.word	0x08002515
 8002334:	08002515 	.word	0x08002515
 8002338:	08002515 	.word	0x08002515
 800233c:	08002515 	.word	0x08002515
 8002340:	08002515 	.word	0x08002515
 8002344:	08002515 	.word	0x08002515
 8002348:	08002515 	.word	0x08002515
 800234c:	08002515 	.word	0x08002515
 8002350:	08002515 	.word	0x08002515
 8002354:	08002515 	.word	0x08002515
 8002358:	08002515 	.word	0x08002515
 800235c:	08002515 	.word	0x08002515
 8002360:	08002515 	.word	0x08002515
 8002364:	08002515 	.word	0x08002515
 8002368:	08002515 	.word	0x08002515
 800236c:	08002515 	.word	0x08002515
 8002370:	08002515 	.word	0x08002515
 8002374:	08002515 	.word	0x08002515
 8002378:	08002495 	.word	0x08002495
 800237c:	08002495 	.word	0x08002495
 8002380:	08002495 	.word	0x08002495
 8002384:	08002495 	.word	0x08002495
 8002388:	08002495 	.word	0x08002495
 800238c:	08002495 	.word	0x08002495
 8002390:	080024bd 	.word	0x080024bd
 8002394:	08002495 	.word	0x08002495
 8002398:	08002495 	.word	0x08002495
 800239c:	08002495 	.word	0x08002495
 80023a0:	08002495 	.word	0x08002495
 80023a4:	08002495 	.word	0x08002495
 80023a8:	2b34      	cmp	r3, #52	; 0x34
 80023aa:	f200 80b3 	bhi.w	8002514 <masterProcessRdss+0x24c>
 80023ae:	a201      	add	r2, pc, #4	; (adr r2, 80023b4 <masterProcessRdss+0xec>)
 80023b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b4:	08002495 	.word	0x08002495
 80023b8:	08002515 	.word	0x08002515
 80023bc:	08002515 	.word	0x08002515
 80023c0:	08002515 	.word	0x08002515
 80023c4:	08002515 	.word	0x08002515
 80023c8:	08002515 	.word	0x08002515
 80023cc:	08002515 	.word	0x08002515
 80023d0:	08002515 	.word	0x08002515
 80023d4:	08002515 	.word	0x08002515
 80023d8:	08002515 	.word	0x08002515
 80023dc:	08002515 	.word	0x08002515
 80023e0:	08002515 	.word	0x08002515
 80023e4:	08002515 	.word	0x08002515
 80023e8:	08002515 	.word	0x08002515
 80023ec:	08002515 	.word	0x08002515
 80023f0:	08002515 	.word	0x08002515
 80023f4:	08002495 	.word	0x08002495
 80023f8:	08002495 	.word	0x08002495
 80023fc:	08002495 	.word	0x08002495
 8002400:	08002495 	.word	0x08002495
 8002404:	08002495 	.word	0x08002495
 8002408:	08002515 	.word	0x08002515
 800240c:	08002515 	.word	0x08002515
 8002410:	080024e5 	.word	0x080024e5
 8002414:	08002515 	.word	0x08002515
 8002418:	08002515 	.word	0x08002515
 800241c:	08002515 	.word	0x08002515
 8002420:	08002515 	.word	0x08002515
 8002424:	08002515 	.word	0x08002515
 8002428:	08002515 	.word	0x08002515
 800242c:	08002515 	.word	0x08002515
 8002430:	08002515 	.word	0x08002515
 8002434:	08002495 	.word	0x08002495
 8002438:	08002495 	.word	0x08002495
 800243c:	08002495 	.word	0x08002495
 8002440:	08002495 	.word	0x08002495
 8002444:	08002495 	.word	0x08002495
 8002448:	08002495 	.word	0x08002495
 800244c:	08002515 	.word	0x08002515
 8002450:	08002515 	.word	0x08002515
 8002454:	08002515 	.word	0x08002515
 8002458:	08002515 	.word	0x08002515
 800245c:	08002515 	.word	0x08002515
 8002460:	08002515 	.word	0x08002515
 8002464:	08002515 	.word	0x08002515
 8002468:	08002515 	.word	0x08002515
 800246c:	08002515 	.word	0x08002515
 8002470:	08002515 	.word	0x08002515
 8002474:	08002515 	.word	0x08002515
 8002478:	08002495 	.word	0x08002495
 800247c:	08002495 	.word	0x08002495
 8002480:	08002495 	.word	0x08002495
 8002484:	08002495 	.word	0x08002495
 8002488:	2bbb      	cmp	r3, #187	; 0xbb
 800248a:	dc43      	bgt.n	8002514 <masterProcessRdss+0x24c>
 800248c:	2b90      	cmp	r3, #144	; 0x90
 800248e:	f6bf af2c 	bge.w	80022ea <masterProcessRdss+0x22>
 8002492:	e03f      	b.n	8002514 <masterProcessRdss+0x24c>
	case SET_PARAMETER_FREQOUT:
	case SET_PARAMETERS:
	case SET_PARAMETER_FREQBASE:
	case QUERY_PARAMETER_PdBm:
	case QUERY_UART1:
		for (uint8_t i = 0; i < rdss->buffSize; i++)
 8002494:	2300      	movs	r3, #0
 8002496:	73fb      	strb	r3, [r7, #15]
 8002498:	e00a      	b.n	80024b0 <masterProcessRdss+0x1e8>
			writeTxReg(rdss->buff[i]);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685a      	ldr	r2, [r3, #4]
 800249e:	7bfb      	ldrb	r3, [r7, #15]
 80024a0:	4413      	add	r3, r2
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f000 feff 	bl	80032a8 <writeTxReg>
		for (uint8_t i = 0; i < rdss->buffSize; i++)
 80024aa:	7bfb      	ldrb	r3, [r7, #15]
 80024ac:	3301      	adds	r3, #1
 80024ae:	73fb      	strb	r3, [r7, #15]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	7a1b      	ldrb	r3, [r3, #8]
 80024b4:	7bfa      	ldrb	r2, [r7, #15]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d3ef      	bcc.n	800249a <masterProcessRdss+0x1d2>
		break;
 80024ba:	e03d      	b.n	8002538 <masterProcessRdss+0x270>

	case SET_OUT:
		for (uint8_t i = 0; i < rdss->buffSize; i++)
 80024bc:	2300      	movs	r3, #0
 80024be:	73bb      	strb	r3, [r7, #14]
 80024c0:	e00a      	b.n	80024d8 <masterProcessRdss+0x210>
			writeTxReg(rdss->buff[i]);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	7bbb      	ldrb	r3, [r7, #14]
 80024c8:	4413      	add	r3, r2
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f000 feeb 	bl	80032a8 <writeTxReg>
		for (uint8_t i = 0; i < rdss->buffSize; i++)
 80024d2:	7bbb      	ldrb	r3, [r7, #14]
 80024d4:	3301      	adds	r3, #1
 80024d6:	73bb      	strb	r3, [r7, #14]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	7a1b      	ldrb	r3, [r3, #8]
 80024dc:	7bba      	ldrb	r2, [r7, #14]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d3ef      	bcc.n	80024c2 <masterProcessRdss+0x1fa>
		break;
 80024e2:	e029      	b.n	8002538 <masterProcessRdss+0x270>

	case QUERY_ETH:
		for (uint8_t i = 0; i < (loRa->rxData[DATA_LENGHT1_INDEX]); i++)
 80024e4:	2300      	movs	r3, #0
 80024e6:	737b      	strb	r3, [r7, #13]
 80024e8:	e00c      	b.n	8002504 <masterProcessRdss+0x23c>
			writeTxReg_uart2(loRa->rxData[DATA_START_INDEX + i]);
 80024ea:	4b15      	ldr	r3, [pc, #84]	; (8002540 <masterProcessRdss+0x278>)
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	7b7b      	ldrb	r3, [r7, #13]
 80024f0:	3306      	adds	r3, #6
 80024f2:	4413      	add	r3, r2
 80024f4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80024f8:	4618      	mov	r0, r3
 80024fa:	f000 ff01 	bl	8003300 <writeTxReg_uart2>
		for (uint8_t i = 0; i < (loRa->rxData[DATA_LENGHT1_INDEX]); i++)
 80024fe:	7b7b      	ldrb	r3, [r7, #13]
 8002500:	3301      	adds	r3, #1
 8002502:	737b      	strb	r3, [r7, #13]
 8002504:	4b0e      	ldr	r3, [pc, #56]	; (8002540 <masterProcessRdss+0x278>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800250c:	7b7a      	ldrb	r2, [r7, #13]
 800250e:	429a      	cmp	r2, r3
 8002510:	d3eb      	bcc.n	80024ea <masterProcessRdss+0x222>

		break;
 8002512:	e011      	b.n	8002538 <masterProcessRdss+0x270>

	default:
		for (uint8_t i = 0; i < sizeof(error); i++)
 8002514:	2300      	movs	r3, #0
 8002516:	733b      	strb	r3, [r7, #12]
 8002518:	e00a      	b.n	8002530 <masterProcessRdss+0x268>
			writeTxReg(error[i]);
 800251a:	7b3b      	ldrb	r3, [r7, #12]
 800251c:	3310      	adds	r3, #16
 800251e:	443b      	add	r3, r7
 8002520:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8002524:	4618      	mov	r0, r3
 8002526:	f000 febf 	bl	80032a8 <writeTxReg>
		for (uint8_t i = 0; i < sizeof(error); i++)
 800252a:	7b3b      	ldrb	r3, [r7, #12]
 800252c:	3301      	adds	r3, #1
 800252e:	733b      	strb	r3, [r7, #12]
 8002530:	7b3b      	ldrb	r3, [r7, #12]
 8002532:	2b03      	cmp	r3, #3
 8002534:	d9f1      	bls.n	800251a <masterProcessRdss+0x252>
		break;
 8002536:	bf00      	nop
	}
}
 8002538:	bf00      	nop
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	200004e0 	.word	0x200004e0

08002544 <masterProcessLoRaRx>:

void masterProcessLoRaRx(SX1278_t *loRa, RDSS_t *rdss, Vlad_t *vlad) {
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]

	    if (HAL_GPIO_ReadPin(LORA_BUSSY_GPIO_Port,
 8002550:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002554:	4838      	ldr	r0, [pc, #224]	; (8002638 <masterProcessLoRaRx+0xf4>)
 8002556:	f001 fd1d 	bl	8003f94 <HAL_GPIO_ReadPin>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d10d      	bne.n	800257c <masterProcessLoRaRx+0x38>
	    LORA_BUSSY_Pin) == GPIO_PIN_RESET){
	        clearIrqFlagsReg(loRa); // Retrieve data from the receive FIFO
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f7fe fbb0 	bl	8000cc6 <clearIrqFlagsReg>
	        memset(loRa->rxData, 0, loRa->rxSize);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f103 002f 	add.w	r0, r3, #47	; 0x2f
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f893 315b 	ldrb.w	r3, [r3, #347]	; 0x15b
 8002572:	461a      	mov	r2, r3
 8002574:	2100      	movs	r1, #0
 8002576:	f005 fae3 	bl	8007b40 <memset>
	        return; // if (crcErrorActivation(loRa) != 1)
 800257a:	e059      	b.n	8002630 <masterProcessLoRaRx+0xec>
	    }


	    getRxFifoData(loRa);
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f7fe fcef 	bl	8000f60 <getRxFifoData>
	        setRxFifoAddr(loRa);
	        memset(loRa->rxData, 0, 300);
	        return;
	    }

	    if (validate(loRa->rxData, loRa->rxSize) != DATA_OK){
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f103 022f 	add.w	r2, r3, #47	; 0x2f
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f893 315b 	ldrb.w	r3, [r3, #347]	; 0x15b
 800258e:	4619      	mov	r1, r3
 8002590:	4610      	mov	r0, r2
 8002592:	f000 fb31 	bl	8002bf8 <validate>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00e      	beq.n	80025ba <masterProcessLoRaRx+0x76>
	        clearIrqFlagsReg(loRa); // Retrieve data from the receive FIFO
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f7fe fb92 	bl	8000cc6 <clearIrqFlagsReg>
	        setRxFifoAddr(loRa);
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f7fe fd1e 	bl	8000fe4 <setRxFifoAddr>
	        memset(loRa->rxData, 0, 300);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	332f      	adds	r3, #47	; 0x2f
 80025ac:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025b0:	2100      	movs	r1, #0
 80025b2:	4618      	mov	r0, r3
 80025b4:	f005 fac4 	bl	8007b40 <memset>
	        return;
 80025b8:	e03a      	b.n	8002630 <masterProcessLoRaRx+0xec>
	    }

	    updateRdss(rdss, loRa->rxData, loRa->rxSize);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f103 012f 	add.w	r1, r3, #47	; 0x2f
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f893 315b 	ldrb.w	r3, [r3, #347]	; 0x15b
 80025c6:	461a      	mov	r2, r3
 80025c8:	68b8      	ldr	r0, [r7, #8]
 80025ca:	f000 fbff 	bl	8002dcc <updateRdss>
	    HAL_GPIO_WritePin(LORA_RX_OK_GPIO_Port, LORA_RX_OK_Pin, GPIO_PIN_SET);
 80025ce:	2201      	movs	r2, #1
 80025d0:	2110      	movs	r1, #16
 80025d2:	4819      	ldr	r0, [pc, #100]	; (8002638 <masterProcessLoRaRx+0xf4>)
 80025d4:	f001 fcf5 	bl	8003fc2 <HAL_GPIO_WritePin>
	        clearIrqFlagsReg(loRa); // Retrieve data from the receive FIFO
	        return;
	    }
	    */

	    masterProcessRdss(rdss);
 80025d8:	68b8      	ldr	r0, [r7, #8]
 80025da:	f7ff fe75 	bl	80022c8 <masterProcessRdss>
	    rdssReinit(rdss);
 80025de:	68b8      	ldr	r0, [r7, #8]
 80025e0:	f000 fa49 	bl	8002a76 <rdssReinit>
	    loRa->rxSize = 0;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
	    setLoRaLowFreqModeReg(loRa, SLEEP);
 80025ec:	2100      	movs	r1, #0
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f7fe fb4d 	bl	8000c8e <setLoRaLowFreqModeReg>
	    uint8_t addr = 0;
 80025f4:	2300      	movs	r3, #0
 80025f6:	75fb      	strb	r3, [r7, #23]
	    writeRegister(loRa->spi, LR_RegFifoAddrPtr, &addr, 1);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f8d3 0164 	ldr.w	r0, [r3, #356]	; 0x164
 80025fe:	f107 0217 	add.w	r2, r7, #23
 8002602:	2301      	movs	r3, #1
 8002604:	210d      	movs	r1, #13
 8002606:	f7fe f9f1 	bl	80009ec <writeRegister>
	    HAL_GPIO_WritePin(LORA_RX_OK_GPIO_Port, LORA_RX_OK_Pin, GPIO_PIN_RESET);
 800260a:	2200      	movs	r2, #0
 800260c:	2110      	movs	r1, #16
 800260e:	480a      	ldr	r0, [pc, #40]	; (8002638 <masterProcessLoRaRx+0xf4>)
 8002610:	f001 fcd7 	bl	8003fc2 <HAL_GPIO_WritePin>
	    clearIrqFlagsReg(loRa); // Retrieve data from the receive FIFO
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f7fe fb56 	bl	8000cc6 <clearIrqFlagsReg>
	    memset(loRa->rxData, 0, 300);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	332f      	adds	r3, #47	; 0x2f
 800261e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002622:	2100      	movs	r1, #0
 8002624:	4618      	mov	r0, r3
 8002626:	f005 fa8b 	bl	8007b40 <memset>
	    setRxFifoAddr(loRa);
 800262a:	68f8      	ldr	r0, [r7, #12]
 800262c:	f7fe fcda 	bl	8000fe4 <setRxFifoAddr>
}
 8002630:	3718      	adds	r7, #24
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	40010c00 	.word	0x40010c00

0800263c <enableKeepAliveLed>:

uint32_t enableKeepAliveLed(uint32_t keepAliveStartTicks) {
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
	if (HAL_GetTick() - keepAliveStartTicks > 1000) {
 8002644:	f000 ff06 	bl	8003454 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002652:	d908      	bls.n	8002666 <enableKeepAliveLed+0x2a>
		keepAliveStartTicks = HAL_GetTick();
 8002654:	f000 fefe 	bl	8003454 <HAL_GetTick>
 8002658:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(KEEP_ALIVE_GPIO_Port, KEEP_ALIVE_Pin, GPIO_PIN_SET);
 800265a:	2201      	movs	r2, #1
 800265c:	2120      	movs	r1, #32
 800265e:	480a      	ldr	r0, [pc, #40]	; (8002688 <enableKeepAliveLed+0x4c>)
 8002660:	f001 fcaf 	bl	8003fc2 <HAL_GPIO_WritePin>
 8002664:	e00b      	b.n	800267e <enableKeepAliveLed+0x42>
	} else if (HAL_GetTick() - keepAliveStartTicks > 50)
 8002666:	f000 fef5 	bl	8003454 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b32      	cmp	r3, #50	; 0x32
 8002672:	d904      	bls.n	800267e <enableKeepAliveLed+0x42>
		HAL_GPIO_WritePin(KEEP_ALIVE_GPIO_Port, KEEP_ALIVE_Pin, GPIO_PIN_RESET);
 8002674:	2200      	movs	r2, #0
 8002676:	2120      	movs	r1, #32
 8002678:	4803      	ldr	r0, [pc, #12]	; (8002688 <enableKeepAliveLed+0x4c>)
 800267a:	f001 fca2 	bl	8003fc2 <HAL_GPIO_WritePin>

	return keepAliveStartTicks;
 800267e:	687b      	ldr	r3, [r7, #4]
}
 8002680:	4618      	mov	r0, r3
 8002682:	3708      	adds	r7, #8
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40010c00 	.word	0x40010c00

0800268c <configureADC>:

void configureADC() {
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
	// Enable ADC clock
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8002690:	4b10      	ldr	r3, [pc, #64]	; (80026d4 <configureADC+0x48>)
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	4a0f      	ldr	r2, [pc, #60]	; (80026d4 <configureADC+0x48>)
 8002696:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800269a:	6193      	str	r3, [r2, #24]

	// Enable GPIOA clock
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 800269c:	4b0d      	ldr	r3, [pc, #52]	; (80026d4 <configureADC+0x48>)
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	4a0c      	ldr	r2, [pc, #48]	; (80026d4 <configureADC+0x48>)
 80026a2:	f043 0304 	orr.w	r3, r3, #4
 80026a6:	6193      	str	r3, [r2, #24]

	// Enable SWSTART
	ADC1->CR2 |= ADC_CR2_EXTTRIG | ADC_CR2_EXTSEL; // Set external trigger and trigger source
 80026a8:	4b0b      	ldr	r3, [pc, #44]	; (80026d8 <configureADC+0x4c>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	4a0a      	ldr	r2, [pc, #40]	; (80026d8 <configureADC+0x4c>)
 80026ae:	f443 13f0 	orr.w	r3, r3, #1966080	; 0x1e0000
 80026b2:	6093      	str	r3, [r2, #8]

	// Enable ADC temperature sensor and Vrefint channels
	ADC1->CR2 |= ADC_CR2_TSVREFE;
 80026b4:	4b08      	ldr	r3, [pc, #32]	; (80026d8 <configureADC+0x4c>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	4a07      	ldr	r2, [pc, #28]	; (80026d8 <configureADC+0x4c>)
 80026ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026be:	6093      	str	r3, [r2, #8]
	// Enable ADC1
	ADC1->CR2 |= ADC_CR2_ADON;
 80026c0:	4b05      	ldr	r3, [pc, #20]	; (80026d8 <configureADC+0x4c>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	4a04      	ldr	r2, [pc, #16]	; (80026d8 <configureADC+0x4c>)
 80026c6:	f043 0301 	orr.w	r3, r3, #1
 80026ca:	6093      	str	r3, [r2, #8]
	// Enable ADC interrupt
//	NVIC_EnableIRQ(ADC1_IRQn);
}
 80026cc:	bf00      	nop
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr
 80026d4:	40021000 	.word	0x40021000
 80026d8:	40012400 	.word	0x40012400

080026dc <calibrateADC>:

void calibrateADC() {
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
	// Start ADC calibration
	ADC1->CR2 |= ADC_CR2_CAL;
 80026e0:	4b08      	ldr	r3, [pc, #32]	; (8002704 <calibrateADC+0x28>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	4a07      	ldr	r2, [pc, #28]	; (8002704 <calibrateADC+0x28>)
 80026e6:	f043 0304 	orr.w	r3, r3, #4
 80026ea:	6093      	str	r3, [r2, #8]

	// Wait for calibration to complete
	while (ADC1->CR2 & ADC_CR2_CAL) {
 80026ec:	bf00      	nop
 80026ee:	4b05      	ldr	r3, [pc, #20]	; (8002704 <calibrateADC+0x28>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 0304 	and.w	r3, r3, #4
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1f9      	bne.n	80026ee <calibrateADC+0x12>
	}
}
 80026fa:	bf00      	nop
 80026fc:	bf00      	nop
 80026fe:	46bd      	mov	sp, r7
 8002700:	bc80      	pop	{r7}
 8002702:	4770      	bx	lr
 8002704:	40012400 	.word	0x40012400

08002708 <configureGPIO>:

void configureGPIO() {
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 800270c:	4b0a      	ldr	r3, [pc, #40]	; (8002738 <configureGPIO+0x30>)
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	4a09      	ldr	r2, [pc, #36]	; (8002738 <configureGPIO+0x30>)
 8002712:	f043 0304 	orr.w	r3, r3, #4
 8002716:	6193      	str	r3, [r2, #24]

	// Configure PA0 and PA11 as analog input mode
	GPIOA->CRL &= ~(GPIO_CRL_CNF0 | GPIO_CRL_MODE0);
 8002718:	4b08      	ldr	r3, [pc, #32]	; (800273c <configureGPIO+0x34>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a07      	ldr	r2, [pc, #28]	; (800273c <configureGPIO+0x34>)
 800271e:	f023 030f 	bic.w	r3, r3, #15
 8002722:	6013      	str	r3, [r2, #0]
	GPIOA->CRH &= ~(GPIO_CRH_CNF11 | GPIO_CRH_MODE11);
 8002724:	4b05      	ldr	r3, [pc, #20]	; (800273c <configureGPIO+0x34>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	4a04      	ldr	r2, [pc, #16]	; (800273c <configureGPIO+0x34>)
 800272a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800272e:	6053      	str	r3, [r2, #4]
}
 8002730:	bf00      	nop
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr
 8002738:	40021000 	.word	0x40021000
 800273c:	40010800 	.word	0x40010800

08002740 <startADCConversion>:

void startADCConversion(uint8_t channel) {
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	71fb      	strb	r3, [r7, #7]
	// Clear previous channel selection
	ADC1->SQR3 &= ~ADC_SQR3_SQ1_Msk;
 800274a:	4b0e      	ldr	r3, [pc, #56]	; (8002784 <startADCConversion+0x44>)
 800274c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800274e:	4a0d      	ldr	r2, [pc, #52]	; (8002784 <startADCConversion+0x44>)
 8002750:	f023 031f 	bic.w	r3, r3, #31
 8002754:	6353      	str	r3, [r2, #52]	; 0x34

	// Set new channel selection
	ADC1->SQR3 |= (channel << ADC_SQR3_SQ1_Pos);
 8002756:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <startADCConversion+0x44>)
 8002758:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800275a:	79fb      	ldrb	r3, [r7, #7]
 800275c:	4909      	ldr	r1, [pc, #36]	; (8002784 <startADCConversion+0x44>)
 800275e:	4313      	orrs	r3, r2
 8002760:	634b      	str	r3, [r1, #52]	; 0x34

	// Enable ADC1
	ADC1->CR2 |= ADC_CR2_ADON;
 8002762:	4b08      	ldr	r3, [pc, #32]	; (8002784 <startADCConversion+0x44>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	4a07      	ldr	r2, [pc, #28]	; (8002784 <startADCConversion+0x44>)
 8002768:	f043 0301 	orr.w	r3, r3, #1
 800276c:	6093      	str	r3, [r2, #8]

	// Start ADC conversion
	ADC1->CR2 |= ADC_CR2_SWSTART;
 800276e:	4b05      	ldr	r3, [pc, #20]	; (8002784 <startADCConversion+0x44>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	4a04      	ldr	r2, [pc, #16]	; (8002784 <startADCConversion+0x44>)
 8002774:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002778:	6093      	str	r3, [r2, #8]
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	bc80      	pop	{r7}
 8002782:	4770      	bx	lr
 8002784:	40012400 	.word	0x40012400

08002788 <readADCChannel>:

uint16_t readADCChannel(uint8_t channel) {
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	4603      	mov	r3, r0
 8002790:	71fb      	strb	r3, [r7, #7]
	// Start ADC conversion for the specified channel
	startADCConversion(channel);
 8002792:	79fb      	ldrb	r3, [r7, #7]
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff ffd3 	bl	8002740 <startADCConversion>

	// Wait for conversion to complete
	while ((ADC1->SR & ADC_SR_EOC) == 0) {
 800279a:	bf00      	nop
 800279c:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <readADCChannel+0x30>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0f9      	beq.n	800279c <readADCChannel+0x14>
	}

	// Read the ADC value
	uint16_t adcValue = ADC1->DR;
 80027a8:	4b03      	ldr	r3, [pc, #12]	; (80027b8 <readADCChannel+0x30>)
 80027aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ac:	81fb      	strh	r3, [r7, #14]

	return adcValue;
 80027ae:	89fb      	ldrh	r3, [r7, #14]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40012400 	.word	0x40012400

080027bc <updateMasterStatus>:

void updateMasterStatus(RDSS_t *rdss, volatile uint16_t *adcValues,
		uint32_t timeout) {
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
	if (HAL_GetTick() - rdss->lastUpdateTicks > timeout) {
 80027c8:	f000 fe44 	bl	8003454 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	f080 8093 	bcs.w	8002902 <updateMasterStatus+0x146>
		uint8_t index = 0;
 80027dc:	2300      	movs	r3, #0
 80027de:	75fb      	strb	r3, [r7, #23]
		const uint8_t querySize = 5;
 80027e0:	2305      	movs	r3, #5
 80027e2:	75bb      	strb	r3, [r7, #22]
		memset(rdss->queryBuffer, 0, 14);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	3313      	adds	r3, #19
 80027e8:	220e      	movs	r2, #14
 80027ea:	2100      	movs	r1, #0
 80027ec:	4618      	mov	r0, r3
 80027ee:	f005 f9a7 	bl	8007b40 <memset>
		rdss->queryBuffer[index++] = RDSS_START_MARK;
 80027f2:	7dfb      	ldrb	r3, [r7, #23]
 80027f4:	1c5a      	adds	r2, r3, #1
 80027f6:	75fa      	strb	r2, [r7, #23]
 80027f8:	461a      	mov	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	4413      	add	r3, r2
 80027fe:	227e      	movs	r2, #126	; 0x7e
 8002800:	74da      	strb	r2, [r3, #19]
		rdss->queryBuffer[index++] = SERVER;
 8002802:	7dfb      	ldrb	r3, [r7, #23]
 8002804:	1c5a      	adds	r2, r3, #1
 8002806:	75fa      	strb	r2, [r7, #23]
 8002808:	461a      	mov	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	4413      	add	r3, r2
 800280e:	2200      	movs	r2, #0
 8002810:	74da      	strb	r2, [r3, #19]
		rdss->queryBuffer[index++] = rdss->id;
 8002812:	7dfb      	ldrb	r3, [r7, #23]
 8002814:	1c5a      	adds	r2, r3, #1
 8002816:	75fa      	strb	r2, [r7, #23]
 8002818:	4619      	mov	r1, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	7c1a      	ldrb	r2, [r3, #16]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	440b      	add	r3, r1
 8002822:	74da      	strb	r2, [r3, #19]
		rdss->queryBuffer[index++] = QUERY_MASTER_STATUS;
 8002824:	7dfb      	ldrb	r3, [r7, #23]
 8002826:	1c5a      	adds	r2, r3, #1
 8002828:	75fa      	strb	r2, [r7, #23]
 800282a:	461a      	mov	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4413      	add	r3, r2
 8002830:	2213      	movs	r2, #19
 8002832:	74da      	strb	r2, [r3, #19]
		rdss->queryBuffer[index++] = 0x00;
 8002834:	7dfb      	ldrb	r3, [r7, #23]
 8002836:	1c5a      	adds	r2, r3, #1
 8002838:	75fa      	strb	r2, [r7, #23]
 800283a:	461a      	mov	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4413      	add	r3, r2
 8002840:	2200      	movs	r2, #0
 8002842:	74da      	strb	r2, [r3, #19]
		rdss->queryBuffer[index++] = querySize;
 8002844:	7dfb      	ldrb	r3, [r7, #23]
 8002846:	1c5a      	adds	r2, r3, #1
 8002848:	75fa      	strb	r2, [r7, #23]
 800284a:	461a      	mov	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4413      	add	r3, r2
 8002850:	7dba      	ldrb	r2, [r7, #22]
 8002852:	74da      	strb	r2, [r3, #19]
		rdss->queryBuffer[index++] = adcValues[0];
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	881b      	ldrh	r3, [r3, #0]
 8002858:	b29a      	uxth	r2, r3
 800285a:	7dfb      	ldrb	r3, [r7, #23]
 800285c:	1c59      	adds	r1, r3, #1
 800285e:	75f9      	strb	r1, [r7, #23]
 8002860:	4619      	mov	r1, r3
 8002862:	b2d2      	uxtb	r2, r2
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	440b      	add	r3, r1
 8002868:	74da      	strb	r2, [r3, #19]
		rdss->queryBuffer[index++] = adcValues[0] >> 8;
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	881b      	ldrh	r3, [r3, #0]
 800286e:	b29b      	uxth	r3, r3
 8002870:	0a1b      	lsrs	r3, r3, #8
 8002872:	b29a      	uxth	r2, r3
 8002874:	7dfb      	ldrb	r3, [r7, #23]
 8002876:	1c59      	adds	r1, r3, #1
 8002878:	75f9      	strb	r1, [r7, #23]
 800287a:	4619      	mov	r1, r3
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	440b      	add	r3, r1
 8002882:	74da      	strb	r2, [r3, #19]
		rdss->queryBuffer[index++] = adcValues[1];
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	3302      	adds	r3, #2
 8002888:	881b      	ldrh	r3, [r3, #0]
 800288a:	b29a      	uxth	r2, r3
 800288c:	7dfb      	ldrb	r3, [r7, #23]
 800288e:	1c59      	adds	r1, r3, #1
 8002890:	75f9      	strb	r1, [r7, #23]
 8002892:	4619      	mov	r1, r3
 8002894:	b2d2      	uxtb	r2, r2
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	440b      	add	r3, r1
 800289a:	74da      	strb	r2, [r3, #19]
		rdss->queryBuffer[index++] = adcValues[1] >> 8;
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	3302      	adds	r3, #2
 80028a0:	881b      	ldrh	r3, [r3, #0]
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	0a1b      	lsrs	r3, r3, #8
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	7dfb      	ldrb	r3, [r7, #23]
 80028aa:	1c59      	adds	r1, r3, #1
 80028ac:	75f9      	strb	r1, [r7, #23]
 80028ae:	4619      	mov	r1, r3
 80028b0:	b2d2      	uxtb	r2, r2
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	440b      	add	r3, r1
 80028b6:	74da      	strb	r2, [r3, #19]
		rdss->queryBuffer[index++] = adcValues[2];
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	3304      	adds	r3, #4
 80028bc:	881b      	ldrh	r3, [r3, #0]
 80028be:	b29a      	uxth	r2, r3
 80028c0:	7dfb      	ldrb	r3, [r7, #23]
 80028c2:	1c59      	adds	r1, r3, #1
 80028c4:	75f9      	strb	r1, [r7, #23]
 80028c6:	4619      	mov	r1, r3
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	440b      	add	r3, r1
 80028ce:	74da      	strb	r2, [r3, #19]
		index += setCrc(rdss->queryBuffer, index);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	3313      	adds	r3, #19
 80028d4:	7dfa      	ldrb	r2, [r7, #23]
 80028d6:	4611      	mov	r1, r2
 80028d8:	4618      	mov	r0, r3
 80028da:	f000 f9bc 	bl	8002c56 <setCrc>
 80028de:	4603      	mov	r3, r0
 80028e0:	461a      	mov	r2, r3
 80028e2:	7dfb      	ldrb	r3, [r7, #23]
 80028e4:	4413      	add	r3, r2
 80028e6:	75fb      	strb	r3, [r7, #23]
		rdss->queryBuffer[index++] = RDSS_END_MARK;
 80028e8:	7dfb      	ldrb	r3, [r7, #23]
 80028ea:	1c5a      	adds	r2, r3, #1
 80028ec:	75fa      	strb	r2, [r7, #23]
 80028ee:	461a      	mov	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	4413      	add	r3, r2
 80028f4:	227f      	movs	r2, #127	; 0x7f
 80028f6:	74da      	strb	r2, [r3, #19]
		rdss->lastUpdateTicks = HAL_GetTick();
 80028f8:	f000 fdac 	bl	8003454 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8002902:	bf00      	nop
 8002904:	3718      	adds	r7, #24
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800290a:	b480      	push	{r7}
 800290c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800290e:	b672      	cpsid	i
}
 8002910:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002912:	e7fe      	b.n	8002912 <Error_Handler+0x8>

08002914 <vladInit>:
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	4603      	mov	r3, r0
 800291c:	71fb      	strb	r3, [r7, #7]
 800291e:	2038      	movs	r0, #56	; 0x38
 8002920:	f005 f852 	bl	80079c8 <malloc>
 8002924:	4603      	mov	r3, r0
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	801a      	strh	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	805a      	strh	r2, [r3, #2]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	809a      	strh	r2, [r3, #4]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	80da      	strh	r2, [r3, #6]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	811a      	strh	r2, [r3, #8]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	815a      	strh	r2, [r3, #10]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	819a      	strh	r2, [r3, #12]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	81da      	strh	r2, [r3, #14]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	821a      	strh	r2, [r3, #16]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f04f 0200 	mov.w	r2, #0
 8002964:	619a      	str	r2, [r3, #24]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f04f 0200 	mov.w	r2, #0
 800296c:	61da      	str	r2, [r3, #28]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	841a      	strh	r2, [r3, #32]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	849a      	strh	r2, [r3, #36]	; 0x24
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f04f 0200 	mov.w	r2, #0
 8002990:	619a      	str	r2, [r3, #24]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f04f 0200 	mov.w	r2, #0
 8002998:	61da      	str	r2, [r3, #28]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	841a      	strh	r2, [r3, #32]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	749a      	strb	r2, [r3, #18]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	74da      	strb	r2, [r3, #19]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	751a      	strb	r2, [r3, #20]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	755a      	strb	r2, [r3, #21]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	79fa      	ldrb	r2, [r7, #7]
 80029dc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80029e8:	f000 fd34 	bl	8003454 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	631a      	str	r2, [r3, #48]	; 0x30
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	4618      	mov	r0, r3
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <serverInit>:
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4603      	mov	r3, r0
 8002a04:	71fb      	strb	r3, [r7, #7]
 8002a06:	201c      	movs	r0, #28
 8002a08:	f004 ffde 	bl	80079c8 <malloc>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d012      	beq.n	8002a3c <serverInit+0x40>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	801a      	strh	r2, [r3, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f04f 0200 	mov.w	r2, #0
 8002a22:	609a      	str	r2, [r3, #8]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	821a      	strh	r2, [r3, #16]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	751a      	strb	r2, [r3, #20]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	79fa      	ldrb	r2, [r7, #7]
 8002a34:	755a      	strb	r2, [r3, #21]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	619a      	str	r2, [r3, #24]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <rdssInit>:
 *  Created on: Sep 28, 2022
 *      Author: sigmadev
 */
#include <rs485.h>

RDSS_t* rdssInit(uint8_t id) {
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b084      	sub	sp, #16
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	71fb      	strb	r3, [r7, #7]
	RDSS_t *r;
	r = malloc(sizeof(RDSS_t));
 8002a50:	2038      	movs	r0, #56	; 0x38
 8002a52:	f004 ffb9 	bl	80079c8 <malloc>
 8002a56:	4603      	mov	r3, r0
 8002a58:	60fb      	str	r3, [r7, #12]
	r->status = WAITING;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2208      	movs	r2, #8
 8002a5e:	745a      	strb	r2, [r3, #17]
	r->cmd = NONE;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	701a      	strb	r2, [r3, #0]
	r->id = id;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	79fa      	ldrb	r2, [r7, #7]
 8002a6a:	741a      	strb	r2, [r3, #16]

	/* PB9 DE485 as output  */
//	SET_BIT(GPIOB->MODER, GPIO_MODER_MODE9_0);
//	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODE9_1);
	return r;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <rdssReinit>:

void rdssReinit(RDSS_t *rdss) {
 8002a76:	b480      	push	{r7}
 8002a78:	b083      	sub	sp, #12
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
    rdss->cmd = NONE;           // Reset the command field
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	701a      	strb	r2, [r3, #0]
    rdss->crcReceived = 0;      // Reset the received CRC value
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	819a      	strh	r2, [r3, #12]
    rdss->crcCalculated = 0;    // Reset the calculated CRC value
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	815a      	strh	r2, [r3, #10]
//    rdss->idQuery = 0;          // Reset the query ID
    rdss->status = WAITING;     // Set the status to waiting
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2208      	movs	r2, #8
 8002a94:	745a      	strb	r2, [r3, #17]
    rdss->idReceived = 0;       // Reset the received ID
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	73da      	strb	r2, [r3, #15]
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bc80      	pop	{r7}
 8002aa4:	4770      	bx	lr

08002aa6 <checkModuleValidity>:
	if (crc_cal == crc_save)
		return DATA_OK;
	return CRC_ERROR;
}

RDSS_status_t checkModuleValidity(uint8_t *frame, uint8_t lenght) {
 8002aa6:	b480      	push	{r7}
 8002aa8:	b085      	sub	sp, #20
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
 8002aae:	460b      	mov	r3, r1
 8002ab0:	70fb      	strb	r3, [r7, #3]
	if (frame[1] >= SERVER || frame[1] <= SNIFFER) {
		for (int i = 3; i < lenght; i++)
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	e00a      	b.n	8002ace <checkModuleValidity+0x28>
			if (frame[i] == RDSS_END_MARK)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	4413      	add	r3, r2
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2b7f      	cmp	r3, #127	; 0x7f
 8002ac2:	d101      	bne.n	8002ac8 <checkModuleValidity+0x22>
				return VALID_MODULE;
 8002ac4:	2309      	movs	r3, #9
 8002ac6:	e007      	b.n	8002ad8 <checkModuleValidity+0x32>
		for (int i = 3; i < lenght; i++)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	3301      	adds	r3, #1
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	78fb      	ldrb	r3, [r7, #3]
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	dbf0      	blt.n	8002ab8 <checkModuleValidity+0x12>
	} else
		return WRONG_MODULE_FUNCTION;
	return WRONG_MODULE_FUNCTION;
 8002ad6:	2304      	movs	r3, #4
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3714      	adds	r7, #20
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bc80      	pop	{r7}
 8002ae0:	4770      	bx	lr

08002ae2 <checkFrameValidity>:

RDSS_status_t checkFrameValidity(uint8_t *frame, uint8_t lenght) {
 8002ae2:	b480      	push	{r7}
 8002ae4:	b083      	sub	sp, #12
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
 8002aea:	460b      	mov	r3, r1
 8002aec:	70fb      	strb	r3, [r7, #3]

	if (lenght > (MINIMUN_FRAME_LEN)) {
 8002aee:	78fb      	ldrb	r3, [r7, #3]
 8002af0:	2b06      	cmp	r3, #6
 8002af2:	d910      	bls.n	8002b16 <checkFrameValidity+0x34>
		if (frame[0] == RDSS_START_MARK) {
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	2b7e      	cmp	r3, #126	; 0x7e
 8002afa:	d10a      	bne.n	8002b12 <checkFrameValidity+0x30>
			if (frame[lenght - 1] == RDSS_END_MARK)
 8002afc:	78fb      	ldrb	r3, [r7, #3]
 8002afe:	3b01      	subs	r3, #1
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	4413      	add	r3, r2
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	2b7f      	cmp	r3, #127	; 0x7f
 8002b08:	d101      	bne.n	8002b0e <checkFrameValidity+0x2c>
				return VALID_FRAME;
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	e004      	b.n	8002b18 <checkFrameValidity+0x36>
			else
				return START_READING;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e002      	b.n	8002b18 <checkFrameValidity+0x36>
		} else
			return NOT_VALID_FRAME;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e000      	b.n	8002b18 <checkFrameValidity+0x36>
	} else

		return WAITING;
 8002b16:	2308      	movs	r3, #8
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bc80      	pop	{r7}
 8002b20:	4770      	bx	lr

08002b22 <checkCRCValidity>:

RDSS_status_t checkCRCValidity(uint8_t *frame, uint8_t len) {
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b084      	sub	sp, #16
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	70fb      	strb	r3, [r7, #3]
    uint16_t calculatedCrc;
    uint16_t savedCrc;
    savedCrc = ((uint16_t) frame[len - CRC_HIGH_BYTE_OFFSET] << 8);
 8002b2e:	78fb      	ldrb	r3, [r7, #3]
 8002b30:	3b02      	subs	r3, #2
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	4413      	add	r3, r2
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	021b      	lsls	r3, r3, #8
 8002b3c:	81fb      	strh	r3, [r7, #14]
    savedCrc |= (uint16_t) frame[len - CRC_LOW_BYTE_OFFSET];
 8002b3e:	78fb      	ldrb	r3, [r7, #3]
 8002b40:	3b03      	subs	r3, #3
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	4413      	add	r3, r2
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	89fb      	ldrh	r3, [r7, #14]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	81fb      	strh	r3, [r7, #14]
    calculatedCrc = crc_get(&frame[1], len - FRAME_HEADER_SIZE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	1c5a      	adds	r2, r3, #1
 8002b54:	78fb      	ldrb	r3, [r7, #3]
 8002b56:	3b04      	subs	r3, #4
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	4610      	mov	r0, r2
 8002b5e:	f000 f80d 	bl	8002b7c <crc_get>
 8002b62:	4603      	mov	r3, r0
 8002b64:	81bb      	strh	r3, [r7, #12]
    return ((calculatedCrc == savedCrc) ? DATA_OK : CRC_ERROR);
 8002b66:	89ba      	ldrh	r2, [r7, #12]
 8002b68:	89fb      	ldrh	r3, [r7, #14]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d101      	bne.n	8002b72 <checkCRCValidity+0x50>
 8002b6e:	2300      	movs	r3, #0
 8002b70:	e000      	b.n	8002b74 <checkCRCValidity+0x52>
 8002b72:	2306      	movs	r3, #6
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <crc_get>:
uint16_t crc_get(uint8_t *buffer, uint8_t buff_len) {
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	460b      	mov	r3, r1
 8002b86:	70fb      	strb	r3, [r7, #3]
	uint8_t byte_idx;
	uint8_t bit_idx;
	uint16_t generator = 0x1021; // 16-bit divisor
 8002b88:	f241 0321 	movw	r3, #4129	; 0x1021
 8002b8c:	817b      	strh	r3, [r7, #10]
	uint16_t crc = 0;            // 16-bit CRC value
 8002b8e:	2300      	movs	r3, #0
 8002b90:	81bb      	strh	r3, [r7, #12]

	for (byte_idx = 0; byte_idx < buff_len; byte_idx++) {
 8002b92:	2300      	movs	r3, #0
 8002b94:	73fb      	strb	r3, [r7, #15]
 8002b96:	e025      	b.n	8002be4 <crc_get+0x68>
		crc ^= ((uint16_t) (buffer[byte_idx] << 8)); // Move byte into MSB of 16-bit CRC
 8002b98:	7bfb      	ldrb	r3, [r7, #15]
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	021b      	lsls	r3, r3, #8
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	89bb      	ldrh	r3, [r7, #12]
 8002ba8:	4053      	eors	r3, r2
 8002baa:	81bb      	strh	r3, [r7, #12]

		for (bit_idx = 0; bit_idx < 8; bit_idx++) {
 8002bac:	2300      	movs	r3, #0
 8002bae:	73bb      	strb	r3, [r7, #14]
 8002bb0:	e012      	b.n	8002bd8 <crc_get+0x5c>
			if ((crc & 0x8000) != 0) { // Test for MSB = bit 15
 8002bb2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	da08      	bge.n	8002bcc <crc_get+0x50>
				crc = ((uint16_t) ((crc << 1) ^ generator));
 8002bba:	89bb      	ldrh	r3, [r7, #12]
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	b21a      	sxth	r2, r3
 8002bc0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002bc4:	4053      	eors	r3, r2
 8002bc6:	b21b      	sxth	r3, r3
 8002bc8:	81bb      	strh	r3, [r7, #12]
 8002bca:	e002      	b.n	8002bd2 <crc_get+0x56>
			} else {
				crc <<= 1;
 8002bcc:	89bb      	ldrh	r3, [r7, #12]
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	81bb      	strh	r3, [r7, #12]
		for (bit_idx = 0; bit_idx < 8; bit_idx++) {
 8002bd2:	7bbb      	ldrb	r3, [r7, #14]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	73bb      	strb	r3, [r7, #14]
 8002bd8:	7bbb      	ldrb	r3, [r7, #14]
 8002bda:	2b07      	cmp	r3, #7
 8002bdc:	d9e9      	bls.n	8002bb2 <crc_get+0x36>
	for (byte_idx = 0; byte_idx < buff_len; byte_idx++) {
 8002bde:	7bfb      	ldrb	r3, [r7, #15]
 8002be0:	3301      	adds	r3, #1
 8002be2:	73fb      	strb	r3, [r7, #15]
 8002be4:	7bfa      	ldrb	r2, [r7, #15]
 8002be6:	78fb      	ldrb	r3, [r7, #3]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d3d5      	bcc.n	8002b98 <crc_get+0x1c>
			}
		}
	}

	return crc;
 8002bec:	89bb      	ldrh	r3, [r7, #12]
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3714      	adds	r7, #20
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bc80      	pop	{r7}
 8002bf6:	4770      	bx	lr

08002bf8 <validate>:

RDSS_status_t validate(uint8_t *buffer, uint8_t length) {
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	460b      	mov	r3, r1
 8002c02:	70fb      	strb	r3, [r7, #3]
	RDSS_status_t frameStatus = checkFrameValidity(buffer, length);
 8002c04:	78fb      	ldrb	r3, [r7, #3]
 8002c06:	4619      	mov	r1, r3
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f7ff ff6a 	bl	8002ae2 <checkFrameValidity>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	73fb      	strb	r3, [r7, #15]
	if (frameStatus != VALID_FRAME)
 8002c12:	7bfb      	ldrb	r3, [r7, #15]
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d001      	beq.n	8002c1c <validate+0x24>
		return (frameStatus);
 8002c18:	7bfb      	ldrb	r3, [r7, #15]
 8002c1a:	e018      	b.n	8002c4e <validate+0x56>
	RDSS_status_t moduleStatus = checkModuleValidity(buffer, length);
 8002c1c:	78fb      	ldrb	r3, [r7, #3]
 8002c1e:	4619      	mov	r1, r3
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f7ff ff40 	bl	8002aa6 <checkModuleValidity>
 8002c26:	4603      	mov	r3, r0
 8002c28:	73bb      	strb	r3, [r7, #14]
	if (moduleStatus != VALID_MODULE)
 8002c2a:	7bbb      	ldrb	r3, [r7, #14]
 8002c2c:	2b09      	cmp	r3, #9
 8002c2e:	d001      	beq.n	8002c34 <validate+0x3c>
		return (moduleStatus);
 8002c30:	7bbb      	ldrb	r3, [r7, #14]
 8002c32:	e00c      	b.n	8002c4e <validate+0x56>
	RDSS_status_t crcStatus = checkCRCValidity(buffer, length);
 8002c34:	78fb      	ldrb	r3, [r7, #3]
 8002c36:	4619      	mov	r1, r3
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f7ff ff72 	bl	8002b22 <checkCRCValidity>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	737b      	strb	r3, [r7, #13]
	if (crcStatus != DATA_OK)
 8002c42:	7b7b      	ldrb	r3, [r7, #13]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <validate+0x54>
		return (crcStatus);
 8002c48:	7b7b      	ldrb	r3, [r7, #13]
 8002c4a:	e000      	b.n	8002c4e <validate+0x56>
	return (DATA_OK);
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <setCrc>:
	buff[15] = downlinkInputPower;
	buff[16] = downlinkAgc;
	buff[17] = uplinkOuputPower;
}

uint8_t setCrc(uint8_t *buff, uint8_t size) {
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b084      	sub	sp, #16
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
 8002c5e:	460b      	mov	r3, r1
 8002c60:	70fb      	strb	r3, [r7, #3]
	uint8_t crc_frame[2];
	uint16_t crc;
	crc = crc_get(buff + 1, size - 1);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	1c5a      	adds	r2, r3, #1
 8002c66:	78fb      	ldrb	r3, [r7, #3]
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4610      	mov	r0, r2
 8002c70:	f7ff ff84 	bl	8002b7c <crc_get>
 8002c74:	4603      	mov	r3, r0
 8002c76:	817b      	strh	r3, [r7, #10]
 8002c78:	897b      	ldrh	r3, [r7, #10]
	memcpy(crc_frame, &crc, 2);
 8002c7a:	81bb      	strh	r3, [r7, #12]
	buff[size++] = crc_frame[0];
 8002c7c:	78fb      	ldrb	r3, [r7, #3]
 8002c7e:	1c5a      	adds	r2, r3, #1
 8002c80:	70fa      	strb	r2, [r7, #3]
 8002c82:	461a      	mov	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4413      	add	r3, r2
 8002c88:	7b3a      	ldrb	r2, [r7, #12]
 8002c8a:	701a      	strb	r2, [r3, #0]
	buff[size++] = crc_frame[1];
 8002c8c:	78fb      	ldrb	r3, [r7, #3]
 8002c8e:	1c5a      	adds	r2, r3, #1
 8002c90:	70fa      	strb	r2, [r7, #3]
 8002c92:	461a      	mov	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4413      	add	r3, r2
 8002c98:	7b7a      	ldrb	r2, [r7, #13]
 8002c9a:	701a      	strb	r2, [r3, #0]
	return 2;
 8002c9c:	2302      	movs	r3, #2
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <setRdssStartData>:

uint8_t setRdssStartData(RDSS_t *rdss, uint8_t *buffer, Function_t function) {
 8002ca6:	b480      	push	{r7}
 8002ca8:	b087      	sub	sp, #28
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	60f8      	str	r0, [r7, #12]
 8002cae:	60b9      	str	r1, [r7, #8]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	75fb      	strb	r3, [r7, #23]
	if (rdss->cmd == 0)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <setRdssStartData+0x1e>
		return i;
 8002cc0:	7dfb      	ldrb	r3, [r7, #23]
 8002cc2:	e033      	b.n	8002d2c <setRdssStartData+0x86>
	if (rdss->id == 0 && function != SERVER)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	7c1b      	ldrb	r3, [r3, #16]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d104      	bne.n	8002cd6 <setRdssStartData+0x30>
 8002ccc:	79fb      	ldrb	r3, [r7, #7]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <setRdssStartData+0x30>
		return i;
 8002cd2:	7dfb      	ldrb	r3, [r7, #23]
 8002cd4:	e02a      	b.n	8002d2c <setRdssStartData+0x86>
	buffer[i++] = RDSS_START_MARK;
 8002cd6:	7dfb      	ldrb	r3, [r7, #23]
 8002cd8:	1c5a      	adds	r2, r3, #1
 8002cda:	75fa      	strb	r2, [r7, #23]
 8002cdc:	461a      	mov	r2, r3
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	227e      	movs	r2, #126	; 0x7e
 8002ce4:	701a      	strb	r2, [r3, #0]
	buffer[i++] = function;
 8002ce6:	7dfb      	ldrb	r3, [r7, #23]
 8002ce8:	1c5a      	adds	r2, r3, #1
 8002cea:	75fa      	strb	r2, [r7, #23]
 8002cec:	461a      	mov	r2, r3
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	79fa      	ldrb	r2, [r7, #7]
 8002cf4:	701a      	strb	r2, [r3, #0]
	buffer[i++] = rdss->id;
 8002cf6:	7dfb      	ldrb	r3, [r7, #23]
 8002cf8:	1c5a      	adds	r2, r3, #1
 8002cfa:	75fa      	strb	r2, [r7, #23]
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	4413      	add	r3, r2
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	7c12      	ldrb	r2, [r2, #16]
 8002d06:	701a      	strb	r2, [r3, #0]
	buffer[i++] = rdss->cmd;
 8002d08:	7dfb      	ldrb	r3, [r7, #23]
 8002d0a:	1c5a      	adds	r2, r3, #1
 8002d0c:	75fa      	strb	r2, [r7, #23]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	4413      	add	r3, r2
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	7812      	ldrb	r2, [r2, #0]
 8002d18:	701a      	strb	r2, [r3, #0]
	buffer[i++] = 0x00;
 8002d1a:	7dfb      	ldrb	r3, [r7, #23]
 8002d1c:	1c5a      	adds	r2, r3, #1
 8002d1e:	75fa      	strb	r2, [r7, #23]
 8002d20:	461a      	mov	r2, r3
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	4413      	add	r3, r2
 8002d26:	2200      	movs	r2, #0
 8002d28:	701a      	strb	r2, [r3, #0]
	return i;
 8002d2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	371c      	adds	r7, #28
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bc80      	pop	{r7}
 8002d34:	4770      	bx	lr
	...

08002d38 <freqDecode>:

int freqDecode(uint8_t *buffer) {
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
	union floatConverter freq;
	freq.i = 0;
 8002d40:	2300      	movs	r3, #0
 8002d42:	60fb      	str	r3, [r7, #12]
	freq.i |= (buffer[0]);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	7812      	ldrb	r2, [r2, #0]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	60fb      	str	r3, [r7, #12]
	freq.i |= (buffer[1] << 8);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	3201      	adds	r2, #1
 8002d54:	7812      	ldrb	r2, [r2, #0]
 8002d56:	0212      	lsls	r2, r2, #8
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	60fb      	str	r3, [r7, #12]
	freq.i |= (buffer[2] << 16);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	3202      	adds	r2, #2
 8002d62:	7812      	ldrb	r2, [r2, #0]
 8002d64:	0412      	lsls	r2, r2, #16
 8002d66:	4313      	orrs	r3, r2
 8002d68:	60fb      	str	r3, [r7, #12]
	freq.i |= (buffer[3] << 24);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	3203      	adds	r2, #3
 8002d70:	7812      	ldrb	r2, [r2, #0]
 8002d72:	0612      	lsls	r2, r2, #24
 8002d74:	4313      	orrs	r3, r2
 8002d76:	60fb      	str	r3, [r7, #12]
	freq.f = freq.f * 1000000.0f;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	4907      	ldr	r1, [pc, #28]	; (8002d98 <freqDecode+0x60>)
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7fd faf3 	bl	8000368 <__aeabi_fmul>
 8002d82:	4603      	mov	r3, r0
 8002d84:	60fb      	str	r3, [r7, #12]

	return (int) freq.f;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7fd fc3d 	bl	8000608 <__aeabi_f2iz>
 8002d8e:	4603      	mov	r3, r0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	49742400 	.word	0x49742400

08002d9c <freqEncode>:

void freqEncode(uint8_t *buffer, uint32_t freqIn) {
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
	union floatConverter freqOut;
	freqOut.f = freqIn / 1000000.0f;
 8002da6:	6838      	ldr	r0, [r7, #0]
 8002da8:	f7fd fa86 	bl	80002b8 <__aeabi_ui2f>
 8002dac:	4603      	mov	r3, r0
 8002dae:	4906      	ldr	r1, [pc, #24]	; (8002dc8 <freqEncode+0x2c>)
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7fd fb8d 	bl	80004d0 <__aeabi_fdiv>
 8002db6:	4603      	mov	r3, r0
 8002db8:	60fb      	str	r3, [r7, #12]
 8002dba:	68fa      	ldr	r2, [r7, #12]
	memcpy(buffer, &freqOut.i, sizeof(freqOut.i));
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	601a      	str	r2, [r3, #0]
}
 8002dc0:	bf00      	nop
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	49742400 	.word	0x49742400

08002dcc <updateRdss>:

void updateRdss(RDSS_t *rdss, uint8_t *buffer, uint8_t bufferSize) {
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	71fb      	strb	r3, [r7, #7]
	if (buffer == NULL)
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d012      	beq.n	8002e06 <updateRdss+0x3a>
		return;
	if (bufferSize <= 0)
 8002de0:	79fb      	ldrb	r3, [r7, #7]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d011      	beq.n	8002e0a <updateRdss+0x3e>
		return;
	rdss->cmd = buffer[CMD_INDEX]; // Update the command from the received data
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	3303      	adds	r3, #3
 8002dea:	781a      	ldrb	r2, [r3, #0]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	701a      	strb	r2, [r3, #0]
	rdss->idReceived = buffer[MODULE_ID_INDEX]; // Update the received ID
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	789a      	ldrb	r2, [r3, #2]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	73da      	strb	r2, [r3, #15]
	rdss->buffSize = bufferSize;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	79fa      	ldrb	r2, [r7, #7]
 8002dfc:	721a      	strb	r2, [r3, #8]
	rdss->buff = buffer;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	605a      	str	r2, [r3, #4]
 8002e04:	e002      	b.n	8002e0c <updateRdss+0x40>
		return;
 8002e06:	bf00      	nop
 8002e08:	e000      	b.n	8002e0c <updateRdss+0x40>
		return;
 8002e0a:	bf00      	nop
}
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bc80      	pop	{r7}
 8002e12:	4770      	bx	lr

08002e14 <HAL_MspInit>:
 8002e14:	b480      	push	{r7}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	4b15      	ldr	r3, [pc, #84]	; (8002e70 <HAL_MspInit+0x5c>)
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	4a14      	ldr	r2, [pc, #80]	; (8002e70 <HAL_MspInit+0x5c>)
 8002e20:	f043 0301 	orr.w	r3, r3, #1
 8002e24:	6193      	str	r3, [r2, #24]
 8002e26:	4b12      	ldr	r3, [pc, #72]	; (8002e70 <HAL_MspInit+0x5c>)
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	60bb      	str	r3, [r7, #8]
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	4b0f      	ldr	r3, [pc, #60]	; (8002e70 <HAL_MspInit+0x5c>)
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	4a0e      	ldr	r2, [pc, #56]	; (8002e70 <HAL_MspInit+0x5c>)
 8002e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e3c:	61d3      	str	r3, [r2, #28]
 8002e3e:	4b0c      	ldr	r3, [pc, #48]	; (8002e70 <HAL_MspInit+0x5c>)
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e46:	607b      	str	r3, [r7, #4]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4b0a      	ldr	r3, [pc, #40]	; (8002e74 <HAL_MspInit+0x60>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	60fb      	str	r3, [r7, #12]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	4a04      	ldr	r2, [pc, #16]	; (8002e74 <HAL_MspInit+0x60>)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6053      	str	r3, [r2, #4]
 8002e66:	bf00      	nop
 8002e68:	3714      	adds	r7, #20
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr
 8002e70:	40021000 	.word	0x40021000
 8002e74:	40010000 	.word	0x40010000

08002e78 <HAL_ADC_MspInit>:
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b088      	sub	sp, #32
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	f107 0310 	add.w	r3, r7, #16
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	605a      	str	r2, [r3, #4]
 8002e8a:	609a      	str	r2, [r3, #8]
 8002e8c:	60da      	str	r2, [r3, #12]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a14      	ldr	r2, [pc, #80]	; (8002ee4 <HAL_ADC_MspInit+0x6c>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d121      	bne.n	8002edc <HAL_ADC_MspInit+0x64>
 8002e98:	4b13      	ldr	r3, [pc, #76]	; (8002ee8 <HAL_ADC_MspInit+0x70>)
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	4a12      	ldr	r2, [pc, #72]	; (8002ee8 <HAL_ADC_MspInit+0x70>)
 8002e9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ea2:	6193      	str	r3, [r2, #24]
 8002ea4:	4b10      	ldr	r3, [pc, #64]	; (8002ee8 <HAL_ADC_MspInit+0x70>)
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	4b0d      	ldr	r3, [pc, #52]	; (8002ee8 <HAL_ADC_MspInit+0x70>)
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	4a0c      	ldr	r2, [pc, #48]	; (8002ee8 <HAL_ADC_MspInit+0x70>)
 8002eb6:	f043 0304 	orr.w	r3, r3, #4
 8002eba:	6193      	str	r3, [r2, #24]
 8002ebc:	4b0a      	ldr	r3, [pc, #40]	; (8002ee8 <HAL_ADC_MspInit+0x70>)
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	f003 0304 	and.w	r3, r3, #4
 8002ec4:	60bb      	str	r3, [r7, #8]
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	2303      	movs	r3, #3
 8002eca:	613b      	str	r3, [r7, #16]
 8002ecc:	2303      	movs	r3, #3
 8002ece:	617b      	str	r3, [r7, #20]
 8002ed0:	f107 0310 	add.w	r3, r7, #16
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4805      	ldr	r0, [pc, #20]	; (8002eec <HAL_ADC_MspInit+0x74>)
 8002ed8:	f000 fed8 	bl	8003c8c <HAL_GPIO_Init>
 8002edc:	bf00      	nop
 8002ede:	3720      	adds	r7, #32
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	40012400 	.word	0x40012400
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	40010800 	.word	0x40010800

08002ef0 <HAL_CRC_MspInit>:
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a09      	ldr	r2, [pc, #36]	; (8002f24 <HAL_CRC_MspInit+0x34>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d10b      	bne.n	8002f1a <HAL_CRC_MspInit+0x2a>
 8002f02:	4b09      	ldr	r3, [pc, #36]	; (8002f28 <HAL_CRC_MspInit+0x38>)
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	4a08      	ldr	r2, [pc, #32]	; (8002f28 <HAL_CRC_MspInit+0x38>)
 8002f08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f0c:	6153      	str	r3, [r2, #20]
 8002f0e:	4b06      	ldr	r3, [pc, #24]	; (8002f28 <HAL_CRC_MspInit+0x38>)
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	bf00      	nop
 8002f1c:	3714      	adds	r7, #20
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bc80      	pop	{r7}
 8002f22:	4770      	bx	lr
 8002f24:	40023000 	.word	0x40023000
 8002f28:	40021000 	.word	0x40021000

08002f2c <HAL_I2C_MspInit>:
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b088      	sub	sp, #32
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	f107 0310 	add.w	r3, r7, #16
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	605a      	str	r2, [r3, #4]
 8002f3e:	609a      	str	r2, [r3, #8]
 8002f40:	60da      	str	r2, [r3, #12]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a15      	ldr	r2, [pc, #84]	; (8002f9c <HAL_I2C_MspInit+0x70>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d123      	bne.n	8002f94 <HAL_I2C_MspInit+0x68>
 8002f4c:	4b14      	ldr	r3, [pc, #80]	; (8002fa0 <HAL_I2C_MspInit+0x74>)
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	4a13      	ldr	r2, [pc, #76]	; (8002fa0 <HAL_I2C_MspInit+0x74>)
 8002f52:	f043 0308 	orr.w	r3, r3, #8
 8002f56:	6193      	str	r3, [r2, #24]
 8002f58:	4b11      	ldr	r3, [pc, #68]	; (8002fa0 <HAL_I2C_MspInit+0x74>)
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	f003 0308 	and.w	r3, r3, #8
 8002f60:	60fb      	str	r3, [r7, #12]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	23c0      	movs	r3, #192	; 0xc0
 8002f66:	613b      	str	r3, [r7, #16]
 8002f68:	2312      	movs	r3, #18
 8002f6a:	617b      	str	r3, [r7, #20]
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	61fb      	str	r3, [r7, #28]
 8002f70:	f107 0310 	add.w	r3, r7, #16
 8002f74:	4619      	mov	r1, r3
 8002f76:	480b      	ldr	r0, [pc, #44]	; (8002fa4 <HAL_I2C_MspInit+0x78>)
 8002f78:	f000 fe88 	bl	8003c8c <HAL_GPIO_Init>
 8002f7c:	4b08      	ldr	r3, [pc, #32]	; (8002fa0 <HAL_I2C_MspInit+0x74>)
 8002f7e:	69db      	ldr	r3, [r3, #28]
 8002f80:	4a07      	ldr	r2, [pc, #28]	; (8002fa0 <HAL_I2C_MspInit+0x74>)
 8002f82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f86:	61d3      	str	r3, [r2, #28]
 8002f88:	4b05      	ldr	r3, [pc, #20]	; (8002fa0 <HAL_I2C_MspInit+0x74>)
 8002f8a:	69db      	ldr	r3, [r3, #28]
 8002f8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f90:	60bb      	str	r3, [r7, #8]
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	bf00      	nop
 8002f96:	3720      	adds	r7, #32
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	40005400 	.word	0x40005400
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	40010c00 	.word	0x40010c00

08002fa8 <HAL_SPI_MspInit>:
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b088      	sub	sp, #32
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	f107 0310 	add.w	r3, r7, #16
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	605a      	str	r2, [r3, #4]
 8002fba:	609a      	str	r2, [r3, #8]
 8002fbc:	60da      	str	r2, [r3, #12]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a1b      	ldr	r2, [pc, #108]	; (8003030 <HAL_SPI_MspInit+0x88>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d12f      	bne.n	8003028 <HAL_SPI_MspInit+0x80>
 8002fc8:	4b1a      	ldr	r3, [pc, #104]	; (8003034 <HAL_SPI_MspInit+0x8c>)
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	4a19      	ldr	r2, [pc, #100]	; (8003034 <HAL_SPI_MspInit+0x8c>)
 8002fce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002fd2:	6193      	str	r3, [r2, #24]
 8002fd4:	4b17      	ldr	r3, [pc, #92]	; (8003034 <HAL_SPI_MspInit+0x8c>)
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fdc:	60fb      	str	r3, [r7, #12]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	4b14      	ldr	r3, [pc, #80]	; (8003034 <HAL_SPI_MspInit+0x8c>)
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	4a13      	ldr	r2, [pc, #76]	; (8003034 <HAL_SPI_MspInit+0x8c>)
 8002fe6:	f043 0304 	orr.w	r3, r3, #4
 8002fea:	6193      	str	r3, [r2, #24]
 8002fec:	4b11      	ldr	r3, [pc, #68]	; (8003034 <HAL_SPI_MspInit+0x8c>)
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	f003 0304 	and.w	r3, r3, #4
 8002ff4:	60bb      	str	r3, [r7, #8]
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	23a0      	movs	r3, #160	; 0xa0
 8002ffa:	613b      	str	r3, [r7, #16]
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	617b      	str	r3, [r7, #20]
 8003000:	2303      	movs	r3, #3
 8003002:	61fb      	str	r3, [r7, #28]
 8003004:	f107 0310 	add.w	r3, r7, #16
 8003008:	4619      	mov	r1, r3
 800300a:	480b      	ldr	r0, [pc, #44]	; (8003038 <HAL_SPI_MspInit+0x90>)
 800300c:	f000 fe3e 	bl	8003c8c <HAL_GPIO_Init>
 8003010:	2340      	movs	r3, #64	; 0x40
 8003012:	613b      	str	r3, [r7, #16]
 8003014:	2300      	movs	r3, #0
 8003016:	617b      	str	r3, [r7, #20]
 8003018:	2300      	movs	r3, #0
 800301a:	61bb      	str	r3, [r7, #24]
 800301c:	f107 0310 	add.w	r3, r7, #16
 8003020:	4619      	mov	r1, r3
 8003022:	4805      	ldr	r0, [pc, #20]	; (8003038 <HAL_SPI_MspInit+0x90>)
 8003024:	f000 fe32 	bl	8003c8c <HAL_GPIO_Init>
 8003028:	bf00      	nop
 800302a:	3720      	adds	r7, #32
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40013000 	.word	0x40013000
 8003034:	40021000 	.word	0x40021000
 8003038:	40010800 	.word	0x40010800

0800303c <HAL_UART_MspInit>:
 800303c:	b580      	push	{r7, lr}
 800303e:	b08c      	sub	sp, #48	; 0x30
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	f107 0320 	add.w	r3, r7, #32
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	605a      	str	r2, [r3, #4]
 800304e:	609a      	str	r2, [r3, #8]
 8003050:	60da      	str	r2, [r3, #12]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a57      	ldr	r2, [pc, #348]	; (80031b4 <HAL_UART_MspInit+0x178>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d13a      	bne.n	80030d2 <HAL_UART_MspInit+0x96>
 800305c:	4b56      	ldr	r3, [pc, #344]	; (80031b8 <HAL_UART_MspInit+0x17c>)
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	4a55      	ldr	r2, [pc, #340]	; (80031b8 <HAL_UART_MspInit+0x17c>)
 8003062:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003066:	6193      	str	r3, [r2, #24]
 8003068:	4b53      	ldr	r3, [pc, #332]	; (80031b8 <HAL_UART_MspInit+0x17c>)
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003070:	61fb      	str	r3, [r7, #28]
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	4b50      	ldr	r3, [pc, #320]	; (80031b8 <HAL_UART_MspInit+0x17c>)
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	4a4f      	ldr	r2, [pc, #316]	; (80031b8 <HAL_UART_MspInit+0x17c>)
 800307a:	f043 0304 	orr.w	r3, r3, #4
 800307e:	6193      	str	r3, [r2, #24]
 8003080:	4b4d      	ldr	r3, [pc, #308]	; (80031b8 <HAL_UART_MspInit+0x17c>)
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	f003 0304 	and.w	r3, r3, #4
 8003088:	61bb      	str	r3, [r7, #24]
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003090:	623b      	str	r3, [r7, #32]
 8003092:	2302      	movs	r3, #2
 8003094:	627b      	str	r3, [r7, #36]	; 0x24
 8003096:	2303      	movs	r3, #3
 8003098:	62fb      	str	r3, [r7, #44]	; 0x2c
 800309a:	f107 0320 	add.w	r3, r7, #32
 800309e:	4619      	mov	r1, r3
 80030a0:	4846      	ldr	r0, [pc, #280]	; (80031bc <HAL_UART_MspInit+0x180>)
 80030a2:	f000 fdf3 	bl	8003c8c <HAL_GPIO_Init>
 80030a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030aa:	623b      	str	r3, [r7, #32]
 80030ac:	2300      	movs	r3, #0
 80030ae:	627b      	str	r3, [r7, #36]	; 0x24
 80030b0:	2300      	movs	r3, #0
 80030b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80030b4:	f107 0320 	add.w	r3, r7, #32
 80030b8:	4619      	mov	r1, r3
 80030ba:	4840      	ldr	r0, [pc, #256]	; (80031bc <HAL_UART_MspInit+0x180>)
 80030bc:	f000 fde6 	bl	8003c8c <HAL_GPIO_Init>
 80030c0:	2200      	movs	r2, #0
 80030c2:	2100      	movs	r1, #0
 80030c4:	2025      	movs	r0, #37	; 0x25
 80030c6:	f000 fcdc 	bl	8003a82 <HAL_NVIC_SetPriority>
 80030ca:	2025      	movs	r0, #37	; 0x25
 80030cc:	f000 fcf5 	bl	8003aba <HAL_NVIC_EnableIRQ>
 80030d0:	e06c      	b.n	80031ac <HAL_UART_MspInit+0x170>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a3a      	ldr	r2, [pc, #232]	; (80031c0 <HAL_UART_MspInit+0x184>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d130      	bne.n	800313e <HAL_UART_MspInit+0x102>
 80030dc:	4b36      	ldr	r3, [pc, #216]	; (80031b8 <HAL_UART_MspInit+0x17c>)
 80030de:	69db      	ldr	r3, [r3, #28]
 80030e0:	4a35      	ldr	r2, [pc, #212]	; (80031b8 <HAL_UART_MspInit+0x17c>)
 80030e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030e6:	61d3      	str	r3, [r2, #28]
 80030e8:	4b33      	ldr	r3, [pc, #204]	; (80031b8 <HAL_UART_MspInit+0x17c>)
 80030ea:	69db      	ldr	r3, [r3, #28]
 80030ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f0:	617b      	str	r3, [r7, #20]
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	4b30      	ldr	r3, [pc, #192]	; (80031b8 <HAL_UART_MspInit+0x17c>)
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	4a2f      	ldr	r2, [pc, #188]	; (80031b8 <HAL_UART_MspInit+0x17c>)
 80030fa:	f043 0304 	orr.w	r3, r3, #4
 80030fe:	6193      	str	r3, [r2, #24]
 8003100:	4b2d      	ldr	r3, [pc, #180]	; (80031b8 <HAL_UART_MspInit+0x17c>)
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	613b      	str	r3, [r7, #16]
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	2304      	movs	r3, #4
 800310e:	623b      	str	r3, [r7, #32]
 8003110:	2302      	movs	r3, #2
 8003112:	627b      	str	r3, [r7, #36]	; 0x24
 8003114:	2303      	movs	r3, #3
 8003116:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003118:	f107 0320 	add.w	r3, r7, #32
 800311c:	4619      	mov	r1, r3
 800311e:	4827      	ldr	r0, [pc, #156]	; (80031bc <HAL_UART_MspInit+0x180>)
 8003120:	f000 fdb4 	bl	8003c8c <HAL_GPIO_Init>
 8003124:	2308      	movs	r3, #8
 8003126:	623b      	str	r3, [r7, #32]
 8003128:	2300      	movs	r3, #0
 800312a:	627b      	str	r3, [r7, #36]	; 0x24
 800312c:	2300      	movs	r3, #0
 800312e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003130:	f107 0320 	add.w	r3, r7, #32
 8003134:	4619      	mov	r1, r3
 8003136:	4821      	ldr	r0, [pc, #132]	; (80031bc <HAL_UART_MspInit+0x180>)
 8003138:	f000 fda8 	bl	8003c8c <HAL_GPIO_Init>
 800313c:	e036      	b.n	80031ac <HAL_UART_MspInit+0x170>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a20      	ldr	r2, [pc, #128]	; (80031c4 <HAL_UART_MspInit+0x188>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d131      	bne.n	80031ac <HAL_UART_MspInit+0x170>
 8003148:	4b1b      	ldr	r3, [pc, #108]	; (80031b8 <HAL_UART_MspInit+0x17c>)
 800314a:	69db      	ldr	r3, [r3, #28]
 800314c:	4a1a      	ldr	r2, [pc, #104]	; (80031b8 <HAL_UART_MspInit+0x17c>)
 800314e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003152:	61d3      	str	r3, [r2, #28]
 8003154:	4b18      	ldr	r3, [pc, #96]	; (80031b8 <HAL_UART_MspInit+0x17c>)
 8003156:	69db      	ldr	r3, [r3, #28]
 8003158:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800315c:	60fb      	str	r3, [r7, #12]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	4b15      	ldr	r3, [pc, #84]	; (80031b8 <HAL_UART_MspInit+0x17c>)
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	4a14      	ldr	r2, [pc, #80]	; (80031b8 <HAL_UART_MspInit+0x17c>)
 8003166:	f043 0308 	orr.w	r3, r3, #8
 800316a:	6193      	str	r3, [r2, #24]
 800316c:	4b12      	ldr	r3, [pc, #72]	; (80031b8 <HAL_UART_MspInit+0x17c>)
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	f003 0308 	and.w	r3, r3, #8
 8003174:	60bb      	str	r3, [r7, #8]
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800317c:	623b      	str	r3, [r7, #32]
 800317e:	2302      	movs	r3, #2
 8003180:	627b      	str	r3, [r7, #36]	; 0x24
 8003182:	2303      	movs	r3, #3
 8003184:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003186:	f107 0320 	add.w	r3, r7, #32
 800318a:	4619      	mov	r1, r3
 800318c:	480e      	ldr	r0, [pc, #56]	; (80031c8 <HAL_UART_MspInit+0x18c>)
 800318e:	f000 fd7d 	bl	8003c8c <HAL_GPIO_Init>
 8003192:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003196:	623b      	str	r3, [r7, #32]
 8003198:	2300      	movs	r3, #0
 800319a:	627b      	str	r3, [r7, #36]	; 0x24
 800319c:	2300      	movs	r3, #0
 800319e:	62bb      	str	r3, [r7, #40]	; 0x28
 80031a0:	f107 0320 	add.w	r3, r7, #32
 80031a4:	4619      	mov	r1, r3
 80031a6:	4808      	ldr	r0, [pc, #32]	; (80031c8 <HAL_UART_MspInit+0x18c>)
 80031a8:	f000 fd70 	bl	8003c8c <HAL_GPIO_Init>
 80031ac:	bf00      	nop
 80031ae:	3730      	adds	r7, #48	; 0x30
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40013800 	.word	0x40013800
 80031b8:	40021000 	.word	0x40021000
 80031bc:	40010800 	.word	0x40010800
 80031c0:	40004400 	.word	0x40004400
 80031c4:	40004800 	.word	0x40004800
 80031c8:	40010c00 	.word	0x40010c00

080031cc <NMI_Handler>:
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	e7fe      	b.n	80031d0 <NMI_Handler+0x4>

080031d2 <HardFault_Handler>:
 80031d2:	b480      	push	{r7}
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	e7fe      	b.n	80031d6 <HardFault_Handler+0x4>

080031d8 <MemManage_Handler>:
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
 80031dc:	e7fe      	b.n	80031dc <MemManage_Handler+0x4>

080031de <BusFault_Handler>:
 80031de:	b480      	push	{r7}
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	e7fe      	b.n	80031e2 <BusFault_Handler+0x4>

080031e4 <UsageFault_Handler>:
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	e7fe      	b.n	80031e8 <UsageFault_Handler+0x4>

080031ea <SVC_Handler>:
 80031ea:	b480      	push	{r7}
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	bf00      	nop
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bc80      	pop	{r7}
 80031f4:	4770      	bx	lr

080031f6 <DebugMon_Handler>:
 80031f6:	b480      	push	{r7}
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	bf00      	nop
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bc80      	pop	{r7}
 8003200:	4770      	bx	lr

08003202 <PendSV_Handler>:
 8003202:	b480      	push	{r7}
 8003204:	af00      	add	r7, sp, #0
 8003206:	bf00      	nop
 8003208:	46bd      	mov	sp, r7
 800320a:	bc80      	pop	{r7}
 800320c:	4770      	bx	lr

0800320e <SysTick_Handler>:
 800320e:	b580      	push	{r7, lr}
 8003210:	af00      	add	r7, sp, #0
 8003212:	f000 f90d 	bl	8003430 <HAL_IncTick>
 8003216:	bf00      	nop
 8003218:	bd80      	pop	{r7, pc}
	...

0800321c <USART1_IRQHandler>:
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
 8003220:	4802      	ldr	r0, [pc, #8]	; (800322c <USART1_IRQHandler+0x10>)
 8003222:	f003 febf 	bl	8006fa4 <HAL_UART_IRQHandler>
 8003226:	bf00      	nop
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	20000164 	.word	0x20000164

08003230 <_sbrk>:
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	4a14      	ldr	r2, [pc, #80]	; (800328c <_sbrk+0x5c>)
 800323a:	4b15      	ldr	r3, [pc, #84]	; (8003290 <_sbrk+0x60>)
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	617b      	str	r3, [r7, #20]
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	613b      	str	r3, [r7, #16]
 8003244:	4b13      	ldr	r3, [pc, #76]	; (8003294 <_sbrk+0x64>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d102      	bne.n	8003252 <_sbrk+0x22>
 800324c:	4b11      	ldr	r3, [pc, #68]	; (8003294 <_sbrk+0x64>)
 800324e:	4a12      	ldr	r2, [pc, #72]	; (8003298 <_sbrk+0x68>)
 8003250:	601a      	str	r2, [r3, #0]
 8003252:	4b10      	ldr	r3, [pc, #64]	; (8003294 <_sbrk+0x64>)
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4413      	add	r3, r2
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	429a      	cmp	r2, r3
 800325e:	d207      	bcs.n	8003270 <_sbrk+0x40>
 8003260:	f004 fc86 	bl	8007b70 <__errno>
 8003264:	4603      	mov	r3, r0
 8003266:	220c      	movs	r2, #12
 8003268:	601a      	str	r2, [r3, #0]
 800326a:	f04f 33ff 	mov.w	r3, #4294967295
 800326e:	e009      	b.n	8003284 <_sbrk+0x54>
 8003270:	4b08      	ldr	r3, [pc, #32]	; (8003294 <_sbrk+0x64>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	4b07      	ldr	r3, [pc, #28]	; (8003294 <_sbrk+0x64>)
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4413      	add	r3, r2
 800327e:	4a05      	ldr	r2, [pc, #20]	; (8003294 <_sbrk+0x64>)
 8003280:	6013      	str	r3, [r2, #0]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	4618      	mov	r0, r3
 8003286:	3718      	adds	r7, #24
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	20005000 	.word	0x20005000
 8003290:	00000400 	.word	0x00000400
 8003294:	200004ec 	.word	0x200004ec
 8003298:	20000640 	.word	0x20000640

0800329c <SystemInit>:
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
 80032a0:	bf00      	nop
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bc80      	pop	{r7}
 80032a6:	4770      	bx	lr

080032a8 <writeTxReg>:
	SET_BIT(USART1->CR1, USART_CR1_RXNEIE);
	NVIC_EnableIRQ(USART1_IRQn);
	SET_BIT(USART1->CR1, USART_CR1_UE);
}

void writeTxReg(char ch) {
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	4603      	mov	r3, r0
 80032b0:	71fb      	strb	r3, [r7, #7]
	SET_BIT(GPIOB->ODR, GPIO_ODR_ODR8);
 80032b2:	4b11      	ldr	r3, [pc, #68]	; (80032f8 <writeTxReg+0x50>)
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	4a10      	ldr	r2, [pc, #64]	; (80032f8 <writeTxReg+0x50>)
 80032b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032bc:	60d3      	str	r3, [r2, #12]

	while (!READ_BIT(USART1->SR, USART_SR_TXE))
 80032be:	bf00      	nop
 80032c0:	4b0e      	ldr	r3, [pc, #56]	; (80032fc <writeTxReg+0x54>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0f9      	beq.n	80032c0 <writeTxReg+0x18>
		;
	USART1->DR = (uint8_t) (ch & 0xFFU);
 80032cc:	4a0b      	ldr	r2, [pc, #44]	; (80032fc <writeTxReg+0x54>)
 80032ce:	79fb      	ldrb	r3, [r7, #7]
 80032d0:	6053      	str	r3, [r2, #4]

	while (!READ_BIT(USART1->SR, USART_SR_TC))
 80032d2:	bf00      	nop
 80032d4:	4b09      	ldr	r3, [pc, #36]	; (80032fc <writeTxReg+0x54>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0f9      	beq.n	80032d4 <writeTxReg+0x2c>
		;

	CLEAR_BIT(GPIOB->ODR, GPIO_ODR_ODR8);
 80032e0:	4b05      	ldr	r3, [pc, #20]	; (80032f8 <writeTxReg+0x50>)
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	4a04      	ldr	r2, [pc, #16]	; (80032f8 <writeTxReg+0x50>)
 80032e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032ea:	60d3      	str	r3, [r2, #12]
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bc80      	pop	{r7}
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	40010c00 	.word	0x40010c00
 80032fc:	40013800 	.word	0x40013800

08003300 <writeTxReg_uart2>:

void writeTxReg_uart2(char ch) {
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	4603      	mov	r3, r0
 8003308:	71fb      	strb	r3, [r7, #7]
	SET_BIT(GPIOB->ODR, GPIO_ODR_ODR8);
 800330a:	4b11      	ldr	r3, [pc, #68]	; (8003350 <writeTxReg_uart2+0x50>)
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	4a10      	ldr	r2, [pc, #64]	; (8003350 <writeTxReg_uart2+0x50>)
 8003310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003314:	60d3      	str	r3, [r2, #12]

	while (!READ_BIT(USART2->SR, USART_SR_TXE))
 8003316:	bf00      	nop
 8003318:	4b0e      	ldr	r3, [pc, #56]	; (8003354 <writeTxReg_uart2+0x54>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0f9      	beq.n	8003318 <writeTxReg_uart2+0x18>
		;
	USART2->DR = (uint8_t) (ch & 0xFFU);
 8003324:	4a0b      	ldr	r2, [pc, #44]	; (8003354 <writeTxReg_uart2+0x54>)
 8003326:	79fb      	ldrb	r3, [r7, #7]
 8003328:	6053      	str	r3, [r2, #4]

	while (!READ_BIT(USART2->SR, USART_SR_TC))
 800332a:	bf00      	nop
 800332c:	4b09      	ldr	r3, [pc, #36]	; (8003354 <writeTxReg_uart2+0x54>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003334:	2b00      	cmp	r3, #0
 8003336:	d0f9      	beq.n	800332c <writeTxReg_uart2+0x2c>
		;

	CLEAR_BIT(GPIOB->ODR, GPIO_ODR_ODR8);
 8003338:	4b05      	ldr	r3, [pc, #20]	; (8003350 <writeTxReg_uart2+0x50>)
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	4a04      	ldr	r2, [pc, #16]	; (8003350 <writeTxReg_uart2+0x50>)
 800333e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003342:	60d3      	str	r3, [r2, #12]
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	bc80      	pop	{r7}
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	40010c00 	.word	0x40010c00
 8003354:	40004400 	.word	0x40004400

08003358 <Reset_Handler>:
 8003358:	480c      	ldr	r0, [pc, #48]	; (800338c <LoopFillZerobss+0x12>)
 800335a:	490d      	ldr	r1, [pc, #52]	; (8003390 <LoopFillZerobss+0x16>)
 800335c:	4a0d      	ldr	r2, [pc, #52]	; (8003394 <LoopFillZerobss+0x1a>)
 800335e:	2300      	movs	r3, #0
 8003360:	e002      	b.n	8003368 <LoopCopyDataInit>

08003362 <CopyDataInit>:
 8003362:	58d4      	ldr	r4, [r2, r3]
 8003364:	50c4      	str	r4, [r0, r3]
 8003366:	3304      	adds	r3, #4

08003368 <LoopCopyDataInit>:
 8003368:	18c4      	adds	r4, r0, r3
 800336a:	428c      	cmp	r4, r1
 800336c:	d3f9      	bcc.n	8003362 <CopyDataInit>
 800336e:	4a0a      	ldr	r2, [pc, #40]	; (8003398 <LoopFillZerobss+0x1e>)
 8003370:	4c0a      	ldr	r4, [pc, #40]	; (800339c <LoopFillZerobss+0x22>)
 8003372:	2300      	movs	r3, #0
 8003374:	e001      	b.n	800337a <LoopFillZerobss>

08003376 <FillZerobss>:
 8003376:	6013      	str	r3, [r2, #0]
 8003378:	3204      	adds	r2, #4

0800337a <LoopFillZerobss>:
 800337a:	42a2      	cmp	r2, r4
 800337c:	d3fb      	bcc.n	8003376 <FillZerobss>
 800337e:	f7ff ff8d 	bl	800329c <SystemInit>
 8003382:	f004 fbfb 	bl	8007b7c <__libc_init_array>
 8003386:	f7fe f8eb 	bl	8001560 <main>
 800338a:	4770      	bx	lr
 800338c:	20000000 	.word	0x20000000
 8003390:	2000005c 	.word	0x2000005c
 8003394:	08007cac 	.word	0x08007cac
 8003398:	2000005c 	.word	0x2000005c
 800339c:	2000063c 	.word	0x2000063c

080033a0 <ADC1_2_IRQHandler>:
 80033a0:	e7fe      	b.n	80033a0 <ADC1_2_IRQHandler>
	...

080033a4 <HAL_Init>:
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	4b08      	ldr	r3, [pc, #32]	; (80033cc <HAL_Init+0x28>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a07      	ldr	r2, [pc, #28]	; (80033cc <HAL_Init+0x28>)
 80033ae:	f043 0310 	orr.w	r3, r3, #16
 80033b2:	6013      	str	r3, [r2, #0]
 80033b4:	2003      	movs	r0, #3
 80033b6:	f000 fb59 	bl	8003a6c <HAL_NVIC_SetPriorityGrouping>
 80033ba:	200f      	movs	r0, #15
 80033bc:	f000 f808 	bl	80033d0 <HAL_InitTick>
 80033c0:	f7ff fd28 	bl	8002e14 <HAL_MspInit>
 80033c4:	2300      	movs	r3, #0
 80033c6:	4618      	mov	r0, r3
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	40022000 	.word	0x40022000

080033d0 <HAL_InitTick>:
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	4b12      	ldr	r3, [pc, #72]	; (8003424 <HAL_InitTick+0x54>)
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	4b12      	ldr	r3, [pc, #72]	; (8003428 <HAL_InitTick+0x58>)
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	4619      	mov	r1, r3
 80033e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80033ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 fb71 	bl	8003ad6 <HAL_SYSTICK_Config>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <HAL_InitTick+0x2e>
 80033fa:	2301      	movs	r3, #1
 80033fc:	e00e      	b.n	800341c <HAL_InitTick+0x4c>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b0f      	cmp	r3, #15
 8003402:	d80a      	bhi.n	800341a <HAL_InitTick+0x4a>
 8003404:	2200      	movs	r2, #0
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	f04f 30ff 	mov.w	r0, #4294967295
 800340c:	f000 fb39 	bl	8003a82 <HAL_NVIC_SetPriority>
 8003410:	4a06      	ldr	r2, [pc, #24]	; (800342c <HAL_InitTick+0x5c>)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6013      	str	r3, [r2, #0]
 8003416:	2300      	movs	r3, #0
 8003418:	e000      	b.n	800341c <HAL_InitTick+0x4c>
 800341a:	2301      	movs	r3, #1
 800341c:	4618      	mov	r0, r3
 800341e:	3708      	adds	r7, #8
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	20000000 	.word	0x20000000
 8003428:	20000008 	.word	0x20000008
 800342c:	20000004 	.word	0x20000004

08003430 <HAL_IncTick>:
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
 8003434:	4b05      	ldr	r3, [pc, #20]	; (800344c <HAL_IncTick+0x1c>)
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	461a      	mov	r2, r3
 800343a:	4b05      	ldr	r3, [pc, #20]	; (8003450 <HAL_IncTick+0x20>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4413      	add	r3, r2
 8003440:	4a03      	ldr	r2, [pc, #12]	; (8003450 <HAL_IncTick+0x20>)
 8003442:	6013      	str	r3, [r2, #0]
 8003444:	bf00      	nop
 8003446:	46bd      	mov	sp, r7
 8003448:	bc80      	pop	{r7}
 800344a:	4770      	bx	lr
 800344c:	20000008 	.word	0x20000008
 8003450:	200004f0 	.word	0x200004f0

08003454 <HAL_GetTick>:
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0
 8003458:	4b02      	ldr	r3, [pc, #8]	; (8003464 <HAL_GetTick+0x10>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4618      	mov	r0, r3
 800345e:	46bd      	mov	sp, r7
 8003460:	bc80      	pop	{r7}
 8003462:	4770      	bx	lr
 8003464:	200004f0 	.word	0x200004f0

08003468 <HAL_Delay>:
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	f7ff fff0 	bl	8003454 <HAL_GetTick>
 8003474:	60b8      	str	r0, [r7, #8]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	60fb      	str	r3, [r7, #12]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003480:	d005      	beq.n	800348e <HAL_Delay+0x26>
 8003482:	4b0a      	ldr	r3, [pc, #40]	; (80034ac <HAL_Delay+0x44>)
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	461a      	mov	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	4413      	add	r3, r2
 800348c:	60fb      	str	r3, [r7, #12]
 800348e:	bf00      	nop
 8003490:	f7ff ffe0 	bl	8003454 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	429a      	cmp	r2, r3
 800349e:	d8f7      	bhi.n	8003490 <HAL_Delay+0x28>
 80034a0:	bf00      	nop
 80034a2:	bf00      	nop
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	20000008 	.word	0x20000008

080034b0 <HAL_ADC_Init>:
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	2300      	movs	r3, #0
 80034ba:	75fb      	strb	r3, [r7, #23]
 80034bc:	2300      	movs	r3, #0
 80034be:	613b      	str	r3, [r7, #16]
 80034c0:	2300      	movs	r3, #0
 80034c2:	60bb      	str	r3, [r7, #8]
 80034c4:	2300      	movs	r3, #0
 80034c6:	60fb      	str	r3, [r7, #12]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_ADC_Init+0x22>
 80034ce:	2301      	movs	r3, #1
 80034d0:	e0be      	b.n	8003650 <HAL_ADC_Init+0x1a0>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d109      	bne.n	80034f4 <HAL_ADC_Init+0x44>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f7ff fcc2 	bl	8002e78 <HAL_ADC_MspInit>
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 f9ab 	bl	8003850 <ADC_ConversionStop_Disable>
 80034fa:	4603      	mov	r3, r0
 80034fc:	75fb      	strb	r3, [r7, #23]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003502:	f003 0310 	and.w	r3, r3, #16
 8003506:	2b00      	cmp	r3, #0
 8003508:	f040 8099 	bne.w	800363e <HAL_ADC_Init+0x18e>
 800350c:	7dfb      	ldrb	r3, [r7, #23]
 800350e:	2b00      	cmp	r3, #0
 8003510:	f040 8095 	bne.w	800363e <HAL_ADC_Init+0x18e>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003518:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800351c:	f023 0302 	bic.w	r3, r3, #2
 8003520:	f043 0202 	orr.w	r2, r3, #2
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	629a      	str	r2, [r3, #40]	; 0x28
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	69db      	ldr	r3, [r3, #28]
 8003530:	431a      	orrs	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	7b1b      	ldrb	r3, [r3, #12]
 8003536:	005b      	lsls	r3, r3, #1
 8003538:	4313      	orrs	r3, r2
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	4313      	orrs	r3, r2
 800353e:	60bb      	str	r3, [r7, #8]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003548:	d003      	beq.n	8003552 <HAL_ADC_Init+0xa2>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d102      	bne.n	8003558 <HAL_ADC_Init+0xa8>
 8003552:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003556:	e000      	b.n	800355a <HAL_ADC_Init+0xaa>
 8003558:	2300      	movs	r3, #0
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	4313      	orrs	r3, r2
 800355e:	613b      	str	r3, [r7, #16]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	7d1b      	ldrb	r3, [r3, #20]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d119      	bne.n	800359c <HAL_ADC_Init+0xec>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	7b1b      	ldrb	r3, [r3, #12]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d109      	bne.n	8003584 <HAL_ADC_Init+0xd4>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	3b01      	subs	r3, #1
 8003576:	035a      	lsls	r2, r3, #13
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	4313      	orrs	r3, r2
 800357c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003580:	613b      	str	r3, [r7, #16]
 8003582:	e00b      	b.n	800359c <HAL_ADC_Init+0xec>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003588:	f043 0220 	orr.w	r2, r3, #32
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	629a      	str	r2, [r3, #40]	; 0x28
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003594:	f043 0201 	orr.w	r2, r3, #1
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	62da      	str	r2, [r3, #44]	; 0x2c
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	430a      	orrs	r2, r1
 80035ae:	605a      	str	r2, [r3, #4]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	689a      	ldr	r2, [r3, #8]
 80035b6:	4b28      	ldr	r3, [pc, #160]	; (8003658 <HAL_ADC_Init+0x1a8>)
 80035b8:	4013      	ands	r3, r2
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6812      	ldr	r2, [r2, #0]
 80035be:	68b9      	ldr	r1, [r7, #8]
 80035c0:	430b      	orrs	r3, r1
 80035c2:	6093      	str	r3, [r2, #8]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035cc:	d003      	beq.n	80035d6 <HAL_ADC_Init+0x126>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d104      	bne.n	80035e0 <HAL_ADC_Init+0x130>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	3b01      	subs	r3, #1
 80035dc:	051b      	lsls	r3, r3, #20
 80035de:	60fb      	str	r3, [r7, #12]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	430a      	orrs	r2, r1
 80035f2:	62da      	str	r2, [r3, #44]	; 0x2c
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	689a      	ldr	r2, [r3, #8]
 80035fa:	4b18      	ldr	r3, [pc, #96]	; (800365c <HAL_ADC_Init+0x1ac>)
 80035fc:	4013      	ands	r3, r2
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	429a      	cmp	r2, r3
 8003602:	d10b      	bne.n	800361c <HAL_ADC_Init+0x16c>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	62da      	str	r2, [r3, #44]	; 0x2c
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360e:	f023 0303 	bic.w	r3, r3, #3
 8003612:	f043 0201 	orr.w	r2, r3, #1
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	629a      	str	r2, [r3, #40]	; 0x28
 800361a:	e018      	b.n	800364e <HAL_ADC_Init+0x19e>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003620:	f023 0312 	bic.w	r3, r3, #18
 8003624:	f043 0210 	orr.w	r2, r3, #16
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	629a      	str	r2, [r3, #40]	; 0x28
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003630:	f043 0201 	orr.w	r2, r3, #1
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	62da      	str	r2, [r3, #44]	; 0x2c
 8003638:	2301      	movs	r3, #1
 800363a:	75fb      	strb	r3, [r7, #23]
 800363c:	e007      	b.n	800364e <HAL_ADC_Init+0x19e>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003642:	f043 0210 	orr.w	r2, r3, #16
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	629a      	str	r2, [r3, #40]	; 0x28
 800364a:	2301      	movs	r3, #1
 800364c:	75fb      	strb	r3, [r7, #23]
 800364e:	7dfb      	ldrb	r3, [r7, #23]
 8003650:	4618      	mov	r0, r3
 8003652:	3718      	adds	r7, #24
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	ffe1f7fd 	.word	0xffe1f7fd
 800365c:	ff1f0efe 	.word	0xff1f0efe

08003660 <HAL_ADC_ConfigChannel>:
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
 800366a:	2300      	movs	r3, #0
 800366c:	73fb      	strb	r3, [r7, #15]
 800366e:	2300      	movs	r3, #0
 8003670:	60bb      	str	r3, [r7, #8]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003678:	2b01      	cmp	r3, #1
 800367a:	d101      	bne.n	8003680 <HAL_ADC_ConfigChannel+0x20>
 800367c:	2302      	movs	r3, #2
 800367e:	e0dc      	b.n	800383a <HAL_ADC_ConfigChannel+0x1da>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	2b06      	cmp	r3, #6
 800368e:	d81c      	bhi.n	80036ca <HAL_ADC_ConfigChannel+0x6a>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685a      	ldr	r2, [r3, #4]
 800369a:	4613      	mov	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	4413      	add	r3, r2
 80036a0:	3b05      	subs	r3, #5
 80036a2:	221f      	movs	r2, #31
 80036a4:	fa02 f303 	lsl.w	r3, r2, r3
 80036a8:	43db      	mvns	r3, r3
 80036aa:	4019      	ands	r1, r3
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	6818      	ldr	r0, [r3, #0]
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	4613      	mov	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4413      	add	r3, r2
 80036ba:	3b05      	subs	r3, #5
 80036bc:	fa00 f203 	lsl.w	r2, r0, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	430a      	orrs	r2, r1
 80036c6:	635a      	str	r2, [r3, #52]	; 0x34
 80036c8:	e03c      	b.n	8003744 <HAL_ADC_ConfigChannel+0xe4>
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2b0c      	cmp	r3, #12
 80036d0:	d81c      	bhi.n	800370c <HAL_ADC_ConfigChannel+0xac>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685a      	ldr	r2, [r3, #4]
 80036dc:	4613      	mov	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4413      	add	r3, r2
 80036e2:	3b23      	subs	r3, #35	; 0x23
 80036e4:	221f      	movs	r2, #31
 80036e6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ea:	43db      	mvns	r3, r3
 80036ec:	4019      	ands	r1, r3
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	6818      	ldr	r0, [r3, #0]
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	685a      	ldr	r2, [r3, #4]
 80036f6:	4613      	mov	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4413      	add	r3, r2
 80036fc:	3b23      	subs	r3, #35	; 0x23
 80036fe:	fa00 f203 	lsl.w	r2, r0, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	430a      	orrs	r2, r1
 8003708:	631a      	str	r2, [r3, #48]	; 0x30
 800370a:	e01b      	b.n	8003744 <HAL_ADC_ConfigChannel+0xe4>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	685a      	ldr	r2, [r3, #4]
 8003716:	4613      	mov	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	4413      	add	r3, r2
 800371c:	3b41      	subs	r3, #65	; 0x41
 800371e:	221f      	movs	r2, #31
 8003720:	fa02 f303 	lsl.w	r3, r2, r3
 8003724:	43db      	mvns	r3, r3
 8003726:	4019      	ands	r1, r3
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	6818      	ldr	r0, [r3, #0]
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	4613      	mov	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4413      	add	r3, r2
 8003736:	3b41      	subs	r3, #65	; 0x41
 8003738:	fa00 f203 	lsl.w	r2, r0, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	430a      	orrs	r2, r1
 8003742:	62da      	str	r2, [r3, #44]	; 0x2c
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2b09      	cmp	r3, #9
 800374a:	d91c      	bls.n	8003786 <HAL_ADC_ConfigChannel+0x126>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68d9      	ldr	r1, [r3, #12]
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	4613      	mov	r3, r2
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	4413      	add	r3, r2
 800375c:	3b1e      	subs	r3, #30
 800375e:	2207      	movs	r2, #7
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	43db      	mvns	r3, r3
 8003766:	4019      	ands	r1, r3
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	6898      	ldr	r0, [r3, #8]
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	4613      	mov	r3, r2
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	4413      	add	r3, r2
 8003776:	3b1e      	subs	r3, #30
 8003778:	fa00 f203 	lsl.w	r2, r0, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	60da      	str	r2, [r3, #12]
 8003784:	e019      	b.n	80037ba <HAL_ADC_ConfigChannel+0x15a>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6919      	ldr	r1, [r3, #16]
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	4613      	mov	r3, r2
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	4413      	add	r3, r2
 8003796:	2207      	movs	r2, #7
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	43db      	mvns	r3, r3
 800379e:	4019      	ands	r1, r3
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	6898      	ldr	r0, [r3, #8]
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	4613      	mov	r3, r2
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	4413      	add	r3, r2
 80037ae:	fa00 f203 	lsl.w	r2, r0, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	611a      	str	r2, [r3, #16]
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2b10      	cmp	r3, #16
 80037c0:	d003      	beq.n	80037ca <HAL_ADC_ConfigChannel+0x16a>
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2b11      	cmp	r3, #17
 80037c8:	d132      	bne.n	8003830 <HAL_ADC_ConfigChannel+0x1d0>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a1d      	ldr	r2, [pc, #116]	; (8003844 <HAL_ADC_ConfigChannel+0x1e4>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d125      	bne.n	8003820 <HAL_ADC_ConfigChannel+0x1c0>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d126      	bne.n	8003830 <HAL_ADC_ConfigChannel+0x1d0>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	689a      	ldr	r2, [r3, #8]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80037f0:	609a      	str	r2, [r3, #8]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2b10      	cmp	r3, #16
 80037f8:	d11a      	bne.n	8003830 <HAL_ADC_ConfigChannel+0x1d0>
 80037fa:	4b13      	ldr	r3, [pc, #76]	; (8003848 <HAL_ADC_ConfigChannel+0x1e8>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a13      	ldr	r2, [pc, #76]	; (800384c <HAL_ADC_ConfigChannel+0x1ec>)
 8003800:	fba2 2303 	umull	r2, r3, r2, r3
 8003804:	0c9a      	lsrs	r2, r3, #18
 8003806:	4613      	mov	r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	4413      	add	r3, r2
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	60bb      	str	r3, [r7, #8]
 8003810:	e002      	b.n	8003818 <HAL_ADC_ConfigChannel+0x1b8>
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	3b01      	subs	r3, #1
 8003816:	60bb      	str	r3, [r7, #8]
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1f9      	bne.n	8003812 <HAL_ADC_ConfigChannel+0x1b2>
 800381e:	e007      	b.n	8003830 <HAL_ADC_ConfigChannel+0x1d0>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003824:	f043 0220 	orr.w	r2, r3, #32
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	629a      	str	r2, [r3, #40]	; 0x28
 800382c:	2301      	movs	r3, #1
 800382e:	73fb      	strb	r3, [r7, #15]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003838:	7bfb      	ldrb	r3, [r7, #15]
 800383a:	4618      	mov	r0, r3
 800383c:	3714      	adds	r7, #20
 800383e:	46bd      	mov	sp, r7
 8003840:	bc80      	pop	{r7}
 8003842:	4770      	bx	lr
 8003844:	40012400 	.word	0x40012400
 8003848:	20000000 	.word	0x20000000
 800384c:	431bde83 	.word	0x431bde83

08003850 <ADC_ConversionStop_Disable>:
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	2300      	movs	r3, #0
 800385a:	60fb      	str	r3, [r7, #12]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b01      	cmp	r3, #1
 8003868:	d12e      	bne.n	80038c8 <ADC_ConversionStop_Disable+0x78>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 0201 	bic.w	r2, r2, #1
 8003878:	609a      	str	r2, [r3, #8]
 800387a:	f7ff fdeb 	bl	8003454 <HAL_GetTick>
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	e01b      	b.n	80038ba <ADC_ConversionStop_Disable+0x6a>
 8003882:	f7ff fde7 	bl	8003454 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d914      	bls.n	80038ba <ADC_ConversionStop_Disable+0x6a>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b01      	cmp	r3, #1
 800389c:	d10d      	bne.n	80038ba <ADC_ConversionStop_Disable+0x6a>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a2:	f043 0210 	orr.w	r2, r3, #16
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	629a      	str	r2, [r3, #40]	; 0x28
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ae:	f043 0201 	orr.w	r2, r3, #1
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80038b6:	2301      	movs	r3, #1
 80038b8:	e007      	b.n	80038ca <ADC_ConversionStop_Disable+0x7a>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d0dc      	beq.n	8003882 <ADC_ConversionStop_Disable+0x32>
 80038c8:	2300      	movs	r3, #0
 80038ca:	4618      	mov	r0, r3
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
	...

080038d4 <__NVIC_SetPriorityGrouping>:
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f003 0307 	and.w	r3, r3, #7
 80038e2:	60fb      	str	r3, [r7, #12]
 80038e4:	4b0c      	ldr	r3, [pc, #48]	; (8003918 <__NVIC_SetPriorityGrouping+0x44>)
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	60bb      	str	r3, [r7, #8]
 80038ea:	68ba      	ldr	r2, [r7, #8]
 80038ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038f0:	4013      	ands	r3, r2
 80038f2:	60bb      	str	r3, [r7, #8]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	021a      	lsls	r2, r3, #8
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003904:	60bb      	str	r3, [r7, #8]
 8003906:	4a04      	ldr	r2, [pc, #16]	; (8003918 <__NVIC_SetPriorityGrouping+0x44>)
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	60d3      	str	r3, [r2, #12]
 800390c:	bf00      	nop
 800390e:	3714      	adds	r7, #20
 8003910:	46bd      	mov	sp, r7
 8003912:	bc80      	pop	{r7}
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	e000ed00 	.word	0xe000ed00

0800391c <__NVIC_GetPriorityGrouping>:
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
 8003920:	4b04      	ldr	r3, [pc, #16]	; (8003934 <__NVIC_GetPriorityGrouping+0x18>)
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	0a1b      	lsrs	r3, r3, #8
 8003926:	f003 0307 	and.w	r3, r3, #7
 800392a:	4618      	mov	r0, r3
 800392c:	46bd      	mov	sp, r7
 800392e:	bc80      	pop	{r7}
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	e000ed00 	.word	0xe000ed00

08003938 <__NVIC_EnableIRQ>:
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	4603      	mov	r3, r0
 8003940:	71fb      	strb	r3, [r7, #7]
 8003942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003946:	2b00      	cmp	r3, #0
 8003948:	db0b      	blt.n	8003962 <__NVIC_EnableIRQ+0x2a>
 800394a:	79fb      	ldrb	r3, [r7, #7]
 800394c:	f003 021f 	and.w	r2, r3, #31
 8003950:	4906      	ldr	r1, [pc, #24]	; (800396c <__NVIC_EnableIRQ+0x34>)
 8003952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003956:	095b      	lsrs	r3, r3, #5
 8003958:	2001      	movs	r0, #1
 800395a:	fa00 f202 	lsl.w	r2, r0, r2
 800395e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003962:	bf00      	nop
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	bc80      	pop	{r7}
 800396a:	4770      	bx	lr
 800396c:	e000e100 	.word	0xe000e100

08003970 <__NVIC_SetPriority>:
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	4603      	mov	r3, r0
 8003978:	6039      	str	r1, [r7, #0]
 800397a:	71fb      	strb	r3, [r7, #7]
 800397c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003980:	2b00      	cmp	r3, #0
 8003982:	db0a      	blt.n	800399a <__NVIC_SetPriority+0x2a>
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	b2da      	uxtb	r2, r3
 8003988:	490c      	ldr	r1, [pc, #48]	; (80039bc <__NVIC_SetPriority+0x4c>)
 800398a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800398e:	0112      	lsls	r2, r2, #4
 8003990:	b2d2      	uxtb	r2, r2
 8003992:	440b      	add	r3, r1
 8003994:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8003998:	e00a      	b.n	80039b0 <__NVIC_SetPriority+0x40>
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	b2da      	uxtb	r2, r3
 800399e:	4908      	ldr	r1, [pc, #32]	; (80039c0 <__NVIC_SetPriority+0x50>)
 80039a0:	79fb      	ldrb	r3, [r7, #7]
 80039a2:	f003 030f 	and.w	r3, r3, #15
 80039a6:	3b04      	subs	r3, #4
 80039a8:	0112      	lsls	r2, r2, #4
 80039aa:	b2d2      	uxtb	r2, r2
 80039ac:	440b      	add	r3, r1
 80039ae:	761a      	strb	r2, [r3, #24]
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bc80      	pop	{r7}
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	e000e100 	.word	0xe000e100
 80039c0:	e000ed00 	.word	0xe000ed00

080039c4 <NVIC_EncodePriority>:
 80039c4:	b480      	push	{r7}
 80039c6:	b089      	sub	sp, #36	; 0x24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f003 0307 	and.w	r3, r3, #7
 80039d6:	61fb      	str	r3, [r7, #28]
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	f1c3 0307 	rsb	r3, r3, #7
 80039de:	2b04      	cmp	r3, #4
 80039e0:	bf28      	it	cs
 80039e2:	2304      	movcs	r3, #4
 80039e4:	61bb      	str	r3, [r7, #24]
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	3304      	adds	r3, #4
 80039ea:	2b06      	cmp	r3, #6
 80039ec:	d902      	bls.n	80039f4 <NVIC_EncodePriority+0x30>
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	3b03      	subs	r3, #3
 80039f2:	e000      	b.n	80039f6 <NVIC_EncodePriority+0x32>
 80039f4:	2300      	movs	r3, #0
 80039f6:	617b      	str	r3, [r7, #20]
 80039f8:	f04f 32ff 	mov.w	r2, #4294967295
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003a02:	43da      	mvns	r2, r3
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	401a      	ands	r2, r3
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	409a      	lsls	r2, r3
 8003a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	fa01 f303 	lsl.w	r3, r1, r3
 8003a16:	43d9      	mvns	r1, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	400b      	ands	r3, r1
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3724      	adds	r7, #36	; 0x24
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bc80      	pop	{r7}
 8003a26:	4770      	bx	lr

08003a28 <SysTick_Config>:
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	3b01      	subs	r3, #1
 8003a34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a38:	d301      	bcc.n	8003a3e <SysTick_Config+0x16>
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e00f      	b.n	8003a5e <SysTick_Config+0x36>
 8003a3e:	4a0a      	ldr	r2, [pc, #40]	; (8003a68 <SysTick_Config+0x40>)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	3b01      	subs	r3, #1
 8003a44:	6053      	str	r3, [r2, #4]
 8003a46:	210f      	movs	r1, #15
 8003a48:	f04f 30ff 	mov.w	r0, #4294967295
 8003a4c:	f7ff ff90 	bl	8003970 <__NVIC_SetPriority>
 8003a50:	4b05      	ldr	r3, [pc, #20]	; (8003a68 <SysTick_Config+0x40>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	609a      	str	r2, [r3, #8]
 8003a56:	4b04      	ldr	r3, [pc, #16]	; (8003a68 <SysTick_Config+0x40>)
 8003a58:	2207      	movs	r2, #7
 8003a5a:	601a      	str	r2, [r3, #0]
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	e000e010 	.word	0xe000e010

08003a6c <HAL_NVIC_SetPriorityGrouping>:
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f7ff ff2d 	bl	80038d4 <__NVIC_SetPriorityGrouping>
 8003a7a:	bf00      	nop
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <HAL_NVIC_SetPriority>:
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b086      	sub	sp, #24
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	4603      	mov	r3, r0
 8003a8a:	60b9      	str	r1, [r7, #8]
 8003a8c:	607a      	str	r2, [r7, #4]
 8003a8e:	73fb      	strb	r3, [r7, #15]
 8003a90:	2300      	movs	r3, #0
 8003a92:	617b      	str	r3, [r7, #20]
 8003a94:	f7ff ff42 	bl	800391c <__NVIC_GetPriorityGrouping>
 8003a98:	6178      	str	r0, [r7, #20]
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	68b9      	ldr	r1, [r7, #8]
 8003a9e:	6978      	ldr	r0, [r7, #20]
 8003aa0:	f7ff ff90 	bl	80039c4 <NVIC_EncodePriority>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aaa:	4611      	mov	r1, r2
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7ff ff5f 	bl	8003970 <__NVIC_SetPriority>
 8003ab2:	bf00      	nop
 8003ab4:	3718      	adds	r7, #24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <HAL_NVIC_EnableIRQ>:
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b082      	sub	sp, #8
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	71fb      	strb	r3, [r7, #7]
 8003ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7ff ff35 	bl	8003938 <__NVIC_EnableIRQ>
 8003ace:	bf00      	nop
 8003ad0:	3708      	adds	r7, #8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <HAL_SYSTICK_Config>:
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b082      	sub	sp, #8
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f7ff ffa2 	bl	8003a28 <SysTick_Config>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <HAL_CRC_Init>:
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b082      	sub	sp, #8
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d101      	bne.n	8003b00 <HAL_CRC_Init+0x12>
 8003afc:	2301      	movs	r3, #1
 8003afe:	e00e      	b.n	8003b1e <HAL_CRC_Init+0x30>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	795b      	ldrb	r3, [r3, #5]
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d105      	bne.n	8003b16 <HAL_CRC_Init+0x28>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	711a      	strb	r2, [r3, #4]
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f7ff f9ed 	bl	8002ef0 <HAL_CRC_MspInit>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	715a      	strb	r2, [r3, #5]
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <HAL_DMA_Abort>:
 8003b26:	b480      	push	{r7}
 8003b28:	b085      	sub	sp, #20
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
 8003b2e:	2300      	movs	r3, #0
 8003b30:	73fb      	strb	r3, [r7, #15]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d008      	beq.n	8003b50 <HAL_DMA_Abort+0x2a>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2204      	movs	r2, #4
 8003b42:	639a      	str	r2, [r3, #56]	; 0x38
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 2020 	strb.w	r2, [r3, #32]
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e020      	b.n	8003b92 <HAL_DMA_Abort+0x6c>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 020e 	bic.w	r2, r2, #14
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 0201 	bic.w	r2, r2, #1
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b78:	2101      	movs	r1, #1
 8003b7a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b7e:	605a      	str	r2, [r3, #4]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 2020 	strb.w	r2, [r3, #32]
 8003b90:	7bfb      	ldrb	r3, [r7, #15]
 8003b92:	4618      	mov	r0, r3
 8003b94:	3714      	adds	r7, #20
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bc80      	pop	{r7}
 8003b9a:	4770      	bx	lr

08003b9c <HAL_DMA_Abort_IT>:
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	73fb      	strb	r3, [r7, #15]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d005      	beq.n	8003bc0 <HAL_DMA_Abort_IT+0x24>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2204      	movs	r2, #4
 8003bb8:	639a      	str	r2, [r3, #56]	; 0x38
 8003bba:	2301      	movs	r3, #1
 8003bbc:	73fb      	strb	r3, [r7, #15]
 8003bbe:	e051      	b.n	8003c64 <HAL_DMA_Abort_IT+0xc8>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 020e 	bic.w	r2, r2, #14
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f022 0201 	bic.w	r2, r2, #1
 8003bde:	601a      	str	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a22      	ldr	r2, [pc, #136]	; (8003c70 <HAL_DMA_Abort_IT+0xd4>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d029      	beq.n	8003c3e <HAL_DMA_Abort_IT+0xa2>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a21      	ldr	r2, [pc, #132]	; (8003c74 <HAL_DMA_Abort_IT+0xd8>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d022      	beq.n	8003c3a <HAL_DMA_Abort_IT+0x9e>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a1f      	ldr	r2, [pc, #124]	; (8003c78 <HAL_DMA_Abort_IT+0xdc>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d01a      	beq.n	8003c34 <HAL_DMA_Abort_IT+0x98>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a1e      	ldr	r2, [pc, #120]	; (8003c7c <HAL_DMA_Abort_IT+0xe0>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d012      	beq.n	8003c2e <HAL_DMA_Abort_IT+0x92>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a1c      	ldr	r2, [pc, #112]	; (8003c80 <HAL_DMA_Abort_IT+0xe4>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d00a      	beq.n	8003c28 <HAL_DMA_Abort_IT+0x8c>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a1b      	ldr	r2, [pc, #108]	; (8003c84 <HAL_DMA_Abort_IT+0xe8>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d102      	bne.n	8003c22 <HAL_DMA_Abort_IT+0x86>
 8003c1c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003c20:	e00e      	b.n	8003c40 <HAL_DMA_Abort_IT+0xa4>
 8003c22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c26:	e00b      	b.n	8003c40 <HAL_DMA_Abort_IT+0xa4>
 8003c28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c2c:	e008      	b.n	8003c40 <HAL_DMA_Abort_IT+0xa4>
 8003c2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c32:	e005      	b.n	8003c40 <HAL_DMA_Abort_IT+0xa4>
 8003c34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c38:	e002      	b.n	8003c40 <HAL_DMA_Abort_IT+0xa4>
 8003c3a:	2310      	movs	r3, #16
 8003c3c:	e000      	b.n	8003c40 <HAL_DMA_Abort_IT+0xa4>
 8003c3e:	2301      	movs	r3, #1
 8003c40:	4a11      	ldr	r2, [pc, #68]	; (8003c88 <HAL_DMA_Abort_IT+0xec>)
 8003c42:	6053      	str	r3, [r2, #4]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 2020 	strb.w	r2, [r3, #32]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d003      	beq.n	8003c64 <HAL_DMA_Abort_IT+0xc8>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	4798      	blx	r3
 8003c64:	7bfb      	ldrb	r3, [r7, #15]
 8003c66:	4618      	mov	r0, r3
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	40020008 	.word	0x40020008
 8003c74:	4002001c 	.word	0x4002001c
 8003c78:	40020030 	.word	0x40020030
 8003c7c:	40020044 	.word	0x40020044
 8003c80:	40020058 	.word	0x40020058
 8003c84:	4002006c 	.word	0x4002006c
 8003c88:	40020000 	.word	0x40020000

08003c8c <HAL_GPIO_Init>:
 8003c8c:	b480      	push	{r7}
 8003c8e:	b08b      	sub	sp, #44	; 0x2c
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
 8003c96:	2300      	movs	r3, #0
 8003c98:	627b      	str	r3, [r7, #36]	; 0x24
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	623b      	str	r3, [r7, #32]
 8003c9e:	e169      	b.n	8003f74 <HAL_GPIO_Init+0x2e8>
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca8:	61fb      	str	r3, [r7, #28]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	69fa      	ldr	r2, [r7, #28]
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	61bb      	str	r3, [r7, #24]
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	f040 8158 	bne.w	8003f6e <HAL_GPIO_Init+0x2e2>
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	4a9a      	ldr	r2, [pc, #616]	; (8003f2c <HAL_GPIO_Init+0x2a0>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d05e      	beq.n	8003d86 <HAL_GPIO_Init+0xfa>
 8003cc8:	4a98      	ldr	r2, [pc, #608]	; (8003f2c <HAL_GPIO_Init+0x2a0>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d875      	bhi.n	8003dba <HAL_GPIO_Init+0x12e>
 8003cce:	4a98      	ldr	r2, [pc, #608]	; (8003f30 <HAL_GPIO_Init+0x2a4>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d058      	beq.n	8003d86 <HAL_GPIO_Init+0xfa>
 8003cd4:	4a96      	ldr	r2, [pc, #600]	; (8003f30 <HAL_GPIO_Init+0x2a4>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d86f      	bhi.n	8003dba <HAL_GPIO_Init+0x12e>
 8003cda:	4a96      	ldr	r2, [pc, #600]	; (8003f34 <HAL_GPIO_Init+0x2a8>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d052      	beq.n	8003d86 <HAL_GPIO_Init+0xfa>
 8003ce0:	4a94      	ldr	r2, [pc, #592]	; (8003f34 <HAL_GPIO_Init+0x2a8>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d869      	bhi.n	8003dba <HAL_GPIO_Init+0x12e>
 8003ce6:	4a94      	ldr	r2, [pc, #592]	; (8003f38 <HAL_GPIO_Init+0x2ac>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d04c      	beq.n	8003d86 <HAL_GPIO_Init+0xfa>
 8003cec:	4a92      	ldr	r2, [pc, #584]	; (8003f38 <HAL_GPIO_Init+0x2ac>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d863      	bhi.n	8003dba <HAL_GPIO_Init+0x12e>
 8003cf2:	4a92      	ldr	r2, [pc, #584]	; (8003f3c <HAL_GPIO_Init+0x2b0>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d046      	beq.n	8003d86 <HAL_GPIO_Init+0xfa>
 8003cf8:	4a90      	ldr	r2, [pc, #576]	; (8003f3c <HAL_GPIO_Init+0x2b0>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d85d      	bhi.n	8003dba <HAL_GPIO_Init+0x12e>
 8003cfe:	2b12      	cmp	r3, #18
 8003d00:	d82a      	bhi.n	8003d58 <HAL_GPIO_Init+0xcc>
 8003d02:	2b12      	cmp	r3, #18
 8003d04:	d859      	bhi.n	8003dba <HAL_GPIO_Init+0x12e>
 8003d06:	a201      	add	r2, pc, #4	; (adr r2, 8003d0c <HAL_GPIO_Init+0x80>)
 8003d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d0c:	08003d87 	.word	0x08003d87
 8003d10:	08003d61 	.word	0x08003d61
 8003d14:	08003d73 	.word	0x08003d73
 8003d18:	08003db5 	.word	0x08003db5
 8003d1c:	08003dbb 	.word	0x08003dbb
 8003d20:	08003dbb 	.word	0x08003dbb
 8003d24:	08003dbb 	.word	0x08003dbb
 8003d28:	08003dbb 	.word	0x08003dbb
 8003d2c:	08003dbb 	.word	0x08003dbb
 8003d30:	08003dbb 	.word	0x08003dbb
 8003d34:	08003dbb 	.word	0x08003dbb
 8003d38:	08003dbb 	.word	0x08003dbb
 8003d3c:	08003dbb 	.word	0x08003dbb
 8003d40:	08003dbb 	.word	0x08003dbb
 8003d44:	08003dbb 	.word	0x08003dbb
 8003d48:	08003dbb 	.word	0x08003dbb
 8003d4c:	08003dbb 	.word	0x08003dbb
 8003d50:	08003d69 	.word	0x08003d69
 8003d54:	08003d7d 	.word	0x08003d7d
 8003d58:	4a79      	ldr	r2, [pc, #484]	; (8003f40 <HAL_GPIO_Init+0x2b4>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d013      	beq.n	8003d86 <HAL_GPIO_Init+0xfa>
 8003d5e:	e02c      	b.n	8003dba <HAL_GPIO_Init+0x12e>
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	623b      	str	r3, [r7, #32]
 8003d66:	e029      	b.n	8003dbc <HAL_GPIO_Init+0x130>
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	623b      	str	r3, [r7, #32]
 8003d70:	e024      	b.n	8003dbc <HAL_GPIO_Init+0x130>
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	3308      	adds	r3, #8
 8003d78:	623b      	str	r3, [r7, #32]
 8003d7a:	e01f      	b.n	8003dbc <HAL_GPIO_Init+0x130>
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	330c      	adds	r3, #12
 8003d82:	623b      	str	r3, [r7, #32]
 8003d84:	e01a      	b.n	8003dbc <HAL_GPIO_Init+0x130>
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d102      	bne.n	8003d94 <HAL_GPIO_Init+0x108>
 8003d8e:	2304      	movs	r3, #4
 8003d90:	623b      	str	r3, [r7, #32]
 8003d92:	e013      	b.n	8003dbc <HAL_GPIO_Init+0x130>
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d105      	bne.n	8003da8 <HAL_GPIO_Init+0x11c>
 8003d9c:	2308      	movs	r3, #8
 8003d9e:	623b      	str	r3, [r7, #32]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	69fa      	ldr	r2, [r7, #28]
 8003da4:	611a      	str	r2, [r3, #16]
 8003da6:	e009      	b.n	8003dbc <HAL_GPIO_Init+0x130>
 8003da8:	2308      	movs	r3, #8
 8003daa:	623b      	str	r3, [r7, #32]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	69fa      	ldr	r2, [r7, #28]
 8003db0:	615a      	str	r2, [r3, #20]
 8003db2:	e003      	b.n	8003dbc <HAL_GPIO_Init+0x130>
 8003db4:	2300      	movs	r3, #0
 8003db6:	623b      	str	r3, [r7, #32]
 8003db8:	e000      	b.n	8003dbc <HAL_GPIO_Init+0x130>
 8003dba:	bf00      	nop
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	2bff      	cmp	r3, #255	; 0xff
 8003dc0:	d801      	bhi.n	8003dc6 <HAL_GPIO_Init+0x13a>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	e001      	b.n	8003dca <HAL_GPIO_Init+0x13e>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	3304      	adds	r3, #4
 8003dca:	617b      	str	r3, [r7, #20]
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	2bff      	cmp	r3, #255	; 0xff
 8003dd0:	d802      	bhi.n	8003dd8 <HAL_GPIO_Init+0x14c>
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	e002      	b.n	8003dde <HAL_GPIO_Init+0x152>
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	3b08      	subs	r3, #8
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	613b      	str	r3, [r7, #16]
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	210f      	movs	r1, #15
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dec:	43db      	mvns	r3, r3
 8003dee:	401a      	ands	r2, r3
 8003df0:	6a39      	ldr	r1, [r7, #32]
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	fa01 f303 	lsl.w	r3, r1, r3
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	601a      	str	r2, [r3, #0]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f000 80b1 	beq.w	8003f6e <HAL_GPIO_Init+0x2e2>
 8003e0c:	4b4d      	ldr	r3, [pc, #308]	; (8003f44 <HAL_GPIO_Init+0x2b8>)
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	4a4c      	ldr	r2, [pc, #304]	; (8003f44 <HAL_GPIO_Init+0x2b8>)
 8003e12:	f043 0301 	orr.w	r3, r3, #1
 8003e16:	6193      	str	r3, [r2, #24]
 8003e18:	4b4a      	ldr	r3, [pc, #296]	; (8003f44 <HAL_GPIO_Init+0x2b8>)
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	60bb      	str	r3, [r7, #8]
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	4a48      	ldr	r2, [pc, #288]	; (8003f48 <HAL_GPIO_Init+0x2bc>)
 8003e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e28:	089b      	lsrs	r3, r3, #2
 8003e2a:	3302      	adds	r3, #2
 8003e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e30:	60fb      	str	r3, [r7, #12]
 8003e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e34:	f003 0303 	and.w	r3, r3, #3
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	220f      	movs	r2, #15
 8003e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e40:	43db      	mvns	r3, r3
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	4013      	ands	r3, r2
 8003e46:	60fb      	str	r3, [r7, #12]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a40      	ldr	r2, [pc, #256]	; (8003f4c <HAL_GPIO_Init+0x2c0>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d013      	beq.n	8003e78 <HAL_GPIO_Init+0x1ec>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a3f      	ldr	r2, [pc, #252]	; (8003f50 <HAL_GPIO_Init+0x2c4>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d00d      	beq.n	8003e74 <HAL_GPIO_Init+0x1e8>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a3e      	ldr	r2, [pc, #248]	; (8003f54 <HAL_GPIO_Init+0x2c8>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d007      	beq.n	8003e70 <HAL_GPIO_Init+0x1e4>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a3d      	ldr	r2, [pc, #244]	; (8003f58 <HAL_GPIO_Init+0x2cc>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d101      	bne.n	8003e6c <HAL_GPIO_Init+0x1e0>
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e006      	b.n	8003e7a <HAL_GPIO_Init+0x1ee>
 8003e6c:	2304      	movs	r3, #4
 8003e6e:	e004      	b.n	8003e7a <HAL_GPIO_Init+0x1ee>
 8003e70:	2302      	movs	r3, #2
 8003e72:	e002      	b.n	8003e7a <HAL_GPIO_Init+0x1ee>
 8003e74:	2301      	movs	r3, #1
 8003e76:	e000      	b.n	8003e7a <HAL_GPIO_Init+0x1ee>
 8003e78:	2300      	movs	r3, #0
 8003e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e7c:	f002 0203 	and.w	r2, r2, #3
 8003e80:	0092      	lsls	r2, r2, #2
 8003e82:	4093      	lsls	r3, r2
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	60fb      	str	r3, [r7, #12]
 8003e8a:	492f      	ldr	r1, [pc, #188]	; (8003f48 <HAL_GPIO_Init+0x2bc>)
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	089b      	lsrs	r3, r3, #2
 8003e90:	3302      	adds	r3, #2
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d006      	beq.n	8003eb2 <HAL_GPIO_Init+0x226>
 8003ea4:	4b2d      	ldr	r3, [pc, #180]	; (8003f5c <HAL_GPIO_Init+0x2d0>)
 8003ea6:	689a      	ldr	r2, [r3, #8]
 8003ea8:	492c      	ldr	r1, [pc, #176]	; (8003f5c <HAL_GPIO_Init+0x2d0>)
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	608b      	str	r3, [r1, #8]
 8003eb0:	e006      	b.n	8003ec0 <HAL_GPIO_Init+0x234>
 8003eb2:	4b2a      	ldr	r3, [pc, #168]	; (8003f5c <HAL_GPIO_Init+0x2d0>)
 8003eb4:	689a      	ldr	r2, [r3, #8]
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	43db      	mvns	r3, r3
 8003eba:	4928      	ldr	r1, [pc, #160]	; (8003f5c <HAL_GPIO_Init+0x2d0>)
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	608b      	str	r3, [r1, #8]
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d006      	beq.n	8003eda <HAL_GPIO_Init+0x24e>
 8003ecc:	4b23      	ldr	r3, [pc, #140]	; (8003f5c <HAL_GPIO_Init+0x2d0>)
 8003ece:	68da      	ldr	r2, [r3, #12]
 8003ed0:	4922      	ldr	r1, [pc, #136]	; (8003f5c <HAL_GPIO_Init+0x2d0>)
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	60cb      	str	r3, [r1, #12]
 8003ed8:	e006      	b.n	8003ee8 <HAL_GPIO_Init+0x25c>
 8003eda:	4b20      	ldr	r3, [pc, #128]	; (8003f5c <HAL_GPIO_Init+0x2d0>)
 8003edc:	68da      	ldr	r2, [r3, #12]
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	43db      	mvns	r3, r3
 8003ee2:	491e      	ldr	r1, [pc, #120]	; (8003f5c <HAL_GPIO_Init+0x2d0>)
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	60cb      	str	r3, [r1, #12]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d006      	beq.n	8003f02 <HAL_GPIO_Init+0x276>
 8003ef4:	4b19      	ldr	r3, [pc, #100]	; (8003f5c <HAL_GPIO_Init+0x2d0>)
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	4918      	ldr	r1, [pc, #96]	; (8003f5c <HAL_GPIO_Init+0x2d0>)
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	604b      	str	r3, [r1, #4]
 8003f00:	e006      	b.n	8003f10 <HAL_GPIO_Init+0x284>
 8003f02:	4b16      	ldr	r3, [pc, #88]	; (8003f5c <HAL_GPIO_Init+0x2d0>)
 8003f04:	685a      	ldr	r2, [r3, #4]
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	43db      	mvns	r3, r3
 8003f0a:	4914      	ldr	r1, [pc, #80]	; (8003f5c <HAL_GPIO_Init+0x2d0>)
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	604b      	str	r3, [r1, #4]
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d021      	beq.n	8003f60 <HAL_GPIO_Init+0x2d4>
 8003f1c:	4b0f      	ldr	r3, [pc, #60]	; (8003f5c <HAL_GPIO_Init+0x2d0>)
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	490e      	ldr	r1, [pc, #56]	; (8003f5c <HAL_GPIO_Init+0x2d0>)
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	600b      	str	r3, [r1, #0]
 8003f28:	e021      	b.n	8003f6e <HAL_GPIO_Init+0x2e2>
 8003f2a:	bf00      	nop
 8003f2c:	10320000 	.word	0x10320000
 8003f30:	10310000 	.word	0x10310000
 8003f34:	10220000 	.word	0x10220000
 8003f38:	10210000 	.word	0x10210000
 8003f3c:	10120000 	.word	0x10120000
 8003f40:	10110000 	.word	0x10110000
 8003f44:	40021000 	.word	0x40021000
 8003f48:	40010000 	.word	0x40010000
 8003f4c:	40010800 	.word	0x40010800
 8003f50:	40010c00 	.word	0x40010c00
 8003f54:	40011000 	.word	0x40011000
 8003f58:	40011400 	.word	0x40011400
 8003f5c:	40010400 	.word	0x40010400
 8003f60:	4b0b      	ldr	r3, [pc, #44]	; (8003f90 <HAL_GPIO_Init+0x304>)
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	43db      	mvns	r3, r3
 8003f68:	4909      	ldr	r1, [pc, #36]	; (8003f90 <HAL_GPIO_Init+0x304>)
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	600b      	str	r3, [r1, #0]
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	3301      	adds	r3, #1
 8003f72:	627b      	str	r3, [r7, #36]	; 0x24
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f47f ae8e 	bne.w	8003ca0 <HAL_GPIO_Init+0x14>
 8003f84:	bf00      	nop
 8003f86:	bf00      	nop
 8003f88:	372c      	adds	r7, #44	; 0x2c
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bc80      	pop	{r7}
 8003f8e:	4770      	bx	lr
 8003f90:	40010400 	.word	0x40010400

08003f94 <HAL_GPIO_ReadPin>:
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	807b      	strh	r3, [r7, #2]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689a      	ldr	r2, [r3, #8]
 8003fa4:	887b      	ldrh	r3, [r7, #2]
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d002      	beq.n	8003fb2 <HAL_GPIO_ReadPin+0x1e>
 8003fac:	2301      	movs	r3, #1
 8003fae:	73fb      	strb	r3, [r7, #15]
 8003fb0:	e001      	b.n	8003fb6 <HAL_GPIO_ReadPin+0x22>
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	73fb      	strb	r3, [r7, #15]
 8003fb6:	7bfb      	ldrb	r3, [r7, #15]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3714      	adds	r7, #20
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bc80      	pop	{r7}
 8003fc0:	4770      	bx	lr

08003fc2 <HAL_GPIO_WritePin>:
 8003fc2:	b480      	push	{r7}
 8003fc4:	b083      	sub	sp, #12
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
 8003fca:	460b      	mov	r3, r1
 8003fcc:	807b      	strh	r3, [r7, #2]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	707b      	strb	r3, [r7, #1]
 8003fd2:	787b      	ldrb	r3, [r7, #1]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d003      	beq.n	8003fe0 <HAL_GPIO_WritePin+0x1e>
 8003fd8:	887a      	ldrh	r2, [r7, #2]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	611a      	str	r2, [r3, #16]
 8003fde:	e003      	b.n	8003fe8 <HAL_GPIO_WritePin+0x26>
 8003fe0:	887b      	ldrh	r3, [r7, #2]
 8003fe2:	041a      	lsls	r2, r3, #16
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	611a      	str	r2, [r3, #16]
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bc80      	pop	{r7}
 8003ff0:	4770      	bx	lr
	...

08003ff4 <HAL_I2C_Init>:
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <HAL_I2C_Init+0x12>
 8004002:	2301      	movs	r3, #1
 8004004:	e12b      	b.n	800425e <HAL_I2C_Init+0x26a>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d106      	bne.n	8004020 <HAL_I2C_Init+0x2c>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7fe ff86 	bl	8002f2c <HAL_I2C_MspInit>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2224      	movs	r2, #36	; 0x24
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f022 0201 	bic.w	r2, r2, #1
 8004036:	601a      	str	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	f002 f8aa 	bl	80061b0 <HAL_RCC_GetPCLK1Freq>
 800405c:	60f8      	str	r0, [r7, #12]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	4a81      	ldr	r2, [pc, #516]	; (8004268 <HAL_I2C_Init+0x274>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d807      	bhi.n	8004078 <HAL_I2C_Init+0x84>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4a80      	ldr	r2, [pc, #512]	; (800426c <HAL_I2C_Init+0x278>)
 800406c:	4293      	cmp	r3, r2
 800406e:	bf94      	ite	ls
 8004070:	2301      	movls	r3, #1
 8004072:	2300      	movhi	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	e006      	b.n	8004086 <HAL_I2C_Init+0x92>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	4a7d      	ldr	r2, [pc, #500]	; (8004270 <HAL_I2C_Init+0x27c>)
 800407c:	4293      	cmp	r3, r2
 800407e:	bf94      	ite	ls
 8004080:	2301      	movls	r3, #1
 8004082:	2300      	movhi	r3, #0
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <HAL_I2C_Init+0x9a>
 800408a:	2301      	movs	r3, #1
 800408c:	e0e7      	b.n	800425e <HAL_I2C_Init+0x26a>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	4a78      	ldr	r2, [pc, #480]	; (8004274 <HAL_I2C_Init+0x280>)
 8004092:	fba2 2303 	umull	r2, r3, r2, r3
 8004096:	0c9b      	lsrs	r3, r3, #18
 8004098:	60bb      	str	r3, [r7, #8]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	605a      	str	r2, [r3, #4]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	6a1b      	ldr	r3, [r3, #32]
 80040b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	4a6a      	ldr	r2, [pc, #424]	; (8004268 <HAL_I2C_Init+0x274>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d802      	bhi.n	80040c8 <HAL_I2C_Init+0xd4>
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	3301      	adds	r3, #1
 80040c6:	e009      	b.n	80040dc <HAL_I2C_Init+0xe8>
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80040ce:	fb02 f303 	mul.w	r3, r2, r3
 80040d2:	4a69      	ldr	r2, [pc, #420]	; (8004278 <HAL_I2C_Init+0x284>)
 80040d4:	fba2 2303 	umull	r2, r3, r2, r3
 80040d8:	099b      	lsrs	r3, r3, #6
 80040da:	3301      	adds	r3, #1
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	6812      	ldr	r2, [r2, #0]
 80040e0:	430b      	orrs	r3, r1
 80040e2:	6213      	str	r3, [r2, #32]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	69db      	ldr	r3, [r3, #28]
 80040ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80040ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	495c      	ldr	r1, [pc, #368]	; (8004268 <HAL_I2C_Init+0x274>)
 80040f8:	428b      	cmp	r3, r1
 80040fa:	d819      	bhi.n	8004130 <HAL_I2C_Init+0x13c>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	1e59      	subs	r1, r3, #1
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	fbb1 f3f3 	udiv	r3, r1, r3
 800410a:	1c59      	adds	r1, r3, #1
 800410c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004110:	400b      	ands	r3, r1
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00a      	beq.n	800412c <HAL_I2C_Init+0x138>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	1e59      	subs	r1, r3, #1
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	fbb1 f3f3 	udiv	r3, r1, r3
 8004124:	3301      	adds	r3, #1
 8004126:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800412a:	e051      	b.n	80041d0 <HAL_I2C_Init+0x1dc>
 800412c:	2304      	movs	r3, #4
 800412e:	e04f      	b.n	80041d0 <HAL_I2C_Init+0x1dc>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d111      	bne.n	800415c <HAL_I2C_Init+0x168>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	1e58      	subs	r0, r3, #1
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6859      	ldr	r1, [r3, #4]
 8004140:	460b      	mov	r3, r1
 8004142:	005b      	lsls	r3, r3, #1
 8004144:	440b      	add	r3, r1
 8004146:	fbb0 f3f3 	udiv	r3, r0, r3
 800414a:	3301      	adds	r3, #1
 800414c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004150:	2b00      	cmp	r3, #0
 8004152:	bf0c      	ite	eq
 8004154:	2301      	moveq	r3, #1
 8004156:	2300      	movne	r3, #0
 8004158:	b2db      	uxtb	r3, r3
 800415a:	e012      	b.n	8004182 <HAL_I2C_Init+0x18e>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	1e58      	subs	r0, r3, #1
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6859      	ldr	r1, [r3, #4]
 8004164:	460b      	mov	r3, r1
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	440b      	add	r3, r1
 800416a:	0099      	lsls	r1, r3, #2
 800416c:	440b      	add	r3, r1
 800416e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004172:	3301      	adds	r3, #1
 8004174:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004178:	2b00      	cmp	r3, #0
 800417a:	bf0c      	ite	eq
 800417c:	2301      	moveq	r3, #1
 800417e:	2300      	movne	r3, #0
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <HAL_I2C_Init+0x196>
 8004186:	2301      	movs	r3, #1
 8004188:	e022      	b.n	80041d0 <HAL_I2C_Init+0x1dc>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10e      	bne.n	80041b0 <HAL_I2C_Init+0x1bc>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	1e58      	subs	r0, r3, #1
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6859      	ldr	r1, [r3, #4]
 800419a:	460b      	mov	r3, r1
 800419c:	005b      	lsls	r3, r3, #1
 800419e:	440b      	add	r3, r1
 80041a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80041a4:	3301      	adds	r3, #1
 80041a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041ae:	e00f      	b.n	80041d0 <HAL_I2C_Init+0x1dc>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	1e58      	subs	r0, r3, #1
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6859      	ldr	r1, [r3, #4]
 80041b8:	460b      	mov	r3, r1
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	440b      	add	r3, r1
 80041be:	0099      	lsls	r1, r3, #2
 80041c0:	440b      	add	r3, r1
 80041c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80041c6:	3301      	adds	r3, #1
 80041c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041d0:	6879      	ldr	r1, [r7, #4]
 80041d2:	6809      	ldr	r1, [r1, #0]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	61cb      	str	r3, [r1, #28]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	69da      	ldr	r2, [r3, #28]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	431a      	orrs	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	430a      	orrs	r2, r1
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80041fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	6911      	ldr	r1, [r2, #16]
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	68d2      	ldr	r2, [r2, #12]
 800420a:	4311      	orrs	r1, r2
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	6812      	ldr	r2, [r2, #0]
 8004210:	430b      	orrs	r3, r1
 8004212:	6093      	str	r3, [r2, #8]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	695a      	ldr	r2, [r3, #20]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	431a      	orrs	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	430a      	orrs	r2, r1
 800422e:	60da      	str	r2, [r3, #12]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f042 0201 	orr.w	r2, r2, #1
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	641a      	str	r2, [r3, #64]	; 0x40
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2220      	movs	r2, #32
 800424a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	631a      	str	r2, [r3, #48]	; 0x30
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800425c:	2300      	movs	r3, #0
 800425e:	4618      	mov	r0, r3
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	000186a0 	.word	0x000186a0
 800426c:	001e847f 	.word	0x001e847f
 8004270:	003d08ff 	.word	0x003d08ff
 8004274:	431bde83 	.word	0x431bde83
 8004278:	10624dd3 	.word	0x10624dd3

0800427c <HAL_I2C_Master_Transmit>:
 800427c:	b580      	push	{r7, lr}
 800427e:	b088      	sub	sp, #32
 8004280:	af02      	add	r7, sp, #8
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	607a      	str	r2, [r7, #4]
 8004286:	461a      	mov	r2, r3
 8004288:	460b      	mov	r3, r1
 800428a:	817b      	strh	r3, [r7, #10]
 800428c:	4613      	mov	r3, r2
 800428e:	813b      	strh	r3, [r7, #8]
 8004290:	f7ff f8e0 	bl	8003454 <HAL_GetTick>
 8004294:	6178      	str	r0, [r7, #20]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b20      	cmp	r3, #32
 80042a0:	f040 80e0 	bne.w	8004464 <HAL_I2C_Master_Transmit+0x1e8>
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	9300      	str	r3, [sp, #0]
 80042a8:	2319      	movs	r3, #25
 80042aa:	2201      	movs	r2, #1
 80042ac:	4970      	ldr	r1, [pc, #448]	; (8004470 <HAL_I2C_Master_Transmit+0x1f4>)
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f001 f97e 	bl	80055b0 <I2C_WaitOnFlagUntilTimeout>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <HAL_I2C_Master_Transmit+0x42>
 80042ba:	2302      	movs	r3, #2
 80042bc:	e0d3      	b.n	8004466 <HAL_I2C_Master_Transmit+0x1ea>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d101      	bne.n	80042cc <HAL_I2C_Master_Transmit+0x50>
 80042c8:	2302      	movs	r3, #2
 80042ca:	e0cc      	b.n	8004466 <HAL_I2C_Master_Transmit+0x1ea>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d007      	beq.n	80042f2 <HAL_I2C_Master_Transmit+0x76>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f042 0201 	orr.w	r2, r2, #1
 80042f0:	601a      	str	r2, [r3, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004300:	601a      	str	r2, [r3, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2221      	movs	r2, #33	; 0x21
 8004306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2210      	movs	r2, #16
 800430e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	641a      	str	r2, [r3, #64]	; 0x40
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	625a      	str	r2, [r3, #36]	; 0x24
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	893a      	ldrh	r2, [r7, #8]
 8004322:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004328:	b29a      	uxth	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	851a      	strh	r2, [r3, #40]	; 0x28
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	4a50      	ldr	r2, [pc, #320]	; (8004474 <HAL_I2C_Master_Transmit+0x1f8>)
 8004332:	62da      	str	r2, [r3, #44]	; 0x2c
 8004334:	8979      	ldrh	r1, [r7, #10]
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	6a3a      	ldr	r2, [r7, #32]
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f000 fe6a 	bl	8005014 <I2C_MasterRequestWrite>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d001      	beq.n	800434a <HAL_I2C_Master_Transmit+0xce>
 8004346:	2301      	movs	r3, #1
 8004348:	e08d      	b.n	8004466 <HAL_I2C_Master_Transmit+0x1ea>
 800434a:	2300      	movs	r3, #0
 800434c:	613b      	str	r3, [r7, #16]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	613b      	str	r3, [r7, #16]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	613b      	str	r3, [r7, #16]
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	e066      	b.n	8004430 <HAL_I2C_Master_Transmit+0x1b4>
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	6a39      	ldr	r1, [r7, #32]
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f001 fa3c 	bl	80057e4 <I2C_WaitOnTXEFlagUntilTimeout>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00d      	beq.n	800438e <HAL_I2C_Master_Transmit+0x112>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004376:	2b04      	cmp	r3, #4
 8004378:	d107      	bne.n	800438a <HAL_I2C_Master_Transmit+0x10e>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004388:	601a      	str	r2, [r3, #0]
 800438a:	2301      	movs	r3, #1
 800438c:	e06b      	b.n	8004466 <HAL_I2C_Master_Transmit+0x1ea>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004392:	781a      	ldrb	r2, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	611a      	str	r2, [r3, #16]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439e:	1c5a      	adds	r2, r3, #1
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	625a      	str	r2, [r3, #36]	; 0x24
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	3b01      	subs	r3, #1
 80043ac:	b29a      	uxth	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b6:	3b01      	subs	r3, #1
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	851a      	strh	r2, [r3, #40]	; 0x28
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	f003 0304 	and.w	r3, r3, #4
 80043c8:	2b04      	cmp	r3, #4
 80043ca:	d11b      	bne.n	8004404 <HAL_I2C_Master_Transmit+0x188>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d017      	beq.n	8004404 <HAL_I2C_Master_Transmit+0x188>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d8:	781a      	ldrb	r2, [r3, #0]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	611a      	str	r2, [r3, #16]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e4:	1c5a      	adds	r2, r3, #1
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	625a      	str	r2, [r3, #36]	; 0x24
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	3b01      	subs	r3, #1
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043fc:	3b01      	subs	r3, #1
 80043fe:	b29a      	uxth	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	851a      	strh	r2, [r3, #40]	; 0x28
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	6a39      	ldr	r1, [r7, #32]
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f001 fa33 	bl	8005874 <I2C_WaitOnBTFFlagUntilTimeout>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00d      	beq.n	8004430 <HAL_I2C_Master_Transmit+0x1b4>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004418:	2b04      	cmp	r3, #4
 800441a:	d107      	bne.n	800442c <HAL_I2C_Master_Transmit+0x1b0>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800442a:	601a      	str	r2, [r3, #0]
 800442c:	2301      	movs	r3, #1
 800442e:	e01a      	b.n	8004466 <HAL_I2C_Master_Transmit+0x1ea>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004434:	2b00      	cmp	r3, #0
 8004436:	d194      	bne.n	8004362 <HAL_I2C_Master_Transmit+0xe6>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004446:	601a      	str	r2, [r3, #0]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2220      	movs	r2, #32
 800444c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004460:	2300      	movs	r3, #0
 8004462:	e000      	b.n	8004466 <HAL_I2C_Master_Transmit+0x1ea>
 8004464:	2302      	movs	r3, #2
 8004466:	4618      	mov	r0, r3
 8004468:	3718      	adds	r7, #24
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	00100002 	.word	0x00100002
 8004474:	ffff0000 	.word	0xffff0000

08004478 <HAL_I2C_Master_Receive>:
 8004478:	b580      	push	{r7, lr}
 800447a:	b08c      	sub	sp, #48	; 0x30
 800447c:	af02      	add	r7, sp, #8
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	607a      	str	r2, [r7, #4]
 8004482:	461a      	mov	r2, r3
 8004484:	460b      	mov	r3, r1
 8004486:	817b      	strh	r3, [r7, #10]
 8004488:	4613      	mov	r3, r2
 800448a:	813b      	strh	r3, [r7, #8]
 800448c:	2300      	movs	r3, #0
 800448e:	623b      	str	r3, [r7, #32]
 8004490:	f7fe ffe0 	bl	8003454 <HAL_GetTick>
 8004494:	6278      	str	r0, [r7, #36]	; 0x24
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b20      	cmp	r3, #32
 80044a0:	f040 824b 	bne.w	800493a <HAL_I2C_Master_Receive+0x4c2>
 80044a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a6:	9300      	str	r3, [sp, #0]
 80044a8:	2319      	movs	r3, #25
 80044aa:	2201      	movs	r2, #1
 80044ac:	497f      	ldr	r1, [pc, #508]	; (80046ac <HAL_I2C_Master_Receive+0x234>)
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f001 f87e 	bl	80055b0 <I2C_WaitOnFlagUntilTimeout>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <HAL_I2C_Master_Receive+0x46>
 80044ba:	2302      	movs	r3, #2
 80044bc:	e23e      	b.n	800493c <HAL_I2C_Master_Receive+0x4c4>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d101      	bne.n	80044cc <HAL_I2C_Master_Receive+0x54>
 80044c8:	2302      	movs	r3, #2
 80044ca:	e237      	b.n	800493c <HAL_I2C_Master_Receive+0x4c4>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d007      	beq.n	80044f2 <HAL_I2C_Master_Receive+0x7a>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f042 0201 	orr.w	r2, r2, #1
 80044f0:	601a      	str	r2, [r3, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004500:	601a      	str	r2, [r3, #0]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2222      	movs	r2, #34	; 0x22
 8004506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2210      	movs	r2, #16
 800450e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	641a      	str	r2, [r3, #64]	; 0x40
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	625a      	str	r2, [r3, #36]	; 0x24
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	893a      	ldrh	r2, [r7, #8]
 8004522:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004528:	b29a      	uxth	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	851a      	strh	r2, [r3, #40]	; 0x28
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	4a5f      	ldr	r2, [pc, #380]	; (80046b0 <HAL_I2C_Master_Receive+0x238>)
 8004532:	62da      	str	r2, [r3, #44]	; 0x2c
 8004534:	8979      	ldrh	r1, [r7, #10]
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	f000 fdec 	bl	8005118 <I2C_MasterRequestRead>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <HAL_I2C_Master_Receive+0xd2>
 8004546:	2301      	movs	r3, #1
 8004548:	e1f8      	b.n	800493c <HAL_I2C_Master_Receive+0x4c4>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800454e:	2b00      	cmp	r3, #0
 8004550:	d113      	bne.n	800457a <HAL_I2C_Master_Receive+0x102>
 8004552:	2300      	movs	r3, #0
 8004554:	61fb      	str	r3, [r7, #28]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	695b      	ldr	r3, [r3, #20]
 800455c:	61fb      	str	r3, [r7, #28]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	61fb      	str	r3, [r7, #28]
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004576:	601a      	str	r2, [r3, #0]
 8004578:	e1cc      	b.n	8004914 <HAL_I2C_Master_Receive+0x49c>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800457e:	2b01      	cmp	r3, #1
 8004580:	d11e      	bne.n	80045c0 <HAL_I2C_Master_Receive+0x148>
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004590:	601a      	str	r2, [r3, #0]
 8004592:	b672      	cpsid	i
 8004594:	bf00      	nop
 8004596:	2300      	movs	r3, #0
 8004598:	61bb      	str	r3, [r7, #24]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	61bb      	str	r3, [r7, #24]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	61bb      	str	r3, [r7, #24]
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045ba:	601a      	str	r2, [r3, #0]
 80045bc:	b662      	cpsie	i
 80045be:	e035      	b.n	800462c <HAL_I2C_Master_Receive+0x1b4>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d11e      	bne.n	8004606 <HAL_I2C_Master_Receive+0x18e>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045d6:	601a      	str	r2, [r3, #0]
 80045d8:	b672      	cpsid	i
 80045da:	bf00      	nop
 80045dc:	2300      	movs	r3, #0
 80045de:	617b      	str	r3, [r7, #20]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	617b      	str	r3, [r7, #20]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	617b      	str	r3, [r7, #20]
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004600:	601a      	str	r2, [r3, #0]
 8004602:	b662      	cpsie	i
 8004604:	e012      	b.n	800462c <HAL_I2C_Master_Receive+0x1b4>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004614:	601a      	str	r2, [r3, #0]
 8004616:	2300      	movs	r3, #0
 8004618:	613b      	str	r3, [r7, #16]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	613b      	str	r3, [r7, #16]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	613b      	str	r3, [r7, #16]
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	e172      	b.n	8004914 <HAL_I2C_Master_Receive+0x49c>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004632:	2b03      	cmp	r3, #3
 8004634:	f200 811f 	bhi.w	8004876 <HAL_I2C_Master_Receive+0x3fe>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800463c:	2b01      	cmp	r3, #1
 800463e:	d123      	bne.n	8004688 <HAL_I2C_Master_Receive+0x210>
 8004640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004642:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f001 f95d 	bl	8005904 <I2C_WaitOnRXNEFlagUntilTimeout>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d001      	beq.n	8004654 <HAL_I2C_Master_Receive+0x1dc>
 8004650:	2301      	movs	r3, #1
 8004652:	e173      	b.n	800493c <HAL_I2C_Master_Receive+0x4c4>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	691a      	ldr	r2, [r3, #16]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465e:	b2d2      	uxtb	r2, r2
 8004660:	701a      	strb	r2, [r3, #0]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004666:	1c5a      	adds	r2, r3, #1
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	625a      	str	r2, [r3, #36]	; 0x24
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004670:	3b01      	subs	r3, #1
 8004672:	b29a      	uxth	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	851a      	strh	r2, [r3, #40]	; 0x28
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800467c:	b29b      	uxth	r3, r3
 800467e:	3b01      	subs	r3, #1
 8004680:	b29a      	uxth	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004686:	e145      	b.n	8004914 <HAL_I2C_Master_Receive+0x49c>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800468c:	2b02      	cmp	r3, #2
 800468e:	d152      	bne.n	8004736 <HAL_I2C_Master_Receive+0x2be>
 8004690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004692:	9300      	str	r3, [sp, #0]
 8004694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004696:	2200      	movs	r2, #0
 8004698:	4906      	ldr	r1, [pc, #24]	; (80046b4 <HAL_I2C_Master_Receive+0x23c>)
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f000 ff88 	bl	80055b0 <I2C_WaitOnFlagUntilTimeout>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d008      	beq.n	80046b8 <HAL_I2C_Master_Receive+0x240>
 80046a6:	2301      	movs	r3, #1
 80046a8:	e148      	b.n	800493c <HAL_I2C_Master_Receive+0x4c4>
 80046aa:	bf00      	nop
 80046ac:	00100002 	.word	0x00100002
 80046b0:	ffff0000 	.word	0xffff0000
 80046b4:	00010004 	.word	0x00010004
 80046b8:	b672      	cpsid	i
 80046ba:	bf00      	nop
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046ca:	601a      	str	r2, [r3, #0]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	691a      	ldr	r2, [r3, #16]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d6:	b2d2      	uxtb	r2, r2
 80046d8:	701a      	strb	r2, [r3, #0]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046de:	1c5a      	adds	r2, r3, #1
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	625a      	str	r2, [r3, #36]	; 0x24
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046e8:	3b01      	subs	r3, #1
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	851a      	strh	r2, [r3, #40]	; 0x28
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	3b01      	subs	r3, #1
 80046f8:	b29a      	uxth	r2, r3
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046fe:	b662      	cpsie	i
 8004700:	bf00      	nop
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	691a      	ldr	r2, [r3, #16]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470c:	b2d2      	uxtb	r2, r2
 800470e:	701a      	strb	r2, [r3, #0]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004714:	1c5a      	adds	r2, r3, #1
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	625a      	str	r2, [r3, #36]	; 0x24
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800471e:	3b01      	subs	r3, #1
 8004720:	b29a      	uxth	r2, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	851a      	strh	r2, [r3, #40]	; 0x28
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800472a:	b29b      	uxth	r3, r3
 800472c:	3b01      	subs	r3, #1
 800472e:	b29a      	uxth	r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004734:	e0ee      	b.n	8004914 <HAL_I2C_Master_Receive+0x49c>
 8004736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004738:	9300      	str	r3, [sp, #0]
 800473a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473c:	2200      	movs	r2, #0
 800473e:	4981      	ldr	r1, [pc, #516]	; (8004944 <HAL_I2C_Master_Receive+0x4cc>)
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	f000 ff35 	bl	80055b0 <I2C_WaitOnFlagUntilTimeout>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d001      	beq.n	8004750 <HAL_I2C_Master_Receive+0x2d8>
 800474c:	2301      	movs	r3, #1
 800474e:	e0f5      	b.n	800493c <HAL_I2C_Master_Receive+0x4c4>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800475e:	601a      	str	r2, [r3, #0]
 8004760:	b672      	cpsid	i
 8004762:	bf00      	nop
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	691a      	ldr	r2, [r3, #16]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476e:	b2d2      	uxtb	r2, r2
 8004770:	701a      	strb	r2, [r3, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004776:	1c5a      	adds	r2, r3, #1
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	625a      	str	r2, [r3, #36]	; 0x24
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004780:	3b01      	subs	r3, #1
 8004782:	b29a      	uxth	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	851a      	strh	r2, [r3, #40]	; 0x28
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800478c:	b29b      	uxth	r3, r3
 800478e:	3b01      	subs	r3, #1
 8004790:	b29a      	uxth	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004796:	4b6c      	ldr	r3, [pc, #432]	; (8004948 <HAL_I2C_Master_Receive+0x4d0>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	08db      	lsrs	r3, r3, #3
 800479c:	4a6b      	ldr	r2, [pc, #428]	; (800494c <HAL_I2C_Master_Receive+0x4d4>)
 800479e:	fba2 2303 	umull	r2, r3, r2, r3
 80047a2:	0a1a      	lsrs	r2, r3, #8
 80047a4:	4613      	mov	r3, r2
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	4413      	add	r3, r2
 80047aa:	00da      	lsls	r2, r3, #3
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	623b      	str	r3, [r7, #32]
 80047b0:	6a3b      	ldr	r3, [r7, #32]
 80047b2:	3b01      	subs	r3, #1
 80047b4:	623b      	str	r3, [r7, #32]
 80047b6:	6a3b      	ldr	r3, [r7, #32]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d118      	bne.n	80047ee <HAL_I2C_Master_Receive+0x376>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	631a      	str	r2, [r3, #48]	; 0x30
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2220      	movs	r2, #32
 80047c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d6:	f043 0220 	orr.w	r2, r3, #32
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	641a      	str	r2, [r3, #64]	; 0x40
 80047de:	b662      	cpsie	i
 80047e0:	bf00      	nop
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80047ea:	2301      	movs	r3, #1
 80047ec:	e0a6      	b.n	800493c <HAL_I2C_Master_Receive+0x4c4>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	695b      	ldr	r3, [r3, #20]
 80047f4:	f003 0304 	and.w	r3, r3, #4
 80047f8:	2b04      	cmp	r3, #4
 80047fa:	d1d9      	bne.n	80047b0 <HAL_I2C_Master_Receive+0x338>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800480a:	601a      	str	r2, [r3, #0]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	691a      	ldr	r2, [r3, #16]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004816:	b2d2      	uxtb	r2, r2
 8004818:	701a      	strb	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481e:	1c5a      	adds	r2, r3, #1
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	625a      	str	r2, [r3, #36]	; 0x24
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004828:	3b01      	subs	r3, #1
 800482a:	b29a      	uxth	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	851a      	strh	r2, [r3, #40]	; 0x28
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004834:	b29b      	uxth	r3, r3
 8004836:	3b01      	subs	r3, #1
 8004838:	b29a      	uxth	r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800483e:	b662      	cpsie	i
 8004840:	bf00      	nop
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	691a      	ldr	r2, [r3, #16]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484c:	b2d2      	uxtb	r2, r2
 800484e:	701a      	strb	r2, [r3, #0]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004854:	1c5a      	adds	r2, r3, #1
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	625a      	str	r2, [r3, #36]	; 0x24
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800485e:	3b01      	subs	r3, #1
 8004860:	b29a      	uxth	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	851a      	strh	r2, [r3, #40]	; 0x28
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800486a:	b29b      	uxth	r3, r3
 800486c:	3b01      	subs	r3, #1
 800486e:	b29a      	uxth	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004874:	e04e      	b.n	8004914 <HAL_I2C_Master_Receive+0x49c>
 8004876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004878:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f001 f842 	bl	8005904 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d001      	beq.n	800488a <HAL_I2C_Master_Receive+0x412>
 8004886:	2301      	movs	r3, #1
 8004888:	e058      	b.n	800493c <HAL_I2C_Master_Receive+0x4c4>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	691a      	ldr	r2, [r3, #16]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004894:	b2d2      	uxtb	r2, r2
 8004896:	701a      	strb	r2, [r3, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489c:	1c5a      	adds	r2, r3, #1
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	625a      	str	r2, [r3, #36]	; 0x24
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048a6:	3b01      	subs	r3, #1
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	851a      	strh	r2, [r3, #40]	; 0x28
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	3b01      	subs	r3, #1
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	f003 0304 	and.w	r3, r3, #4
 80048c6:	2b04      	cmp	r3, #4
 80048c8:	d124      	bne.n	8004914 <HAL_I2C_Master_Receive+0x49c>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ce:	2b03      	cmp	r3, #3
 80048d0:	d107      	bne.n	80048e2 <HAL_I2C_Master_Receive+0x46a>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048e0:	601a      	str	r2, [r3, #0]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	691a      	ldr	r2, [r3, #16]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ec:	b2d2      	uxtb	r2, r2
 80048ee:	701a      	strb	r2, [r3, #0]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f4:	1c5a      	adds	r2, r3, #1
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	625a      	str	r2, [r3, #36]	; 0x24
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048fe:	3b01      	subs	r3, #1
 8004900:	b29a      	uxth	r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	851a      	strh	r2, [r3, #40]	; 0x28
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800490a:	b29b      	uxth	r3, r3
 800490c:	3b01      	subs	r3, #1
 800490e:	b29a      	uxth	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004918:	2b00      	cmp	r3, #0
 800491a:	f47f ae88 	bne.w	800462e <HAL_I2C_Master_Receive+0x1b6>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2220      	movs	r2, #32
 8004922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004936:	2300      	movs	r3, #0
 8004938:	e000      	b.n	800493c <HAL_I2C_Master_Receive+0x4c4>
 800493a:	2302      	movs	r3, #2
 800493c:	4618      	mov	r0, r3
 800493e:	3728      	adds	r7, #40	; 0x28
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	00010004 	.word	0x00010004
 8004948:	20000000 	.word	0x20000000
 800494c:	14f8b589 	.word	0x14f8b589

08004950 <HAL_I2C_Mem_Write>:
 8004950:	b580      	push	{r7, lr}
 8004952:	b088      	sub	sp, #32
 8004954:	af02      	add	r7, sp, #8
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	4608      	mov	r0, r1
 800495a:	4611      	mov	r1, r2
 800495c:	461a      	mov	r2, r3
 800495e:	4603      	mov	r3, r0
 8004960:	817b      	strh	r3, [r7, #10]
 8004962:	460b      	mov	r3, r1
 8004964:	813b      	strh	r3, [r7, #8]
 8004966:	4613      	mov	r3, r2
 8004968:	80fb      	strh	r3, [r7, #6]
 800496a:	f7fe fd73 	bl	8003454 <HAL_GetTick>
 800496e:	6178      	str	r0, [r7, #20]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004976:	b2db      	uxtb	r3, r3
 8004978:	2b20      	cmp	r3, #32
 800497a:	f040 80d9 	bne.w	8004b30 <HAL_I2C_Mem_Write+0x1e0>
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	9300      	str	r3, [sp, #0]
 8004982:	2319      	movs	r3, #25
 8004984:	2201      	movs	r2, #1
 8004986:	496d      	ldr	r1, [pc, #436]	; (8004b3c <HAL_I2C_Mem_Write+0x1ec>)
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f000 fe11 	bl	80055b0 <I2C_WaitOnFlagUntilTimeout>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d001      	beq.n	8004998 <HAL_I2C_Mem_Write+0x48>
 8004994:	2302      	movs	r3, #2
 8004996:	e0cc      	b.n	8004b32 <HAL_I2C_Mem_Write+0x1e2>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d101      	bne.n	80049a6 <HAL_I2C_Mem_Write+0x56>
 80049a2:	2302      	movs	r3, #2
 80049a4:	e0c5      	b.n	8004b32 <HAL_I2C_Mem_Write+0x1e2>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2201      	movs	r2, #1
 80049aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d007      	beq.n	80049cc <HAL_I2C_Mem_Write+0x7c>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f042 0201 	orr.w	r2, r2, #1
 80049ca:	601a      	str	r2, [r3, #0]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049da:	601a      	str	r2, [r3, #0]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2221      	movs	r2, #33	; 0x21
 80049e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2240      	movs	r2, #64	; 0x40
 80049e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	641a      	str	r2, [r3, #64]	; 0x40
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6a3a      	ldr	r2, [r7, #32]
 80049f6:	625a      	str	r2, [r3, #36]	; 0x24
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80049fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	851a      	strh	r2, [r3, #40]	; 0x28
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	4a4d      	ldr	r2, [pc, #308]	; (8004b40 <HAL_I2C_Mem_Write+0x1f0>)
 8004a0c:	62da      	str	r2, [r3, #44]	; 0x2c
 8004a0e:	88f8      	ldrh	r0, [r7, #6]
 8004a10:	893a      	ldrh	r2, [r7, #8]
 8004a12:	8979      	ldrh	r1, [r7, #10]
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	9301      	str	r3, [sp, #4]
 8004a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1a:	9300      	str	r3, [sp, #0]
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	68f8      	ldr	r0, [r7, #12]
 8004a20:	f000 fc48 	bl	80052b4 <I2C_RequestMemoryWrite>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d052      	beq.n	8004ad0 <HAL_I2C_Mem_Write+0x180>
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e081      	b.n	8004b32 <HAL_I2C_Mem_Write+0x1e2>
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f000 fed6 	bl	80057e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00d      	beq.n	8004a5a <HAL_I2C_Mem_Write+0x10a>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	2b04      	cmp	r3, #4
 8004a44:	d107      	bne.n	8004a56 <HAL_I2C_Mem_Write+0x106>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a54:	601a      	str	r2, [r3, #0]
 8004a56:	2301      	movs	r3, #1
 8004a58:	e06b      	b.n	8004b32 <HAL_I2C_Mem_Write+0x1e2>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5e:	781a      	ldrb	r2, [r3, #0]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	611a      	str	r2, [r3, #16]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6a:	1c5a      	adds	r2, r3, #1
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	625a      	str	r2, [r3, #36]	; 0x24
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a74:	3b01      	subs	r3, #1
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	851a      	strh	r2, [r3, #40]	; 0x28
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	3b01      	subs	r3, #1
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	695b      	ldr	r3, [r3, #20]
 8004a90:	f003 0304 	and.w	r3, r3, #4
 8004a94:	2b04      	cmp	r3, #4
 8004a96:	d11b      	bne.n	8004ad0 <HAL_I2C_Mem_Write+0x180>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d017      	beq.n	8004ad0 <HAL_I2C_Mem_Write+0x180>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa4:	781a      	ldrb	r2, [r3, #0]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	611a      	str	r2, [r3, #16]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab0:	1c5a      	adds	r2, r3, #1
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	625a      	str	r2, [r3, #36]	; 0x24
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aba:	3b01      	subs	r3, #1
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	851a      	strh	r2, [r3, #40]	; 0x28
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1aa      	bne.n	8004a2e <HAL_I2C_Mem_Write+0xde>
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f000 fec9 	bl	8005874 <I2C_WaitOnBTFFlagUntilTimeout>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00d      	beq.n	8004b04 <HAL_I2C_Mem_Write+0x1b4>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aec:	2b04      	cmp	r3, #4
 8004aee:	d107      	bne.n	8004b00 <HAL_I2C_Mem_Write+0x1b0>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004afe:	601a      	str	r2, [r3, #0]
 8004b00:	2301      	movs	r3, #1
 8004b02:	e016      	b.n	8004b32 <HAL_I2C_Mem_Write+0x1e2>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b12:	601a      	str	r2, [r3, #0]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2220      	movs	r2, #32
 8004b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	e000      	b.n	8004b32 <HAL_I2C_Mem_Write+0x1e2>
 8004b30:	2302      	movs	r3, #2
 8004b32:	4618      	mov	r0, r3
 8004b34:	3718      	adds	r7, #24
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	00100002 	.word	0x00100002
 8004b40:	ffff0000 	.word	0xffff0000

08004b44 <HAL_I2C_Mem_Read>:
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b08c      	sub	sp, #48	; 0x30
 8004b48:	af02      	add	r7, sp, #8
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	4608      	mov	r0, r1
 8004b4e:	4611      	mov	r1, r2
 8004b50:	461a      	mov	r2, r3
 8004b52:	4603      	mov	r3, r0
 8004b54:	817b      	strh	r3, [r7, #10]
 8004b56:	460b      	mov	r3, r1
 8004b58:	813b      	strh	r3, [r7, #8]
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	80fb      	strh	r3, [r7, #6]
 8004b5e:	2300      	movs	r3, #0
 8004b60:	623b      	str	r3, [r7, #32]
 8004b62:	f7fe fc77 	bl	8003454 <HAL_GetTick>
 8004b66:	6278      	str	r0, [r7, #36]	; 0x24
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	2b20      	cmp	r3, #32
 8004b72:	f040 8244 	bne.w	8004ffe <HAL_I2C_Mem_Read+0x4ba>
 8004b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	2319      	movs	r3, #25
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	4982      	ldr	r1, [pc, #520]	; (8004d88 <HAL_I2C_Mem_Read+0x244>)
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f000 fd15 	bl	80055b0 <I2C_WaitOnFlagUntilTimeout>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d001      	beq.n	8004b90 <HAL_I2C_Mem_Read+0x4c>
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	e237      	b.n	8005000 <HAL_I2C_Mem_Read+0x4bc>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d101      	bne.n	8004b9e <HAL_I2C_Mem_Read+0x5a>
 8004b9a:	2302      	movs	r3, #2
 8004b9c:	e230      	b.n	8005000 <HAL_I2C_Mem_Read+0x4bc>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0301 	and.w	r3, r3, #1
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d007      	beq.n	8004bc4 <HAL_I2C_Mem_Read+0x80>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f042 0201 	orr.w	r2, r2, #1
 8004bc2:	601a      	str	r2, [r3, #0]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bd2:	601a      	str	r2, [r3, #0]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2222      	movs	r2, #34	; 0x22
 8004bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2240      	movs	r2, #64	; 0x40
 8004be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	641a      	str	r2, [r3, #64]	; 0x40
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bee:	625a      	str	r2, [r3, #36]	; 0x24
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004bf4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bfa:	b29a      	uxth	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	851a      	strh	r2, [r3, #40]	; 0x28
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	4a62      	ldr	r2, [pc, #392]	; (8004d8c <HAL_I2C_Mem_Read+0x248>)
 8004c04:	62da      	str	r2, [r3, #44]	; 0x2c
 8004c06:	88f8      	ldrh	r0, [r7, #6]
 8004c08:	893a      	ldrh	r2, [r7, #8]
 8004c0a:	8979      	ldrh	r1, [r7, #10]
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0e:	9301      	str	r3, [sp, #4]
 8004c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	4603      	mov	r3, r0
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f000 fbe2 	bl	80053e0 <I2C_RequestMemoryRead>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <HAL_I2C_Mem_Read+0xe2>
 8004c22:	2301      	movs	r3, #1
 8004c24:	e1ec      	b.n	8005000 <HAL_I2C_Mem_Read+0x4bc>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d113      	bne.n	8004c56 <HAL_I2C_Mem_Read+0x112>
 8004c2e:	2300      	movs	r3, #0
 8004c30:	61fb      	str	r3, [r7, #28]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	61fb      	str	r3, [r7, #28]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	61fb      	str	r3, [r7, #28]
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c52:	601a      	str	r2, [r3, #0]
 8004c54:	e1c0      	b.n	8004fd8 <HAL_I2C_Mem_Read+0x494>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d11e      	bne.n	8004c9c <HAL_I2C_Mem_Read+0x158>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c6c:	601a      	str	r2, [r3, #0]
 8004c6e:	b672      	cpsid	i
 8004c70:	bf00      	nop
 8004c72:	2300      	movs	r3, #0
 8004c74:	61bb      	str	r3, [r7, #24]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	695b      	ldr	r3, [r3, #20]
 8004c7c:	61bb      	str	r3, [r7, #24]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	61bb      	str	r3, [r7, #24]
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c96:	601a      	str	r2, [r3, #0]
 8004c98:	b662      	cpsie	i
 8004c9a:	e035      	b.n	8004d08 <HAL_I2C_Mem_Read+0x1c4>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d11e      	bne.n	8004ce2 <HAL_I2C_Mem_Read+0x19e>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cb2:	601a      	str	r2, [r3, #0]
 8004cb4:	b672      	cpsid	i
 8004cb6:	bf00      	nop
 8004cb8:	2300      	movs	r3, #0
 8004cba:	617b      	str	r3, [r7, #20]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	617b      	str	r3, [r7, #20]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	617b      	str	r3, [r7, #20]
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cdc:	601a      	str	r2, [r3, #0]
 8004cde:	b662      	cpsie	i
 8004ce0:	e012      	b.n	8004d08 <HAL_I2C_Mem_Read+0x1c4>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004cf0:	601a      	str	r2, [r3, #0]
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	613b      	str	r3, [r7, #16]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	695b      	ldr	r3, [r3, #20]
 8004cfc:	613b      	str	r3, [r7, #16]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	613b      	str	r3, [r7, #16]
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	e166      	b.n	8004fd8 <HAL_I2C_Mem_Read+0x494>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d0e:	2b03      	cmp	r3, #3
 8004d10:	f200 811f 	bhi.w	8004f52 <HAL_I2C_Mem_Read+0x40e>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d123      	bne.n	8004d64 <HAL_I2C_Mem_Read+0x220>
 8004d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	f000 fdef 	bl	8005904 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d001      	beq.n	8004d30 <HAL_I2C_Mem_Read+0x1ec>
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e167      	b.n	8005000 <HAL_I2C_Mem_Read+0x4bc>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	691a      	ldr	r2, [r3, #16]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3a:	b2d2      	uxtb	r2, r2
 8004d3c:	701a      	strb	r2, [r3, #0]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d42:	1c5a      	adds	r2, r3, #1
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	625a      	str	r2, [r3, #36]	; 0x24
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	851a      	strh	r2, [r3, #40]	; 0x28
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d62:	e139      	b.n	8004fd8 <HAL_I2C_Mem_Read+0x494>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d152      	bne.n	8004e12 <HAL_I2C_Mem_Read+0x2ce>
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6e:	9300      	str	r3, [sp, #0]
 8004d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d72:	2200      	movs	r2, #0
 8004d74:	4906      	ldr	r1, [pc, #24]	; (8004d90 <HAL_I2C_Mem_Read+0x24c>)
 8004d76:	68f8      	ldr	r0, [r7, #12]
 8004d78:	f000 fc1a 	bl	80055b0 <I2C_WaitOnFlagUntilTimeout>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d008      	beq.n	8004d94 <HAL_I2C_Mem_Read+0x250>
 8004d82:	2301      	movs	r3, #1
 8004d84:	e13c      	b.n	8005000 <HAL_I2C_Mem_Read+0x4bc>
 8004d86:	bf00      	nop
 8004d88:	00100002 	.word	0x00100002
 8004d8c:	ffff0000 	.word	0xffff0000
 8004d90:	00010004 	.word	0x00010004
 8004d94:	b672      	cpsid	i
 8004d96:	bf00      	nop
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004da6:	601a      	str	r2, [r3, #0]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	691a      	ldr	r2, [r3, #16]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db2:	b2d2      	uxtb	r2, r2
 8004db4:	701a      	strb	r2, [r3, #0]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dba:	1c5a      	adds	r2, r3, #1
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	625a      	str	r2, [r3, #36]	; 0x24
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	851a      	strh	r2, [r3, #40]	; 0x28
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004dda:	b662      	cpsie	i
 8004ddc:	bf00      	nop
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	691a      	ldr	r2, [r3, #16]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de8:	b2d2      	uxtb	r2, r2
 8004dea:	701a      	strb	r2, [r3, #0]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df0:	1c5a      	adds	r2, r3, #1
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	625a      	str	r2, [r3, #36]	; 0x24
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	b29a      	uxth	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	851a      	strh	r2, [r3, #40]	; 0x28
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	b29a      	uxth	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e10:	e0e2      	b.n	8004fd8 <HAL_I2C_Mem_Read+0x494>
 8004e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e14:	9300      	str	r3, [sp, #0]
 8004e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e18:	2200      	movs	r2, #0
 8004e1a:	497b      	ldr	r1, [pc, #492]	; (8005008 <HAL_I2C_Mem_Read+0x4c4>)
 8004e1c:	68f8      	ldr	r0, [r7, #12]
 8004e1e:	f000 fbc7 	bl	80055b0 <I2C_WaitOnFlagUntilTimeout>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d001      	beq.n	8004e2c <HAL_I2C_Mem_Read+0x2e8>
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e0e9      	b.n	8005000 <HAL_I2C_Mem_Read+0x4bc>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e3a:	601a      	str	r2, [r3, #0]
 8004e3c:	b672      	cpsid	i
 8004e3e:	bf00      	nop
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	691a      	ldr	r2, [r3, #16]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4a:	b2d2      	uxtb	r2, r2
 8004e4c:	701a      	strb	r2, [r3, #0]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e52:	1c5a      	adds	r2, r3, #1
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	625a      	str	r2, [r3, #36]	; 0x24
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	851a      	strh	r2, [r3, #40]	; 0x28
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e72:	4b66      	ldr	r3, [pc, #408]	; (800500c <HAL_I2C_Mem_Read+0x4c8>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	08db      	lsrs	r3, r3, #3
 8004e78:	4a65      	ldr	r2, [pc, #404]	; (8005010 <HAL_I2C_Mem_Read+0x4cc>)
 8004e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7e:	0a1a      	lsrs	r2, r3, #8
 8004e80:	4613      	mov	r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	4413      	add	r3, r2
 8004e86:	00da      	lsls	r2, r3, #3
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	623b      	str	r3, [r7, #32]
 8004e8c:	6a3b      	ldr	r3, [r7, #32]
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	623b      	str	r3, [r7, #32]
 8004e92:	6a3b      	ldr	r3, [r7, #32]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d118      	bne.n	8004eca <HAL_I2C_Mem_Read+0x386>
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	631a      	str	r2, [r3, #48]	; 0x30
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2220      	movs	r2, #32
 8004ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb2:	f043 0220 	orr.w	r2, r3, #32
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	641a      	str	r2, [r3, #64]	; 0x40
 8004eba:	b662      	cpsie	i
 8004ebc:	bf00      	nop
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e09a      	b.n	8005000 <HAL_I2C_Mem_Read+0x4bc>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	f003 0304 	and.w	r3, r3, #4
 8004ed4:	2b04      	cmp	r3, #4
 8004ed6:	d1d9      	bne.n	8004e8c <HAL_I2C_Mem_Read+0x348>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ee6:	601a      	str	r2, [r3, #0]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	691a      	ldr	r2, [r3, #16]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef2:	b2d2      	uxtb	r2, r2
 8004ef4:	701a      	strb	r2, [r3, #0]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efa:	1c5a      	adds	r2, r3, #1
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	625a      	str	r2, [r3, #36]	; 0x24
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f04:	3b01      	subs	r3, #1
 8004f06:	b29a      	uxth	r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	851a      	strh	r2, [r3, #40]	; 0x28
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	3b01      	subs	r3, #1
 8004f14:	b29a      	uxth	r2, r3
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f1a:	b662      	cpsie	i
 8004f1c:	bf00      	nop
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	691a      	ldr	r2, [r3, #16]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f28:	b2d2      	uxtb	r2, r2
 8004f2a:	701a      	strb	r2, [r3, #0]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f30:	1c5a      	adds	r2, r3, #1
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	625a      	str	r2, [r3, #36]	; 0x24
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	851a      	strh	r2, [r3, #40]	; 0x28
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f50:	e042      	b.n	8004fd8 <HAL_I2C_Mem_Read+0x494>
 8004f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f000 fcd4 	bl	8005904 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d001      	beq.n	8004f66 <HAL_I2C_Mem_Read+0x422>
 8004f62:	2301      	movs	r3, #1
 8004f64:	e04c      	b.n	8005000 <HAL_I2C_Mem_Read+0x4bc>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	691a      	ldr	r2, [r3, #16]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f70:	b2d2      	uxtb	r2, r2
 8004f72:	701a      	strb	r2, [r3, #0]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f78:	1c5a      	adds	r2, r3, #1
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	625a      	str	r2, [r3, #36]	; 0x24
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f82:	3b01      	subs	r3, #1
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	851a      	strh	r2, [r3, #40]	; 0x28
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	3b01      	subs	r3, #1
 8004f92:	b29a      	uxth	r2, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	f003 0304 	and.w	r3, r3, #4
 8004fa2:	2b04      	cmp	r3, #4
 8004fa4:	d118      	bne.n	8004fd8 <HAL_I2C_Mem_Read+0x494>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	691a      	ldr	r2, [r3, #16]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb0:	b2d2      	uxtb	r2, r2
 8004fb2:	701a      	strb	r2, [r3, #0]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb8:	1c5a      	adds	r2, r3, #1
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	625a      	str	r2, [r3, #36]	; 0x24
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	b29a      	uxth	r2, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	851a      	strh	r2, [r3, #40]	; 0x28
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f47f ae94 	bne.w	8004d0a <HAL_I2C_Mem_Read+0x1c6>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2220      	movs	r2, #32
 8004fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	e000      	b.n	8005000 <HAL_I2C_Mem_Read+0x4bc>
 8004ffe:	2302      	movs	r3, #2
 8005000:	4618      	mov	r0, r3
 8005002:	3728      	adds	r7, #40	; 0x28
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	00010004 	.word	0x00010004
 800500c:	20000000 	.word	0x20000000
 8005010:	14f8b589 	.word	0x14f8b589

08005014 <I2C_MasterRequestWrite>:
 8005014:	b580      	push	{r7, lr}
 8005016:	b088      	sub	sp, #32
 8005018:	af02      	add	r7, sp, #8
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	607a      	str	r2, [r7, #4]
 800501e:	603b      	str	r3, [r7, #0]
 8005020:	460b      	mov	r3, r1
 8005022:	817b      	strh	r3, [r7, #10]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005028:	617b      	str	r3, [r7, #20]
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	2b08      	cmp	r3, #8
 800502e:	d006      	beq.n	800503e <I2C_MasterRequestWrite+0x2a>
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	2b01      	cmp	r3, #1
 8005034:	d003      	beq.n	800503e <I2C_MasterRequestWrite+0x2a>
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800503c:	d108      	bne.n	8005050 <I2C_MasterRequestWrite+0x3c>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800504c:	601a      	str	r2, [r3, #0]
 800504e:	e00b      	b.n	8005068 <I2C_MasterRequestWrite+0x54>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005054:	2b12      	cmp	r3, #18
 8005056:	d107      	bne.n	8005068 <I2C_MasterRequestWrite+0x54>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005066:	601a      	str	r2, [r3, #0]
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	9300      	str	r3, [sp, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f000 fa9b 	bl	80055b0 <I2C_WaitOnFlagUntilTimeout>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d00d      	beq.n	800509c <I2C_MasterRequestWrite+0x88>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800508a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800508e:	d103      	bne.n	8005098 <I2C_MasterRequestWrite+0x84>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005096:	641a      	str	r2, [r3, #64]	; 0x40
 8005098:	2303      	movs	r3, #3
 800509a:	e035      	b.n	8005108 <I2C_MasterRequestWrite+0xf4>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050a4:	d108      	bne.n	80050b8 <I2C_MasterRequestWrite+0xa4>
 80050a6:	897b      	ldrh	r3, [r7, #10]
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	461a      	mov	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80050b4:	611a      	str	r2, [r3, #16]
 80050b6:	e01b      	b.n	80050f0 <I2C_MasterRequestWrite+0xdc>
 80050b8:	897b      	ldrh	r3, [r7, #10]
 80050ba:	11db      	asrs	r3, r3, #7
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	f003 0306 	and.w	r3, r3, #6
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	f063 030f 	orn	r3, r3, #15
 80050c8:	b2da      	uxtb	r2, r3
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	611a      	str	r2, [r3, #16]
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	490e      	ldr	r1, [pc, #56]	; (8005110 <I2C_MasterRequestWrite+0xfc>)
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	f000 fae4 	bl	80056a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d001      	beq.n	80050e6 <I2C_MasterRequestWrite+0xd2>
 80050e2:	2301      	movs	r3, #1
 80050e4:	e010      	b.n	8005108 <I2C_MasterRequestWrite+0xf4>
 80050e6:	897b      	ldrh	r3, [r7, #10]
 80050e8:	b2da      	uxtb	r2, r3
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	611a      	str	r2, [r3, #16]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	4907      	ldr	r1, [pc, #28]	; (8005114 <I2C_MasterRequestWrite+0x100>)
 80050f6:	68f8      	ldr	r0, [r7, #12]
 80050f8:	f000 fad4 	bl	80056a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d001      	beq.n	8005106 <I2C_MasterRequestWrite+0xf2>
 8005102:	2301      	movs	r3, #1
 8005104:	e000      	b.n	8005108 <I2C_MasterRequestWrite+0xf4>
 8005106:	2300      	movs	r3, #0
 8005108:	4618      	mov	r0, r3
 800510a:	3718      	adds	r7, #24
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	00010008 	.word	0x00010008
 8005114:	00010002 	.word	0x00010002

08005118 <I2C_MasterRequestRead>:
 8005118:	b580      	push	{r7, lr}
 800511a:	b088      	sub	sp, #32
 800511c:	af02      	add	r7, sp, #8
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	607a      	str	r2, [r7, #4]
 8005122:	603b      	str	r3, [r7, #0]
 8005124:	460b      	mov	r3, r1
 8005126:	817b      	strh	r3, [r7, #10]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512c:	617b      	str	r3, [r7, #20]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800513c:	601a      	str	r2, [r3, #0]
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	2b08      	cmp	r3, #8
 8005142:	d006      	beq.n	8005152 <I2C_MasterRequestRead+0x3a>
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	2b01      	cmp	r3, #1
 8005148:	d003      	beq.n	8005152 <I2C_MasterRequestRead+0x3a>
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005150:	d108      	bne.n	8005164 <I2C_MasterRequestRead+0x4c>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005160:	601a      	str	r2, [r3, #0]
 8005162:	e00b      	b.n	800517c <I2C_MasterRequestRead+0x64>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005168:	2b11      	cmp	r3, #17
 800516a:	d107      	bne.n	800517c <I2C_MasterRequestRead+0x64>
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800517a:	601a      	str	r2, [r3, #0]
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	9300      	str	r3, [sp, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f000 fa11 	bl	80055b0 <I2C_WaitOnFlagUntilTimeout>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00d      	beq.n	80051b0 <I2C_MasterRequestRead+0x98>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800519e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051a2:	d103      	bne.n	80051ac <I2C_MasterRequestRead+0x94>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051aa:	641a      	str	r2, [r3, #64]	; 0x40
 80051ac:	2303      	movs	r3, #3
 80051ae:	e079      	b.n	80052a4 <I2C_MasterRequestRead+0x18c>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051b8:	d108      	bne.n	80051cc <I2C_MasterRequestRead+0xb4>
 80051ba:	897b      	ldrh	r3, [r7, #10]
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	f043 0301 	orr.w	r3, r3, #1
 80051c2:	b2da      	uxtb	r2, r3
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	611a      	str	r2, [r3, #16]
 80051ca:	e05f      	b.n	800528c <I2C_MasterRequestRead+0x174>
 80051cc:	897b      	ldrh	r3, [r7, #10]
 80051ce:	11db      	asrs	r3, r3, #7
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	f003 0306 	and.w	r3, r3, #6
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	f063 030f 	orn	r3, r3, #15
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	611a      	str	r2, [r3, #16]
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	4930      	ldr	r1, [pc, #192]	; (80052ac <I2C_MasterRequestRead+0x194>)
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	f000 fa5a 	bl	80056a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d001      	beq.n	80051fa <I2C_MasterRequestRead+0xe2>
 80051f6:	2301      	movs	r3, #1
 80051f8:	e054      	b.n	80052a4 <I2C_MasterRequestRead+0x18c>
 80051fa:	897b      	ldrh	r3, [r7, #10]
 80051fc:	b2da      	uxtb	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	611a      	str	r2, [r3, #16]
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	4929      	ldr	r1, [pc, #164]	; (80052b0 <I2C_MasterRequestRead+0x198>)
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	f000 fa4a 	bl	80056a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d001      	beq.n	800521a <I2C_MasterRequestRead+0x102>
 8005216:	2301      	movs	r3, #1
 8005218:	e044      	b.n	80052a4 <I2C_MasterRequestRead+0x18c>
 800521a:	2300      	movs	r3, #0
 800521c:	613b      	str	r3, [r7, #16]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	695b      	ldr	r3, [r3, #20]
 8005224:	613b      	str	r3, [r7, #16]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	613b      	str	r3, [r7, #16]
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800523e:	601a      	str	r2, [r3, #0]
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	9300      	str	r3, [sp, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800524c:	68f8      	ldr	r0, [r7, #12]
 800524e:	f000 f9af 	bl	80055b0 <I2C_WaitOnFlagUntilTimeout>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00d      	beq.n	8005274 <I2C_MasterRequestRead+0x15c>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005262:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005266:	d103      	bne.n	8005270 <I2C_MasterRequestRead+0x158>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800526e:	641a      	str	r2, [r3, #64]	; 0x40
 8005270:	2303      	movs	r3, #3
 8005272:	e017      	b.n	80052a4 <I2C_MasterRequestRead+0x18c>
 8005274:	897b      	ldrh	r3, [r7, #10]
 8005276:	11db      	asrs	r3, r3, #7
 8005278:	b2db      	uxtb	r3, r3
 800527a:	f003 0306 	and.w	r3, r3, #6
 800527e:	b2db      	uxtb	r3, r3
 8005280:	f063 030e 	orn	r3, r3, #14
 8005284:	b2da      	uxtb	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	611a      	str	r2, [r3, #16]
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	4907      	ldr	r1, [pc, #28]	; (80052b0 <I2C_MasterRequestRead+0x198>)
 8005292:	68f8      	ldr	r0, [r7, #12]
 8005294:	f000 fa06 	bl	80056a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <I2C_MasterRequestRead+0x18a>
 800529e:	2301      	movs	r3, #1
 80052a0:	e000      	b.n	80052a4 <I2C_MasterRequestRead+0x18c>
 80052a2:	2300      	movs	r3, #0
 80052a4:	4618      	mov	r0, r3
 80052a6:	3718      	adds	r7, #24
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	00010008 	.word	0x00010008
 80052b0:	00010002 	.word	0x00010002

080052b4 <I2C_RequestMemoryWrite>:
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b088      	sub	sp, #32
 80052b8:	af02      	add	r7, sp, #8
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	4608      	mov	r0, r1
 80052be:	4611      	mov	r1, r2
 80052c0:	461a      	mov	r2, r3
 80052c2:	4603      	mov	r3, r0
 80052c4:	817b      	strh	r3, [r7, #10]
 80052c6:	460b      	mov	r3, r1
 80052c8:	813b      	strh	r3, [r7, #8]
 80052ca:	4613      	mov	r3, r2
 80052cc:	80fb      	strh	r3, [r7, #6]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052dc:	601a      	str	r2, [r3, #0]
 80052de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e0:	9300      	str	r3, [sp, #0]
 80052e2:	6a3b      	ldr	r3, [r7, #32]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	f000 f960 	bl	80055b0 <I2C_WaitOnFlagUntilTimeout>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00d      	beq.n	8005312 <I2C_RequestMemoryWrite+0x5e>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005300:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005304:	d103      	bne.n	800530e <I2C_RequestMemoryWrite+0x5a>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f44f 7200 	mov.w	r2, #512	; 0x200
 800530c:	641a      	str	r2, [r3, #64]	; 0x40
 800530e:	2303      	movs	r3, #3
 8005310:	e05f      	b.n	80053d2 <I2C_RequestMemoryWrite+0x11e>
 8005312:	897b      	ldrh	r3, [r7, #10]
 8005314:	b2db      	uxtb	r3, r3
 8005316:	461a      	mov	r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005320:	611a      	str	r2, [r3, #16]
 8005322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005324:	6a3a      	ldr	r2, [r7, #32]
 8005326:	492d      	ldr	r1, [pc, #180]	; (80053dc <I2C_RequestMemoryWrite+0x128>)
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	f000 f9bb 	bl	80056a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d001      	beq.n	8005338 <I2C_RequestMemoryWrite+0x84>
 8005334:	2301      	movs	r3, #1
 8005336:	e04c      	b.n	80053d2 <I2C_RequestMemoryWrite+0x11e>
 8005338:	2300      	movs	r3, #0
 800533a:	617b      	str	r3, [r7, #20]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	617b      	str	r3, [r7, #20]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	617b      	str	r3, [r7, #20]
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005350:	6a39      	ldr	r1, [r7, #32]
 8005352:	68f8      	ldr	r0, [r7, #12]
 8005354:	f000 fa46 	bl	80057e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00d      	beq.n	800537a <I2C_RequestMemoryWrite+0xc6>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005362:	2b04      	cmp	r3, #4
 8005364:	d107      	bne.n	8005376 <I2C_RequestMemoryWrite+0xc2>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005374:	601a      	str	r2, [r3, #0]
 8005376:	2301      	movs	r3, #1
 8005378:	e02b      	b.n	80053d2 <I2C_RequestMemoryWrite+0x11e>
 800537a:	88fb      	ldrh	r3, [r7, #6]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d105      	bne.n	800538c <I2C_RequestMemoryWrite+0xd8>
 8005380:	893b      	ldrh	r3, [r7, #8]
 8005382:	b2da      	uxtb	r2, r3
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	611a      	str	r2, [r3, #16]
 800538a:	e021      	b.n	80053d0 <I2C_RequestMemoryWrite+0x11c>
 800538c:	893b      	ldrh	r3, [r7, #8]
 800538e:	0a1b      	lsrs	r3, r3, #8
 8005390:	b29b      	uxth	r3, r3
 8005392:	b2da      	uxtb	r2, r3
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	611a      	str	r2, [r3, #16]
 800539a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800539c:	6a39      	ldr	r1, [r7, #32]
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	f000 fa20 	bl	80057e4 <I2C_WaitOnTXEFlagUntilTimeout>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00d      	beq.n	80053c6 <I2C_RequestMemoryWrite+0x112>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ae:	2b04      	cmp	r3, #4
 80053b0:	d107      	bne.n	80053c2 <I2C_RequestMemoryWrite+0x10e>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053c0:	601a      	str	r2, [r3, #0]
 80053c2:	2301      	movs	r3, #1
 80053c4:	e005      	b.n	80053d2 <I2C_RequestMemoryWrite+0x11e>
 80053c6:	893b      	ldrh	r3, [r7, #8]
 80053c8:	b2da      	uxtb	r2, r3
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	611a      	str	r2, [r3, #16]
 80053d0:	2300      	movs	r3, #0
 80053d2:	4618      	mov	r0, r3
 80053d4:	3718      	adds	r7, #24
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	00010002 	.word	0x00010002

080053e0 <I2C_RequestMemoryRead>:
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b088      	sub	sp, #32
 80053e4:	af02      	add	r7, sp, #8
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	4608      	mov	r0, r1
 80053ea:	4611      	mov	r1, r2
 80053ec:	461a      	mov	r2, r3
 80053ee:	4603      	mov	r3, r0
 80053f0:	817b      	strh	r3, [r7, #10]
 80053f2:	460b      	mov	r3, r1
 80053f4:	813b      	strh	r3, [r7, #8]
 80053f6:	4613      	mov	r3, r2
 80053f8:	80fb      	strh	r3, [r7, #6]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005408:	601a      	str	r2, [r3, #0]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005418:	601a      	str	r2, [r3, #0]
 800541a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541c:	9300      	str	r3, [sp, #0]
 800541e:	6a3b      	ldr	r3, [r7, #32]
 8005420:	2200      	movs	r2, #0
 8005422:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f000 f8c2 	bl	80055b0 <I2C_WaitOnFlagUntilTimeout>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00d      	beq.n	800544e <I2C_RequestMemoryRead+0x6e>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800543c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005440:	d103      	bne.n	800544a <I2C_RequestMemoryRead+0x6a>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005448:	641a      	str	r2, [r3, #64]	; 0x40
 800544a:	2303      	movs	r3, #3
 800544c:	e0aa      	b.n	80055a4 <I2C_RequestMemoryRead+0x1c4>
 800544e:	897b      	ldrh	r3, [r7, #10]
 8005450:	b2db      	uxtb	r3, r3
 8005452:	461a      	mov	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800545c:	611a      	str	r2, [r3, #16]
 800545e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005460:	6a3a      	ldr	r2, [r7, #32]
 8005462:	4952      	ldr	r1, [pc, #328]	; (80055ac <I2C_RequestMemoryRead+0x1cc>)
 8005464:	68f8      	ldr	r0, [r7, #12]
 8005466:	f000 f91d 	bl	80056a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d001      	beq.n	8005474 <I2C_RequestMemoryRead+0x94>
 8005470:	2301      	movs	r3, #1
 8005472:	e097      	b.n	80055a4 <I2C_RequestMemoryRead+0x1c4>
 8005474:	2300      	movs	r3, #0
 8005476:	617b      	str	r3, [r7, #20]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	695b      	ldr	r3, [r3, #20]
 800547e:	617b      	str	r3, [r7, #20]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	699b      	ldr	r3, [r3, #24]
 8005486:	617b      	str	r3, [r7, #20]
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800548c:	6a39      	ldr	r1, [r7, #32]
 800548e:	68f8      	ldr	r0, [r7, #12]
 8005490:	f000 f9a8 	bl	80057e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00d      	beq.n	80054b6 <I2C_RequestMemoryRead+0xd6>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549e:	2b04      	cmp	r3, #4
 80054a0:	d107      	bne.n	80054b2 <I2C_RequestMemoryRead+0xd2>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054b0:	601a      	str	r2, [r3, #0]
 80054b2:	2301      	movs	r3, #1
 80054b4:	e076      	b.n	80055a4 <I2C_RequestMemoryRead+0x1c4>
 80054b6:	88fb      	ldrh	r3, [r7, #6]
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d105      	bne.n	80054c8 <I2C_RequestMemoryRead+0xe8>
 80054bc:	893b      	ldrh	r3, [r7, #8]
 80054be:	b2da      	uxtb	r2, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	611a      	str	r2, [r3, #16]
 80054c6:	e021      	b.n	800550c <I2C_RequestMemoryRead+0x12c>
 80054c8:	893b      	ldrh	r3, [r7, #8]
 80054ca:	0a1b      	lsrs	r3, r3, #8
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	b2da      	uxtb	r2, r3
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	611a      	str	r2, [r3, #16]
 80054d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054d8:	6a39      	ldr	r1, [r7, #32]
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f000 f982 	bl	80057e4 <I2C_WaitOnTXEFlagUntilTimeout>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00d      	beq.n	8005502 <I2C_RequestMemoryRead+0x122>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ea:	2b04      	cmp	r3, #4
 80054ec:	d107      	bne.n	80054fe <I2C_RequestMemoryRead+0x11e>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054fc:	601a      	str	r2, [r3, #0]
 80054fe:	2301      	movs	r3, #1
 8005500:	e050      	b.n	80055a4 <I2C_RequestMemoryRead+0x1c4>
 8005502:	893b      	ldrh	r3, [r7, #8]
 8005504:	b2da      	uxtb	r2, r3
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	611a      	str	r2, [r3, #16]
 800550c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800550e:	6a39      	ldr	r1, [r7, #32]
 8005510:	68f8      	ldr	r0, [r7, #12]
 8005512:	f000 f967 	bl	80057e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d00d      	beq.n	8005538 <I2C_RequestMemoryRead+0x158>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005520:	2b04      	cmp	r3, #4
 8005522:	d107      	bne.n	8005534 <I2C_RequestMemoryRead+0x154>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005532:	601a      	str	r2, [r3, #0]
 8005534:	2301      	movs	r3, #1
 8005536:	e035      	b.n	80055a4 <I2C_RequestMemoryRead+0x1c4>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005546:	601a      	str	r2, [r3, #0]
 8005548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554a:	9300      	str	r3, [sp, #0]
 800554c:	6a3b      	ldr	r3, [r7, #32]
 800554e:	2200      	movs	r2, #0
 8005550:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005554:	68f8      	ldr	r0, [r7, #12]
 8005556:	f000 f82b 	bl	80055b0 <I2C_WaitOnFlagUntilTimeout>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00d      	beq.n	800557c <I2C_RequestMemoryRead+0x19c>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800556a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800556e:	d103      	bne.n	8005578 <I2C_RequestMemoryRead+0x198>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005576:	641a      	str	r2, [r3, #64]	; 0x40
 8005578:	2303      	movs	r3, #3
 800557a:	e013      	b.n	80055a4 <I2C_RequestMemoryRead+0x1c4>
 800557c:	897b      	ldrh	r3, [r7, #10]
 800557e:	b2db      	uxtb	r3, r3
 8005580:	f043 0301 	orr.w	r3, r3, #1
 8005584:	b2da      	uxtb	r2, r3
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	611a      	str	r2, [r3, #16]
 800558c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558e:	6a3a      	ldr	r2, [r7, #32]
 8005590:	4906      	ldr	r1, [pc, #24]	; (80055ac <I2C_RequestMemoryRead+0x1cc>)
 8005592:	68f8      	ldr	r0, [r7, #12]
 8005594:	f000 f886 	bl	80056a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d001      	beq.n	80055a2 <I2C_RequestMemoryRead+0x1c2>
 800559e:	2301      	movs	r3, #1
 80055a0:	e000      	b.n	80055a4 <I2C_RequestMemoryRead+0x1c4>
 80055a2:	2300      	movs	r3, #0
 80055a4:	4618      	mov	r0, r3
 80055a6:	3718      	adds	r7, #24
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	00010002 	.word	0x00010002

080055b0 <I2C_WaitOnFlagUntilTimeout>:
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	603b      	str	r3, [r7, #0]
 80055bc:	4613      	mov	r3, r2
 80055be:	71fb      	strb	r3, [r7, #7]
 80055c0:	e048      	b.n	8005654 <I2C_WaitOnFlagUntilTimeout+0xa4>
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c8:	d044      	beq.n	8005654 <I2C_WaitOnFlagUntilTimeout+0xa4>
 80055ca:	f7fd ff43 	bl	8003454 <HAL_GetTick>
 80055ce:	4602      	mov	r2, r0
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	683a      	ldr	r2, [r7, #0]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d302      	bcc.n	80055e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d139      	bne.n	8005654 <I2C_WaitOnFlagUntilTimeout+0xa4>
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	0c1b      	lsrs	r3, r3, #16
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d10d      	bne.n	8005606 <I2C_WaitOnFlagUntilTimeout+0x56>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	695b      	ldr	r3, [r3, #20]
 80055f0:	43da      	mvns	r2, r3
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	4013      	ands	r3, r2
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	bf0c      	ite	eq
 80055fc:	2301      	moveq	r3, #1
 80055fe:	2300      	movne	r3, #0
 8005600:	b2db      	uxtb	r3, r3
 8005602:	461a      	mov	r2, r3
 8005604:	e00c      	b.n	8005620 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	699b      	ldr	r3, [r3, #24]
 800560c:	43da      	mvns	r2, r3
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	4013      	ands	r3, r2
 8005612:	b29b      	uxth	r3, r3
 8005614:	2b00      	cmp	r3, #0
 8005616:	bf0c      	ite	eq
 8005618:	2301      	moveq	r3, #1
 800561a:	2300      	movne	r3, #0
 800561c:	b2db      	uxtb	r3, r3
 800561e:	461a      	mov	r2, r3
 8005620:	79fb      	ldrb	r3, [r7, #7]
 8005622:	429a      	cmp	r2, r3
 8005624:	d116      	bne.n	8005654 <I2C_WaitOnFlagUntilTimeout+0xa4>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	631a      	str	r2, [r3, #48]	; 0x30
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2220      	movs	r2, #32
 8005630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005640:	f043 0220 	orr.w	r2, r3, #32
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	641a      	str	r2, [r3, #64]	; 0x40
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005650:	2301      	movs	r3, #1
 8005652:	e023      	b.n	800569c <I2C_WaitOnFlagUntilTimeout+0xec>
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	0c1b      	lsrs	r3, r3, #16
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b01      	cmp	r3, #1
 800565c:	d10d      	bne.n	800567a <I2C_WaitOnFlagUntilTimeout+0xca>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	43da      	mvns	r2, r3
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	4013      	ands	r3, r2
 800566a:	b29b      	uxth	r3, r3
 800566c:	2b00      	cmp	r3, #0
 800566e:	bf0c      	ite	eq
 8005670:	2301      	moveq	r3, #1
 8005672:	2300      	movne	r3, #0
 8005674:	b2db      	uxtb	r3, r3
 8005676:	461a      	mov	r2, r3
 8005678:	e00c      	b.n	8005694 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	43da      	mvns	r2, r3
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	4013      	ands	r3, r2
 8005686:	b29b      	uxth	r3, r3
 8005688:	2b00      	cmp	r3, #0
 800568a:	bf0c      	ite	eq
 800568c:	2301      	moveq	r3, #1
 800568e:	2300      	movne	r3, #0
 8005690:	b2db      	uxtb	r3, r3
 8005692:	461a      	mov	r2, r3
 8005694:	79fb      	ldrb	r3, [r7, #7]
 8005696:	429a      	cmp	r2, r3
 8005698:	d093      	beq.n	80055c2 <I2C_WaitOnFlagUntilTimeout+0x12>
 800569a:	2300      	movs	r3, #0
 800569c:	4618      	mov	r0, r3
 800569e:	3710      	adds	r7, #16
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	607a      	str	r2, [r7, #4]
 80056b0:	603b      	str	r3, [r7, #0]
 80056b2:	e071      	b.n	8005798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056c2:	d123      	bne.n	800570c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056d2:	601a      	str	r2, [r3, #0]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056dc:	615a      	str	r2, [r3, #20]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	631a      	str	r2, [r3, #48]	; 0x30
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2220      	movs	r2, #32
 80056e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f8:	f043 0204 	orr.w	r2, r3, #4
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	641a      	str	r2, [r3, #64]	; 0x40
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005708:	2301      	movs	r3, #1
 800570a:	e067      	b.n	80057dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005712:	d041      	beq.n	8005798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 8005714:	f7fd fe9e 	bl	8003454 <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	429a      	cmp	r2, r3
 8005722:	d302      	bcc.n	800572a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d136      	bne.n	8005798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	0c1b      	lsrs	r3, r3, #16
 800572e:	b2db      	uxtb	r3, r3
 8005730:	2b01      	cmp	r3, #1
 8005732:	d10c      	bne.n	800574e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	695b      	ldr	r3, [r3, #20]
 800573a:	43da      	mvns	r2, r3
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	4013      	ands	r3, r2
 8005740:	b29b      	uxth	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	bf14      	ite	ne
 8005746:	2301      	movne	r3, #1
 8005748:	2300      	moveq	r3, #0
 800574a:	b2db      	uxtb	r3, r3
 800574c:	e00b      	b.n	8005766 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	43da      	mvns	r2, r3
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	4013      	ands	r3, r2
 800575a:	b29b      	uxth	r3, r3
 800575c:	2b00      	cmp	r3, #0
 800575e:	bf14      	ite	ne
 8005760:	2301      	movne	r3, #1
 8005762:	2300      	moveq	r3, #0
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d016      	beq.n	8005798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	631a      	str	r2, [r3, #48]	; 0x30
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2220      	movs	r2, #32
 8005774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2200      	movs	r2, #0
 800577c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005784:	f043 0220 	orr.w	r2, r3, #32
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	641a      	str	r2, [r3, #64]	; 0x40
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005794:	2301      	movs	r3, #1
 8005796:	e021      	b.n	80057dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	0c1b      	lsrs	r3, r3, #16
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d10c      	bne.n	80057bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	695b      	ldr	r3, [r3, #20]
 80057a8:	43da      	mvns	r2, r3
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	4013      	ands	r3, r2
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	bf14      	ite	ne
 80057b4:	2301      	movne	r3, #1
 80057b6:	2300      	moveq	r3, #0
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	e00b      	b.n	80057d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	43da      	mvns	r2, r3
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	4013      	ands	r3, r2
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	bf14      	ite	ne
 80057ce:	2301      	movne	r3, #1
 80057d0:	2300      	moveq	r3, #0
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f47f af6d 	bne.w	80056b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 80057da:	2300      	movs	r3, #0
 80057dc:	4618      	mov	r0, r3
 80057de:	3710      	adds	r7, #16
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <I2C_WaitOnTXEFlagUntilTimeout>:
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	607a      	str	r2, [r7, #4]
 80057f0:	e034      	b.n	800585c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 80057f2:	68f8      	ldr	r0, [r7, #12]
 80057f4:	f000 f8e3 	bl	80059be <I2C_IsAcknowledgeFailed>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d001      	beq.n	8005802 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
 80057fe:	2301      	movs	r3, #1
 8005800:	e034      	b.n	800586c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005808:	d028      	beq.n	800585c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 800580a:	f7fd fe23 	bl	8003454 <HAL_GetTick>
 800580e:	4602      	mov	r2, r0
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	68ba      	ldr	r2, [r7, #8]
 8005816:	429a      	cmp	r2, r3
 8005818:	d302      	bcc.n	8005820 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d11d      	bne.n	800585c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800582a:	2b80      	cmp	r3, #128	; 0x80
 800582c:	d016      	beq.n	800585c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	631a      	str	r2, [r3, #48]	; 0x30
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2220      	movs	r2, #32
 8005838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005848:	f043 0220 	orr.w	r2, r3, #32
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	641a      	str	r2, [r3, #64]	; 0x40
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005858:	2301      	movs	r3, #1
 800585a:	e007      	b.n	800586c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	695b      	ldr	r3, [r3, #20]
 8005862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005866:	2b80      	cmp	r3, #128	; 0x80
 8005868:	d1c3      	bne.n	80057f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
 800586a:	2300      	movs	r3, #0
 800586c:	4618      	mov	r0, r3
 800586e:	3710      	adds	r7, #16
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <I2C_WaitOnBTFFlagUntilTimeout>:
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	607a      	str	r2, [r7, #4]
 8005880:	e034      	b.n	80058ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 8005882:	68f8      	ldr	r0, [r7, #12]
 8005884:	f000 f89b 	bl	80059be <I2C_IsAcknowledgeFailed>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d001      	beq.n	8005892 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
 800588e:	2301      	movs	r3, #1
 8005890:	e034      	b.n	80058fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005898:	d028      	beq.n	80058ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 800589a:	f7fd fddb 	bl	8003454 <HAL_GetTick>
 800589e:	4602      	mov	r2, r0
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	68ba      	ldr	r2, [r7, #8]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d302      	bcc.n	80058b0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d11d      	bne.n	80058ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	695b      	ldr	r3, [r3, #20]
 80058b6:	f003 0304 	and.w	r3, r3, #4
 80058ba:	2b04      	cmp	r3, #4
 80058bc:	d016      	beq.n	80058ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	631a      	str	r2, [r3, #48]	; 0x30
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2220      	movs	r2, #32
 80058c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d8:	f043 0220 	orr.w	r2, r3, #32
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	641a      	str	r2, [r3, #64]	; 0x40
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80058e8:	2301      	movs	r3, #1
 80058ea:	e007      	b.n	80058fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	f003 0304 	and.w	r3, r3, #4
 80058f6:	2b04      	cmp	r3, #4
 80058f8:	d1c3      	bne.n	8005882 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
 80058fa:	2300      	movs	r3, #0
 80058fc:	4618      	mov	r0, r3
 80058fe:	3710      	adds	r7, #16
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <I2C_WaitOnRXNEFlagUntilTimeout>:
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	607a      	str	r2, [r7, #4]
 8005910:	e049      	b.n	80059a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	695b      	ldr	r3, [r3, #20]
 8005918:	f003 0310 	and.w	r3, r3, #16
 800591c:	2b10      	cmp	r3, #16
 800591e:	d119      	bne.n	8005954 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f06f 0210 	mvn.w	r2, #16
 8005928:	615a      	str	r2, [r3, #20]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	631a      	str	r2, [r3, #48]	; 0x30
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2220      	movs	r2, #32
 8005934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	641a      	str	r2, [r3, #64]	; 0x40
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005950:	2301      	movs	r3, #1
 8005952:	e030      	b.n	80059b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
 8005954:	f7fd fd7e 	bl	8003454 <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	68ba      	ldr	r2, [r7, #8]
 8005960:	429a      	cmp	r2, r3
 8005962:	d302      	bcc.n	800596a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d11d      	bne.n	80059a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	695b      	ldr	r3, [r3, #20]
 8005970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005974:	2b40      	cmp	r3, #64	; 0x40
 8005976:	d016      	beq.n	80059a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	631a      	str	r2, [r3, #48]	; 0x30
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2220      	movs	r2, #32
 8005982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005992:	f043 0220 	orr.w	r2, r3, #32
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	641a      	str	r2, [r3, #64]	; 0x40
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80059a2:	2301      	movs	r3, #1
 80059a4:	e007      	b.n	80059b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	695b      	ldr	r3, [r3, #20]
 80059ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059b0:	2b40      	cmp	r3, #64	; 0x40
 80059b2:	d1ae      	bne.n	8005912 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
 80059b4:	2300      	movs	r3, #0
 80059b6:	4618      	mov	r0, r3
 80059b8:	3710      	adds	r7, #16
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}

080059be <I2C_IsAcknowledgeFailed>:
 80059be:	b480      	push	{r7}
 80059c0:	b083      	sub	sp, #12
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	695b      	ldr	r3, [r3, #20]
 80059cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059d4:	d11b      	bne.n	8005a0e <I2C_IsAcknowledgeFailed+0x50>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059de:	615a      	str	r2, [r3, #20]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	631a      	str	r2, [r3, #48]	; 0x30
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2220      	movs	r2, #32
 80059ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fa:	f043 0204 	orr.w	r2, r3, #4
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	641a      	str	r2, [r3, #64]	; 0x40
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e000      	b.n	8005a10 <I2C_IsAcknowledgeFailed+0x52>
 8005a0e:	2300      	movs	r3, #0
 8005a10:	4618      	mov	r0, r3
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bc80      	pop	{r7}
 8005a18:	4770      	bx	lr
	...

08005a1c <HAL_RCC_OscConfig>:
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b086      	sub	sp, #24
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d101      	bne.n	8005a2e <HAL_RCC_OscConfig+0x12>
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e272      	b.n	8005f14 <HAL_RCC_OscConfig+0x4f8>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 0301 	and.w	r3, r3, #1
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	f000 8087 	beq.w	8005b4a <HAL_RCC_OscConfig+0x12e>
 8005a3c:	4b92      	ldr	r3, [pc, #584]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	f003 030c 	and.w	r3, r3, #12
 8005a44:	2b04      	cmp	r3, #4
 8005a46:	d00c      	beq.n	8005a62 <HAL_RCC_OscConfig+0x46>
 8005a48:	4b8f      	ldr	r3, [pc, #572]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	f003 030c 	and.w	r3, r3, #12
 8005a50:	2b08      	cmp	r3, #8
 8005a52:	d112      	bne.n	8005a7a <HAL_RCC_OscConfig+0x5e>
 8005a54:	4b8c      	ldr	r3, [pc, #560]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a60:	d10b      	bne.n	8005a7a <HAL_RCC_OscConfig+0x5e>
 8005a62:	4b89      	ldr	r3, [pc, #548]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d06c      	beq.n	8005b48 <HAL_RCC_OscConfig+0x12c>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d168      	bne.n	8005b48 <HAL_RCC_OscConfig+0x12c>
 8005a76:	2301      	movs	r3, #1
 8005a78:	e24c      	b.n	8005f14 <HAL_RCC_OscConfig+0x4f8>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a82:	d106      	bne.n	8005a92 <HAL_RCC_OscConfig+0x76>
 8005a84:	4b80      	ldr	r3, [pc, #512]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a7f      	ldr	r2, [pc, #508]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005a8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a8e:	6013      	str	r3, [r2, #0]
 8005a90:	e02e      	b.n	8005af0 <HAL_RCC_OscConfig+0xd4>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10c      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x98>
 8005a9a:	4b7b      	ldr	r3, [pc, #492]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a7a      	ldr	r2, [pc, #488]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005aa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005aa4:	6013      	str	r3, [r2, #0]
 8005aa6:	4b78      	ldr	r3, [pc, #480]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a77      	ldr	r2, [pc, #476]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005aac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ab0:	6013      	str	r3, [r2, #0]
 8005ab2:	e01d      	b.n	8005af0 <HAL_RCC_OscConfig+0xd4>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005abc:	d10c      	bne.n	8005ad8 <HAL_RCC_OscConfig+0xbc>
 8005abe:	4b72      	ldr	r3, [pc, #456]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a71      	ldr	r2, [pc, #452]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005ac4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ac8:	6013      	str	r3, [r2, #0]
 8005aca:	4b6f      	ldr	r3, [pc, #444]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a6e      	ldr	r2, [pc, #440]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ad4:	6013      	str	r3, [r2, #0]
 8005ad6:	e00b      	b.n	8005af0 <HAL_RCC_OscConfig+0xd4>
 8005ad8:	4b6b      	ldr	r3, [pc, #428]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a6a      	ldr	r2, [pc, #424]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005ade:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ae2:	6013      	str	r3, [r2, #0]
 8005ae4:	4b68      	ldr	r3, [pc, #416]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a67      	ldr	r2, [pc, #412]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005aea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005aee:	6013      	str	r3, [r2, #0]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d013      	beq.n	8005b20 <HAL_RCC_OscConfig+0x104>
 8005af8:	f7fd fcac 	bl	8003454 <HAL_GetTick>
 8005afc:	6138      	str	r0, [r7, #16]
 8005afe:	e008      	b.n	8005b12 <HAL_RCC_OscConfig+0xf6>
 8005b00:	f7fd fca8 	bl	8003454 <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	2b64      	cmp	r3, #100	; 0x64
 8005b0c:	d901      	bls.n	8005b12 <HAL_RCC_OscConfig+0xf6>
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e200      	b.n	8005f14 <HAL_RCC_OscConfig+0x4f8>
 8005b12:	4b5d      	ldr	r3, [pc, #372]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d0f0      	beq.n	8005b00 <HAL_RCC_OscConfig+0xe4>
 8005b1e:	e014      	b.n	8005b4a <HAL_RCC_OscConfig+0x12e>
 8005b20:	f7fd fc98 	bl	8003454 <HAL_GetTick>
 8005b24:	6138      	str	r0, [r7, #16]
 8005b26:	e008      	b.n	8005b3a <HAL_RCC_OscConfig+0x11e>
 8005b28:	f7fd fc94 	bl	8003454 <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	2b64      	cmp	r3, #100	; 0x64
 8005b34:	d901      	bls.n	8005b3a <HAL_RCC_OscConfig+0x11e>
 8005b36:	2303      	movs	r3, #3
 8005b38:	e1ec      	b.n	8005f14 <HAL_RCC_OscConfig+0x4f8>
 8005b3a:	4b53      	ldr	r3, [pc, #332]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1f0      	bne.n	8005b28 <HAL_RCC_OscConfig+0x10c>
 8005b46:	e000      	b.n	8005b4a <HAL_RCC_OscConfig+0x12e>
 8005b48:	bf00      	nop
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0302 	and.w	r3, r3, #2
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d063      	beq.n	8005c1e <HAL_RCC_OscConfig+0x202>
 8005b56:	4b4c      	ldr	r3, [pc, #304]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f003 030c 	and.w	r3, r3, #12
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00b      	beq.n	8005b7a <HAL_RCC_OscConfig+0x15e>
 8005b62:	4b49      	ldr	r3, [pc, #292]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	f003 030c 	and.w	r3, r3, #12
 8005b6a:	2b08      	cmp	r3, #8
 8005b6c:	d11c      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x18c>
 8005b6e:	4b46      	ldr	r3, [pc, #280]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d116      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x18c>
 8005b7a:	4b43      	ldr	r3, [pc, #268]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0302 	and.w	r3, r3, #2
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d005      	beq.n	8005b92 <HAL_RCC_OscConfig+0x176>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d001      	beq.n	8005b92 <HAL_RCC_OscConfig+0x176>
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e1c0      	b.n	8005f14 <HAL_RCC_OscConfig+0x4f8>
 8005b92:	4b3d      	ldr	r3, [pc, #244]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	695b      	ldr	r3, [r3, #20]
 8005b9e:	00db      	lsls	r3, r3, #3
 8005ba0:	4939      	ldr	r1, [pc, #228]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	600b      	str	r3, [r1, #0]
 8005ba6:	e03a      	b.n	8005c1e <HAL_RCC_OscConfig+0x202>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d020      	beq.n	8005bf2 <HAL_RCC_OscConfig+0x1d6>
 8005bb0:	4b36      	ldr	r3, [pc, #216]	; (8005c8c <HAL_RCC_OscConfig+0x270>)
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	601a      	str	r2, [r3, #0]
 8005bb6:	f7fd fc4d 	bl	8003454 <HAL_GetTick>
 8005bba:	6138      	str	r0, [r7, #16]
 8005bbc:	e008      	b.n	8005bd0 <HAL_RCC_OscConfig+0x1b4>
 8005bbe:	f7fd fc49 	bl	8003454 <HAL_GetTick>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d901      	bls.n	8005bd0 <HAL_RCC_OscConfig+0x1b4>
 8005bcc:	2303      	movs	r3, #3
 8005bce:	e1a1      	b.n	8005f14 <HAL_RCC_OscConfig+0x4f8>
 8005bd0:	4b2d      	ldr	r3, [pc, #180]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 0302 	and.w	r3, r3, #2
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d0f0      	beq.n	8005bbe <HAL_RCC_OscConfig+0x1a2>
 8005bdc:	4b2a      	ldr	r3, [pc, #168]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	695b      	ldr	r3, [r3, #20]
 8005be8:	00db      	lsls	r3, r3, #3
 8005bea:	4927      	ldr	r1, [pc, #156]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005bec:	4313      	orrs	r3, r2
 8005bee:	600b      	str	r3, [r1, #0]
 8005bf0:	e015      	b.n	8005c1e <HAL_RCC_OscConfig+0x202>
 8005bf2:	4b26      	ldr	r3, [pc, #152]	; (8005c8c <HAL_RCC_OscConfig+0x270>)
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	601a      	str	r2, [r3, #0]
 8005bf8:	f7fd fc2c 	bl	8003454 <HAL_GetTick>
 8005bfc:	6138      	str	r0, [r7, #16]
 8005bfe:	e008      	b.n	8005c12 <HAL_RCC_OscConfig+0x1f6>
 8005c00:	f7fd fc28 	bl	8003454 <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d901      	bls.n	8005c12 <HAL_RCC_OscConfig+0x1f6>
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e180      	b.n	8005f14 <HAL_RCC_OscConfig+0x4f8>
 8005c12:	4b1d      	ldr	r3, [pc, #116]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0302 	and.w	r3, r3, #2
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d1f0      	bne.n	8005c00 <HAL_RCC_OscConfig+0x1e4>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 0308 	and.w	r3, r3, #8
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d03a      	beq.n	8005ca0 <HAL_RCC_OscConfig+0x284>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	699b      	ldr	r3, [r3, #24]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d019      	beq.n	8005c66 <HAL_RCC_OscConfig+0x24a>
 8005c32:	4b17      	ldr	r3, [pc, #92]	; (8005c90 <HAL_RCC_OscConfig+0x274>)
 8005c34:	2201      	movs	r2, #1
 8005c36:	601a      	str	r2, [r3, #0]
 8005c38:	f7fd fc0c 	bl	8003454 <HAL_GetTick>
 8005c3c:	6138      	str	r0, [r7, #16]
 8005c3e:	e008      	b.n	8005c52 <HAL_RCC_OscConfig+0x236>
 8005c40:	f7fd fc08 	bl	8003454 <HAL_GetTick>
 8005c44:	4602      	mov	r2, r0
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d901      	bls.n	8005c52 <HAL_RCC_OscConfig+0x236>
 8005c4e:	2303      	movs	r3, #3
 8005c50:	e160      	b.n	8005f14 <HAL_RCC_OscConfig+0x4f8>
 8005c52:	4b0d      	ldr	r3, [pc, #52]	; (8005c88 <HAL_RCC_OscConfig+0x26c>)
 8005c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c56:	f003 0302 	and.w	r3, r3, #2
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d0f0      	beq.n	8005c40 <HAL_RCC_OscConfig+0x224>
 8005c5e:	2001      	movs	r0, #1
 8005c60:	f000 face 	bl	8006200 <RCC_Delay>
 8005c64:	e01c      	b.n	8005ca0 <HAL_RCC_OscConfig+0x284>
 8005c66:	4b0a      	ldr	r3, [pc, #40]	; (8005c90 <HAL_RCC_OscConfig+0x274>)
 8005c68:	2200      	movs	r2, #0
 8005c6a:	601a      	str	r2, [r3, #0]
 8005c6c:	f7fd fbf2 	bl	8003454 <HAL_GetTick>
 8005c70:	6138      	str	r0, [r7, #16]
 8005c72:	e00f      	b.n	8005c94 <HAL_RCC_OscConfig+0x278>
 8005c74:	f7fd fbee 	bl	8003454 <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d908      	bls.n	8005c94 <HAL_RCC_OscConfig+0x278>
 8005c82:	2303      	movs	r3, #3
 8005c84:	e146      	b.n	8005f14 <HAL_RCC_OscConfig+0x4f8>
 8005c86:	bf00      	nop
 8005c88:	40021000 	.word	0x40021000
 8005c8c:	42420000 	.word	0x42420000
 8005c90:	42420480 	.word	0x42420480
 8005c94:	4b92      	ldr	r3, [pc, #584]	; (8005ee0 <HAL_RCC_OscConfig+0x4c4>)
 8005c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c98:	f003 0302 	and.w	r3, r3, #2
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d1e9      	bne.n	8005c74 <HAL_RCC_OscConfig+0x258>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 0304 	and.w	r3, r3, #4
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	f000 80a6 	beq.w	8005dfa <HAL_RCC_OscConfig+0x3de>
 8005cae:	2300      	movs	r3, #0
 8005cb0:	75fb      	strb	r3, [r7, #23]
 8005cb2:	4b8b      	ldr	r3, [pc, #556]	; (8005ee0 <HAL_RCC_OscConfig+0x4c4>)
 8005cb4:	69db      	ldr	r3, [r3, #28]
 8005cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10d      	bne.n	8005cda <HAL_RCC_OscConfig+0x2be>
 8005cbe:	4b88      	ldr	r3, [pc, #544]	; (8005ee0 <HAL_RCC_OscConfig+0x4c4>)
 8005cc0:	69db      	ldr	r3, [r3, #28]
 8005cc2:	4a87      	ldr	r2, [pc, #540]	; (8005ee0 <HAL_RCC_OscConfig+0x4c4>)
 8005cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cc8:	61d3      	str	r3, [r2, #28]
 8005cca:	4b85      	ldr	r3, [pc, #532]	; (8005ee0 <HAL_RCC_OscConfig+0x4c4>)
 8005ccc:	69db      	ldr	r3, [r3, #28]
 8005cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cd2:	60bb      	str	r3, [r7, #8]
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	75fb      	strb	r3, [r7, #23]
 8005cda:	4b82      	ldr	r3, [pc, #520]	; (8005ee4 <HAL_RCC_OscConfig+0x4c8>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d118      	bne.n	8005d18 <HAL_RCC_OscConfig+0x2fc>
 8005ce6:	4b7f      	ldr	r3, [pc, #508]	; (8005ee4 <HAL_RCC_OscConfig+0x4c8>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a7e      	ldr	r2, [pc, #504]	; (8005ee4 <HAL_RCC_OscConfig+0x4c8>)
 8005cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cf0:	6013      	str	r3, [r2, #0]
 8005cf2:	f7fd fbaf 	bl	8003454 <HAL_GetTick>
 8005cf6:	6138      	str	r0, [r7, #16]
 8005cf8:	e008      	b.n	8005d0c <HAL_RCC_OscConfig+0x2f0>
 8005cfa:	f7fd fbab 	bl	8003454 <HAL_GetTick>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	1ad3      	subs	r3, r2, r3
 8005d04:	2b64      	cmp	r3, #100	; 0x64
 8005d06:	d901      	bls.n	8005d0c <HAL_RCC_OscConfig+0x2f0>
 8005d08:	2303      	movs	r3, #3
 8005d0a:	e103      	b.n	8005f14 <HAL_RCC_OscConfig+0x4f8>
 8005d0c:	4b75      	ldr	r3, [pc, #468]	; (8005ee4 <HAL_RCC_OscConfig+0x4c8>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d0f0      	beq.n	8005cfa <HAL_RCC_OscConfig+0x2de>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d106      	bne.n	8005d2e <HAL_RCC_OscConfig+0x312>
 8005d20:	4b6f      	ldr	r3, [pc, #444]	; (8005ee0 <HAL_RCC_OscConfig+0x4c4>)
 8005d22:	6a1b      	ldr	r3, [r3, #32]
 8005d24:	4a6e      	ldr	r2, [pc, #440]	; (8005ee0 <HAL_RCC_OscConfig+0x4c4>)
 8005d26:	f043 0301 	orr.w	r3, r3, #1
 8005d2a:	6213      	str	r3, [r2, #32]
 8005d2c:	e02d      	b.n	8005d8a <HAL_RCC_OscConfig+0x36e>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10c      	bne.n	8005d50 <HAL_RCC_OscConfig+0x334>
 8005d36:	4b6a      	ldr	r3, [pc, #424]	; (8005ee0 <HAL_RCC_OscConfig+0x4c4>)
 8005d38:	6a1b      	ldr	r3, [r3, #32]
 8005d3a:	4a69      	ldr	r2, [pc, #420]	; (8005ee0 <HAL_RCC_OscConfig+0x4c4>)
 8005d3c:	f023 0301 	bic.w	r3, r3, #1
 8005d40:	6213      	str	r3, [r2, #32]
 8005d42:	4b67      	ldr	r3, [pc, #412]	; (8005ee0 <HAL_RCC_OscConfig+0x4c4>)
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	4a66      	ldr	r2, [pc, #408]	; (8005ee0 <HAL_RCC_OscConfig+0x4c4>)
 8005d48:	f023 0304 	bic.w	r3, r3, #4
 8005d4c:	6213      	str	r3, [r2, #32]
 8005d4e:	e01c      	b.n	8005d8a <HAL_RCC_OscConfig+0x36e>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	2b05      	cmp	r3, #5
 8005d56:	d10c      	bne.n	8005d72 <HAL_RCC_OscConfig+0x356>
 8005d58:	4b61      	ldr	r3, [pc, #388]	; (8005ee0 <HAL_RCC_OscConfig+0x4c4>)
 8005d5a:	6a1b      	ldr	r3, [r3, #32]
 8005d5c:	4a60      	ldr	r2, [pc, #384]	; (8005ee0 <HAL_RCC_OscConfig+0x4c4>)
 8005d5e:	f043 0304 	orr.w	r3, r3, #4
 8005d62:	6213      	str	r3, [r2, #32]
 8005d64:	4b5e      	ldr	r3, [pc, #376]	; (8005ee0 <HAL_RCC_OscConfig+0x4c4>)
 8005d66:	6a1b      	ldr	r3, [r3, #32]
 8005d68:	4a5d      	ldr	r2, [pc, #372]	; (8005ee0 <HAL_RCC_OscConfig+0x4c4>)
 8005d6a:	f043 0301 	orr.w	r3, r3, #1
 8005d6e:	6213      	str	r3, [r2, #32]
 8005d70:	e00b      	b.n	8005d8a <HAL_RCC_OscConfig+0x36e>
 8005d72:	4b5b      	ldr	r3, [pc, #364]	; (8005ee0 <HAL_RCC_OscConfig+0x4c4>)
 8005d74:	6a1b      	ldr	r3, [r3, #32]
 8005d76:	4a5a      	ldr	r2, [pc, #360]	; (8005ee0 <HAL_RCC_OscConfig+0x4c4>)
 8005d78:	f023 0301 	bic.w	r3, r3, #1
 8005d7c:	6213      	str	r3, [r2, #32]
 8005d7e:	4b58      	ldr	r3, [pc, #352]	; (8005ee0 <HAL_RCC_OscConfig+0x4c4>)
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	4a57      	ldr	r2, [pc, #348]	; (8005ee0 <HAL_RCC_OscConfig+0x4c4>)
 8005d84:	f023 0304 	bic.w	r3, r3, #4
 8005d88:	6213      	str	r3, [r2, #32]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d015      	beq.n	8005dbe <HAL_RCC_OscConfig+0x3a2>
 8005d92:	f7fd fb5f 	bl	8003454 <HAL_GetTick>
 8005d96:	6138      	str	r0, [r7, #16]
 8005d98:	e00a      	b.n	8005db0 <HAL_RCC_OscConfig+0x394>
 8005d9a:	f7fd fb5b 	bl	8003454 <HAL_GetTick>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	1ad3      	subs	r3, r2, r3
 8005da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d901      	bls.n	8005db0 <HAL_RCC_OscConfig+0x394>
 8005dac:	2303      	movs	r3, #3
 8005dae:	e0b1      	b.n	8005f14 <HAL_RCC_OscConfig+0x4f8>
 8005db0:	4b4b      	ldr	r3, [pc, #300]	; (8005ee0 <HAL_RCC_OscConfig+0x4c4>)
 8005db2:	6a1b      	ldr	r3, [r3, #32]
 8005db4:	f003 0302 	and.w	r3, r3, #2
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d0ee      	beq.n	8005d9a <HAL_RCC_OscConfig+0x37e>
 8005dbc:	e014      	b.n	8005de8 <HAL_RCC_OscConfig+0x3cc>
 8005dbe:	f7fd fb49 	bl	8003454 <HAL_GetTick>
 8005dc2:	6138      	str	r0, [r7, #16]
 8005dc4:	e00a      	b.n	8005ddc <HAL_RCC_OscConfig+0x3c0>
 8005dc6:	f7fd fb45 	bl	8003454 <HAL_GetTick>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d901      	bls.n	8005ddc <HAL_RCC_OscConfig+0x3c0>
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e09b      	b.n	8005f14 <HAL_RCC_OscConfig+0x4f8>
 8005ddc:	4b40      	ldr	r3, [pc, #256]	; (8005ee0 <HAL_RCC_OscConfig+0x4c4>)
 8005dde:	6a1b      	ldr	r3, [r3, #32]
 8005de0:	f003 0302 	and.w	r3, r3, #2
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1ee      	bne.n	8005dc6 <HAL_RCC_OscConfig+0x3aa>
 8005de8:	7dfb      	ldrb	r3, [r7, #23]
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d105      	bne.n	8005dfa <HAL_RCC_OscConfig+0x3de>
 8005dee:	4b3c      	ldr	r3, [pc, #240]	; (8005ee0 <HAL_RCC_OscConfig+0x4c4>)
 8005df0:	69db      	ldr	r3, [r3, #28]
 8005df2:	4a3b      	ldr	r2, [pc, #236]	; (8005ee0 <HAL_RCC_OscConfig+0x4c4>)
 8005df4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005df8:	61d3      	str	r3, [r2, #28]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	69db      	ldr	r3, [r3, #28]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	f000 8087 	beq.w	8005f12 <HAL_RCC_OscConfig+0x4f6>
 8005e04:	4b36      	ldr	r3, [pc, #216]	; (8005ee0 <HAL_RCC_OscConfig+0x4c4>)
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	f003 030c 	and.w	r3, r3, #12
 8005e0c:	2b08      	cmp	r3, #8
 8005e0e:	d061      	beq.n	8005ed4 <HAL_RCC_OscConfig+0x4b8>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	69db      	ldr	r3, [r3, #28]
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d146      	bne.n	8005ea6 <HAL_RCC_OscConfig+0x48a>
 8005e18:	4b33      	ldr	r3, [pc, #204]	; (8005ee8 <HAL_RCC_OscConfig+0x4cc>)
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	601a      	str	r2, [r3, #0]
 8005e1e:	f7fd fb19 	bl	8003454 <HAL_GetTick>
 8005e22:	6138      	str	r0, [r7, #16]
 8005e24:	e008      	b.n	8005e38 <HAL_RCC_OscConfig+0x41c>
 8005e26:	f7fd fb15 	bl	8003454 <HAL_GetTick>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	d901      	bls.n	8005e38 <HAL_RCC_OscConfig+0x41c>
 8005e34:	2303      	movs	r3, #3
 8005e36:	e06d      	b.n	8005f14 <HAL_RCC_OscConfig+0x4f8>
 8005e38:	4b29      	ldr	r3, [pc, #164]	; (8005ee0 <HAL_RCC_OscConfig+0x4c4>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d1f0      	bne.n	8005e26 <HAL_RCC_OscConfig+0x40a>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6a1b      	ldr	r3, [r3, #32]
 8005e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e4c:	d108      	bne.n	8005e60 <HAL_RCC_OscConfig+0x444>
 8005e4e:	4b24      	ldr	r3, [pc, #144]	; (8005ee0 <HAL_RCC_OscConfig+0x4c4>)
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	4921      	ldr	r1, [pc, #132]	; (8005ee0 <HAL_RCC_OscConfig+0x4c4>)
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	604b      	str	r3, [r1, #4]
 8005e60:	4b1f      	ldr	r3, [pc, #124]	; (8005ee0 <HAL_RCC_OscConfig+0x4c4>)
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6a19      	ldr	r1, [r3, #32]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e70:	430b      	orrs	r3, r1
 8005e72:	491b      	ldr	r1, [pc, #108]	; (8005ee0 <HAL_RCC_OscConfig+0x4c4>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	604b      	str	r3, [r1, #4]
 8005e78:	4b1b      	ldr	r3, [pc, #108]	; (8005ee8 <HAL_RCC_OscConfig+0x4cc>)
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	601a      	str	r2, [r3, #0]
 8005e7e:	f7fd fae9 	bl	8003454 <HAL_GetTick>
 8005e82:	6138      	str	r0, [r7, #16]
 8005e84:	e008      	b.n	8005e98 <HAL_RCC_OscConfig+0x47c>
 8005e86:	f7fd fae5 	bl	8003454 <HAL_GetTick>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	d901      	bls.n	8005e98 <HAL_RCC_OscConfig+0x47c>
 8005e94:	2303      	movs	r3, #3
 8005e96:	e03d      	b.n	8005f14 <HAL_RCC_OscConfig+0x4f8>
 8005e98:	4b11      	ldr	r3, [pc, #68]	; (8005ee0 <HAL_RCC_OscConfig+0x4c4>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d0f0      	beq.n	8005e86 <HAL_RCC_OscConfig+0x46a>
 8005ea4:	e035      	b.n	8005f12 <HAL_RCC_OscConfig+0x4f6>
 8005ea6:	4b10      	ldr	r3, [pc, #64]	; (8005ee8 <HAL_RCC_OscConfig+0x4cc>)
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	601a      	str	r2, [r3, #0]
 8005eac:	f7fd fad2 	bl	8003454 <HAL_GetTick>
 8005eb0:	6138      	str	r0, [r7, #16]
 8005eb2:	e008      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4aa>
 8005eb4:	f7fd face 	bl	8003454 <HAL_GetTick>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d901      	bls.n	8005ec6 <HAL_RCC_OscConfig+0x4aa>
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e026      	b.n	8005f14 <HAL_RCC_OscConfig+0x4f8>
 8005ec6:	4b06      	ldr	r3, [pc, #24]	; (8005ee0 <HAL_RCC_OscConfig+0x4c4>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1f0      	bne.n	8005eb4 <HAL_RCC_OscConfig+0x498>
 8005ed2:	e01e      	b.n	8005f12 <HAL_RCC_OscConfig+0x4f6>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	69db      	ldr	r3, [r3, #28]
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d107      	bne.n	8005eec <HAL_RCC_OscConfig+0x4d0>
 8005edc:	2301      	movs	r3, #1
 8005ede:	e019      	b.n	8005f14 <HAL_RCC_OscConfig+0x4f8>
 8005ee0:	40021000 	.word	0x40021000
 8005ee4:	40007000 	.word	0x40007000
 8005ee8:	42420060 	.word	0x42420060
 8005eec:	4b0b      	ldr	r3, [pc, #44]	; (8005f1c <HAL_RCC_OscConfig+0x500>)
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	60fb      	str	r3, [r7, #12]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a1b      	ldr	r3, [r3, #32]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d106      	bne.n	8005f0e <HAL_RCC_OscConfig+0x4f2>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d001      	beq.n	8005f12 <HAL_RCC_OscConfig+0x4f6>
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e000      	b.n	8005f14 <HAL_RCC_OscConfig+0x4f8>
 8005f12:	2300      	movs	r3, #0
 8005f14:	4618      	mov	r0, r3
 8005f16:	3718      	adds	r7, #24
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	40021000 	.word	0x40021000

08005f20 <HAL_RCC_ClockConfig>:
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d101      	bne.n	8005f34 <HAL_RCC_ClockConfig+0x14>
 8005f30:	2301      	movs	r3, #1
 8005f32:	e0d0      	b.n	80060d6 <HAL_RCC_ClockConfig+0x1b6>
 8005f34:	4b6a      	ldr	r3, [pc, #424]	; (80060e0 <HAL_RCC_ClockConfig+0x1c0>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 0307 	and.w	r3, r3, #7
 8005f3c:	683a      	ldr	r2, [r7, #0]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d910      	bls.n	8005f64 <HAL_RCC_ClockConfig+0x44>
 8005f42:	4b67      	ldr	r3, [pc, #412]	; (80060e0 <HAL_RCC_ClockConfig+0x1c0>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f023 0207 	bic.w	r2, r3, #7
 8005f4a:	4965      	ldr	r1, [pc, #404]	; (80060e0 <HAL_RCC_ClockConfig+0x1c0>)
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	600b      	str	r3, [r1, #0]
 8005f52:	4b63      	ldr	r3, [pc, #396]	; (80060e0 <HAL_RCC_ClockConfig+0x1c0>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 0307 	and.w	r3, r3, #7
 8005f5a:	683a      	ldr	r2, [r7, #0]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d001      	beq.n	8005f64 <HAL_RCC_ClockConfig+0x44>
 8005f60:	2301      	movs	r3, #1
 8005f62:	e0b8      	b.n	80060d6 <HAL_RCC_ClockConfig+0x1b6>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 0302 	and.w	r3, r3, #2
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d020      	beq.n	8005fb2 <HAL_RCC_ClockConfig+0x92>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 0304 	and.w	r3, r3, #4
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d005      	beq.n	8005f88 <HAL_RCC_ClockConfig+0x68>
 8005f7c:	4b59      	ldr	r3, [pc, #356]	; (80060e4 <HAL_RCC_ClockConfig+0x1c4>)
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	4a58      	ldr	r2, [pc, #352]	; (80060e4 <HAL_RCC_ClockConfig+0x1c4>)
 8005f82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005f86:	6053      	str	r3, [r2, #4]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 0308 	and.w	r3, r3, #8
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d005      	beq.n	8005fa0 <HAL_RCC_ClockConfig+0x80>
 8005f94:	4b53      	ldr	r3, [pc, #332]	; (80060e4 <HAL_RCC_ClockConfig+0x1c4>)
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	4a52      	ldr	r2, [pc, #328]	; (80060e4 <HAL_RCC_ClockConfig+0x1c4>)
 8005f9a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005f9e:	6053      	str	r3, [r2, #4]
 8005fa0:	4b50      	ldr	r3, [pc, #320]	; (80060e4 <HAL_RCC_ClockConfig+0x1c4>)
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	494d      	ldr	r1, [pc, #308]	; (80060e4 <HAL_RCC_ClockConfig+0x1c4>)
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	604b      	str	r3, [r1, #4]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d040      	beq.n	8006040 <HAL_RCC_ClockConfig+0x120>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d107      	bne.n	8005fd6 <HAL_RCC_ClockConfig+0xb6>
 8005fc6:	4b47      	ldr	r3, [pc, #284]	; (80060e4 <HAL_RCC_ClockConfig+0x1c4>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d115      	bne.n	8005ffe <HAL_RCC_ClockConfig+0xde>
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e07f      	b.n	80060d6 <HAL_RCC_ClockConfig+0x1b6>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d107      	bne.n	8005fee <HAL_RCC_ClockConfig+0xce>
 8005fde:	4b41      	ldr	r3, [pc, #260]	; (80060e4 <HAL_RCC_ClockConfig+0x1c4>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d109      	bne.n	8005ffe <HAL_RCC_ClockConfig+0xde>
 8005fea:	2301      	movs	r3, #1
 8005fec:	e073      	b.n	80060d6 <HAL_RCC_ClockConfig+0x1b6>
 8005fee:	4b3d      	ldr	r3, [pc, #244]	; (80060e4 <HAL_RCC_ClockConfig+0x1c4>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 0302 	and.w	r3, r3, #2
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d101      	bne.n	8005ffe <HAL_RCC_ClockConfig+0xde>
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e06b      	b.n	80060d6 <HAL_RCC_ClockConfig+0x1b6>
 8005ffe:	4b39      	ldr	r3, [pc, #228]	; (80060e4 <HAL_RCC_ClockConfig+0x1c4>)
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	f023 0203 	bic.w	r2, r3, #3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	4936      	ldr	r1, [pc, #216]	; (80060e4 <HAL_RCC_ClockConfig+0x1c4>)
 800600c:	4313      	orrs	r3, r2
 800600e:	604b      	str	r3, [r1, #4]
 8006010:	f7fd fa20 	bl	8003454 <HAL_GetTick>
 8006014:	60f8      	str	r0, [r7, #12]
 8006016:	e00a      	b.n	800602e <HAL_RCC_ClockConfig+0x10e>
 8006018:	f7fd fa1c 	bl	8003454 <HAL_GetTick>
 800601c:	4602      	mov	r2, r0
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	f241 3288 	movw	r2, #5000	; 0x1388
 8006026:	4293      	cmp	r3, r2
 8006028:	d901      	bls.n	800602e <HAL_RCC_ClockConfig+0x10e>
 800602a:	2303      	movs	r3, #3
 800602c:	e053      	b.n	80060d6 <HAL_RCC_ClockConfig+0x1b6>
 800602e:	4b2d      	ldr	r3, [pc, #180]	; (80060e4 <HAL_RCC_ClockConfig+0x1c4>)
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	f003 020c 	and.w	r2, r3, #12
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	429a      	cmp	r2, r3
 800603e:	d1eb      	bne.n	8006018 <HAL_RCC_ClockConfig+0xf8>
 8006040:	4b27      	ldr	r3, [pc, #156]	; (80060e0 <HAL_RCC_ClockConfig+0x1c0>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0307 	and.w	r3, r3, #7
 8006048:	683a      	ldr	r2, [r7, #0]
 800604a:	429a      	cmp	r2, r3
 800604c:	d210      	bcs.n	8006070 <HAL_RCC_ClockConfig+0x150>
 800604e:	4b24      	ldr	r3, [pc, #144]	; (80060e0 <HAL_RCC_ClockConfig+0x1c0>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f023 0207 	bic.w	r2, r3, #7
 8006056:	4922      	ldr	r1, [pc, #136]	; (80060e0 <HAL_RCC_ClockConfig+0x1c0>)
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	4313      	orrs	r3, r2
 800605c:	600b      	str	r3, [r1, #0]
 800605e:	4b20      	ldr	r3, [pc, #128]	; (80060e0 <HAL_RCC_ClockConfig+0x1c0>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 0307 	and.w	r3, r3, #7
 8006066:	683a      	ldr	r2, [r7, #0]
 8006068:	429a      	cmp	r2, r3
 800606a:	d001      	beq.n	8006070 <HAL_RCC_ClockConfig+0x150>
 800606c:	2301      	movs	r3, #1
 800606e:	e032      	b.n	80060d6 <HAL_RCC_ClockConfig+0x1b6>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0304 	and.w	r3, r3, #4
 8006078:	2b00      	cmp	r3, #0
 800607a:	d008      	beq.n	800608e <HAL_RCC_ClockConfig+0x16e>
 800607c:	4b19      	ldr	r3, [pc, #100]	; (80060e4 <HAL_RCC_ClockConfig+0x1c4>)
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	4916      	ldr	r1, [pc, #88]	; (80060e4 <HAL_RCC_ClockConfig+0x1c4>)
 800608a:	4313      	orrs	r3, r2
 800608c:	604b      	str	r3, [r1, #4]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 0308 	and.w	r3, r3, #8
 8006096:	2b00      	cmp	r3, #0
 8006098:	d009      	beq.n	80060ae <HAL_RCC_ClockConfig+0x18e>
 800609a:	4b12      	ldr	r3, [pc, #72]	; (80060e4 <HAL_RCC_ClockConfig+0x1c4>)
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	00db      	lsls	r3, r3, #3
 80060a8:	490e      	ldr	r1, [pc, #56]	; (80060e4 <HAL_RCC_ClockConfig+0x1c4>)
 80060aa:	4313      	orrs	r3, r2
 80060ac:	604b      	str	r3, [r1, #4]
 80060ae:	f000 f821 	bl	80060f4 <HAL_RCC_GetSysClockFreq>
 80060b2:	4602      	mov	r2, r0
 80060b4:	4b0b      	ldr	r3, [pc, #44]	; (80060e4 <HAL_RCC_ClockConfig+0x1c4>)
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	091b      	lsrs	r3, r3, #4
 80060ba:	f003 030f 	and.w	r3, r3, #15
 80060be:	490a      	ldr	r1, [pc, #40]	; (80060e8 <HAL_RCC_ClockConfig+0x1c8>)
 80060c0:	5ccb      	ldrb	r3, [r1, r3]
 80060c2:	fa22 f303 	lsr.w	r3, r2, r3
 80060c6:	4a09      	ldr	r2, [pc, #36]	; (80060ec <HAL_RCC_ClockConfig+0x1cc>)
 80060c8:	6013      	str	r3, [r2, #0]
 80060ca:	4b09      	ldr	r3, [pc, #36]	; (80060f0 <HAL_RCC_ClockConfig+0x1d0>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4618      	mov	r0, r3
 80060d0:	f7fd f97e 	bl	80033d0 <HAL_InitTick>
 80060d4:	2300      	movs	r3, #0
 80060d6:	4618      	mov	r0, r3
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	40022000 	.word	0x40022000
 80060e4:	40021000 	.word	0x40021000
 80060e8:	08007c70 	.word	0x08007c70
 80060ec:	20000000 	.word	0x20000000
 80060f0:	20000004 	.word	0x20000004

080060f4 <HAL_RCC_GetSysClockFreq>:
 80060f4:	b480      	push	{r7}
 80060f6:	b087      	sub	sp, #28
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	2300      	movs	r3, #0
 80060fc:	60fb      	str	r3, [r7, #12]
 80060fe:	2300      	movs	r3, #0
 8006100:	60bb      	str	r3, [r7, #8]
 8006102:	2300      	movs	r3, #0
 8006104:	617b      	str	r3, [r7, #20]
 8006106:	2300      	movs	r3, #0
 8006108:	607b      	str	r3, [r7, #4]
 800610a:	2300      	movs	r3, #0
 800610c:	613b      	str	r3, [r7, #16]
 800610e:	4b1e      	ldr	r3, [pc, #120]	; (8006188 <HAL_RCC_GetSysClockFreq+0x94>)
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	60fb      	str	r3, [r7, #12]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f003 030c 	and.w	r3, r3, #12
 800611a:	2b04      	cmp	r3, #4
 800611c:	d002      	beq.n	8006124 <HAL_RCC_GetSysClockFreq+0x30>
 800611e:	2b08      	cmp	r3, #8
 8006120:	d003      	beq.n	800612a <HAL_RCC_GetSysClockFreq+0x36>
 8006122:	e027      	b.n	8006174 <HAL_RCC_GetSysClockFreq+0x80>
 8006124:	4b19      	ldr	r3, [pc, #100]	; (800618c <HAL_RCC_GetSysClockFreq+0x98>)
 8006126:	613b      	str	r3, [r7, #16]
 8006128:	e027      	b.n	800617a <HAL_RCC_GetSysClockFreq+0x86>
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	0c9b      	lsrs	r3, r3, #18
 800612e:	f003 030f 	and.w	r3, r3, #15
 8006132:	4a17      	ldr	r2, [pc, #92]	; (8006190 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006134:	5cd3      	ldrb	r3, [r2, r3]
 8006136:	607b      	str	r3, [r7, #4]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800613e:	2b00      	cmp	r3, #0
 8006140:	d010      	beq.n	8006164 <HAL_RCC_GetSysClockFreq+0x70>
 8006142:	4b11      	ldr	r3, [pc, #68]	; (8006188 <HAL_RCC_GetSysClockFreq+0x94>)
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	0c5b      	lsrs	r3, r3, #17
 8006148:	f003 0301 	and.w	r3, r3, #1
 800614c:	4a11      	ldr	r2, [pc, #68]	; (8006194 <HAL_RCC_GetSysClockFreq+0xa0>)
 800614e:	5cd3      	ldrb	r3, [r2, r3]
 8006150:	60bb      	str	r3, [r7, #8]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a0d      	ldr	r2, [pc, #52]	; (800618c <HAL_RCC_GetSysClockFreq+0x98>)
 8006156:	fb03 f202 	mul.w	r2, r3, r2
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006160:	617b      	str	r3, [r7, #20]
 8006162:	e004      	b.n	800616e <HAL_RCC_GetSysClockFreq+0x7a>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a0c      	ldr	r2, [pc, #48]	; (8006198 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006168:	fb02 f303 	mul.w	r3, r2, r3
 800616c:	617b      	str	r3, [r7, #20]
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	613b      	str	r3, [r7, #16]
 8006172:	e002      	b.n	800617a <HAL_RCC_GetSysClockFreq+0x86>
 8006174:	4b05      	ldr	r3, [pc, #20]	; (800618c <HAL_RCC_GetSysClockFreq+0x98>)
 8006176:	613b      	str	r3, [r7, #16]
 8006178:	bf00      	nop
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	4618      	mov	r0, r3
 800617e:	371c      	adds	r7, #28
 8006180:	46bd      	mov	sp, r7
 8006182:	bc80      	pop	{r7}
 8006184:	4770      	bx	lr
 8006186:	bf00      	nop
 8006188:	40021000 	.word	0x40021000
 800618c:	007a1200 	.word	0x007a1200
 8006190:	08007c88 	.word	0x08007c88
 8006194:	08007c98 	.word	0x08007c98
 8006198:	003d0900 	.word	0x003d0900

0800619c <HAL_RCC_GetHCLKFreq>:
 800619c:	b480      	push	{r7}
 800619e:	af00      	add	r7, sp, #0
 80061a0:	4b02      	ldr	r3, [pc, #8]	; (80061ac <HAL_RCC_GetHCLKFreq+0x10>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4618      	mov	r0, r3
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bc80      	pop	{r7}
 80061aa:	4770      	bx	lr
 80061ac:	20000000 	.word	0x20000000

080061b0 <HAL_RCC_GetPCLK1Freq>:
 80061b0:	b580      	push	{r7, lr}
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	f7ff fff2 	bl	800619c <HAL_RCC_GetHCLKFreq>
 80061b8:	4602      	mov	r2, r0
 80061ba:	4b05      	ldr	r3, [pc, #20]	; (80061d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	0a1b      	lsrs	r3, r3, #8
 80061c0:	f003 0307 	and.w	r3, r3, #7
 80061c4:	4903      	ldr	r1, [pc, #12]	; (80061d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80061c6:	5ccb      	ldrb	r3, [r1, r3]
 80061c8:	fa22 f303 	lsr.w	r3, r2, r3
 80061cc:	4618      	mov	r0, r3
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	40021000 	.word	0x40021000
 80061d4:	08007c80 	.word	0x08007c80

080061d8 <HAL_RCC_GetPCLK2Freq>:
 80061d8:	b580      	push	{r7, lr}
 80061da:	af00      	add	r7, sp, #0
 80061dc:	f7ff ffde 	bl	800619c <HAL_RCC_GetHCLKFreq>
 80061e0:	4602      	mov	r2, r0
 80061e2:	4b05      	ldr	r3, [pc, #20]	; (80061f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	0adb      	lsrs	r3, r3, #11
 80061e8:	f003 0307 	and.w	r3, r3, #7
 80061ec:	4903      	ldr	r1, [pc, #12]	; (80061fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80061ee:	5ccb      	ldrb	r3, [r1, r3]
 80061f0:	fa22 f303 	lsr.w	r3, r2, r3
 80061f4:	4618      	mov	r0, r3
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	40021000 	.word	0x40021000
 80061fc:	08007c80 	.word	0x08007c80

08006200 <RCC_Delay>:
 8006200:	b480      	push	{r7}
 8006202:	b085      	sub	sp, #20
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	4b0a      	ldr	r3, [pc, #40]	; (8006234 <RCC_Delay+0x34>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a0a      	ldr	r2, [pc, #40]	; (8006238 <RCC_Delay+0x38>)
 800620e:	fba2 2303 	umull	r2, r3, r2, r3
 8006212:	0a5b      	lsrs	r3, r3, #9
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	fb02 f303 	mul.w	r3, r2, r3
 800621a:	60fb      	str	r3, [r7, #12]
 800621c:	bf00      	nop
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	1e5a      	subs	r2, r3, #1
 8006222:	60fa      	str	r2, [r7, #12]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d1f9      	bne.n	800621c <RCC_Delay+0x1c>
 8006228:	bf00      	nop
 800622a:	bf00      	nop
 800622c:	3714      	adds	r7, #20
 800622e:	46bd      	mov	sp, r7
 8006230:	bc80      	pop	{r7}
 8006232:	4770      	bx	lr
 8006234:	20000000 	.word	0x20000000
 8006238:	10624dd3 	.word	0x10624dd3

0800623c <HAL_RCCEx_PeriphCLKConfig>:
 800623c:	b580      	push	{r7, lr}
 800623e:	b086      	sub	sp, #24
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	2300      	movs	r3, #0
 8006246:	613b      	str	r3, [r7, #16]
 8006248:	2300      	movs	r3, #0
 800624a:	60fb      	str	r3, [r7, #12]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 0301 	and.w	r3, r3, #1
 8006254:	2b00      	cmp	r3, #0
 8006256:	d07d      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8006258:	2300      	movs	r3, #0
 800625a:	75fb      	strb	r3, [r7, #23]
 800625c:	4b4f      	ldr	r3, [pc, #316]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800625e:	69db      	ldr	r3, [r3, #28]
 8006260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006264:	2b00      	cmp	r3, #0
 8006266:	d10d      	bne.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8006268:	4b4c      	ldr	r3, [pc, #304]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800626a:	69db      	ldr	r3, [r3, #28]
 800626c:	4a4b      	ldr	r2, [pc, #300]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800626e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006272:	61d3      	str	r3, [r2, #28]
 8006274:	4b49      	ldr	r3, [pc, #292]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006276:	69db      	ldr	r3, [r3, #28]
 8006278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800627c:	60bb      	str	r3, [r7, #8]
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	2301      	movs	r3, #1
 8006282:	75fb      	strb	r3, [r7, #23]
 8006284:	4b46      	ldr	r3, [pc, #280]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800628c:	2b00      	cmp	r3, #0
 800628e:	d118      	bne.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x86>
 8006290:	4b43      	ldr	r3, [pc, #268]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a42      	ldr	r2, [pc, #264]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006296:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800629a:	6013      	str	r3, [r2, #0]
 800629c:	f7fd f8da 	bl	8003454 <HAL_GetTick>
 80062a0:	6138      	str	r0, [r7, #16]
 80062a2:	e008      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80062a4:	f7fd f8d6 	bl	8003454 <HAL_GetTick>
 80062a8:	4602      	mov	r2, r0
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	2b64      	cmp	r3, #100	; 0x64
 80062b0:	d901      	bls.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80062b2:	2303      	movs	r3, #3
 80062b4:	e06d      	b.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x156>
 80062b6:	4b3a      	ldr	r3, [pc, #232]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d0f0      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80062c2:	4b36      	ldr	r3, [pc, #216]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062c4:	6a1b      	ldr	r3, [r3, #32]
 80062c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062ca:	60fb      	str	r3, [r7, #12]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d02e      	beq.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d027      	beq.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80062e0:	4b2e      	ldr	r3, [pc, #184]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062e2:	6a1b      	ldr	r3, [r3, #32]
 80062e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062e8:	60fb      	str	r3, [r7, #12]
 80062ea:	4b2e      	ldr	r3, [pc, #184]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80062ec:	2201      	movs	r2, #1
 80062ee:	601a      	str	r2, [r3, #0]
 80062f0:	4b2c      	ldr	r3, [pc, #176]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80062f2:	2200      	movs	r2, #0
 80062f4:	601a      	str	r2, [r3, #0]
 80062f6:	4a29      	ldr	r2, [pc, #164]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6213      	str	r3, [r2, #32]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f003 0301 	and.w	r3, r3, #1
 8006302:	2b00      	cmp	r3, #0
 8006304:	d014      	beq.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006306:	f7fd f8a5 	bl	8003454 <HAL_GetTick>
 800630a:	6138      	str	r0, [r7, #16]
 800630c:	e00a      	b.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800630e:	f7fd f8a1 	bl	8003454 <HAL_GetTick>
 8006312:	4602      	mov	r2, r0
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	1ad3      	subs	r3, r2, r3
 8006318:	f241 3288 	movw	r2, #5000	; 0x1388
 800631c:	4293      	cmp	r3, r2
 800631e:	d901      	bls.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8006320:	2303      	movs	r3, #3
 8006322:	e036      	b.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x156>
 8006324:	4b1d      	ldr	r3, [pc, #116]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006326:	6a1b      	ldr	r3, [r3, #32]
 8006328:	f003 0302 	and.w	r3, r3, #2
 800632c:	2b00      	cmp	r3, #0
 800632e:	d0ee      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0xd2>
 8006330:	4b1a      	ldr	r3, [pc, #104]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006332:	6a1b      	ldr	r3, [r3, #32]
 8006334:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	4917      	ldr	r1, [pc, #92]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800633e:	4313      	orrs	r3, r2
 8006340:	620b      	str	r3, [r1, #32]
 8006342:	7dfb      	ldrb	r3, [r7, #23]
 8006344:	2b01      	cmp	r3, #1
 8006346:	d105      	bne.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8006348:	4b14      	ldr	r3, [pc, #80]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800634a:	69db      	ldr	r3, [r3, #28]
 800634c:	4a13      	ldr	r2, [pc, #76]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800634e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006352:	61d3      	str	r3, [r2, #28]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0302 	and.w	r3, r3, #2
 800635c:	2b00      	cmp	r3, #0
 800635e:	d008      	beq.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006360:	4b0e      	ldr	r3, [pc, #56]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	490b      	ldr	r1, [pc, #44]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800636e:	4313      	orrs	r3, r2
 8006370:	604b      	str	r3, [r1, #4]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 0310 	and.w	r3, r3, #16
 800637a:	2b00      	cmp	r3, #0
 800637c:	d008      	beq.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800637e:	4b07      	ldr	r3, [pc, #28]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	4904      	ldr	r1, [pc, #16]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800638c:	4313      	orrs	r3, r2
 800638e:	604b      	str	r3, [r1, #4]
 8006390:	2300      	movs	r3, #0
 8006392:	4618      	mov	r0, r3
 8006394:	3718      	adds	r7, #24
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	40021000 	.word	0x40021000
 80063a0:	40007000 	.word	0x40007000
 80063a4:	42420440 	.word	0x42420440

080063a8 <HAL_SPI_Init>:
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d101      	bne.n	80063ba <HAL_SPI_Init+0x12>
 80063b6:	2301      	movs	r3, #1
 80063b8:	e076      	b.n	80064a8 <HAL_SPI_Init+0x100>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d108      	bne.n	80063d4 <HAL_SPI_Init+0x2c>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063ca:	d009      	beq.n	80063e0 <HAL_SPI_Init+0x38>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	61da      	str	r2, [r3, #28]
 80063d2:	e005      	b.n	80063e0 <HAL_SPI_Init+0x38>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	611a      	str	r2, [r3, #16]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	615a      	str	r2, [r3, #20]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	629a      	str	r2, [r3, #40]	; 0x28
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d106      	bne.n	8006400 <HAL_SPI_Init+0x58>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f7fc fdd4 	bl	8002fa8 <HAL_SPI_MspInit>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2202      	movs	r2, #2
 8006404:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006416:	601a      	str	r2, [r3, #0]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006428:	431a      	orrs	r2, r3
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006432:	431a      	orrs	r2, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	f003 0302 	and.w	r3, r3, #2
 800643c:	431a      	orrs	r2, r3
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	f003 0301 	and.w	r3, r3, #1
 8006446:	431a      	orrs	r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	699b      	ldr	r3, [r3, #24]
 800644c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006450:	431a      	orrs	r2, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	69db      	ldr	r3, [r3, #28]
 8006456:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800645a:	431a      	orrs	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6a1b      	ldr	r3, [r3, #32]
 8006460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006464:	ea42 0103 	orr.w	r1, r2, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800646c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	430a      	orrs	r2, r1
 8006476:	601a      	str	r2, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	699b      	ldr	r3, [r3, #24]
 800647c:	0c1a      	lsrs	r2, r3, #16
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f002 0204 	and.w	r2, r2, #4
 8006486:	605a      	str	r2, [r3, #4]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	69da      	ldr	r2, [r3, #28]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006496:	61da      	str	r2, [r3, #28]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	655a      	str	r2, [r3, #84]	; 0x54
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2201      	movs	r2, #1
 80064a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80064a6:	2300      	movs	r3, #0
 80064a8:	4618      	mov	r0, r3
 80064aa:	3708      	adds	r7, #8
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <HAL_SPI_Transmit>:
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b088      	sub	sp, #32
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	603b      	str	r3, [r7, #0]
 80064bc:	4613      	mov	r3, r2
 80064be:	80fb      	strh	r3, [r7, #6]
 80064c0:	2300      	movs	r3, #0
 80064c2:	77fb      	strb	r3, [r7, #31]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d101      	bne.n	80064d2 <HAL_SPI_Transmit+0x22>
 80064ce:	2302      	movs	r3, #2
 80064d0:	e12d      	b.n	800672e <HAL_SPI_Transmit+0x27e>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2201      	movs	r2, #1
 80064d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80064da:	f7fc ffbb 	bl	8003454 <HAL_GetTick>
 80064de:	61b8      	str	r0, [r7, #24]
 80064e0:	88fb      	ldrh	r3, [r7, #6]
 80064e2:	82fb      	strh	r3, [r7, #22]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d002      	beq.n	80064f6 <HAL_SPI_Transmit+0x46>
 80064f0:	2302      	movs	r3, #2
 80064f2:	77fb      	strb	r3, [r7, #31]
 80064f4:	e116      	b.n	8006724 <HAL_SPI_Transmit+0x274>
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d002      	beq.n	8006502 <HAL_SPI_Transmit+0x52>
 80064fc:	88fb      	ldrh	r3, [r7, #6]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d102      	bne.n	8006508 <HAL_SPI_Transmit+0x58>
 8006502:	2301      	movs	r3, #1
 8006504:	77fb      	strb	r3, [r7, #31]
 8006506:	e10d      	b.n	8006724 <HAL_SPI_Transmit+0x274>
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2203      	movs	r2, #3
 800650c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	655a      	str	r2, [r3, #84]	; 0x54
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	68ba      	ldr	r2, [r7, #8]
 800651a:	631a      	str	r2, [r3, #48]	; 0x30
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	88fa      	ldrh	r2, [r7, #6]
 8006520:	869a      	strh	r2, [r3, #52]	; 0x34
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	88fa      	ldrh	r2, [r7, #6]
 8006526:	86da      	strh	r2, [r3, #54]	; 0x36
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2200      	movs	r2, #0
 800652c:	639a      	str	r2, [r3, #56]	; 0x38
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2200      	movs	r2, #0
 8006532:	879a      	strh	r2, [r3, #60]	; 0x3c
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2200      	movs	r2, #0
 8006538:	87da      	strh	r2, [r3, #62]	; 0x3e
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	645a      	str	r2, [r3, #68]	; 0x44
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2200      	movs	r2, #0
 8006544:	641a      	str	r2, [r3, #64]	; 0x40
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800654e:	d10f      	bne.n	8006570 <HAL_SPI_Transmit+0xc0>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800655e:	601a      	str	r2, [r3, #0]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800656e:	601a      	str	r2, [r3, #0]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800657a:	2b40      	cmp	r3, #64	; 0x40
 800657c:	d007      	beq.n	800658e <HAL_SPI_Transmit+0xde>
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800658c:	601a      	str	r2, [r3, #0]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006596:	d14f      	bne.n	8006638 <HAL_SPI_Transmit+0x188>
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d002      	beq.n	80065a6 <HAL_SPI_Transmit+0xf6>
 80065a0:	8afb      	ldrh	r3, [r7, #22]
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d142      	bne.n	800662c <HAL_SPI_Transmit+0x17c>
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065aa:	881a      	ldrh	r2, [r3, #0]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	60da      	str	r2, [r3, #12]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b6:	1c9a      	adds	r2, r3, #2
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	631a      	str	r2, [r3, #48]	; 0x30
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	3b01      	subs	r3, #1
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	86da      	strh	r2, [r3, #54]	; 0x36
 80065ca:	e02f      	b.n	800662c <HAL_SPI_Transmit+0x17c>
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	f003 0302 	and.w	r3, r3, #2
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	d112      	bne.n	8006600 <HAL_SPI_Transmit+0x150>
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065de:	881a      	ldrh	r2, [r3, #0]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	60da      	str	r2, [r3, #12]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ea:	1c9a      	adds	r2, r3, #2
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	631a      	str	r2, [r3, #48]	; 0x30
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	3b01      	subs	r3, #1
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	86da      	strh	r2, [r3, #54]	; 0x36
 80065fe:	e015      	b.n	800662c <HAL_SPI_Transmit+0x17c>
 8006600:	f7fc ff28 	bl	8003454 <HAL_GetTick>
 8006604:	4602      	mov	r2, r0
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	683a      	ldr	r2, [r7, #0]
 800660c:	429a      	cmp	r2, r3
 800660e:	d803      	bhi.n	8006618 <HAL_SPI_Transmit+0x168>
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006616:	d102      	bne.n	800661e <HAL_SPI_Transmit+0x16e>
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d106      	bne.n	800662c <HAL_SPI_Transmit+0x17c>
 800661e:	2303      	movs	r3, #3
 8006620:	77fb      	strb	r3, [r7, #31]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2201      	movs	r2, #1
 8006626:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800662a:	e07b      	b.n	8006724 <HAL_SPI_Transmit+0x274>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006630:	b29b      	uxth	r3, r3
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1ca      	bne.n	80065cc <HAL_SPI_Transmit+0x11c>
 8006636:	e050      	b.n	80066da <HAL_SPI_Transmit+0x22a>
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d002      	beq.n	8006646 <HAL_SPI_Transmit+0x196>
 8006640:	8afb      	ldrh	r3, [r7, #22]
 8006642:	2b01      	cmp	r3, #1
 8006644:	d144      	bne.n	80066d0 <HAL_SPI_Transmit+0x220>
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	330c      	adds	r3, #12
 8006650:	7812      	ldrb	r2, [r2, #0]
 8006652:	701a      	strb	r2, [r3, #0]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006658:	1c5a      	adds	r2, r3, #1
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	631a      	str	r2, [r3, #48]	; 0x30
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006662:	b29b      	uxth	r3, r3
 8006664:	3b01      	subs	r3, #1
 8006666:	b29a      	uxth	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	86da      	strh	r2, [r3, #54]	; 0x36
 800666c:	e030      	b.n	80066d0 <HAL_SPI_Transmit+0x220>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	f003 0302 	and.w	r3, r3, #2
 8006678:	2b02      	cmp	r3, #2
 800667a:	d113      	bne.n	80066a4 <HAL_SPI_Transmit+0x1f4>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	330c      	adds	r3, #12
 8006686:	7812      	ldrb	r2, [r2, #0]
 8006688:	701a      	strb	r2, [r3, #0]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800668e:	1c5a      	adds	r2, r3, #1
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	631a      	str	r2, [r3, #48]	; 0x30
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006698:	b29b      	uxth	r3, r3
 800669a:	3b01      	subs	r3, #1
 800669c:	b29a      	uxth	r2, r3
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	86da      	strh	r2, [r3, #54]	; 0x36
 80066a2:	e015      	b.n	80066d0 <HAL_SPI_Transmit+0x220>
 80066a4:	f7fc fed6 	bl	8003454 <HAL_GetTick>
 80066a8:	4602      	mov	r2, r0
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	683a      	ldr	r2, [r7, #0]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d803      	bhi.n	80066bc <HAL_SPI_Transmit+0x20c>
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ba:	d102      	bne.n	80066c2 <HAL_SPI_Transmit+0x212>
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d106      	bne.n	80066d0 <HAL_SPI_Transmit+0x220>
 80066c2:	2303      	movs	r3, #3
 80066c4:	77fb      	strb	r3, [r7, #31]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80066ce:	e029      	b.n	8006724 <HAL_SPI_Transmit+0x274>
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d1c9      	bne.n	800666e <HAL_SPI_Transmit+0x1be>
 80066da:	69ba      	ldr	r2, [r7, #24]
 80066dc:	6839      	ldr	r1, [r7, #0]
 80066de:	68f8      	ldr	r0, [r7, #12]
 80066e0:	f000 fbcc 	bl	8006e7c <SPI_EndRxTxTransaction>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d002      	beq.n	80066f0 <HAL_SPI_Transmit+0x240>
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2220      	movs	r2, #32
 80066ee:	655a      	str	r2, [r3, #84]	; 0x54
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d10a      	bne.n	800670e <HAL_SPI_Transmit+0x25e>
 80066f8:	2300      	movs	r3, #0
 80066fa:	613b      	str	r3, [r7, #16]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	613b      	str	r3, [r7, #16]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	613b      	str	r3, [r7, #16]
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006712:	2b00      	cmp	r3, #0
 8006714:	d002      	beq.n	800671c <HAL_SPI_Transmit+0x26c>
 8006716:	2301      	movs	r3, #1
 8006718:	77fb      	strb	r3, [r7, #31]
 800671a:	e003      	b.n	8006724 <HAL_SPI_Transmit+0x274>
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2200      	movs	r2, #0
 8006728:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800672c:	7ffb      	ldrb	r3, [r7, #31]
 800672e:	4618      	mov	r0, r3
 8006730:	3720      	adds	r7, #32
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}

08006736 <HAL_SPI_Receive>:
 8006736:	b580      	push	{r7, lr}
 8006738:	b088      	sub	sp, #32
 800673a:	af02      	add	r7, sp, #8
 800673c:	60f8      	str	r0, [r7, #12]
 800673e:	60b9      	str	r1, [r7, #8]
 8006740:	603b      	str	r3, [r7, #0]
 8006742:	4613      	mov	r3, r2
 8006744:	80fb      	strh	r3, [r7, #6]
 8006746:	2300      	movs	r3, #0
 8006748:	75fb      	strb	r3, [r7, #23]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006750:	b2db      	uxtb	r3, r3
 8006752:	2b01      	cmp	r3, #1
 8006754:	d002      	beq.n	800675c <HAL_SPI_Receive+0x26>
 8006756:	2302      	movs	r3, #2
 8006758:	75fb      	strb	r3, [r7, #23]
 800675a:	e0fb      	b.n	8006954 <HAL_SPI_Receive+0x21e>
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006764:	d112      	bne.n	800678c <HAL_SPI_Receive+0x56>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d10e      	bne.n	800678c <HAL_SPI_Receive+0x56>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2204      	movs	r2, #4
 8006772:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8006776:	88fa      	ldrh	r2, [r7, #6]
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	9300      	str	r3, [sp, #0]
 800677c:	4613      	mov	r3, r2
 800677e:	68ba      	ldr	r2, [r7, #8]
 8006780:	68b9      	ldr	r1, [r7, #8]
 8006782:	68f8      	ldr	r0, [r7, #12]
 8006784:	f000 f8ef 	bl	8006966 <HAL_SPI_TransmitReceive>
 8006788:	4603      	mov	r3, r0
 800678a:	e0e8      	b.n	800695e <HAL_SPI_Receive+0x228>
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006792:	2b01      	cmp	r3, #1
 8006794:	d101      	bne.n	800679a <HAL_SPI_Receive+0x64>
 8006796:	2302      	movs	r3, #2
 8006798:	e0e1      	b.n	800695e <HAL_SPI_Receive+0x228>
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2201      	movs	r2, #1
 800679e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80067a2:	f7fc fe57 	bl	8003454 <HAL_GetTick>
 80067a6:	6138      	str	r0, [r7, #16]
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d002      	beq.n	80067b4 <HAL_SPI_Receive+0x7e>
 80067ae:	88fb      	ldrh	r3, [r7, #6]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d102      	bne.n	80067ba <HAL_SPI_Receive+0x84>
 80067b4:	2301      	movs	r3, #1
 80067b6:	75fb      	strb	r3, [r7, #23]
 80067b8:	e0cc      	b.n	8006954 <HAL_SPI_Receive+0x21e>
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2204      	movs	r2, #4
 80067be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2200      	movs	r2, #0
 80067c6:	655a      	str	r2, [r3, #84]	; 0x54
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	68ba      	ldr	r2, [r7, #8]
 80067cc:	639a      	str	r2, [r3, #56]	; 0x38
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	88fa      	ldrh	r2, [r7, #6]
 80067d2:	879a      	strh	r2, [r3, #60]	; 0x3c
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	88fa      	ldrh	r2, [r7, #6]
 80067d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2200      	movs	r2, #0
 80067de:	631a      	str	r2, [r3, #48]	; 0x30
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2200      	movs	r2, #0
 80067e4:	869a      	strh	r2, [r3, #52]	; 0x34
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2200      	movs	r2, #0
 80067ea:	86da      	strh	r2, [r3, #54]	; 0x36
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	641a      	str	r2, [r3, #64]	; 0x40
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2200      	movs	r2, #0
 80067f6:	645a      	str	r2, [r3, #68]	; 0x44
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006800:	d10f      	bne.n	8006822 <HAL_SPI_Receive+0xec>
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006810:	601a      	str	r2, [r3, #0]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006820:	601a      	str	r2, [r3, #0]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800682c:	2b40      	cmp	r3, #64	; 0x40
 800682e:	d007      	beq.n	8006840 <HAL_SPI_Receive+0x10a>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800683e:	601a      	str	r2, [r3, #0]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d16a      	bne.n	800691e <HAL_SPI_Receive+0x1e8>
 8006848:	e032      	b.n	80068b0 <HAL_SPI_Receive+0x17a>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	f003 0301 	and.w	r3, r3, #1
 8006854:	2b01      	cmp	r3, #1
 8006856:	d115      	bne.n	8006884 <HAL_SPI_Receive+0x14e>
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f103 020c 	add.w	r2, r3, #12
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006864:	7812      	ldrb	r2, [r2, #0]
 8006866:	b2d2      	uxtb	r2, r2
 8006868:	701a      	strb	r2, [r3, #0]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800686e:	1c5a      	adds	r2, r3, #1
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	639a      	str	r2, [r3, #56]	; 0x38
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006878:	b29b      	uxth	r3, r3
 800687a:	3b01      	subs	r3, #1
 800687c:	b29a      	uxth	r2, r3
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006882:	e015      	b.n	80068b0 <HAL_SPI_Receive+0x17a>
 8006884:	f7fc fde6 	bl	8003454 <HAL_GetTick>
 8006888:	4602      	mov	r2, r0
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	1ad3      	subs	r3, r2, r3
 800688e:	683a      	ldr	r2, [r7, #0]
 8006890:	429a      	cmp	r2, r3
 8006892:	d803      	bhi.n	800689c <HAL_SPI_Receive+0x166>
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800689a:	d102      	bne.n	80068a2 <HAL_SPI_Receive+0x16c>
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d106      	bne.n	80068b0 <HAL_SPI_Receive+0x17a>
 80068a2:	2303      	movs	r3, #3
 80068a4:	75fb      	strb	r3, [r7, #23]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2201      	movs	r2, #1
 80068aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80068ae:	e051      	b.n	8006954 <HAL_SPI_Receive+0x21e>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d1c7      	bne.n	800684a <HAL_SPI_Receive+0x114>
 80068ba:	e035      	b.n	8006928 <HAL_SPI_Receive+0x1f2>
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	f003 0301 	and.w	r3, r3, #1
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d113      	bne.n	80068f2 <HAL_SPI_Receive+0x1bc>
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	68da      	ldr	r2, [r3, #12]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d4:	b292      	uxth	r2, r2
 80068d6:	801a      	strh	r2, [r3, #0]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068dc:	1c9a      	adds	r2, r3, #2
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	639a      	str	r2, [r3, #56]	; 0x38
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	3b01      	subs	r3, #1
 80068ea:	b29a      	uxth	r2, r3
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80068f0:	e015      	b.n	800691e <HAL_SPI_Receive+0x1e8>
 80068f2:	f7fc fdaf 	bl	8003454 <HAL_GetTick>
 80068f6:	4602      	mov	r2, r0
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	683a      	ldr	r2, [r7, #0]
 80068fe:	429a      	cmp	r2, r3
 8006900:	d803      	bhi.n	800690a <HAL_SPI_Receive+0x1d4>
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006908:	d102      	bne.n	8006910 <HAL_SPI_Receive+0x1da>
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d106      	bne.n	800691e <HAL_SPI_Receive+0x1e8>
 8006910:	2303      	movs	r3, #3
 8006912:	75fb      	strb	r3, [r7, #23]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800691c:	e01a      	b.n	8006954 <HAL_SPI_Receive+0x21e>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006922:	b29b      	uxth	r3, r3
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1c9      	bne.n	80068bc <HAL_SPI_Receive+0x186>
 8006928:	693a      	ldr	r2, [r7, #16]
 800692a:	6839      	ldr	r1, [r7, #0]
 800692c:	68f8      	ldr	r0, [r7, #12]
 800692e:	f000 fa53 	bl	8006dd8 <SPI_EndRxTransaction>
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	d002      	beq.n	800693e <HAL_SPI_Receive+0x208>
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2220      	movs	r2, #32
 800693c:	655a      	str	r2, [r3, #84]	; 0x54
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006942:	2b00      	cmp	r3, #0
 8006944:	d002      	beq.n	800694c <HAL_SPI_Receive+0x216>
 8006946:	2301      	movs	r3, #1
 8006948:	75fb      	strb	r3, [r7, #23]
 800694a:	e003      	b.n	8006954 <HAL_SPI_Receive+0x21e>
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800695c:	7dfb      	ldrb	r3, [r7, #23]
 800695e:	4618      	mov	r0, r3
 8006960:	3718      	adds	r7, #24
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <HAL_SPI_TransmitReceive>:
 8006966:	b580      	push	{r7, lr}
 8006968:	b08c      	sub	sp, #48	; 0x30
 800696a:	af00      	add	r7, sp, #0
 800696c:	60f8      	str	r0, [r7, #12]
 800696e:	60b9      	str	r1, [r7, #8]
 8006970:	607a      	str	r2, [r7, #4]
 8006972:	807b      	strh	r3, [r7, #2]
 8006974:	2301      	movs	r3, #1
 8006976:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006978:	2300      	movs	r3, #0
 800697a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006984:	2b01      	cmp	r3, #1
 8006986:	d101      	bne.n	800698c <HAL_SPI_TransmitReceive+0x26>
 8006988:	2302      	movs	r3, #2
 800698a:	e198      	b.n	8006cbe <HAL_SPI_TransmitReceive+0x358>
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006994:	f7fc fd5e 	bl	8003454 <HAL_GetTick>
 8006998:	6278      	str	r0, [r7, #36]	; 0x24
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80069a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	61fb      	str	r3, [r7, #28]
 80069aa:	887b      	ldrh	r3, [r7, #2]
 80069ac:	837b      	strh	r3, [r7, #26]
 80069ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d00f      	beq.n	80069d6 <HAL_SPI_TransmitReceive+0x70>
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069bc:	d107      	bne.n	80069ce <HAL_SPI_TransmitReceive+0x68>
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d103      	bne.n	80069ce <HAL_SPI_TransmitReceive+0x68>
 80069c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80069ca:	2b04      	cmp	r3, #4
 80069cc:	d003      	beq.n	80069d6 <HAL_SPI_TransmitReceive+0x70>
 80069ce:	2302      	movs	r3, #2
 80069d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069d4:	e16d      	b.n	8006cb2 <HAL_SPI_TransmitReceive+0x34c>
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d005      	beq.n	80069e8 <HAL_SPI_TransmitReceive+0x82>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d002      	beq.n	80069e8 <HAL_SPI_TransmitReceive+0x82>
 80069e2:	887b      	ldrh	r3, [r7, #2]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d103      	bne.n	80069f0 <HAL_SPI_TransmitReceive+0x8a>
 80069e8:	2301      	movs	r3, #1
 80069ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069ee:	e160      	b.n	8006cb2 <HAL_SPI_TransmitReceive+0x34c>
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	2b04      	cmp	r3, #4
 80069fa:	d003      	beq.n	8006a04 <HAL_SPI_TransmitReceive+0x9e>
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2205      	movs	r2, #5
 8006a00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2200      	movs	r2, #0
 8006a08:	655a      	str	r2, [r3, #84]	; 0x54
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	639a      	str	r2, [r3, #56]	; 0x38
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	887a      	ldrh	r2, [r7, #2]
 8006a14:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	887a      	ldrh	r2, [r7, #2]
 8006a1a:	879a      	strh	r2, [r3, #60]	; 0x3c
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	68ba      	ldr	r2, [r7, #8]
 8006a20:	631a      	str	r2, [r3, #48]	; 0x30
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	887a      	ldrh	r2, [r7, #2]
 8006a26:	86da      	strh	r2, [r3, #54]	; 0x36
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	887a      	ldrh	r2, [r7, #2]
 8006a2c:	869a      	strh	r2, [r3, #52]	; 0x34
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2200      	movs	r2, #0
 8006a32:	641a      	str	r2, [r3, #64]	; 0x40
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2200      	movs	r2, #0
 8006a38:	645a      	str	r2, [r3, #68]	; 0x44
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a44:	2b40      	cmp	r3, #64	; 0x40
 8006a46:	d007      	beq.n	8006a58 <HAL_SPI_TransmitReceive+0xf2>
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a56:	601a      	str	r2, [r3, #0]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a60:	d17c      	bne.n	8006b5c <HAL_SPI_TransmitReceive+0x1f6>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d002      	beq.n	8006a70 <HAL_SPI_TransmitReceive+0x10a>
 8006a6a:	8b7b      	ldrh	r3, [r7, #26]
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d16a      	bne.n	8006b46 <HAL_SPI_TransmitReceive+0x1e0>
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a74:	881a      	ldrh	r2, [r3, #0]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	60da      	str	r2, [r3, #12]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a80:	1c9a      	adds	r2, r3, #2
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	631a      	str	r2, [r3, #48]	; 0x30
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	3b01      	subs	r3, #1
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	86da      	strh	r2, [r3, #54]	; 0x36
 8006a94:	e057      	b.n	8006b46 <HAL_SPI_TransmitReceive+0x1e0>
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	f003 0302 	and.w	r3, r3, #2
 8006aa0:	2b02      	cmp	r3, #2
 8006aa2:	d11b      	bne.n	8006adc <HAL_SPI_TransmitReceive+0x176>
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d016      	beq.n	8006adc <HAL_SPI_TransmitReceive+0x176>
 8006aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d113      	bne.n	8006adc <HAL_SPI_TransmitReceive+0x176>
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab8:	881a      	ldrh	r2, [r3, #0]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	60da      	str	r2, [r3, #12]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac4:	1c9a      	adds	r2, r3, #2
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	631a      	str	r2, [r3, #48]	; 0x30
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	3b01      	subs	r3, #1
 8006ad2:	b29a      	uxth	r2, r3
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	86da      	strh	r2, [r3, #54]	; 0x36
 8006ad8:	2300      	movs	r3, #0
 8006ada:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	f003 0301 	and.w	r3, r3, #1
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d119      	bne.n	8006b1e <HAL_SPI_TransmitReceive+0x1b8>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d014      	beq.n	8006b1e <HAL_SPI_TransmitReceive+0x1b8>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	68da      	ldr	r2, [r3, #12]
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006afe:	b292      	uxth	r2, r2
 8006b00:	801a      	strh	r2, [r3, #0]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b06:	1c9a      	adds	r2, r3, #2
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	639a      	str	r2, [r3, #56]	; 0x38
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	3b01      	subs	r3, #1
 8006b14:	b29a      	uxth	r2, r3
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b1e:	f7fc fc99 	bl	8003454 <HAL_GetTick>
 8006b22:	4602      	mov	r2, r0
 8006b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b26:	1ad3      	subs	r3, r2, r3
 8006b28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d80b      	bhi.n	8006b46 <HAL_SPI_TransmitReceive+0x1e0>
 8006b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b34:	d007      	beq.n	8006b46 <HAL_SPI_TransmitReceive+0x1e0>
 8006b36:	2303      	movs	r3, #3
 8006b38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8006b44:	e0b5      	b.n	8006cb2 <HAL_SPI_TransmitReceive+0x34c>
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d1a2      	bne.n	8006a96 <HAL_SPI_TransmitReceive+0x130>
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d19d      	bne.n	8006a96 <HAL_SPI_TransmitReceive+0x130>
 8006b5a:	e080      	b.n	8006c5e <HAL_SPI_TransmitReceive+0x2f8>
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d002      	beq.n	8006b6a <HAL_SPI_TransmitReceive+0x204>
 8006b64:	8b7b      	ldrh	r3, [r7, #26]
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d16f      	bne.n	8006c4a <HAL_SPI_TransmitReceive+0x2e4>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	330c      	adds	r3, #12
 8006b74:	7812      	ldrb	r2, [r2, #0]
 8006b76:	701a      	strb	r2, [r3, #0]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b7c:	1c5a      	adds	r2, r3, #1
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	631a      	str	r2, [r3, #48]	; 0x30
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	b29a      	uxth	r2, r3
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006b90:	e05b      	b.n	8006c4a <HAL_SPI_TransmitReceive+0x2e4>
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	f003 0302 	and.w	r3, r3, #2
 8006b9c:	2b02      	cmp	r3, #2
 8006b9e:	d11c      	bne.n	8006bda <HAL_SPI_TransmitReceive+0x274>
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d017      	beq.n	8006bda <HAL_SPI_TransmitReceive+0x274>
 8006baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d114      	bne.n	8006bda <HAL_SPI_TransmitReceive+0x274>
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	330c      	adds	r3, #12
 8006bba:	7812      	ldrb	r2, [r2, #0]
 8006bbc:	701a      	strb	r2, [r3, #0]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc2:	1c5a      	adds	r2, r3, #1
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	631a      	str	r2, [r3, #48]	; 0x30
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	86da      	strh	r2, [r3, #54]	; 0x36
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	f003 0301 	and.w	r3, r3, #1
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d119      	bne.n	8006c1c <HAL_SPI_TransmitReceive+0x2b6>
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d014      	beq.n	8006c1c <HAL_SPI_TransmitReceive+0x2b6>
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	68da      	ldr	r2, [r3, #12]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bfc:	b2d2      	uxtb	r2, r2
 8006bfe:	701a      	strb	r2, [r3, #0]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c04:	1c5a      	adds	r2, r3, #1
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	639a      	str	r2, [r3, #56]	; 0x38
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	3b01      	subs	r3, #1
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c18:	2301      	movs	r3, #1
 8006c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c1c:	f7fc fc1a 	bl	8003454 <HAL_GetTick>
 8006c20:	4602      	mov	r2, r0
 8006c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d803      	bhi.n	8006c34 <HAL_SPI_TransmitReceive+0x2ce>
 8006c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c32:	d102      	bne.n	8006c3a <HAL_SPI_TransmitReceive+0x2d4>
 8006c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d107      	bne.n	8006c4a <HAL_SPI_TransmitReceive+0x2e4>
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8006c48:	e033      	b.n	8006cb2 <HAL_SPI_TransmitReceive+0x34c>
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d19e      	bne.n	8006b92 <HAL_SPI_TransmitReceive+0x22c>
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d199      	bne.n	8006b92 <HAL_SPI_TransmitReceive+0x22c>
 8006c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006c62:	68f8      	ldr	r0, [r7, #12]
 8006c64:	f000 f90a 	bl	8006e7c <SPI_EndRxTxTransaction>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d006      	beq.n	8006c7c <HAL_SPI_TransmitReceive+0x316>
 8006c6e:	2301      	movs	r3, #1
 8006c70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2220      	movs	r2, #32
 8006c78:	655a      	str	r2, [r3, #84]	; 0x54
 8006c7a:	e01a      	b.n	8006cb2 <HAL_SPI_TransmitReceive+0x34c>
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d10a      	bne.n	8006c9a <HAL_SPI_TransmitReceive+0x334>
 8006c84:	2300      	movs	r3, #0
 8006c86:	617b      	str	r3, [r7, #20]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	617b      	str	r3, [r7, #20]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	617b      	str	r3, [r7, #20]
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d003      	beq.n	8006caa <HAL_SPI_TransmitReceive+0x344>
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ca8:	e003      	b.n	8006cb2 <HAL_SPI_TransmitReceive+0x34c>
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2201      	movs	r2, #1
 8006cae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006cba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3730      	adds	r7, #48	; 0x30
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
	...

08006cc8 <SPI_WaitFlagStateUntilTimeout>:
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b088      	sub	sp, #32
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	603b      	str	r3, [r7, #0]
 8006cd4:	4613      	mov	r3, r2
 8006cd6:	71fb      	strb	r3, [r7, #7]
 8006cd8:	f7fc fbbc 	bl	8003454 <HAL_GetTick>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce0:	1a9b      	subs	r3, r3, r2
 8006ce2:	683a      	ldr	r2, [r7, #0]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	61fb      	str	r3, [r7, #28]
 8006ce8:	f7fc fbb4 	bl	8003454 <HAL_GetTick>
 8006cec:	61b8      	str	r0, [r7, #24]
 8006cee:	4b39      	ldr	r3, [pc, #228]	; (8006dd4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	015b      	lsls	r3, r3, #5
 8006cf4:	0d1b      	lsrs	r3, r3, #20
 8006cf6:	69fa      	ldr	r2, [r7, #28]
 8006cf8:	fb02 f303 	mul.w	r3, r2, r3
 8006cfc:	617b      	str	r3, [r7, #20]
 8006cfe:	e054      	b.n	8006daa <SPI_WaitFlagStateUntilTimeout+0xe2>
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d06:	d050      	beq.n	8006daa <SPI_WaitFlagStateUntilTimeout+0xe2>
 8006d08:	f7fc fba4 	bl	8003454 <HAL_GetTick>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	1ad3      	subs	r3, r2, r3
 8006d12:	69fa      	ldr	r2, [r7, #28]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d902      	bls.n	8006d1e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d13d      	bne.n	8006d9a <SPI_WaitFlagStateUntilTimeout+0xd2>
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	685a      	ldr	r2, [r3, #4]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006d2c:	605a      	str	r2, [r3, #4]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d36:	d111      	bne.n	8006d5c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d40:	d004      	beq.n	8006d4c <SPI_WaitFlagStateUntilTimeout+0x84>
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d4a:	d107      	bne.n	8006d5c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d5a:	601a      	str	r2, [r3, #0]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d64:	d10f      	bne.n	8006d86 <SPI_WaitFlagStateUntilTimeout+0xbe>
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d74:	601a      	str	r2, [r3, #0]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d84:	601a      	str	r2, [r3, #0]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006d96:	2303      	movs	r3, #3
 8006d98:	e017      	b.n	8006dca <SPI_WaitFlagStateUntilTimeout+0x102>
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d101      	bne.n	8006da4 <SPI_WaitFlagStateUntilTimeout+0xdc>
 8006da0:	2300      	movs	r3, #0
 8006da2:	61fb      	str	r3, [r7, #28]
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	3b01      	subs	r3, #1
 8006da8:	617b      	str	r3, [r7, #20]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	689a      	ldr	r2, [r3, #8]
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	4013      	ands	r3, r2
 8006db4:	68ba      	ldr	r2, [r7, #8]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	bf0c      	ite	eq
 8006dba:	2301      	moveq	r3, #1
 8006dbc:	2300      	movne	r3, #0
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	79fb      	ldrb	r3, [r7, #7]
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d19b      	bne.n	8006d00 <SPI_WaitFlagStateUntilTimeout+0x38>
 8006dc8:	2300      	movs	r3, #0
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3720      	adds	r7, #32
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	20000000 	.word	0x20000000

08006dd8 <SPI_EndRxTransaction>:
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b086      	sub	sp, #24
 8006ddc:	af02      	add	r7, sp, #8
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	607a      	str	r2, [r7, #4]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006dec:	d111      	bne.n	8006e12 <SPI_EndRxTransaction+0x3a>
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006df6:	d004      	beq.n	8006e02 <SPI_EndRxTransaction+0x2a>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e00:	d107      	bne.n	8006e12 <SPI_EndRxTransaction+0x3a>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e10:	601a      	str	r2, [r3, #0]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e1a:	d117      	bne.n	8006e4c <SPI_EndRxTransaction+0x74>
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e24:	d112      	bne.n	8006e4c <SPI_EndRxTransaction+0x74>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	9300      	str	r3, [sp, #0]
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	2101      	movs	r1, #1
 8006e30:	68f8      	ldr	r0, [r7, #12]
 8006e32:	f7ff ff49 	bl	8006cc8 <SPI_WaitFlagStateUntilTimeout>
 8006e36:	4603      	mov	r3, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d01a      	beq.n	8006e72 <SPI_EndRxTransaction+0x9a>
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e40:	f043 0220 	orr.w	r2, r3, #32
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	655a      	str	r2, [r3, #84]	; 0x54
 8006e48:	2303      	movs	r3, #3
 8006e4a:	e013      	b.n	8006e74 <SPI_EndRxTransaction+0x9c>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	9300      	str	r3, [sp, #0]
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	2200      	movs	r2, #0
 8006e54:	2180      	movs	r1, #128	; 0x80
 8006e56:	68f8      	ldr	r0, [r7, #12]
 8006e58:	f7ff ff36 	bl	8006cc8 <SPI_WaitFlagStateUntilTimeout>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d007      	beq.n	8006e72 <SPI_EndRxTransaction+0x9a>
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e66:	f043 0220 	orr.w	r2, r3, #32
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	655a      	str	r2, [r3, #84]	; 0x54
 8006e6e:	2303      	movs	r3, #3
 8006e70:	e000      	b.n	8006e74 <SPI_EndRxTransaction+0x9c>
 8006e72:	2300      	movs	r3, #0
 8006e74:	4618      	mov	r0, r3
 8006e76:	3710      	adds	r7, #16
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <SPI_EndRxTxTransaction>:
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b086      	sub	sp, #24
 8006e80:	af02      	add	r7, sp, #8
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	60b9      	str	r1, [r7, #8]
 8006e86:	607a      	str	r2, [r7, #4]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	9300      	str	r3, [sp, #0]
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	2180      	movs	r1, #128	; 0x80
 8006e92:	68f8      	ldr	r0, [r7, #12]
 8006e94:	f7ff ff18 	bl	8006cc8 <SPI_WaitFlagStateUntilTimeout>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d007      	beq.n	8006eae <SPI_EndRxTxTransaction+0x32>
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ea2:	f043 0220 	orr.w	r2, r3, #32
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	655a      	str	r2, [r3, #84]	; 0x54
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e000      	b.n	8006eb0 <SPI_EndRxTxTransaction+0x34>
 8006eae:	2300      	movs	r3, #0
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3710      	adds	r7, #16
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <HAL_UART_Init>:
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b082      	sub	sp, #8
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d101      	bne.n	8006eca <HAL_UART_Init+0x12>
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e042      	b.n	8006f50 <HAL_UART_Init+0x98>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d106      	bne.n	8006ee4 <HAL_UART_Init+0x2c>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f7fc f8ac 	bl	800303c <HAL_UART_MspInit>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2224      	movs	r2, #36	; 0x24
 8006ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	68da      	ldr	r2, [r3, #12]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006efa:	60da      	str	r2, [r3, #12]
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 fcd5 	bl	80078ac <UART_SetConfig>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	691a      	ldr	r2, [r3, #16]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f10:	611a      	str	r2, [r3, #16]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	695a      	ldr	r2, [r3, #20]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f20:	615a      	str	r2, [r3, #20]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	68da      	ldr	r2, [r3, #12]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f30:	60da      	str	r2, [r3, #12]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	645a      	str	r2, [r3, #68]	; 0x44
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2220      	movs	r2, #32
 8006f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2220      	movs	r2, #32
 8006f44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	635a      	str	r2, [r3, #52]	; 0x34
 8006f4e:	2300      	movs	r3, #0
 8006f50:	4618      	mov	r0, r3
 8006f52:	3708      	adds	r7, #8
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <HAL_UART_Receive_IT>:
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b084      	sub	sp, #16
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	4613      	mov	r3, r2
 8006f64:	80fb      	strh	r3, [r7, #6]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	2b20      	cmp	r3, #32
 8006f70:	d112      	bne.n	8006f98 <HAL_UART_Receive_IT+0x40>
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d002      	beq.n	8006f7e <HAL_UART_Receive_IT+0x26>
 8006f78:	88fb      	ldrh	r3, [r7, #6]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d101      	bne.n	8006f82 <HAL_UART_Receive_IT+0x2a>
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e00b      	b.n	8006f9a <HAL_UART_Receive_IT+0x42>
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2200      	movs	r2, #0
 8006f86:	631a      	str	r2, [r3, #48]	; 0x30
 8006f88:	88fb      	ldrh	r3, [r7, #6]
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	68b9      	ldr	r1, [r7, #8]
 8006f8e:	68f8      	ldr	r0, [r7, #12]
 8006f90:	f000 fab7 	bl	8007502 <UART_Start_Receive_IT>
 8006f94:	4603      	mov	r3, r0
 8006f96:	e000      	b.n	8006f9a <HAL_UART_Receive_IT+0x42>
 8006f98:	2302      	movs	r3, #2
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3710      	adds	r7, #16
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
	...

08006fa4 <HAL_UART_IRQHandler>:
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b0ba      	sub	sp, #232	; 0xe8
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	695b      	ldr	r3, [r3, #20]
 8006fc6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006fca:	2300      	movs	r3, #0
 8006fcc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fda:	f003 030f 	and.w	r3, r3, #15
 8006fde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006fe2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d10f      	bne.n	800700a <HAL_UART_IRQHandler+0x66>
 8006fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fee:	f003 0320 	and.w	r3, r3, #32
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d009      	beq.n	800700a <HAL_UART_IRQHandler+0x66>
 8006ff6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ffa:	f003 0320 	and.w	r3, r3, #32
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d003      	beq.n	800700a <HAL_UART_IRQHandler+0x66>
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 fb93 	bl	800772e <UART_Receive_IT>
 8007008:	e25b      	b.n	80074c2 <HAL_UART_IRQHandler+0x51e>
 800700a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800700e:	2b00      	cmp	r3, #0
 8007010:	f000 80de 	beq.w	80071d0 <HAL_UART_IRQHandler+0x22c>
 8007014:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007018:	f003 0301 	and.w	r3, r3, #1
 800701c:	2b00      	cmp	r3, #0
 800701e:	d106      	bne.n	800702e <HAL_UART_IRQHandler+0x8a>
 8007020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007024:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007028:	2b00      	cmp	r3, #0
 800702a:	f000 80d1 	beq.w	80071d0 <HAL_UART_IRQHandler+0x22c>
 800702e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007032:	f003 0301 	and.w	r3, r3, #1
 8007036:	2b00      	cmp	r3, #0
 8007038:	d00b      	beq.n	8007052 <HAL_UART_IRQHandler+0xae>
 800703a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800703e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007042:	2b00      	cmp	r3, #0
 8007044:	d005      	beq.n	8007052 <HAL_UART_IRQHandler+0xae>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800704a:	f043 0201 	orr.w	r2, r3, #1
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	645a      	str	r2, [r3, #68]	; 0x44
 8007052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007056:	f003 0304 	and.w	r3, r3, #4
 800705a:	2b00      	cmp	r3, #0
 800705c:	d00b      	beq.n	8007076 <HAL_UART_IRQHandler+0xd2>
 800705e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007062:	f003 0301 	and.w	r3, r3, #1
 8007066:	2b00      	cmp	r3, #0
 8007068:	d005      	beq.n	8007076 <HAL_UART_IRQHandler+0xd2>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800706e:	f043 0202 	orr.w	r2, r3, #2
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	645a      	str	r2, [r3, #68]	; 0x44
 8007076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800707a:	f003 0302 	and.w	r3, r3, #2
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00b      	beq.n	800709a <HAL_UART_IRQHandler+0xf6>
 8007082:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007086:	f003 0301 	and.w	r3, r3, #1
 800708a:	2b00      	cmp	r3, #0
 800708c:	d005      	beq.n	800709a <HAL_UART_IRQHandler+0xf6>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007092:	f043 0204 	orr.w	r2, r3, #4
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	645a      	str	r2, [r3, #68]	; 0x44
 800709a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800709e:	f003 0308 	and.w	r3, r3, #8
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d011      	beq.n	80070ca <HAL_UART_IRQHandler+0x126>
 80070a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070aa:	f003 0320 	and.w	r3, r3, #32
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d105      	bne.n	80070be <HAL_UART_IRQHandler+0x11a>
 80070b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070b6:	f003 0301 	and.w	r3, r3, #1
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d005      	beq.n	80070ca <HAL_UART_IRQHandler+0x126>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070c2:	f043 0208 	orr.w	r2, r3, #8
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	645a      	str	r2, [r3, #68]	; 0x44
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	f000 81f2 	beq.w	80074b8 <HAL_UART_IRQHandler+0x514>
 80070d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070d8:	f003 0320 	and.w	r3, r3, #32
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d008      	beq.n	80070f2 <HAL_UART_IRQHandler+0x14e>
 80070e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070e4:	f003 0320 	and.w	r3, r3, #32
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d002      	beq.n	80070f2 <HAL_UART_IRQHandler+0x14e>
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 fb1e 	bl	800772e <UART_Receive_IT>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	695b      	ldr	r3, [r3, #20]
 80070f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	bf14      	ite	ne
 8007100:	2301      	movne	r3, #1
 8007102:	2300      	moveq	r3, #0
 8007104:	b2db      	uxtb	r3, r3
 8007106:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800710e:	f003 0308 	and.w	r3, r3, #8
 8007112:	2b00      	cmp	r3, #0
 8007114:	d103      	bne.n	800711e <HAL_UART_IRQHandler+0x17a>
 8007116:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800711a:	2b00      	cmp	r3, #0
 800711c:	d04f      	beq.n	80071be <HAL_UART_IRQHandler+0x21a>
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 fa28 	bl	8007574 <UART_EndRxTransfer>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	695b      	ldr	r3, [r3, #20]
 800712a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800712e:	2b00      	cmp	r3, #0
 8007130:	d041      	beq.n	80071b6 <HAL_UART_IRQHandler+0x212>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	3314      	adds	r3, #20
 8007138:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800713c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007140:	e853 3f00 	ldrex	r3, [r3]
 8007144:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007148:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800714c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007150:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	3314      	adds	r3, #20
 800715a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800715e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007162:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007166:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800716a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800716e:	e841 2300 	strex	r3, r2, [r1]
 8007172:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007176:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d1d9      	bne.n	8007132 <HAL_UART_IRQHandler+0x18e>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007182:	2b00      	cmp	r3, #0
 8007184:	d013      	beq.n	80071ae <HAL_UART_IRQHandler+0x20a>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800718a:	4a7e      	ldr	r2, [pc, #504]	; (8007384 <HAL_UART_IRQHandler+0x3e0>)
 800718c:	635a      	str	r2, [r3, #52]	; 0x34
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007192:	4618      	mov	r0, r3
 8007194:	f7fc fd02 	bl	8003b9c <HAL_DMA_Abort_IT>
 8007198:	4603      	mov	r3, r0
 800719a:	2b00      	cmp	r3, #0
 800719c:	d016      	beq.n	80071cc <HAL_UART_IRQHandler+0x228>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80071a8:	4610      	mov	r0, r2
 80071aa:	4798      	blx	r3
 80071ac:	e00e      	b.n	80071cc <HAL_UART_IRQHandler+0x228>
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 f993 	bl	80074da <HAL_UART_ErrorCallback>
 80071b4:	e00a      	b.n	80071cc <HAL_UART_IRQHandler+0x228>
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 f98f 	bl	80074da <HAL_UART_ErrorCallback>
 80071bc:	e006      	b.n	80071cc <HAL_UART_IRQHandler+0x228>
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 f98b 	bl	80074da <HAL_UART_ErrorCallback>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	645a      	str	r2, [r3, #68]	; 0x44
 80071ca:	e175      	b.n	80074b8 <HAL_UART_IRQHandler+0x514>
 80071cc:	bf00      	nop
 80071ce:	e173      	b.n	80074b8 <HAL_UART_IRQHandler+0x514>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	f040 814f 	bne.w	8007478 <HAL_UART_IRQHandler+0x4d4>
 80071da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071de:	f003 0310 	and.w	r3, r3, #16
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	f000 8148 	beq.w	8007478 <HAL_UART_IRQHandler+0x4d4>
 80071e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071ec:	f003 0310 	and.w	r3, r3, #16
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	f000 8141 	beq.w	8007478 <HAL_UART_IRQHandler+0x4d4>
 80071f6:	2300      	movs	r3, #0
 80071f8:	60bb      	str	r3, [r7, #8]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	60bb      	str	r3, [r7, #8]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	60bb      	str	r3, [r7, #8]
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	695b      	ldr	r3, [r3, #20]
 8007212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007216:	2b00      	cmp	r3, #0
 8007218:	f000 80b6 	beq.w	8007388 <HAL_UART_IRQHandler+0x3e4>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 8007228:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800722c:	2b00      	cmp	r3, #0
 800722e:	f000 8145 	beq.w	80074bc <HAL_UART_IRQHandler+0x518>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007236:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800723a:	429a      	cmp	r2, r3
 800723c:	f080 813e 	bcs.w	80074bc <HAL_UART_IRQHandler+0x518>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007246:	85da      	strh	r2, [r3, #46]	; 0x2e
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800724c:	699b      	ldr	r3, [r3, #24]
 800724e:	2b20      	cmp	r3, #32
 8007250:	f000 8088 	beq.w	8007364 <HAL_UART_IRQHandler+0x3c0>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	330c      	adds	r3, #12
 800725a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800725e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007262:	e853 3f00 	ldrex	r3, [r3]
 8007266:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800726a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800726e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007272:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	330c      	adds	r3, #12
 800727c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007280:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007284:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007288:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800728c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007290:	e841 2300 	strex	r3, r2, [r1]
 8007294:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007298:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800729c:	2b00      	cmp	r3, #0
 800729e:	d1d9      	bne.n	8007254 <HAL_UART_IRQHandler+0x2b0>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	3314      	adds	r3, #20
 80072a6:	677b      	str	r3, [r7, #116]	; 0x74
 80072a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072aa:	e853 3f00 	ldrex	r3, [r3]
 80072ae:	673b      	str	r3, [r7, #112]	; 0x70
 80072b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072b2:	f023 0301 	bic.w	r3, r3, #1
 80072b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	3314      	adds	r3, #20
 80072c0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80072c4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80072c8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80072ca:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80072cc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80072d0:	e841 2300 	strex	r3, r2, [r1]
 80072d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80072d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d1e1      	bne.n	80072a0 <HAL_UART_IRQHandler+0x2fc>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	3314      	adds	r3, #20
 80072e2:	663b      	str	r3, [r7, #96]	; 0x60
 80072e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072e6:	e853 3f00 	ldrex	r3, [r3]
 80072ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	3314      	adds	r3, #20
 80072fc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007300:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007302:	66bb      	str	r3, [r7, #104]	; 0x68
 8007304:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007306:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007308:	e841 2300 	strex	r3, r2, [r1]
 800730c:	667b      	str	r3, [r7, #100]	; 0x64
 800730e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007310:	2b00      	cmp	r3, #0
 8007312:	d1e3      	bne.n	80072dc <HAL_UART_IRQHandler+0x338>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2220      	movs	r2, #32
 8007318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	631a      	str	r2, [r3, #48]	; 0x30
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	330c      	adds	r3, #12
 8007328:	64fb      	str	r3, [r7, #76]	; 0x4c
 800732a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800732c:	e853 3f00 	ldrex	r3, [r3]
 8007330:	64bb      	str	r3, [r7, #72]	; 0x48
 8007332:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007334:	f023 0310 	bic.w	r3, r3, #16
 8007338:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	330c      	adds	r3, #12
 8007342:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007346:	65ba      	str	r2, [r7, #88]	; 0x58
 8007348:	657b      	str	r3, [r7, #84]	; 0x54
 800734a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800734c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800734e:	e841 2300 	strex	r3, r2, [r1]
 8007352:	653b      	str	r3, [r7, #80]	; 0x50
 8007354:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007356:	2b00      	cmp	r3, #0
 8007358:	d1e3      	bne.n	8007322 <HAL_UART_IRQHandler+0x37e>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800735e:	4618      	mov	r0, r3
 8007360:	f7fc fbe1 	bl	8003b26 <HAL_DMA_Abort>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2202      	movs	r2, #2
 8007368:	635a      	str	r2, [r3, #52]	; 0x34
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007372:	b29b      	uxth	r3, r3
 8007374:	1ad3      	subs	r3, r2, r3
 8007376:	b29b      	uxth	r3, r3
 8007378:	4619      	mov	r1, r3
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 f8b6 	bl	80074ec <HAL_UARTEx_RxEventCallback>
 8007380:	e09c      	b.n	80074bc <HAL_UART_IRQHandler+0x518>
 8007382:	bf00      	nop
 8007384:	08007639 	.word	0x08007639
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007390:	b29b      	uxth	r3, r3
 8007392:	1ad3      	subs	r3, r2, r3
 8007394:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800739c:	b29b      	uxth	r3, r3
 800739e:	2b00      	cmp	r3, #0
 80073a0:	f000 808e 	beq.w	80074c0 <HAL_UART_IRQHandler+0x51c>
 80073a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	f000 8089 	beq.w	80074c0 <HAL_UART_IRQHandler+0x51c>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	330c      	adds	r3, #12
 80073b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80073b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b8:	e853 3f00 	ldrex	r3, [r3]
 80073bc:	637b      	str	r3, [r7, #52]	; 0x34
 80073be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	330c      	adds	r3, #12
 80073ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80073d2:	647a      	str	r2, [r7, #68]	; 0x44
 80073d4:	643b      	str	r3, [r7, #64]	; 0x40
 80073d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80073d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073da:	e841 2300 	strex	r3, r2, [r1]
 80073de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d1e3      	bne.n	80073ae <HAL_UART_IRQHandler+0x40a>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	3314      	adds	r3, #20
 80073ec:	627b      	str	r3, [r7, #36]	; 0x24
 80073ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f0:	e853 3f00 	ldrex	r3, [r3]
 80073f4:	623b      	str	r3, [r7, #32]
 80073f6:	6a3b      	ldr	r3, [r7, #32]
 80073f8:	f023 0301 	bic.w	r3, r3, #1
 80073fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	3314      	adds	r3, #20
 8007406:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800740a:	633a      	str	r2, [r7, #48]	; 0x30
 800740c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800740e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007412:	e841 2300 	strex	r3, r2, [r1]
 8007416:	62bb      	str	r3, [r7, #40]	; 0x28
 8007418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741a:	2b00      	cmp	r3, #0
 800741c:	d1e3      	bne.n	80073e6 <HAL_UART_IRQHandler+0x442>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2220      	movs	r2, #32
 8007422:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	631a      	str	r2, [r3, #48]	; 0x30
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	330c      	adds	r3, #12
 8007432:	613b      	str	r3, [r7, #16]
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	e853 3f00 	ldrex	r3, [r3]
 800743a:	60fb      	str	r3, [r7, #12]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f023 0310 	bic.w	r3, r3, #16
 8007442:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	330c      	adds	r3, #12
 800744c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007450:	61fa      	str	r2, [r7, #28]
 8007452:	61bb      	str	r3, [r7, #24]
 8007454:	69b9      	ldr	r1, [r7, #24]
 8007456:	69fa      	ldr	r2, [r7, #28]
 8007458:	e841 2300 	strex	r3, r2, [r1]
 800745c:	617b      	str	r3, [r7, #20]
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d1e3      	bne.n	800742c <HAL_UART_IRQHandler+0x488>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2202      	movs	r2, #2
 8007468:	635a      	str	r2, [r3, #52]	; 0x34
 800746a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800746e:	4619      	mov	r1, r3
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 f83b 	bl	80074ec <HAL_UARTEx_RxEventCallback>
 8007476:	e023      	b.n	80074c0 <HAL_UART_IRQHandler+0x51c>
 8007478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800747c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007480:	2b00      	cmp	r3, #0
 8007482:	d009      	beq.n	8007498 <HAL_UART_IRQHandler+0x4f4>
 8007484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800748c:	2b00      	cmp	r3, #0
 800748e:	d003      	beq.n	8007498 <HAL_UART_IRQHandler+0x4f4>
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 f8e5 	bl	8007660 <UART_Transmit_IT>
 8007496:	e014      	b.n	80074c2 <HAL_UART_IRQHandler+0x51e>
 8007498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800749c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d00e      	beq.n	80074c2 <HAL_UART_IRQHandler+0x51e>
 80074a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d008      	beq.n	80074c2 <HAL_UART_IRQHandler+0x51e>
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 f924 	bl	80076fe <UART_EndTransmit_IT>
 80074b6:	e004      	b.n	80074c2 <HAL_UART_IRQHandler+0x51e>
 80074b8:	bf00      	nop
 80074ba:	e002      	b.n	80074c2 <HAL_UART_IRQHandler+0x51e>
 80074bc:	bf00      	nop
 80074be:	e000      	b.n	80074c2 <HAL_UART_IRQHandler+0x51e>
 80074c0:	bf00      	nop
 80074c2:	37e8      	adds	r7, #232	; 0xe8
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <HAL_UART_TxCpltCallback>:
 80074c8:	b480      	push	{r7}
 80074ca:	b083      	sub	sp, #12
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	bf00      	nop
 80074d2:	370c      	adds	r7, #12
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bc80      	pop	{r7}
 80074d8:	4770      	bx	lr

080074da <HAL_UART_ErrorCallback>:
 80074da:	b480      	push	{r7}
 80074dc:	b083      	sub	sp, #12
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
 80074e2:	bf00      	nop
 80074e4:	370c      	adds	r7, #12
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bc80      	pop	{r7}
 80074ea:	4770      	bx	lr

080074ec <HAL_UARTEx_RxEventCallback>:
 80074ec:	b480      	push	{r7}
 80074ee:	b083      	sub	sp, #12
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	460b      	mov	r3, r1
 80074f6:	807b      	strh	r3, [r7, #2]
 80074f8:	bf00      	nop
 80074fa:	370c      	adds	r7, #12
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bc80      	pop	{r7}
 8007500:	4770      	bx	lr

08007502 <UART_Start_Receive_IT>:
 8007502:	b480      	push	{r7}
 8007504:	b085      	sub	sp, #20
 8007506:	af00      	add	r7, sp, #0
 8007508:	60f8      	str	r0, [r7, #12]
 800750a:	60b9      	str	r1, [r7, #8]
 800750c:	4613      	mov	r3, r2
 800750e:	80fb      	strh	r3, [r7, #6]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	68ba      	ldr	r2, [r7, #8]
 8007514:	629a      	str	r2, [r3, #40]	; 0x28
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	88fa      	ldrh	r2, [r7, #6]
 800751a:	859a      	strh	r2, [r3, #44]	; 0x2c
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	88fa      	ldrh	r2, [r7, #6]
 8007520:	85da      	strh	r2, [r3, #46]	; 0x2e
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2200      	movs	r2, #0
 8007526:	645a      	str	r2, [r3, #68]	; 0x44
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2222      	movs	r2, #34	; 0x22
 800752c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	691b      	ldr	r3, [r3, #16]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d007      	beq.n	8007548 <UART_Start_Receive_IT+0x46>
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	68da      	ldr	r2, [r3, #12]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007546:	60da      	str	r2, [r3, #12]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	695a      	ldr	r2, [r3, #20]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f042 0201 	orr.w	r2, r2, #1
 8007556:	615a      	str	r2, [r3, #20]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	68da      	ldr	r2, [r3, #12]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f042 0220 	orr.w	r2, r2, #32
 8007566:	60da      	str	r2, [r3, #12]
 8007568:	2300      	movs	r3, #0
 800756a:	4618      	mov	r0, r3
 800756c:	3714      	adds	r7, #20
 800756e:	46bd      	mov	sp, r7
 8007570:	bc80      	pop	{r7}
 8007572:	4770      	bx	lr

08007574 <UART_EndRxTransfer>:
 8007574:	b480      	push	{r7}
 8007576:	b095      	sub	sp, #84	; 0x54
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	330c      	adds	r3, #12
 8007582:	637b      	str	r3, [r7, #52]	; 0x34
 8007584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007586:	e853 3f00 	ldrex	r3, [r3]
 800758a:	633b      	str	r3, [r7, #48]	; 0x30
 800758c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007592:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	330c      	adds	r3, #12
 800759a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800759c:	643a      	str	r2, [r7, #64]	; 0x40
 800759e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80075a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80075a4:	e841 2300 	strex	r3, r2, [r1]
 80075a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80075aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d1e5      	bne.n	800757c <UART_EndRxTransfer+0x8>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	3314      	adds	r3, #20
 80075b6:	623b      	str	r3, [r7, #32]
 80075b8:	6a3b      	ldr	r3, [r7, #32]
 80075ba:	e853 3f00 	ldrex	r3, [r3]
 80075be:	61fb      	str	r3, [r7, #28]
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	f023 0301 	bic.w	r3, r3, #1
 80075c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	3314      	adds	r3, #20
 80075ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80075d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80075d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075d8:	e841 2300 	strex	r3, r2, [r1]
 80075dc:	627b      	str	r3, [r7, #36]	; 0x24
 80075de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d1e5      	bne.n	80075b0 <UART_EndRxTransfer+0x3c>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d119      	bne.n	8007620 <UART_EndRxTransfer+0xac>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	330c      	adds	r3, #12
 80075f2:	60fb      	str	r3, [r7, #12]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	e853 3f00 	ldrex	r3, [r3]
 80075fa:	60bb      	str	r3, [r7, #8]
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	f023 0310 	bic.w	r3, r3, #16
 8007602:	647b      	str	r3, [r7, #68]	; 0x44
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	330c      	adds	r3, #12
 800760a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800760c:	61ba      	str	r2, [r7, #24]
 800760e:	617b      	str	r3, [r7, #20]
 8007610:	6979      	ldr	r1, [r7, #20]
 8007612:	69ba      	ldr	r2, [r7, #24]
 8007614:	e841 2300 	strex	r3, r2, [r1]
 8007618:	613b      	str	r3, [r7, #16]
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d1e5      	bne.n	80075ec <UART_EndRxTransfer+0x78>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2220      	movs	r2, #32
 8007624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	631a      	str	r2, [r3, #48]	; 0x30
 800762e:	bf00      	nop
 8007630:	3754      	adds	r7, #84	; 0x54
 8007632:	46bd      	mov	sp, r7
 8007634:	bc80      	pop	{r7}
 8007636:	4770      	bx	lr

08007638 <UART_DMAAbortOnError>:
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007644:	60fb      	str	r3, [r7, #12]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2200      	movs	r2, #0
 800764a:	85da      	strh	r2, [r3, #46]	; 0x2e
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2200      	movs	r2, #0
 8007650:	84da      	strh	r2, [r3, #38]	; 0x26
 8007652:	68f8      	ldr	r0, [r7, #12]
 8007654:	f7ff ff41 	bl	80074da <HAL_UART_ErrorCallback>
 8007658:	bf00      	nop
 800765a:	3710      	adds	r7, #16
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <UART_Transmit_IT>:
 8007660:	b480      	push	{r7}
 8007662:	b085      	sub	sp, #20
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800766e:	b2db      	uxtb	r3, r3
 8007670:	2b21      	cmp	r3, #33	; 0x21
 8007672:	d13e      	bne.n	80076f2 <UART_Transmit_IT+0x92>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800767c:	d114      	bne.n	80076a8 <UART_Transmit_IT+0x48>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	691b      	ldr	r3, [r3, #16]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d110      	bne.n	80076a8 <UART_Transmit_IT+0x48>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6a1b      	ldr	r3, [r3, #32]
 800768a:	60fb      	str	r3, [r7, #12]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	881b      	ldrh	r3, [r3, #0]
 8007690:	461a      	mov	r2, r3
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800769a:	605a      	str	r2, [r3, #4]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6a1b      	ldr	r3, [r3, #32]
 80076a0:	1c9a      	adds	r2, r3, #2
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	621a      	str	r2, [r3, #32]
 80076a6:	e008      	b.n	80076ba <UART_Transmit_IT+0x5a>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6a1b      	ldr	r3, [r3, #32]
 80076ac:	1c59      	adds	r1, r3, #1
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	6211      	str	r1, [r2, #32]
 80076b2:	781a      	ldrb	r2, [r3, #0]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	605a      	str	r2, [r3, #4]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80076be:	b29b      	uxth	r3, r3
 80076c0:	3b01      	subs	r3, #1
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	4619      	mov	r1, r3
 80076c8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d10f      	bne.n	80076ee <UART_Transmit_IT+0x8e>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	68da      	ldr	r2, [r3, #12]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80076dc:	60da      	str	r2, [r3, #12]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	68da      	ldr	r2, [r3, #12]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076ec:	60da      	str	r2, [r3, #12]
 80076ee:	2300      	movs	r3, #0
 80076f0:	e000      	b.n	80076f4 <UART_Transmit_IT+0x94>
 80076f2:	2302      	movs	r3, #2
 80076f4:	4618      	mov	r0, r3
 80076f6:	3714      	adds	r7, #20
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bc80      	pop	{r7}
 80076fc:	4770      	bx	lr

080076fe <UART_EndTransmit_IT>:
 80076fe:	b580      	push	{r7, lr}
 8007700:	b082      	sub	sp, #8
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	68da      	ldr	r2, [r3, #12]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007714:	60da      	str	r2, [r3, #12]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2220      	movs	r2, #32
 800771a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f7ff fed2 	bl	80074c8 <HAL_UART_TxCpltCallback>
 8007724:	2300      	movs	r3, #0
 8007726:	4618      	mov	r0, r3
 8007728:	3708      	adds	r7, #8
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <UART_Receive_IT>:
 800772e:	b580      	push	{r7, lr}
 8007730:	b08c      	sub	sp, #48	; 0x30
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800773c:	b2db      	uxtb	r3, r3
 800773e:	2b22      	cmp	r3, #34	; 0x22
 8007740:	f040 80ae 	bne.w	80078a0 <UART_Receive_IT+0x172>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800774c:	d117      	bne.n	800777e <UART_Receive_IT+0x50>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	691b      	ldr	r3, [r3, #16]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d113      	bne.n	800777e <UART_Receive_IT+0x50>
 8007756:	2300      	movs	r3, #0
 8007758:	62fb      	str	r3, [r7, #44]	; 0x2c
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800775e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	b29b      	uxth	r3, r3
 8007768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800776c:	b29a      	uxth	r2, r3
 800776e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007770:	801a      	strh	r2, [r3, #0]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007776:	1c9a      	adds	r2, r3, #2
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	629a      	str	r2, [r3, #40]	; 0x28
 800777c:	e026      	b.n	80077cc <UART_Receive_IT+0x9e>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007782:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007784:	2300      	movs	r3, #0
 8007786:	62bb      	str	r3, [r7, #40]	; 0x28
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007790:	d007      	beq.n	80077a2 <UART_Receive_IT+0x74>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d10a      	bne.n	80077b0 <UART_Receive_IT+0x82>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	691b      	ldr	r3, [r3, #16]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d106      	bne.n	80077b0 <UART_Receive_IT+0x82>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	b2da      	uxtb	r2, r3
 80077aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ac:	701a      	strb	r2, [r3, #0]
 80077ae:	e008      	b.n	80077c2 <UART_Receive_IT+0x94>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077bc:	b2da      	uxtb	r2, r3
 80077be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c0:	701a      	strb	r2, [r3, #0]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c6:	1c5a      	adds	r2, r3, #1
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	629a      	str	r2, [r3, #40]	; 0x28
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	3b01      	subs	r3, #1
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	4619      	mov	r1, r3
 80077da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d15d      	bne.n	800789c <UART_Receive_IT+0x16e>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	68da      	ldr	r2, [r3, #12]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f022 0220 	bic.w	r2, r2, #32
 80077ee:	60da      	str	r2, [r3, #12]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	68da      	ldr	r2, [r3, #12]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80077fe:	60da      	str	r2, [r3, #12]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	695a      	ldr	r2, [r3, #20]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f022 0201 	bic.w	r2, r2, #1
 800780e:	615a      	str	r2, [r3, #20]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2220      	movs	r2, #32
 8007814:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	635a      	str	r2, [r3, #52]	; 0x34
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007822:	2b01      	cmp	r3, #1
 8007824:	d135      	bne.n	8007892 <UART_Receive_IT+0x164>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	631a      	str	r2, [r3, #48]	; 0x30
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	330c      	adds	r3, #12
 8007832:	617b      	str	r3, [r7, #20]
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	e853 3f00 	ldrex	r3, [r3]
 800783a:	613b      	str	r3, [r7, #16]
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	f023 0310 	bic.w	r3, r3, #16
 8007842:	627b      	str	r3, [r7, #36]	; 0x24
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	330c      	adds	r3, #12
 800784a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800784c:	623a      	str	r2, [r7, #32]
 800784e:	61fb      	str	r3, [r7, #28]
 8007850:	69f9      	ldr	r1, [r7, #28]
 8007852:	6a3a      	ldr	r2, [r7, #32]
 8007854:	e841 2300 	strex	r3, r2, [r1]
 8007858:	61bb      	str	r3, [r7, #24]
 800785a:	69bb      	ldr	r3, [r7, #24]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d1e5      	bne.n	800782c <UART_Receive_IT+0xfe>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f003 0310 	and.w	r3, r3, #16
 800786a:	2b10      	cmp	r3, #16
 800786c:	d10a      	bne.n	8007884 <UART_Receive_IT+0x156>
 800786e:	2300      	movs	r3, #0
 8007870:	60fb      	str	r3, [r7, #12]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	60fb      	str	r3, [r7, #12]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	60fb      	str	r3, [r7, #12]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007888:	4619      	mov	r1, r3
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f7ff fe2e 	bl	80074ec <HAL_UARTEx_RxEventCallback>
 8007890:	e002      	b.n	8007898 <UART_Receive_IT+0x16a>
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f7fa f93c 	bl	8001b10 <HAL_UART_RxCpltCallback>
 8007898:	2300      	movs	r3, #0
 800789a:	e002      	b.n	80078a2 <UART_Receive_IT+0x174>
 800789c:	2300      	movs	r3, #0
 800789e:	e000      	b.n	80078a2 <UART_Receive_IT+0x174>
 80078a0:	2302      	movs	r3, #2
 80078a2:	4618      	mov	r0, r3
 80078a4:	3730      	adds	r7, #48	; 0x30
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
	...

080078ac <UART_SetConfig>:
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	691b      	ldr	r3, [r3, #16]
 80078ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	68da      	ldr	r2, [r3, #12]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	430a      	orrs	r2, r1
 80078c8:	611a      	str	r2, [r3, #16]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	689a      	ldr	r2, [r3, #8]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	691b      	ldr	r3, [r3, #16]
 80078d2:	431a      	orrs	r2, r3
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	695b      	ldr	r3, [r3, #20]
 80078d8:	4313      	orrs	r3, r2
 80078da:	60bb      	str	r3, [r7, #8]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80078e6:	f023 030c 	bic.w	r3, r3, #12
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	6812      	ldr	r2, [r2, #0]
 80078ee:	68b9      	ldr	r1, [r7, #8]
 80078f0:	430b      	orrs	r3, r1
 80078f2:	60d3      	str	r3, [r2, #12]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	695b      	ldr	r3, [r3, #20]
 80078fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	699a      	ldr	r2, [r3, #24]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	430a      	orrs	r2, r1
 8007908:	615a      	str	r2, [r3, #20]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a2c      	ldr	r2, [pc, #176]	; (80079c0 <UART_SetConfig+0x114>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d103      	bne.n	800791c <UART_SetConfig+0x70>
 8007914:	f7fe fc60 	bl	80061d8 <HAL_RCC_GetPCLK2Freq>
 8007918:	60f8      	str	r0, [r7, #12]
 800791a:	e002      	b.n	8007922 <UART_SetConfig+0x76>
 800791c:	f7fe fc48 	bl	80061b0 <HAL_RCC_GetPCLK1Freq>
 8007920:	60f8      	str	r0, [r7, #12]
 8007922:	68fa      	ldr	r2, [r7, #12]
 8007924:	4613      	mov	r3, r2
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	4413      	add	r3, r2
 800792a:	009a      	lsls	r2, r3, #2
 800792c:	441a      	add	r2, r3
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	fbb2 f3f3 	udiv	r3, r2, r3
 8007938:	4a22      	ldr	r2, [pc, #136]	; (80079c4 <UART_SetConfig+0x118>)
 800793a:	fba2 2303 	umull	r2, r3, r2, r3
 800793e:	095b      	lsrs	r3, r3, #5
 8007940:	0119      	lsls	r1, r3, #4
 8007942:	68fa      	ldr	r2, [r7, #12]
 8007944:	4613      	mov	r3, r2
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	4413      	add	r3, r2
 800794a:	009a      	lsls	r2, r3, #2
 800794c:	441a      	add	r2, r3
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	fbb2 f2f3 	udiv	r2, r2, r3
 8007958:	4b1a      	ldr	r3, [pc, #104]	; (80079c4 <UART_SetConfig+0x118>)
 800795a:	fba3 0302 	umull	r0, r3, r3, r2
 800795e:	095b      	lsrs	r3, r3, #5
 8007960:	2064      	movs	r0, #100	; 0x64
 8007962:	fb00 f303 	mul.w	r3, r0, r3
 8007966:	1ad3      	subs	r3, r2, r3
 8007968:	011b      	lsls	r3, r3, #4
 800796a:	3332      	adds	r3, #50	; 0x32
 800796c:	4a15      	ldr	r2, [pc, #84]	; (80079c4 <UART_SetConfig+0x118>)
 800796e:	fba2 2303 	umull	r2, r3, r2, r3
 8007972:	095b      	lsrs	r3, r3, #5
 8007974:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007978:	4419      	add	r1, r3
 800797a:	68fa      	ldr	r2, [r7, #12]
 800797c:	4613      	mov	r3, r2
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	4413      	add	r3, r2
 8007982:	009a      	lsls	r2, r3, #2
 8007984:	441a      	add	r2, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007990:	4b0c      	ldr	r3, [pc, #48]	; (80079c4 <UART_SetConfig+0x118>)
 8007992:	fba3 0302 	umull	r0, r3, r3, r2
 8007996:	095b      	lsrs	r3, r3, #5
 8007998:	2064      	movs	r0, #100	; 0x64
 800799a:	fb00 f303 	mul.w	r3, r0, r3
 800799e:	1ad3      	subs	r3, r2, r3
 80079a0:	011b      	lsls	r3, r3, #4
 80079a2:	3332      	adds	r3, #50	; 0x32
 80079a4:	4a07      	ldr	r2, [pc, #28]	; (80079c4 <UART_SetConfig+0x118>)
 80079a6:	fba2 2303 	umull	r2, r3, r2, r3
 80079aa:	095b      	lsrs	r3, r3, #5
 80079ac:	f003 020f 	and.w	r2, r3, #15
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	440a      	add	r2, r1
 80079b6:	609a      	str	r2, [r3, #8]
 80079b8:	bf00      	nop
 80079ba:	3710      	adds	r7, #16
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	40013800 	.word	0x40013800
 80079c4:	51eb851f 	.word	0x51eb851f

080079c8 <malloc>:
 80079c8:	4b02      	ldr	r3, [pc, #8]	; (80079d4 <malloc+0xc>)
 80079ca:	4601      	mov	r1, r0
 80079cc:	6818      	ldr	r0, [r3, #0]
 80079ce:	f000 b82b 	b.w	8007a28 <_malloc_r>
 80079d2:	bf00      	nop
 80079d4:	20000058 	.word	0x20000058

080079d8 <free>:
 80079d8:	4b02      	ldr	r3, [pc, #8]	; (80079e4 <free+0xc>)
 80079da:	4601      	mov	r1, r0
 80079dc:	6818      	ldr	r0, [r3, #0]
 80079de:	f000 b8f3 	b.w	8007bc8 <_free_r>
 80079e2:	bf00      	nop
 80079e4:	20000058 	.word	0x20000058

080079e8 <sbrk_aligned>:
 80079e8:	b570      	push	{r4, r5, r6, lr}
 80079ea:	4e0e      	ldr	r6, [pc, #56]	; (8007a24 <sbrk_aligned+0x3c>)
 80079ec:	460c      	mov	r4, r1
 80079ee:	6831      	ldr	r1, [r6, #0]
 80079f0:	4605      	mov	r5, r0
 80079f2:	b911      	cbnz	r1, 80079fa <sbrk_aligned+0x12>
 80079f4:	f000 f8ac 	bl	8007b50 <_sbrk_r>
 80079f8:	6030      	str	r0, [r6, #0]
 80079fa:	4621      	mov	r1, r4
 80079fc:	4628      	mov	r0, r5
 80079fe:	f000 f8a7 	bl	8007b50 <_sbrk_r>
 8007a02:	1c43      	adds	r3, r0, #1
 8007a04:	d00a      	beq.n	8007a1c <sbrk_aligned+0x34>
 8007a06:	1cc4      	adds	r4, r0, #3
 8007a08:	f024 0403 	bic.w	r4, r4, #3
 8007a0c:	42a0      	cmp	r0, r4
 8007a0e:	d007      	beq.n	8007a20 <sbrk_aligned+0x38>
 8007a10:	1a21      	subs	r1, r4, r0
 8007a12:	4628      	mov	r0, r5
 8007a14:	f000 f89c 	bl	8007b50 <_sbrk_r>
 8007a18:	3001      	adds	r0, #1
 8007a1a:	d101      	bne.n	8007a20 <sbrk_aligned+0x38>
 8007a1c:	f04f 34ff 	mov.w	r4, #4294967295
 8007a20:	4620      	mov	r0, r4
 8007a22:	bd70      	pop	{r4, r5, r6, pc}
 8007a24:	200004f8 	.word	0x200004f8

08007a28 <_malloc_r>:
 8007a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a2c:	1ccd      	adds	r5, r1, #3
 8007a2e:	f025 0503 	bic.w	r5, r5, #3
 8007a32:	3508      	adds	r5, #8
 8007a34:	2d0c      	cmp	r5, #12
 8007a36:	bf38      	it	cc
 8007a38:	250c      	movcc	r5, #12
 8007a3a:	2d00      	cmp	r5, #0
 8007a3c:	4607      	mov	r7, r0
 8007a3e:	db01      	blt.n	8007a44 <_malloc_r+0x1c>
 8007a40:	42a9      	cmp	r1, r5
 8007a42:	d905      	bls.n	8007a50 <_malloc_r+0x28>
 8007a44:	230c      	movs	r3, #12
 8007a46:	2600      	movs	r6, #0
 8007a48:	603b      	str	r3, [r7, #0]
 8007a4a:	4630      	mov	r0, r6
 8007a4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a50:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007b24 <_malloc_r+0xfc>
 8007a54:	f000 f868 	bl	8007b28 <__malloc_lock>
 8007a58:	f8d8 3000 	ldr.w	r3, [r8]
 8007a5c:	461c      	mov	r4, r3
 8007a5e:	bb5c      	cbnz	r4, 8007ab8 <_malloc_r+0x90>
 8007a60:	4629      	mov	r1, r5
 8007a62:	4638      	mov	r0, r7
 8007a64:	f7ff ffc0 	bl	80079e8 <sbrk_aligned>
 8007a68:	1c43      	adds	r3, r0, #1
 8007a6a:	4604      	mov	r4, r0
 8007a6c:	d155      	bne.n	8007b1a <_malloc_r+0xf2>
 8007a6e:	f8d8 4000 	ldr.w	r4, [r8]
 8007a72:	4626      	mov	r6, r4
 8007a74:	2e00      	cmp	r6, #0
 8007a76:	d145      	bne.n	8007b04 <_malloc_r+0xdc>
 8007a78:	2c00      	cmp	r4, #0
 8007a7a:	d048      	beq.n	8007b0e <_malloc_r+0xe6>
 8007a7c:	6823      	ldr	r3, [r4, #0]
 8007a7e:	4631      	mov	r1, r6
 8007a80:	4638      	mov	r0, r7
 8007a82:	eb04 0903 	add.w	r9, r4, r3
 8007a86:	f000 f863 	bl	8007b50 <_sbrk_r>
 8007a8a:	4581      	cmp	r9, r0
 8007a8c:	d13f      	bne.n	8007b0e <_malloc_r+0xe6>
 8007a8e:	6821      	ldr	r1, [r4, #0]
 8007a90:	4638      	mov	r0, r7
 8007a92:	1a6d      	subs	r5, r5, r1
 8007a94:	4629      	mov	r1, r5
 8007a96:	f7ff ffa7 	bl	80079e8 <sbrk_aligned>
 8007a9a:	3001      	adds	r0, #1
 8007a9c:	d037      	beq.n	8007b0e <_malloc_r+0xe6>
 8007a9e:	6823      	ldr	r3, [r4, #0]
 8007aa0:	442b      	add	r3, r5
 8007aa2:	6023      	str	r3, [r4, #0]
 8007aa4:	f8d8 3000 	ldr.w	r3, [r8]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d038      	beq.n	8007b1e <_malloc_r+0xf6>
 8007aac:	685a      	ldr	r2, [r3, #4]
 8007aae:	42a2      	cmp	r2, r4
 8007ab0:	d12b      	bne.n	8007b0a <_malloc_r+0xe2>
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	605a      	str	r2, [r3, #4]
 8007ab6:	e00f      	b.n	8007ad8 <_malloc_r+0xb0>
 8007ab8:	6822      	ldr	r2, [r4, #0]
 8007aba:	1b52      	subs	r2, r2, r5
 8007abc:	d41f      	bmi.n	8007afe <_malloc_r+0xd6>
 8007abe:	2a0b      	cmp	r2, #11
 8007ac0:	d917      	bls.n	8007af2 <_malloc_r+0xca>
 8007ac2:	1961      	adds	r1, r4, r5
 8007ac4:	42a3      	cmp	r3, r4
 8007ac6:	6025      	str	r5, [r4, #0]
 8007ac8:	bf18      	it	ne
 8007aca:	6059      	strne	r1, [r3, #4]
 8007acc:	6863      	ldr	r3, [r4, #4]
 8007ace:	bf08      	it	eq
 8007ad0:	f8c8 1000 	streq.w	r1, [r8]
 8007ad4:	5162      	str	r2, [r4, r5]
 8007ad6:	604b      	str	r3, [r1, #4]
 8007ad8:	4638      	mov	r0, r7
 8007ada:	f104 060b 	add.w	r6, r4, #11
 8007ade:	f000 f829 	bl	8007b34 <__malloc_unlock>
 8007ae2:	f026 0607 	bic.w	r6, r6, #7
 8007ae6:	1d23      	adds	r3, r4, #4
 8007ae8:	1af2      	subs	r2, r6, r3
 8007aea:	d0ae      	beq.n	8007a4a <_malloc_r+0x22>
 8007aec:	1b9b      	subs	r3, r3, r6
 8007aee:	50a3      	str	r3, [r4, r2]
 8007af0:	e7ab      	b.n	8007a4a <_malloc_r+0x22>
 8007af2:	42a3      	cmp	r3, r4
 8007af4:	6862      	ldr	r2, [r4, #4]
 8007af6:	d1dd      	bne.n	8007ab4 <_malloc_r+0x8c>
 8007af8:	f8c8 2000 	str.w	r2, [r8]
 8007afc:	e7ec      	b.n	8007ad8 <_malloc_r+0xb0>
 8007afe:	4623      	mov	r3, r4
 8007b00:	6864      	ldr	r4, [r4, #4]
 8007b02:	e7ac      	b.n	8007a5e <_malloc_r+0x36>
 8007b04:	4634      	mov	r4, r6
 8007b06:	6876      	ldr	r6, [r6, #4]
 8007b08:	e7b4      	b.n	8007a74 <_malloc_r+0x4c>
 8007b0a:	4613      	mov	r3, r2
 8007b0c:	e7cc      	b.n	8007aa8 <_malloc_r+0x80>
 8007b0e:	230c      	movs	r3, #12
 8007b10:	4638      	mov	r0, r7
 8007b12:	603b      	str	r3, [r7, #0]
 8007b14:	f000 f80e 	bl	8007b34 <__malloc_unlock>
 8007b18:	e797      	b.n	8007a4a <_malloc_r+0x22>
 8007b1a:	6025      	str	r5, [r4, #0]
 8007b1c:	e7dc      	b.n	8007ad8 <_malloc_r+0xb0>
 8007b1e:	605b      	str	r3, [r3, #4]
 8007b20:	deff      	udf	#255	; 0xff
 8007b22:	bf00      	nop
 8007b24:	200004f4 	.word	0x200004f4

08007b28 <__malloc_lock>:
 8007b28:	4801      	ldr	r0, [pc, #4]	; (8007b30 <__malloc_lock+0x8>)
 8007b2a:	f000 b84b 	b.w	8007bc4 <__retarget_lock_acquire_recursive>
 8007b2e:	bf00      	nop
 8007b30:	20000638 	.word	0x20000638

08007b34 <__malloc_unlock>:
 8007b34:	4801      	ldr	r0, [pc, #4]	; (8007b3c <__malloc_unlock+0x8>)
 8007b36:	f000 b846 	b.w	8007bc6 <__retarget_lock_release_recursive>
 8007b3a:	bf00      	nop
 8007b3c:	20000638 	.word	0x20000638

08007b40 <memset>:
 8007b40:	4603      	mov	r3, r0
 8007b42:	4402      	add	r2, r0
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d100      	bne.n	8007b4a <memset+0xa>
 8007b48:	4770      	bx	lr
 8007b4a:	f803 1b01 	strb.w	r1, [r3], #1
 8007b4e:	e7f9      	b.n	8007b44 <memset+0x4>

08007b50 <_sbrk_r>:
 8007b50:	b538      	push	{r3, r4, r5, lr}
 8007b52:	2300      	movs	r3, #0
 8007b54:	4d05      	ldr	r5, [pc, #20]	; (8007b6c <_sbrk_r+0x1c>)
 8007b56:	4604      	mov	r4, r0
 8007b58:	4608      	mov	r0, r1
 8007b5a:	602b      	str	r3, [r5, #0]
 8007b5c:	f7fb fb68 	bl	8003230 <_sbrk>
 8007b60:	1c43      	adds	r3, r0, #1
 8007b62:	d102      	bne.n	8007b6a <_sbrk_r+0x1a>
 8007b64:	682b      	ldr	r3, [r5, #0]
 8007b66:	b103      	cbz	r3, 8007b6a <_sbrk_r+0x1a>
 8007b68:	6023      	str	r3, [r4, #0]
 8007b6a:	bd38      	pop	{r3, r4, r5, pc}
 8007b6c:	20000634 	.word	0x20000634

08007b70 <__errno>:
 8007b70:	4b01      	ldr	r3, [pc, #4]	; (8007b78 <__errno+0x8>)
 8007b72:	6818      	ldr	r0, [r3, #0]
 8007b74:	4770      	bx	lr
 8007b76:	bf00      	nop
 8007b78:	20000058 	.word	0x20000058

08007b7c <__libc_init_array>:
 8007b7c:	b570      	push	{r4, r5, r6, lr}
 8007b7e:	2600      	movs	r6, #0
 8007b80:	4d0c      	ldr	r5, [pc, #48]	; (8007bb4 <__libc_init_array+0x38>)
 8007b82:	4c0d      	ldr	r4, [pc, #52]	; (8007bb8 <__libc_init_array+0x3c>)
 8007b84:	1b64      	subs	r4, r4, r5
 8007b86:	10a4      	asrs	r4, r4, #2
 8007b88:	42a6      	cmp	r6, r4
 8007b8a:	d109      	bne.n	8007ba0 <__libc_init_array+0x24>
 8007b8c:	f000 f864 	bl	8007c58 <_init>
 8007b90:	2600      	movs	r6, #0
 8007b92:	4d0a      	ldr	r5, [pc, #40]	; (8007bbc <__libc_init_array+0x40>)
 8007b94:	4c0a      	ldr	r4, [pc, #40]	; (8007bc0 <__libc_init_array+0x44>)
 8007b96:	1b64      	subs	r4, r4, r5
 8007b98:	10a4      	asrs	r4, r4, #2
 8007b9a:	42a6      	cmp	r6, r4
 8007b9c:	d105      	bne.n	8007baa <__libc_init_array+0x2e>
 8007b9e:	bd70      	pop	{r4, r5, r6, pc}
 8007ba0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ba4:	4798      	blx	r3
 8007ba6:	3601      	adds	r6, #1
 8007ba8:	e7ee      	b.n	8007b88 <__libc_init_array+0xc>
 8007baa:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bae:	4798      	blx	r3
 8007bb0:	3601      	adds	r6, #1
 8007bb2:	e7f2      	b.n	8007b9a <__libc_init_array+0x1e>
 8007bb4:	08007ca4 	.word	0x08007ca4
 8007bb8:	08007ca4 	.word	0x08007ca4
 8007bbc:	08007ca4 	.word	0x08007ca4
 8007bc0:	08007ca8 	.word	0x08007ca8

08007bc4 <__retarget_lock_acquire_recursive>:
 8007bc4:	4770      	bx	lr

08007bc6 <__retarget_lock_release_recursive>:
 8007bc6:	4770      	bx	lr

08007bc8 <_free_r>:
 8007bc8:	b538      	push	{r3, r4, r5, lr}
 8007bca:	4605      	mov	r5, r0
 8007bcc:	2900      	cmp	r1, #0
 8007bce:	d040      	beq.n	8007c52 <_free_r+0x8a>
 8007bd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bd4:	1f0c      	subs	r4, r1, #4
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	bfb8      	it	lt
 8007bda:	18e4      	addlt	r4, r4, r3
 8007bdc:	f7ff ffa4 	bl	8007b28 <__malloc_lock>
 8007be0:	4a1c      	ldr	r2, [pc, #112]	; (8007c54 <_free_r+0x8c>)
 8007be2:	6813      	ldr	r3, [r2, #0]
 8007be4:	b933      	cbnz	r3, 8007bf4 <_free_r+0x2c>
 8007be6:	6063      	str	r3, [r4, #4]
 8007be8:	6014      	str	r4, [r2, #0]
 8007bea:	4628      	mov	r0, r5
 8007bec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bf0:	f7ff bfa0 	b.w	8007b34 <__malloc_unlock>
 8007bf4:	42a3      	cmp	r3, r4
 8007bf6:	d908      	bls.n	8007c0a <_free_r+0x42>
 8007bf8:	6820      	ldr	r0, [r4, #0]
 8007bfa:	1821      	adds	r1, r4, r0
 8007bfc:	428b      	cmp	r3, r1
 8007bfe:	bf01      	itttt	eq
 8007c00:	6819      	ldreq	r1, [r3, #0]
 8007c02:	685b      	ldreq	r3, [r3, #4]
 8007c04:	1809      	addeq	r1, r1, r0
 8007c06:	6021      	streq	r1, [r4, #0]
 8007c08:	e7ed      	b.n	8007be6 <_free_r+0x1e>
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	b10b      	cbz	r3, 8007c14 <_free_r+0x4c>
 8007c10:	42a3      	cmp	r3, r4
 8007c12:	d9fa      	bls.n	8007c0a <_free_r+0x42>
 8007c14:	6811      	ldr	r1, [r2, #0]
 8007c16:	1850      	adds	r0, r2, r1
 8007c18:	42a0      	cmp	r0, r4
 8007c1a:	d10b      	bne.n	8007c34 <_free_r+0x6c>
 8007c1c:	6820      	ldr	r0, [r4, #0]
 8007c1e:	4401      	add	r1, r0
 8007c20:	1850      	adds	r0, r2, r1
 8007c22:	4283      	cmp	r3, r0
 8007c24:	6011      	str	r1, [r2, #0]
 8007c26:	d1e0      	bne.n	8007bea <_free_r+0x22>
 8007c28:	6818      	ldr	r0, [r3, #0]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	4408      	add	r0, r1
 8007c2e:	6010      	str	r0, [r2, #0]
 8007c30:	6053      	str	r3, [r2, #4]
 8007c32:	e7da      	b.n	8007bea <_free_r+0x22>
 8007c34:	d902      	bls.n	8007c3c <_free_r+0x74>
 8007c36:	230c      	movs	r3, #12
 8007c38:	602b      	str	r3, [r5, #0]
 8007c3a:	e7d6      	b.n	8007bea <_free_r+0x22>
 8007c3c:	6820      	ldr	r0, [r4, #0]
 8007c3e:	1821      	adds	r1, r4, r0
 8007c40:	428b      	cmp	r3, r1
 8007c42:	bf01      	itttt	eq
 8007c44:	6819      	ldreq	r1, [r3, #0]
 8007c46:	685b      	ldreq	r3, [r3, #4]
 8007c48:	1809      	addeq	r1, r1, r0
 8007c4a:	6021      	streq	r1, [r4, #0]
 8007c4c:	6063      	str	r3, [r4, #4]
 8007c4e:	6054      	str	r4, [r2, #4]
 8007c50:	e7cb      	b.n	8007bea <_free_r+0x22>
 8007c52:	bd38      	pop	{r3, r4, r5, pc}
 8007c54:	200004f4 	.word	0x200004f4

08007c58 <_init>:
 8007c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c5a:	bf00      	nop
 8007c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c5e:	bc08      	pop	{r3}
 8007c60:	469e      	mov	lr, r3
 8007c62:	4770      	bx	lr

08007c64 <_fini>:
 8007c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c66:	bf00      	nop
 8007c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c6a:	bc08      	pop	{r3}
 8007c6c:	469e      	mov	lr, r3
 8007c6e:	4770      	bx	lr
